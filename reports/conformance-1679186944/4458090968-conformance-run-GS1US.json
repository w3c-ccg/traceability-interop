{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "606c1ae4-1439-42f7-8712-ae4aa19de4c0",
        "name": "Clear Cache",
        "item": [
          {
            "id": "80e7825d-b417-4fca-9372-2ac4dbad8120",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "690550e0-df08-413d-901d-b9c395402044",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ab34f4a9-a5e9-4163-8346-75f8570cad03"
                }
              }
            ]
          },
          {
            "id": "85fe1dde-5769-45bf-a41e-8d99e2daf165",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1f4b6ba3-2a00-49db-aba0-8a47899f9d9f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2538fc90-ff35-4bac-84bf-f650873941e4"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "03df0047-6426-491d-bbc3-83bb0aedf69e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "52f2854f-9d32-45fe-9e27-d27cb9c504b4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0dbf2f1b-5ab7-4448-be27-fb66bb746d80",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "69f8e774-d809-4cd1-bd95-b736e10196d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f93ee484-96c5-4c3f-91be-7b7b566af79f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cdb6f5a9-ff02-41eb-9d77-0417f089e16e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "88849ccc-bca3-48d1-b0ee-3c43272b9041"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "673bd7bc-8289-4f9d-b465-4a956f16f9e9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "73a2b425-b407-4c44-96cb-2a5a93f416ca"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a3ce1e6-995a-4908-9b0a-32f6f3b3477e",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "1ca044ae-f2bf-4ca5-b26c-20ea2aed928f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6c5d41b3-f352-4040-8658-80cc290741d4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f7d61f7e-f283-406c-89f2-f43e4754bb2b"
            }
          }
        ]
      },
      {
        "id": "185593b7-e813-4d82-8324-626b7e4623f4",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "3520556d-7b31-412e-9523-9bb72abb472c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b1414114-e84a-4750-9e97-313153c9c9a3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ace2c05b-41cf-4c2f-8320-9d13d4d0fa6d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd8f2b5f-f67e-4d2e-b718-db87c5da47a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ee0908c9-ccce-4794-9121-6151774e762f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d0ba4c-2bea-4da1-bd81-a7229be39395",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c181371-ad29-4024-9960-7977f005b56c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "82b2d4b0-bfea-445b-9801-55fa372eaef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b413f5c1-9ab6-413d-9dc4-7ec54441500e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f75583-fcfe-4b9f-9c22-587cf6799fce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b9c3304b-0ac6-493a-ad8c-7ef444a876c3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "25fe08ab-1f96-4e92-aeb5-813efa21e703",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b148969d-2f1c-4fa3-a00a-13a77c87f63a",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c7ee1f-b8cb-479b-a493-cbca09850be0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "685044cf-b77d-4a71-a7cc-ae3a2b663dad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "888a26be-a223-4c47-a16b-49d7ded9e842",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4a322b7-e0dc-410a-ab2a-cf682ccc1da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "877d5f8e-0779-49f5-912f-a4fc39fc32f6",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e580a1-7089-4aeb-a244-4c10bd455369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aec89492-8a32-4eb2-a3c0-cd5ece85816a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdf76557-2bf2-421e-95ff-866cb90388ca",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "d8dcd658-b3f4-4e09-ba5e-2b0094dae1a9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d019e2a6-bada-4202-be4c-998722898cad",
            "name": "Positive Testing",
            "item": [
              {
                "id": "37985265-b04d-485a-abaa-f97b9198b08b",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "117b6217-f807-4b9d-bb8a-1d8c954dc3d5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "61557aa4-a8e2-43a3-b7bd-2e670907049b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "57dbf1fa-31bb-4a8a-be40-915d7736ff64",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "c76a27e7-cb19-4f5c-aada-c5418934cd75"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7cf8049b-6d2c-4d64-ae1b-4aac60dfb1bc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4a2dccc2-7f2d-4bd9-ab75-c365c4a07cc8"
            }
          }
        ]
      },
      {
        "id": "a577361b-263e-4540-9cff-5878f71bf92c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "6aa47173-dc64-4adf-8d28-c178bbddd670",
            "name": "Negative Testing",
            "item": [
              {
                "id": "992eee7d-47a2-4bb4-a5b8-5b312f421794",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "6c4d2335-4547-494a-89d9-c679d3c7024c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b28b607-0b67-43af-af6c-2a82327f35b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b5e2a1e-b526-4ea6-b115-208a18c3dc61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc9ae096-0970-4ab3-8724-f17f4ae11c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7791df5-2846-4bb5-9a59-7b29778db75b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40dbb9b6-089a-44a9-bfeb-2b39cce66e73",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6a86b7a-c70e-4dcb-861c-d041659568ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37c76cdc-9edf-4a6f-82ea-8e1a6ffc4d8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3883197d-5f26-4c29-9338-f125b634e9b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "611348e7-846c-43c9-a85c-e9137da02030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20a26107-3d21-4797-a33d-9152b97e7ba5",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "603c3f93-13b6-40f7-b96f-d2512a5c16e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10fe1bc2-1a9a-4f8c-baff-aae4b37b3a13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6ae4c27-ef11-4ed8-9e09-80a9b7ebe60c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e0a1547-e56f-4aef-84f9-2dc26cdfa935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24d1ca65-c0c9-450d-bd9e-f8699d0230b2",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc1e7d8-d481-42cf-bbd0-75fe2418b3da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2334c55-a198-429c-9dbd-2bbd9dc2c247"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "933d6bcd-5f13-4f63-a50a-cd015ca678c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca29ab4b-8fc9-4c7b-9eab-0c51491a2e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc65e6af-12a1-4237-8b3d-797ea6bc9ec8",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d8616c-c707-469a-ab47-e7db99864f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "434f2c54-1254-4d2a-9477-9320fe8e7699"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa7ab96c-10f6-4f6e-8929-dfa10e741f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9a595b89-0540-4388-a042-686f111e8f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d02f1bb-b41a-4fe9-94d1-c9ba1d99b3aa",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fecf408a-f08f-46cc-af4f-cb169e63c3de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc6bb01f-2eda-4223-8b71-f63e4bd4ab00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "550c45ce-8a24-4373-8e88-c8a501505711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff17df8b-7fea-4d44-9588-314327b8e816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4148f4f-2555-404e-9e4e-df8c37c30e41",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "463c829f-9fac-49b8-8efb-f64695392eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8171e16-9c2a-4846-9568-1fd65d85fddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b3a88c2-b429-4b62-91e5-4b3065831071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7cc7110-0cda-4852-9711-86406f476116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d6e5f0-968c-42eb-b0b7-d1bb6a1ac085",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62e092f4-1dc5-4476-bd0f-ad886b94c7e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a188505-d3fe-4afd-8f90-cc56622c3bd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac0952b-6a12-45ea-bea4-bab18af87a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eefcbaa0-07f6-40bb-9d7a-ba38690dcf8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ff26bec-4371-44e1-98a0-d9a3fe527cd6",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5a65d14-c9ba-41bc-8ea1-093024da291b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e1cdbe9-95e2-4618-9c27-5fa4c634eb4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a74e0f-789f-4322-b2db-94ce24ca5fbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b559eb09-3dd1-4d21-b1c6-8fcf7d3a028d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb0e8fac-c53d-4f20-bb51-3366b04d2c94",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "743f186e-6ad8-4c94-8321-0781b4b6281d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ad87275-f9be-4b26-9392-8ddd75e1e023"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8251425d-7361-4a4c-bd15-27d045a0ed5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9dbf3007-4a1d-4740-9183-5028d68470df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5abe791b-7195-47fa-ac1c-a1d8e7e20254",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69ec2862-517e-4ebf-af59-b27b08c660f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b632211e-fcb3-473e-b2d3-d2e130f46232"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a875239-08fe-42e1-b87e-dc2eb195a905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4ca06ea1-39b5-497f-8121-5a7440a67105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b32fdf1-2915-41f0-a98f-c77004001b7a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "925da3a1-3c8c-4050-b52a-5b1193e4664a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d1600fd-8f5a-412d-8cb2-dc7d0264a2ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc25ce0-d907-4394-b2a0-8d9f2224d3a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c11174fa-cdd1-476e-862f-24ab5c447111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64fe3ecd-bfae-402a-b904-53a532472ecf",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d5c1ee-249e-43b9-8a24-ae183b248ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3ec2d38-fc6a-4f13-83c4-5354da09bdb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fa5ad04-d275-4f34-9e35-9db5efe952a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2afd47e9-5288-4274-9aeb-5d0efe58860c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9385e1e6-7438-49c1-ae3c-806304076160",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c5afd5-12d2-4727-a7f0-b5168866c3a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39cf4804-69c8-4dc2-80b7-0a683934f31a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "384eeffe-4a42-4adf-95bf-b04aa080747a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "65800486-504a-42b6-a200-4a2c5fb48f80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "102304e0-2e1f-4e07-af98-b42dece3ab1d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d16a19-5b4c-4758-a130-a15ed2e46e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ab4ec28-f315-4717-9839-28582389e54f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aea9e8c-fc8d-4d30-8d33-1290ed2b9a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d750528-14d4-48ce-a467-ab05986b1b65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85c2ec5a-2aa2-4a78-aa38-f424efc18585",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be5bbb2d-d983-4c4f-9ef1-1d8b02b72174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6549e5a0-69a9-4b95-a09d-6143b92a5f42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1353b75-ce76-4068-b8be-3dc7ef4cfe30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "30eb783e-1bf7-4603-9827-bd24a0e03168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef7817d-1224-4f12-8b2b-e03bb331ab60",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba84fb8-dbca-4ae1-9122-4d3c3a1112d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdc39283-6b6d-46a6-ac78-f32dbe51d2bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68ff251f-5963-43ff-8ef4-d8d9fe87e03e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1306661c-8021-4aad-be86-480bb176b8b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d62cb627-3705-4eb1-8814-2ad3111f6cd6",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d80907-b4e7-4199-b2f6-32b788de3058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32762b54-6088-450a-943d-c028973ab724"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "900bb4bd-932a-4daf-ac7e-f4ea87396dc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c65f4b03-dc31-49e7-80df-c01b2b4e0c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34c4557b-9cbb-4719-8839-9b8ad4703ef3",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa9d1588-82a2-4233-8ba2-1376ecf0de7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab3b4f77-6dde-410f-a119-2ff73dcc1fea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2276c8b7-a883-4742-9daa-d9e335074d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "967f0037-3864-4124-8027-ca7ced891ac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d45e2d1d-5195-43ac-83ce-0b7f789bc0d5",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cfd8efd-7443-47eb-bc2b-a6eec3211805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc4e59e0-00ed-4abf-8dd1-a5a00e5afcc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1599eb3a-3ab7-457b-bfba-5c732a43d729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "98228c59-62b0-4e32-9471-e32fdcefe8af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e977d1e-11a7-46be-a56e-a0c0fb981850",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1463e42a-bed3-496c-b08e-6317f17fb957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7521d0c-c526-4528-a5d8-a6a77d94b865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25caa9a7-0693-4137-8d46-1c2d146b5009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b60f431-38e7-40b4-97fc-d04dc922d9c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a87dd6fd-f3c2-4dc6-80fd-c7caf5d6a239",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8066fb3-f81b-4091-9965-754284467415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a8d3944-d21f-4010-8b98-dd6b1139fa95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9be1fa66-749f-4a46-8eae-6692e98ca08f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "944118a2-daab-46b1-a683-1e34b9f2e866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b8372c-7b3e-4f9a-b84a-94a8e4dba8df",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ac825a-0add-4954-901e-11ce03365a80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30510e13-5482-4f6f-84ff-60df33e533f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "533cbb59-bc98-4286-8718-bb6073e6e985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4624d9ab-3755-44a1-aab1-b18641d34fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c12c12a-5b66-4f38-baf2-8411e0002752",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c577de-c13f-45f7-8e6c-7f5e83fab96a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63b3d8d6-6c5b-4c62-8b75-44e7deddc51c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7611fa6-be6d-4d8a-800b-331fcf550063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1471231-fa69-4f8c-826c-9b2cfd02ca0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca67ba86-4b84-4113-a4f0-f661ce195efb",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e61b68df-f9b8-4cef-a991-1419a24d738f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e2bfe5c-3f12-4b3d-b9dc-f1200d6dadde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f41d865-29d4-4857-b2bb-29347bc89c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "18e3c77c-aeea-45b5-b00e-643fe3596c10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "757c1079-718d-4d4d-931e-1442b271eda3",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b387355e-05e3-47ad-8ec1-9db67c539f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa96bc0b-02f2-4b52-ac52-4a50e33a3d64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62500e1a-52cb-4ece-9f85-4491fbd83681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "73776cf5-7f59-4fb9-923b-c9bf6e7870fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca979b9d-d1de-408b-8e3d-9fe002623aef",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be984e8c-341d-412c-9795-a3973993a9d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4408c0df-9e61-48f9-abd5-784f8f7527ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c80b7bce-fa45-45a2-a881-0f5a21639f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa5c6fa8-41a1-45e4-99f1-2e1f436a190f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25f70828-9322-4731-b2ad-d8bd018b89bf",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6adf2f79-07d9-4a95-a022-edf062c6fea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96edc29f-6be0-4b8c-9c79-b1df7e345f73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c844b81-a9ba-4038-b04d-fea63037a2fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "903795b0-181c-4410-9060-8ee00beb3f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3544434f-53ca-463f-b970-66e4a5b0af63",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "768077a3-4bc3-4d57-a459-776d866d88e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e16a286a-dffc-4e68-adb7-4d42c21085b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d77ff6-9d51-4ebb-b48f-06f4538f6a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbc4baa2-e49a-4f88-928b-29de424b8fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3cc701a-a379-404f-a768-f0f605829e65",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc40617a-9f5b-44ea-9530-01f380195d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a3f19c1-7a8e-4f85-a6ab-0acc987edd86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a12c8f57-0a54-4f64-95fe-59a5c2a1be6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "9eb61020-a457-449b-951f-8625ee79ee24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58cbe59d-3347-4a36-ab12-b44e005be315",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c84aab0-6b66-4e96-8135-aa53664b97d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c059a5ce-7e7d-4ff4-b1a4-b6ed7531e664"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d65b6b-1300-4b8f-a0a5-dc16eb56b86a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0244a36b-acc4-4aa7-86ea-14609a3585a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd346d43-4a10-49e8-a35d-9a1c67825b17",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa9fcb85-2e06-483b-9455-21e58fc45c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5924b0a0-31ec-4f92-8cbe-5153e9d7a423"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06dd14b1-c51f-4378-82c2-f1780104a40e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "38f16185-3423-414e-80a3-f97c36544197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d88cae2-9fac-4bc5-9d33-67158d0e3993",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d6bdbc3-2fe3-409e-9f8f-f58b02281fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7982eb76-8d01-4fbc-a208-c7474ab90072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ba71f2-812c-4706-8ee5-da75bda8d0b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee9d187a-b2a0-426f-946f-c2257af34abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e21ab64-a32a-4894-b0f8-f15b8aaace27",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b83b7ef0-b844-43d6-b655-9c8f6b0e97a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4788ac2c-6466-4e8c-9d95-617d6721886c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41bc7386-8385-4c2e-bda6-ba6f2c129435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9faa0fad-7ca4-4d69-98ad-1de4da49e606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f17078-1b78-4af4-921d-b964d89bf6fc",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee52e64-1649-45a9-998d-29e191f06885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "458a223d-4d80-4a47-b52c-df6fb667d13a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51164463-04a7-4803-80f7-2c02f9c007a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f7daf124-218e-4a8e-bab4-a85cc4731681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab9465c4-46a9-46d4-aecb-76f487baeceb",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bab2005-06f5-4d53-9fee-d20b24e75526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3a33236f-cc49-47f5-9789-821136a0146f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50410d96-0c08-43fa-9687-810f36be17a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "59e64410-52a3-4bae-a325-6ec0b9401168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6433790-3786-4302-a774-82bde50bfd23",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e13915b-259d-4e15-a72f-1a6e275165d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c1a51e4-fbd8-4a31-b4e3-f72d4a6e0054"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01fa3503-df8a-459f-b82c-1f7fac73f446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8cf83c5-4d90-4058-91ac-e5e2f18a0171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "792fa999-356a-4605-8d45-7394d3949253",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44cf2005-4424-4ebf-a9f6-3875a35b6053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79d22b63-ea5a-4bdf-96c5-079bd508b6a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88b858c7-08a4-42ee-a9f1-96dc8cc565ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b83bff82-8d01-43dd-afe7-f1d59fc77d9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa22468b-d70d-4040-88b4-59d061f46acd",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d2a164a-c15d-443c-931c-b61b0de9ab41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2974943-c4e8-42d5-80b8-b8c93bae3b94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "412f98b0-7fef-4a9e-94f0-e5bf8cc94190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "de566124-9052-4f01-8395-b693978bd095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fcedfa9-0a39-4f0c-a9da-898efe2c65a7",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1e6d99-44c9-4acd-830d-677945283ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "754c3265-9444-4414-b65c-0eeee07fdc31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70413f9d-ae65-4890-9e79-631b72a9366c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "04cb0c8a-634e-42c4-a102-0e8e5b0e9122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b3d0125-b272-4bfb-9d7b-2a47881c7bd6",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d551b7d-f95d-47ae-a24e-db1daeda4f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9c433c6-a4fb-45d2-8dfc-2878589a3b56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec9b930-b8c9-436b-8ed2-48039a2c6970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8147a76-265a-4ccd-900a-8fbc32d42ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "700a583e-d128-4c2a-9652-6d28f56948b1",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88baa8f4-0e88-4e7a-bd77-1e62e38aec04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94cba5c0-8ef3-4fec-b2c5-2fbd2a4a2116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c264474f-b2ca-40a9-a7a5-31c4bd13c936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "3552b46d-2750-4e4d-92b4-2d9f1e784192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af7dc92e-1dec-4323-b0a7-d72c8e1948e5",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90942027-0a54-43d3-bf63-d33316b3dfe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6933d93-7651-4bf4-b87d-31f60fd80a9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3394e3e5-bcad-4a17-ae59-991d57be3688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ecff973e-5298-4010-833f-2a3863c94130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b99c76a-dd0f-4719-a904-2d05fcda1e92",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94a1875-064b-42c9-a81c-d2ef739db98c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "839dfb9e-bef6-4761-9326-350ffdc452b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32fc6882-2b66-4af3-a3da-d724ab2db4eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "af84b7de-3aa9-4fd2-85e3-fb48b07a9e3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b8a9ae2-fe04-4b53-a5a0-ee0ef29512ef",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8339b8-acdd-4bac-93be-2b0249a30012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75525db3-1821-4b81-a518-898c3a3e90f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e2d830d-ad01-4566-9152-578ea95b5b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9a4507c-2a3c-4819-8114-12e0477646e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02b4aab1-6dac-4cb1-8e46-9e36664b8816",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9baeccfe-005c-441a-a0fd-3db2f250acc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac5e63c0-42e8-4595-b072-97f898106d81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca30dd53-0158-48fd-b6f3-6bfe6a74462b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "34cc512d-0628-49e4-88bf-b29407647560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2942ec23-b014-445d-898e-6cf3c1559ff4",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "272dd1af-ef26-4ea0-ad46-f70dba778749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46c38cc8-acdb-45b3-b20f-369ad33db72e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c0968d8-4b56-4527-aac1-d23cd5a59f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "96dd2c1b-16ee-47fa-9c37-b45422ebfc16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2795d693-c086-4405-ab28-f113303071be",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bab2c6c-7622-4b3d-96c2-0df1eb5618a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "073988dc-00f8-43e9-a2f8-52178fbc44f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c29f053c-4efc-4aa4-ae15-3741033166ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "69699751-9878-4649-9bb1-ed40009a3aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47bd90f8-6996-4577-9ce8-163fb6af4104",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d730b2-c007-4006-9516-20001ad7883b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cb0942c-1051-4f46-82f2-bf0cfdd0f6a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63e746fc-b8e7-4784-8928-37c3de14dc5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5186d923-76a0-4a18-b680-2d9e41ae4a04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0faa6669-a78e-4e97-9d69-7c5e317cc52c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b546d9-d8ce-406b-9d50-1bcf5b73f567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7616cbd-abb4-4332-b02d-2b1c118447f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72668182-6323-4941-a573-729743725e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "98f526a2-390a-4f64-961c-550852437c18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b287a38f-0dd9-44d8-9109-e4964fb8f126",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c64d4b-115a-4a23-8087-3ac1d26047bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17684ca1-2612-4e8b-b3fb-75622cd5b23c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "155d453f-940c-4e1d-a429-7012ffd56081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2ded450-de1e-4ee4-b71b-1365e7701ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a826a5-e785-4975-86d3-b8393d7b5426",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4598b504-00df-44fd-a4d5-7a2e6977436d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba7afa69-d41d-4396-8fb6-490afd5902b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dba550b1-7f05-4f7c-b47b-db90248bfe6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c550a3c1-58d2-48e6-a6a4-ab7823cb3bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70be9782-1d2c-489b-b5ed-5f9047faeb8f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd39ee98-b8ef-4a1f-a161-8fd61358368e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "753b4ba4-5324-41dc-835d-3129f434fe5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dd36ea2-57aa-49cb-8dc3-47f04d378bd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae64a43c-3f3d-44a6-a161-f59d5a6c506d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e9d0022-d493-4582-855a-1b91a3aa8b61",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44c51723-a6f6-481a-bbff-76c40eb08314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07b639df-08a9-4433-ba76-dcb2abd0b776"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f99cd52-e306-49a1-a78a-3c7ab7880a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "65ea3277-d3a6-47c1-abb9-fdf7ee31a195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1fbdd91-28c1-4371-acc7-3e8b23d8ce43",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d872d41-8448-4dca-b33f-2a07c7094c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b41de32-fb36-4191-ad50-ea6951247662"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cd59aa7-4d10-4977-b2a7-edd56b3d75c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b29fd576-f5b6-4b3b-b276-52e0b689d3ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6efe6bff-8ac9-4aed-abf0-f76c075c17d4",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94fb5f04-6e16-401f-8361-63fd0f75d3e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c762cf7a-cfbd-4688-8e1c-c1214732f0ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5144e0dd-e677-41d9-bc76-b23f56fb04fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "22489152-a9eb-40b6-8ad5-1786fb847750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd873ac-dab6-4039-b836-88be893d5e2e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42f4d431-4cd7-40c1-b0c8-b78da747f076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29ef2c08-f7db-4dbf-bd74-da088ab69647"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "012e8f56-924a-46f0-b885-b5ca3448fbfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1bd8d883-ba77-4fad-b0bd-d68a7b3937ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d40e0b72-1898-4077-b81c-e6db98dbc8fc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a173a117-a44c-46e1-9891-07b354574c85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36d32e0c-0755-4ddf-833e-509d73847a41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b7c5507-94de-43c4-935d-36288fa5ac83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d01c28f0-79aa-4fbd-a8c5-8563d6c88181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eafc6252-ca7a-4064-97fe-b7a1a1fdfe43",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "573ecb91-1eba-40bb-bd41-919151c52d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57193392-a7d1-42c4-a44c-a2148f00424c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05186923-d6f6-4d3c-91d0-3c7b25f065d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "32e8f69e-0955-4325-abcc-f10619c3f5ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ce24a0-459d-40d5-ae1e-a6d05b1310ae",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2126bde-0bfb-4d12-9135-a6ee8c54667b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4d26c15-5770-4c6a-9d43-79f968933ca4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "317a7806-4e5a-4e04-9e32-e80c8c3823a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "23283ca6-8dab-4d8f-a561-69cd46b23a3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86cb631d-f0c2-45b0-8399-c189561585de",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e6aa665-c12f-4c50-b8d5-9295b2cebac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "064be3be-8c68-4631-8a05-0c35ff8e3c28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32037461-2846-4ca1-96d7-1751252fc496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e176a0a8-5851-4236-9865-5fad5a61bd19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2132f3f6-9c3f-48b8-a294-81b84b3c6c23",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a33ada-9704-495f-a749-495ea51247e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "114b5c89-9bbc-4cd9-853c-28b66a43839b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eca5d60d-0859-427b-b103-52528f7116a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "9eb69cc7-be29-45a4-92fe-60eaf2705183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b2624f0-9185-4db3-bb97-4d83a7ed3288",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e87ed8b-1f2f-4d75-9420-2506579532d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d2212fc-340b-4902-814e-dca157d2f678"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62bfa3e5-38fa-468b-8ac5-a490a3214da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ca3da8e-6042-4af6-86d9-acdbbaa8357c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c8ca1d-86b2-4eea-b73c-4a7a9715c324",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b09a978d-2051-486a-a4a9-813f32f36f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c962c08f-5c65-4767-835d-8b29f5989783"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0702b14a-0988-4ba9-b17d-146708d0f3c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce418b91-e3df-4415-8cdd-71db5257c5b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cf56996-6893-418e-b468-177f3aa21b07",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e05bda15-bdde-4e2e-be87-dc3740b4f1c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44472676-d565-4e9c-8c5b-41dfc3d815cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44549286-03b7-4f71-98fc-408569719fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3272413c-df1d-49c6-bdfe-982491a779a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88a90617-b0f8-4998-86f2-4a5b8dccea9c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7360625-e00d-454e-b4df-4dac1e2a3959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b427f259-1c3a-4da0-a724-cbd017075644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91f9693c-2f2b-43b7-9226-9e79effd79fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "11dfc37b-749f-40a1-92c7-a52eabce110c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d538c5-541e-485d-8833-2f5fdf4b88a0",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a53b8a-2807-40a7-b425-618364d28b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f495f548-e65c-4f24-a3e8-2d71db25aaa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "314b02fd-89dd-4405-8fc9-10213abd7c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ec00e344-645f-4efc-840b-05e6dfb9d083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "324625e9-24f0-40d8-8479-bef112c44bf4",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "553b4313-2d63-4fd4-aaac-c6782cba7898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ea38f65-ea79-438a-b0ec-0ab3aae05a0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4b7a8f7-b7e8-4a0f-ae9f-126000effdbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "646e3642-d2d2-436b-bc91-b00b683966b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61be0051-e032-458b-871b-92438f656df6",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7869502-7fb1-49c0-8ae7-669330de0b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1df11cc9-d80e-4270-8872-a4481bb94953"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8240589b-0444-4224-8625-e1553d5dfc7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "53b3c970-75e8-4a6f-8614-1e9404bd0b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af837f45-30c4-498e-9c65-535bfcce659d",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "719f6613-f8f3-49c9-8622-4455d3522a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "196325f8-f68c-4c44-8b2a-bd1d794cec31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1e8a6c-9c54-4cea-938a-45e06f7458fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b20a9aeb-93da-4263-b875-a451568a340d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07bb25a6-2a3e-4d43-98dd-745ddeeaac87",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e978d3-cc70-4693-afe9-6ba47258f0be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a969c103-b7fd-4c40-997f-fa92bd7368c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e75773-ec04-42c5-8d51-b6d91945052f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "403f7763-c8dc-4c1b-8610-586baa59f558"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d73b44a-060f-41c6-bcd9-4b49e0327bf0",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e59a3d2f-a07c-4e06-806b-eabb07ef04a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35fb3038-67d9-410e-966f-63579f56b241"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9aee9ff-31a4-4852-88a9-b4e95141ed09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd4b77d2-749d-4a6a-8b6f-20ac507cff97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7683cfe-fbca-442c-b518-6e6ee242abbc",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91dfc5f4-7913-4a59-8807-efa87ff8c257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0d653fa-9f32-4d66-81a6-072fc4a9ef8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2495ca70-fb41-49e2-b2e3-6577dbff230c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9aaccd8c-e972-4cd7-bdab-4738d51c272a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb1fab51-f801-42cf-b9fb-2d9113a0e364",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9421c3fd-89d0-4f68-bcd0-2fbf878dc050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c2c8fd1-39a6-42d0-82a1-99e3c19be833"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68afc59d-ea6a-4481-a59c-daf4b639feda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "57cc0b98-3801-4d65-a642-712ace65e6f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cef6e99-1eb5-482b-8bd8-51ea2b7a4482",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc892deb-c37e-4842-a191-451f98afcb37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7824739b-77a0-4e1d-959d-468e7f7fc612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43cf174c-397a-47b9-a255-888e18bfc705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "21cc35a4-af1e-4d65-8a92-46cd43f073c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f78a7180-61a4-4489-82ce-b074e25efa41",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14ac4e85-2ff9-4e62-8858-0b8046c8cd10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0de14d1-f0b5-470f-8870-9cfe294df1ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2f6ee29-e88f-4dbe-943d-50edf23bcec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd0d44bd-fdaf-48d3-8be4-f1076c38f508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c29917b4-111f-4806-8b1e-1978e0fff4b1",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5226b3b-4316-4c2e-a558-1ff06f3c85f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a8b9e4c-6cc0-48c9-83a5-434d4bb4faae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "807c2e4f-45c1-4e38-b3a2-e0043ee239ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "739de610-567d-4bed-95e4-6edfe3e02d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62805e43-5b87-4e4f-936b-2bcedc91a80b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f735e357-2c45-45a4-9b54-f907c15ee755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beeeda3a-3072-4c04-a790-76164ccb1888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e57e1ac-6852-4c6b-848b-974b0c2b522f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ca12191-b71d-4d50-bfdf-44a645e16b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c87bbf22-53f8-4e8d-8f84-4b2a2cc1abc2",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7dbe8f5-bb27-42c4-954b-77aee658cb29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26487f75-7d57-4278-9c31-8d0031e9000f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e6516af-05dc-4a1c-9dfb-149bb32aac77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "43fdb9d9-6bfc-4958-a69a-85c29bd5bf51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "319549eb-7597-4175-b98c-fd73d97ac229",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04191b79-00a8-4bf8-b0e8-f619956853ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d0122d5-2e0f-4913-aa1b-9faab9401b1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc8912b2-b488-431c-a89f-edf4e8b341e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "201958fc-53c4-487e-9960-481333e20b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d85df38-f446-47ae-a435-4f59b8edf651",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d270f01d-2865-427f-8c0c-96f58b87aa40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be8c40fc-4cb5-4e71-9f47-6f8396420cb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "732dca3a-8161-4115-9f5e-083c955eafc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bda6317b-13ac-4d38-aef5-bcc698c49991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b1c7a06-eaf7-496f-b578-5d24bfd5a33e",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36a29f72-fabf-416d-854f-a59b8919c786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "382e32dd-4743-4567-8df7-8959c0fb40a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02974657-c6ae-4665-9b9d-549f63615360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "38668e94-2e2c-468c-b08f-542b77b41b5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bdb2e05-2a1b-4cc2-96f1-c6360f8fa9d0",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29731739-23f3-474d-ad99-1625ff392ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b072e5dc-0931-4ac8-a327-55a46ca1c9f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d865458-90f5-4ed9-971c-dc5a2071ea96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "df30c7c2-5372-45aa-9065-689181ed15bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce54ac46-8004-4193-b045-463cd576803f",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "146c692a-29d5-4674-b030-a38e170b9e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9100866-af42-40df-bfbf-022bbfd79b97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a29875b4-32c5-41d9-97ce-a0a3cd1ef642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "624ed1d2-65d7-43ad-a188-552ed2034986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58ee9821-aa82-41d6-88fc-60dae170c3b5",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcfe550e-2f80-4631-a3c0-f979407d7e13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7397d8d9-1273-4721-a9bf-0d9f1c0d22a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "890fc4ea-fdce-4acf-bf64-95cdbfa1f388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f0ed1268-bbe3-4366-a1fc-2713812db0b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e5ceafb-d7fc-4f85-87e2-97042e78d833",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae050b0b-712e-420c-8fd0-b535d8f3cc92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c5f295d-5daa-45a7-95d6-a00e417ce430"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f3ae74-1947-4bde-9bac-32a356ddd104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "450c8fc4-684c-4f0f-87a0-71f8a02671aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f01ddc92-ff26-4f8e-835d-3cdce47bc969",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "960093ea-1fab-487d-9476-55c70e603f4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9939daec-b4aa-45c9-a834-eff1b1ebf7f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db6c0aa7-0442-4576-9fea-f4287fb28c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "639f7245-2510-4d90-b1ae-41c5504ed27b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "771cad1b-84db-46db-b1f3-86c151c39ca1",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd3cfe77-7e1c-4f09-a0a3-1de47e29d585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f8b978d-0014-41a3-9dc1-07db744f71ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a0cb82b-5ffe-4282-aabf-0e3165de35df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "361cfab5-39c7-4fbb-af84-ef7e3929dd92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a23a570-b85d-4544-b59f-c9a1ef97fb9d",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4c4911-40dc-46b5-903a-1d52b31b0f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dc6baeb-947b-4488-91d6-b65e0914edcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3ccad26-e59d-433b-b9e5-3a81a92ca3b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5fdbab6a-3654-41d9-a1c3-afab901e895c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "601d09dc-c917-4af6-a01f-d1865919be66",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1885d554-6be4-4517-8805-2e6f146984d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3638339-a377-41b3-a171-7b676eddde4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03680d3e-2263-40b3-a4bd-82d1ee92268b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "33d20537-3c96-4188-a8b6-5bfa250df393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "152b5b31-9d66-45c6-b933-8a07ba7dac87",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd97f3e-f0b0-441b-b0bd-8b72f897c000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ffb931c-8052-40f4-8c0d-f35c3c8aeb15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fb2af03-8d62-4083-b094-b226c207472a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1e21cb3-ce91-4829-ba61-fbded4c37069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b4c9649-4c18-4017-9caa-41bd9bd996a0",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "817c3a40-f7e4-4e0a-afb6-1e760c1824c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b82faa7f-c006-434b-896f-54fdd75c0cd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ad1c6ea-1357-46cc-a187-9438fc0ded5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d3690abb-2011-4a0d-88ce-0a03c395c648"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cb5417fc-6825-4f88-bdef-df239ca5edab",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4bb7146a-82c6-4a29-b96f-bea5034f233f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82dc351d-ad21-4a79-909c-9c80904fef5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "56f7f62e-d832-4a0e-b308-afd40e0bf4fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f9f7da4-3866-4cf0-a8c6-5ca7ab4518e6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a1791b6b-60af-4c3b-8dc9-81ed9a266c71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7bbb92d-641d-40c5-9605-3b58d23ce04a",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f29013a-1dcf-44c8-9f2d-3790e4f264cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a6b7eeb-6b98-4a95-a24f-cf38efc7dce1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6206f6db-04be-4734-b734-3abe8dccddda",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "473ad2c1-95da-473d-a4d8-f385fb1fceca"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f00206dc-1143-4e7b-a115-402608603c3e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "388f7a60-fb97-48de-9672-6da091734efc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6de2f289-ee8c-4856-a0be-70f538416875",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e42e1287-9f4f-4820-80ab-c11ca3b594d4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fb9d6eb0-07b1-422e-b8a6-f9c629bb5ed3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "29f78c33-d4cb-4816-bf7c-dbbf4a8e8024"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "950d00a0-2792-46ce-9821-86b032054af4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d8db725e-0d8d-4da0-9c4f-37f318914308"
                }
              }
            ]
          },
          {
            "id": "a80778fa-0a3d-49f1-b93f-d964e5fdd1d1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8c2f7711-00db-4253-801e-b9167fc29ed5",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb2e8fd5-6b7e-4d3b-bb44-754e2b4641df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0e1df470-c2c3-4f72-800e-8f8e12b227ed"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3063d7d8-da2b-499e-9b49-d21267848c5f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "362f2343-304d-46a7-9e4b-1d03ccd757bf"
                    }
                  }
                ]
              },
              {
                "id": "b714d220-71b5-46dd-8197-eb4d67ce8f27",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3744b8f5-ca25-4c4f-86ff-f7d2f0ef9d6e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c6158787-92a9-4a74-8db8-c750962957ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c993c1ba-49e2-45dd-a409-2b07887264ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c219ca95-2192-431a-9710-3f804db61407"
                    }
                  }
                ]
              },
              {
                "id": "f35954ff-4c94-4f26-8c6d-126e8d71f9c5",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "92564b4b-5af4-4c36-b6bc-69a7b1beddc8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "89ee0e85-48ed-4299-891a-4a5e342b76af"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c65a734a-2f6f-40fb-81a8-344cfa3522d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7c7ce19d-4c52-4741-be12-7f9b0df8cb29"
                    }
                  }
                ]
              },
              {
                "id": "3486ada9-dff7-4a95-be0d-7a12670177e9",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e69a8a27-32ba-4cde-b4e9-bc9acc3deef2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ad523148-43db-4ea5-aba7-93beb719f69b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "899023c1-3239-4f87-b224-cb80aca0d4e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "92294055-af3c-4e9e-9961-582d5059e3e7"
                    }
                  }
                ]
              },
              {
                "id": "2d4d8dff-9be8-4b2d-b702-655e03b07a89",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4383c4bd-b81d-4911-835b-40b49376ce10",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dc6da011-c9f0-47a6-b9f8-79800a8b3466"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b5a12d8-f349-495d-80ba-7f6664f0825d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d89d3c6f-3307-48c8-bf74-e49a0b7414fc"
                    }
                  }
                ]
              },
              {
                "id": "4d6d6e0a-7bb3-4736-b1f2-c5d59d820d0f",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a2ebd14-b362-442c-8337-8cc15fb3929f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "95441676-f7dc-4e5a-a681-1cfb373c39fe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7146a2ce-c329-45bc-b306-3cd3d11455f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8748243a-1018-4ff7-acf1-bfaf28ca47df"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "152e9897-43ee-4642-9156-fa7b660a9140",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "adc341d8-90d1-4f10-9412-cc58d2a69df7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "eaa3410c-53e4-4c6f-a7f8-f65d5c4bc8dd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b35c0ef5-1760-404b-a03a-e92a65f12d0c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9092a24b-f36a-4e2d-b2ba-23292104268a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "f26594eb-f2b1-4b43-9ca5-37ba4135d941"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6e29af11-1fea-4245-b3c8-54adefaaf922",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7bdd88fb-2cb4-4478-9363-4f36c4c84247"
            }
          }
        ]
      },
      {
        "id": "a1c8ae80-0b15-4e2a-80c1-b1c4a9bb48cf",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d3366da4-1a58-49b7-96ae-39f48c3de664",
            "name": "Negative Testing",
            "item": [
              {
                "id": "988fc0db-c669-4bbe-a09a-4fda29f118fc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3e0500a4-a57f-4e68-a997-3f3716f17632",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "467ee3fa-2d3b-4e61-8d05-565a746c6479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8c3a602-9b87-45e6-a18f-4ea72f876b45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4fdbcfc-d758-4642-a7d4-17192050828c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d69c14a4-e406-4ce4-84df-8a355d5da469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f67246c-3f97-4c5b-91cd-3fa3793702c1",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d432fd-2037-4fd9-87ec-4a0568d57f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c62a532c-cc25-4fa3-968e-bdfe724cd8a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79baa070-9e76-41cf-af66-0714f08c2197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "89ea5b7e-1837-4eaa-91ca-1e59aa71ca6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57995c95-f4be-47b6-8170-43ae1e32eb2c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "068c873e-ab3a-4354-be44-52ec7ff94787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5cfbf4a-a5fe-41ff-b6d7-43d5650ecc2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "880edf11-03af-4273-8861-06487cc8804b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d398c184-2113-4b22-b584-c3253045f56f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9ee016a-bb56-4ef7-a0f1-c2d5a1cd950f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b469d5f2-f424-4057-8d79-5dcd4251b35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f0f3f87-3b19-4d83-a0f9-8cc63db41536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11be1703-05cf-4a9c-a639-d29beb7294bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0bf32684-bef0-4f8c-8e9b-97f52ceed999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "356cdafc-1912-441d-8591-7525b2d0d28d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3a31778-9f83-453f-915c-34d6abbb09f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a1daca0-2c6a-4efb-ac32-9fdad275964e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83765949-bbf9-4fc3-9c26-eb3716570ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fef8ce3d-bfd3-4b3d-8ca8-c0879fcf2198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a10b2268-7e62-4a32-8e1f-cee528363386",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa9fc953-3d5a-4d86-bf1f-4a98247948ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "906d702d-75ab-4fc4-91d6-c719e23d46f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b38747ab-7364-47db-8c95-76650812bbba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec5402e5-2fbb-48f7-bf36-e070a1d5a784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c0d0569-36b3-4ed7-8a5a-a9b3db8edd26",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f85c8020-d693-4e22-adae-7d93e9f4d80d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e858f189-e93c-4480-9a3f-65a6a5f881a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32477ebc-4938-4e97-85d1-7cd0f9184431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6747f73-0535-4947-a89a-92b3221f4046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aedc1e2-5d78-411a-abc8-bee4347d224f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b50fad7e-ceb2-4669-a15d-afad00634be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9430785b-8fc5-494f-966e-ce64a54e8b85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6809f342-fc29-4fc7-bc72-40c1e14edc42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e7f1876-883a-41da-8614-9d8e05822fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a907283b-0bb0-4e25-b6ed-1bcf8d530207",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca792d0-0dfa-4d4d-960d-be3f25bb7766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdb07fc0-eb52-4e71-a971-304bbe9855c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf29ecf-d265-4224-ae68-0d87b785ab45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "19b611b8-b313-468d-ae9f-b69742238dd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe9666b4-8e0a-420c-a692-b70d40925cab",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b48a261-fc36-40a7-820c-c43559189fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c43c6c2a-6e6a-4ee4-9f81-c367735a12d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e5f7cb-b04a-4f7e-979d-657aa7b1f9c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc1c3490-69dd-4ec8-8fd2-bf317cb9a540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e34ec81-ac01-44d9-9119-8845fa2fa703",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61cef213-3325-4078-ae1b-30a42b95dc2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1790619-6634-44bf-87f8-ba6d101c3f11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b3597f-9720-48be-b521-47e40cf5c627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4ff32fc2-c0d0-4668-8978-e686361744d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d8027dc-da54-4c89-8908-4f7c508e55d8",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c6d83ef-d4c8-4ba0-ac56-b7e7873b3932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3b0156c-012e-41fe-8b3e-348c2adf78bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae57a795-fe66-4afe-af6e-31a99965cd34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6dcb423b-4aa4-45b6-8a29-d618d351e6ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c954e74-409e-4604-8367-e73fe93740ca",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe72375-4cd8-48f0-b989-6f4489cea3a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c17dbc0e-486f-474c-9bd8-f3065d0a2124"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e451688a-cef1-45e8-9c8c-0e7e0a89047d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "73e3f5f3-58d6-4218-9581-45d88c146a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9a6036b-ce42-482b-af01-5eccf36cc91d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7267e39-ef35-46ef-90e5-5eeeb61b30d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94fc5d42-655d-446f-bdf0-724044af0643"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ecbf41e-ff18-4504-ba45-c00945991e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f400be7-e706-4355-8df1-53f57e7f2e41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbe6bcef-1172-4969-9fae-db95b7693b2f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e67c8c56-4f91-4632-a496-97c0e6d65ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef9ba6a8-d55b-47c3-83ef-e196bc5ea093"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f15c24-15a1-47f1-a7ee-cf6da37f4eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a95c158c-0c6d-46e8-b010-83b59b905938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba9166d8-f598-4f28-bcd1-60b3e1ef8e1f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd33150a-8fc6-4de0-bfce-cc08ebcb8fa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0993395d-d7bf-4f86-b437-d313a5954e6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b0485b-98e1-4ef8-8077-e468a64e7216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "da6ad08f-c58e-4216-8379-d6d744d83c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fc9e5a6-5254-4815-9e12-b3e6af181eb8",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "653091d9-2320-487f-90eb-0d87242b8cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85b19601-51b0-4792-af5d-33d1e59ccc47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65478bd0-f77f-424d-ac8b-88b333099f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7af15775-b62e-43be-9532-fcba1e522028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32521e05-c94e-424e-a764-396581156d19",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c0f158a-6530-48da-a623-84d29680be68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be8914c9-7b08-4600-ab5a-24d1a0bfca28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aaa390c-6d24-4b4a-abbb-4db5667542ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "417b26a4-bc77-4518-91b2-d5e76deaf265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7551246-fad8-4767-bccd-3f016af2eacc",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eb0e92f-3a74-4c17-aac5-3a1449993533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a5a9095-75ca-4417-9ddf-293fa8d674bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef3b6a4a-697e-4db2-992d-55504bd409f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "962f4106-1285-4f12-8b3e-068057c06698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c37d4e85-ecdb-4b2a-b986-5e4ac2fc1122",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6472f1f2-4cce-4031-ac11-a92d89b5abf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b7f5a4c-a67e-49cd-9eb0-47b741b9250a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c5a295a-e7bf-4fb9-8b89-fdab72f3b55e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3065d93e-7f8f-4fc5-a6bb-71299717f798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "488e71f2-9f51-48af-843f-f87781065259",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a26c6b8c-8eff-4906-919a-37b65b006dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2037f626-3bfc-4a58-ad49-ab9eea5ca978"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5023b28f-c23e-41a6-9f65-08569ffe4371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b54bf379-c707-4158-9d0a-d1858e5495a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff628a4e-ecb1-4db7-85ba-a3b6d35ca812",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c14a119-3af5-4a8c-a491-46a2946cdfda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aae72bb-60ae-42bb-8dbe-45e95caa42f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ea6899-516e-40f1-9869-2834754136fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7954578c-bd2e-4e4c-9605-58cd8f08ba46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "110af077-d84e-4149-a371-90bb59159e58",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01a2862e-29ea-4505-813e-9aa6b2d2c8ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41d10a25-f3ad-4367-a959-031a4b62aa7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4906f969-55ab-4210-9545-2dc5538236e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b4559d8-e355-4c56-b515-57342f1923d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "624ba96e-24cb-4bff-ba30-c4754781c57f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ea26d0-9b45-48b3-ab72-46419c0800ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43dbb26b-80be-4945-a26e-b41f2b7d9fe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26739362-058e-45d7-b9e0-73071083e4f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccd3475d-4d8e-4f23-b003-4a3a6c4cba41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1437ce4a-5016-4aab-9674-c43bf8382e42",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce6c0413-2cef-4894-ba67-1f0dd9acbde1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbaaedbc-d1d5-4cda-ab57-12214facdbbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c9a4a44-f9e0-43de-87d7-f744b35cdaf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "937c2964-0696-488c-b009-a7c7ac6c8eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e25342f-cdb3-4da2-8b02-6cdeec0e7fe8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eebe8d8f-2e13-4230-93fa-8a256c896577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38812236-3801-4b25-8924-810309775e48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "370a4cbe-fd6e-454b-b52f-101c2e3442ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d685c320-543b-46e1-a632-e3db792bd008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b1a9d7b-9755-4cc5-8033-7d08fb5f7fff",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d64ff507-28d1-473b-a92a-8ca72c42700f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c13e3f0-da03-4a27-bdb7-748c40d5d903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43bae0d7-ffaa-4fd1-9e7c-8d3d5387e3b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b690c68d-1bdc-4d55-9f4f-2d3e83f643fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91076d7a-0f8b-4489-871f-37d4f814c3ae",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac318e3-0f15-4ba5-9d9c-9d0df35c2806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2b3230a-3b7f-4fa9-9d3f-8f7bb308fd4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aafc090b-26f4-4ea6-b4f2-010164b1bc39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5f76847-8348-4f68-a21a-48ee972b3009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03105254-fc28-4550-9d67-b7daecee2cab",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7782b15b-407e-4e39-af91-09906ba6b920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cc5de70-34b0-4471-9d70-463274bebe5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd462ae0-30be-4eb2-a5af-b284ffca1b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5f8f908-1143-4abe-a061-71da143534e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f861b04f-341d-4340-95a2-20edebb206d7",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "153893c8-4a80-498a-add4-f45914badf0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea443ac0-679d-4c1e-a870-2f078766bde5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8190382-0954-41ea-b4a2-3597d44626d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9bcbe18-7206-4f03-8395-40d735cbfe19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f99eaa1d-9c87-41e6-beb5-e0695b5e28b4",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbb67eb6-7b3f-46a8-8f67-2f44db4d2a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0bc2142-0c08-4e91-bfeb-21c34bac6cac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b731dcc4-e5d2-419f-9815-69fdd1eedf43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c288b15-2e71-4c12-b482-39bdd9590bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f92e60c-486d-4e5c-86c4-5f2ffe6ac26c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d3ea314-2c9b-4730-beed-ebd860aaaeea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "418588ac-14f9-4f0f-9441-524bc1b750bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f55a16-c16f-43d8-a4dc-ef4512c9e427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15af4f90-fb99-4079-b971-715fbf796ba0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3f1c7edd-f13e-46e8-a959-a7d5143cb723",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "81974fcc-3c47-4655-b1c7-bdf3d40e7394",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "433ecf19-92cb-46fc-bc82-caa011dbcf89",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c9009dd7-a432-46b9-998f-0ab016dc691b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66294015-720d-42e1-957c-1da4d8c27018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "43cd6ef1-a96c-47f5-9a5e-b46c9aa5f949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c540f85-465f-44fa-b728-37ecdf068458",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8622e8df-9968-4302-b143-3507d4e830f1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0a9ca9d8-45eb-4bdd-80aa-758aa43c2cec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "639611ea-fd6c-4329-bf7f-6d09dbb8f2b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d0e6efe0-640a-4cef-b395-2eb009b2f47a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1b7aebec-7422-4df8-8268-a5c5b5a44551",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f6ba284-81f2-4524-a7a9-cfa91f34bc0d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b2c7bab-94fb-4990-9f10-f7a833502f83",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "86f7f728-3c3e-41de-8a45-b3fe5dbf8675"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c6caae96-d753-401a-8ddb-190dc55d504e",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "303fed35-d992-4e78-8458-12e5ee740894"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a329711d-2e82-4ff1-841b-596670220e82",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1675122b-7552-43cc-93e2-1d9f06932ef1"
            }
          }
        ]
      },
      {
        "id": "a69a5965-010f-4331-9de3-f22aaace6b83",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "6f01a41b-4c08-4b1d-8185-083e957870ae",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b9048995-afc5-4249-ae77-dffb8b1fe857",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6d579a82-b579-4e94-a532-b9dbf64f305d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a92eb02b-8f80-4693-b9e5-b300c962f0f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "077aeff8-1f54-4307-891f-60d6ac7ad0b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13506bb0-5c6f-4a8c-84cd-1bce42fdf1de",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48fe8b94-f07a-4507-af2e-d17003da3bce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ac9e901-7a6e-40a3-a792-c346905fe955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae88dbe2-9a54-4f28-ba44-76d6e761c25d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebda901e-3acd-4a16-b530-0b66711f4ff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8635679c-bbdf-41d1-a0cb-6703d499be85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9124213-ead6-4762-a50e-c5a7ade884ff",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deddba9b-7c84-4af5-ad7f-46d6ed7cdd66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd040c82-f504-4327-bc99-a86aa8d9be30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d3d30ca-70b2-4af2-9183-8e31b9805ad7",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b556ffec-9391-440a-8289-cb230d4a71ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b876f4b7-ef7e-4896-9730-ea524f3b10ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f7bfbc7-80b3-461c-ad53-860dfa066bd5",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a5a86fa-9e36-47c5-80a1-105e60ea6df6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d90da76c-026b-41ef-b7e9-81bfe983a38a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad7af5b7-b8a9-4bf8-8845-98d13cb6331a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37b9144a-b9b6-4902-bb1c-79660a24e82d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4328238d-a1b2-43c5-aa3a-8d6e15d9d560"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f733f462-cd59-4c84-b3af-fc8c63c757a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcb41e99-f00c-44d3-bab3-b73194af6266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5da3642-7d70-4b55-bfb4-498d301d79e2",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ab9e54-8595-4ef5-a162-8409c467f31f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9927684-b101-4a4d-a98a-3ebf16cd8686"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b002339-d9dc-4274-8d47-8f2bf67bd4dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da7eb1af-41f4-49e8-97b0-5f86faa366da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c2fe4e-9e7a-4d69-8ec2-fcca09836d70",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d17715-71a2-42ec-9fd4-d2c3e25ec796",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecb06bf7-d2b6-4e29-a449-6f848bc6a3a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e5295a-f67b-4861-9417-fbefd17ff3f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1357d54b-e14e-4a0e-8e44-3e09d5020df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64990ec4-31ed-4814-98b0-c4824b8c6b8f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d279dd-8b2c-444f-8fe4-c899679ccbd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60375907-4f89-4370-9ccb-80163f568aa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d7a0739-6ed9-48ce-bc70-e613a029403c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2653ea1-6fff-4200-8209-c837c1038a24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d394bd-4866-4025-bc81-1802b8026e06",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd85c99f-6c25-46d6-b92a-f178506d6d55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d031a2a-c44d-40f7-8f86-c1746bc0d28d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09f27016-ab50-49a2-8108-bceb95f3d3e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cafae89d-01cf-4143-9d1c-9f62f659df67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d778ce2-8e97-4a0a-9bd2-42d2531e931b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "507bf266-d54c-48a4-8a96-2ad0c3c979f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2125335-8061-49e2-a27e-249cae930ed8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5061b89-9bde-4d85-8ca9-1ae6b48d4076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9df0233d-dadc-4d24-a2c0-d1b8a3c05a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bf64fd3-30f2-4cad-8296-c19ec141375a",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f52d2e-d700-44f6-90c3-3f0a2b0a8d56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc177a52-68de-402e-afb4-4678d2ff2247"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee5d5fab-0111-41ff-845c-1f84ea2746e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c027ed11-2db8-450f-bcda-73d5b2816f89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab6378cc-a98a-468b-9bbd-c204e7499b94",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e67cf48c-d880-412b-88fe-4fb5f9f80743",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5733c6b-81f7-4bb4-bef7-1f0b24903c13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a41575-ee49-4003-baed-e9e82fa2d0ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eb7bd2c-c3ef-4fc4-a972-22e96d826d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26f8920a-b336-4a1e-8d86-c42fa05302f3",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfc76ede-2450-4940-bcb4-8be4a24b2713",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9a43974-4f2f-4cad-a4e4-96485b2ff730"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cdeb0a3-da67-4924-9e76-c116b94dab14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c210ae8-a1a2-46d2-9d5a-6065837ee481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d807cc-639c-4026-8a7e-c0f01f4a9ce5",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a262b3c8-13dd-4ae4-aa74-04796438d25b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2b0d00d-531e-485e-8b25-eaa6ddb302a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed04510e-0686-4639-a560-d9800e1ec582",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82570229-b881-4de2-a8c6-2c9878ca7be3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d904d8e-5280-4ec8-b08d-3f6835001a6e",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b119dff-fdb3-43c6-bc03-c3e45076b01d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df29d824-4f8c-4f56-998e-388b2149afaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f683d5-f554-4130-b082-388c0efcc9af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb353ab3-c587-4637-bec3-919ad692a3b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bd6e299-2699-444d-b501-bbf37381983e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edcafed9-bb2c-4b78-a350-46cd195da79f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e2d8a0c-b246-4dd2-a42e-019dde19b86e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0699ce1d-5f4c-467b-9e9d-3a813fcfcd92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "778fb54b-620c-4feb-9214-938600e3c898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12bac45c-e7a4-4727-a576-585042311d35",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91aee6fc-acb3-4a60-8e5e-0e94792ecfa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f421487-6285-40a9-aed4-11c5da6bcbf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c52879-2ab8-422d-a19f-822b5623e087",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "392ce4ca-7612-413b-9b1a-54d25f97efe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81de5f84-3412-4eb7-a314-2eef86b13469",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30bb5c9b-1b54-4664-910a-88aa2eb7fff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10ac403d-9d9f-4b1c-b21b-be6b8dfcc4b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f86859df-ab46-4217-b338-1f576261b68e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffc82f97-69d7-4374-bb9e-2190f56410f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a093a15-c3a7-474e-a46f-19540f22acf7",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83783268-d566-4038-b8f2-dbcdf605daf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "082cd034-5d4b-49f7-a609-2457e5051add"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4431947d-373e-4fff-8d95-e79d579fcc70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90731fe6-89af-42d1-b837-7ac2717cdca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dca2245b-dcc0-4bb6-9d50-38b9a98f5e9d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b207f73-810c-464e-ab65-23e827fa02f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc3548ad-f54a-4b73-9e3b-23d0f0571e7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11d028cf-2d8b-473c-866f-25eaa9222155",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0d26cde-a78b-4c3f-8a34-eeac1b68b59f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24d53dae-9500-441b-8beb-6fe589310564",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa70dda5-3db2-4b03-ac0f-3818b05fc0f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2769643-ef23-4643-8f76-401e9741fdfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37507c3c-01a5-424d-9147-e520022d01b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0562cc62-6c7f-4e7b-9ab3-350e7b7265ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c417a498-2f12-40ac-9d0a-8ac833cec356",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd1574ad-6d61-4fbd-8110-7c9c5639b85b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fd78e41-cce5-4563-8fc8-7d75eccb214f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c131bc-14b1-4f1c-a7a7-b78c8b94a667",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b03c4dab-58cc-4f32-96ba-84db1efcb67f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0c0a74-ad1d-46b7-a936-04cca2b14a7b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c7c0ac7-4a83-4958-b7bf-790e65bccc83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4abbeb08-e4da-4323-ad7d-742cfaca22ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c437138-661c-44fb-befb-b26cede886b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77f17ca5-5e43-488e-a1d7-0dd1433be6e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a68aef95-e5d9-4c37-89d0-4399c825902d",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b1720c7-3af9-45a4-860a-70e7f89c1898",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "505f6d46-3a54-4ca3-ab60-b828b654b615"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "248eb404-cf75-4bb2-a62a-9c4c7a681b8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a66b9efd-f6f8-4d77-9177-3664094c9f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c09fec58-9ef0-425a-b545-cc540c84d309",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "486b756c-7e64-42b3-a820-72bb064ca031",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91e59efa-2256-4656-a1f6-56bd13e5893c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e329e3-7b70-4573-a38d-1af43c7cb62c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2f43a9f-aa63-4937-97cd-dcd7bd12c63b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2dcdebc-33cf-4bcf-b301-96c8708e40ff",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0795771-156b-4268-a195-bcb439895cc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cc83eef-f106-40ce-8094-d49414c0d7f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db2b1686-2031-4b10-a15d-c81f0ad8f6c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bc4006b-bea3-4fa3-92cf-65e7dfedda40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98cb2290-438a-4607-824f-0dfe1b3359e0",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eff368f6-ec29-4201-8622-be833a372f7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f7312aa-9f4d-46bf-a663-db8caa376d7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d42acad-60e0-44b8-971a-9dc0eebcfdbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93d961f5-e892-4884-aeac-36a65b0bca15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb37f62a-a0cb-47de-a6dc-2572d9cc70b6",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d329491-5db4-4d24-9bb2-4018dc1e4b7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "237c5ef3-e41b-40a2-862b-2d9a8f49619d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7568ee83-7749-4c34-92b8-b88c9e0d4dcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fce2868-cbae-4d96-b4cd-b25356bd4166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df85110-96e7-40a7-97ee-d979b332ca99",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aceb8fce-ea4f-4b41-be00-e9498414e58b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b03de9a8-bdbc-4114-aa3a-6212ecf19a23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61dfcc68-0a81-4682-a60a-4d784e338791",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef19fcf0-3169-4d43-9496-e3f4a0da56eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ef83020-4eb9-44e8-8eec-cd78e4665977",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5627819-2419-4dd1-9462-5659ca34415a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "faf1c766-b68f-419c-b989-8df037c852ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1391107-7fe2-4f77-8f48-8c9fc56d49e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f1abb39-6b28-4769-90d8-8a7d5bba1f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "febc933a-4b93-454b-833b-137859884b9f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4fb571-6c65-4513-b0d8-6c615732c45d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "827eb2a1-b74b-4007-864d-f049e7ae6a50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "791a682f-0960-44be-833e-b53dfa726b8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3879d6d4-da58-43ae-8db7-5e64a8c103d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf0b4ad-1a10-4729-b02b-10cd54828e8d",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b10fd87a-56e6-4610-ae6c-a7faa602102e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa122252-b1aa-45ae-9dbc-c179f53e825b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c3e9e62-9868-4b10-af0f-1972caecb1c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51be39cb-eed3-4f29-83aa-01f0939e94a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a115e8bc-fe98-42ca-b82d-6598a21d07c6",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d63214ef-7ef2-4ac4-bfac-5fb02d2a9b1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48732069-87e9-4b2c-8992-ad94e1a5ad10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1224b281-fc8e-4e0e-b6ee-303e39931be1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36d3ed28-4857-419b-bc2f-232cef2d3f92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba52cfb4-5890-490f-809e-75b87fead35f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "238babb9-728a-40ed-b14c-919b8a7fe1f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "548ac5b3-3254-4484-a7ba-c30f5943562a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e0203e3-d82a-4607-a6d4-7dc9faf65542",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3973d3a4-535b-429f-bb35-860a32236ba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "008746e2-2a92-4bae-ac90-ec13c3841680",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5493a475-b7b6-49f7-b039-50595cc7e24f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80f30757-1f14-4cd3-9b0d-6d17acac9420"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e8e9aa-cef1-4cf8-8d07-2d0021ebced6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdf5f231-ebec-4691-8aa8-f2d0a0494760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a884fb30-0fd8-446a-ac35-34a340d88eb8",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c0c67f-895d-406c-b8b3-be08d9f904ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cee43da-4bf2-429c-9031-21a69e29d934"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e8dd68e-5a1e-493c-adb5-4e1ae2c5888b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71ba0267-9fea-4154-8a64-18dc15c893ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "175fdf74-a07e-4e2a-b221-5b27e494be94",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d00bfb24-2ddc-4d13-988f-ed26d78e2102",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a96a5380-7b56-4a1d-afab-d4566cfe2675"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b28ae1-ba5d-4736-8ea6-472ef0d366fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6582053-242c-41ba-a3ae-2c34f9f512df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1649f496-0da5-4c1e-b1da-62907659db0f",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd42d4a-b105-49e5-8f4c-71e303cf36c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19e29315-07e5-417e-bd55-4aff95774315"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "115d73b0-2a23-47a2-ba33-9dd9af82864f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c55cbc6a-c27a-43eb-a6e5-4a602a8f2664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "675d974e-b175-4970-beda-46d14fcd4547",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07056a46-6c2d-41b3-9af3-03e43676f877",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56ccfb9d-8bae-40c2-a35e-d70893835d03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d35c45-161d-492b-b041-99b3dcd1a5bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "549ad26a-1ac4-4e6e-9de0-965934706e60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77c6339c-2c77-4588-a6d3-5df509ce5e03",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9e83f13-79bc-41f2-9de4-b4562e1c4c45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ab5cfc4-ebba-43fd-9b6c-890aea782bbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c30215a3-398c-4345-bd64-a8402701daf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "919463cf-6ab8-414f-a53b-7d20fa4e2895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be0cb2b9-2416-4564-a13c-942d20d26c92",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "126f128d-b10c-479e-a93f-932df0b6a679",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9a76edb-419b-43bc-8315-20b1cb08427c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a02c1b8-a7b0-4790-92a7-6d090a08f657",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "794f7ff6-a765-412c-bf9b-39315d43bc42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10c44da1-bd5b-4cfd-aef9-88ecf3b3caa9",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2fd61fe-daea-4cef-8b99-819f75d0514c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa7a8180-4227-4d4a-b31b-4f7a2f17fe73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a66aea7f-7d7b-4883-866c-0d2100f9940c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0eddddd-42c2-47eb-8933-02af791e61dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "607bc804-7553-49e5-bd16-2ff4dde5120b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60f5e4e9-93d2-4c89-aeef-688371b8dd52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "054925ab-162a-4016-883d-d38095b19920"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acd342fe-a71a-4671-8ca2-45cae51fe76f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "636f6bf8-c913-499a-9e13-1ac205c41797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9f1a7fc-1c22-4295-8e85-fcb31662199f",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28323702-33f4-4b31-9631-eeb841f3ca5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53e17585-fb4e-49ed-b1d8-0671dd4250e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8834605-cbfc-4fd2-b2bd-510032b2a7de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a650501d-91af-4302-b8d7-e4cae0a2388b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac874b91-bb64-44e8-9528-2855082b3d0e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96ae89c4-31ec-4e8b-86bf-910f34743420",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "317a5cd4-6221-440d-a09d-d9ddbeaa410b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "450a9eed-b43c-4743-a868-f81a4611d666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b363cdc-55bf-4bd4-873b-b7575ccb27b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c2f4b35-49c6-4e57-bfc3-882e6dd17df4",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d17d1b15-fb77-4a21-bf2d-2913b267b057",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b462145-4720-474b-8292-1aaa798b1333"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50474d1-b7c6-48b0-9f14-e3557094a676",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "195a2f7b-3911-4554-ac5e-539335108dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb6cb552-cbc6-49e1-80b7-4adaf3996511",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c38cb9cb-2e64-4ae3-b16e-0d4e81162bff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a805be8-d399-4bd3-9ced-c5e6b695b972"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e80ea9-2bdc-4810-83bf-33922c656c3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cbe8780-2b53-455d-9b70-035bc459b3d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e254b9bd-5c8b-4e54-948a-6792277eb524",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d8b152a-d110-412d-a9dc-f7dd23a30255",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7794a5e-798a-44b9-acf2-1d4c63b853a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3c3c513-5e2d-427d-a16c-86002568baa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2ab7de2-e495-4ea9-8810-5285886e21b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ca3bf0-cb5a-4ce4-bb7e-b261779273d1",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee218408-105c-4938-aa63-780ee790b17d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "823186a4-6975-40ec-b7e5-eac89e3ba0fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f505d8d9-0070-47da-8e3c-05686610ae9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0257e303-f79b-467a-8ac7-674e9f3fbec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cff90d8-f29e-400c-a293-5c2b2b3f294c",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8addd0b2-daa0-4525-9272-becda1b7795d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45555721-79b9-4b7b-9bc5-ce499046f01a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c3aeec5-e8da-4fcc-b39d-38195cfce2cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7107993c-010b-4f0d-a4c4-387c3b461e2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce328cd-9995-4d2c-bf07-b436471c6322",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed442407-d910-4527-b065-dedc97d8e667",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11478e4e-6cc6-403f-bf62-57edb05809db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e6c31f-272d-4d94-a8bc-1fe8a0c267cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0ee6aea-cf67-48af-847d-11e64e7c1ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "165bd5d7-3c92-4c96-958a-bec84efab953",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4088dee8-b01e-48f6-8d0d-97a992149eec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42f7fa68-7f87-421f-b315-6e6dbe769897"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f175d2b-c94c-4a16-986e-ef2bf2f0878b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ec897bd-cbdc-491f-8cf0-13ef40380683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973458cf-8cef-438d-a648-dfc5a09324fe",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "825c3ea2-7506-4c3b-a222-1364eafdfcd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36447204-347d-4c1b-9623-55448ceebbdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acf97da9-f38e-492f-9268-332bbba97427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a82d9cac-2edc-4570-81d7-f904150fa6a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "920e0976-c5ae-4ffa-9263-c5ff0c25643a",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "015b389c-65a5-45d5-93ab-067bd8a2c481",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09e0a2b0-84c8-4436-9e4e-15a45c23835c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "045a3311-1bef-4282-9be6-9fd3495dd91a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48c304e4-be2f-4486-a061-4d0bfcf05e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1959ecb4-bad9-40f0-852e-d684817c0220",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5ccd950-943c-4322-acc0-fc15be02b7cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62f12b7e-74c6-4b7c-be45-119fa3872d91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21861c8a-bdf8-4cca-a19e-453e88324981",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2706b791-3ffe-4103-be62-bbe940c724e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d76013b3-5d68-489c-b84e-a45bbe530ed8",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0794fcea-26dc-4ca9-9560-972b40480739",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec584a23-d166-4fa7-970f-b1c84c511f2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19545911-cddf-46e2-a1a0-6ea889740552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a0d59c8-4465-43cc-bd5b-76504a6709ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da71f436-ca86-4a4c-8beb-7322123f21ad",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b7bdf98-e150-48a2-abd6-81e206d614cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39b1ebcf-bd37-41dd-8c37-e98a8bb18475"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9bc565b-1f36-42a4-813d-00affb7fafb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbde4a7d-0411-4738-b9d4-d3c2f53eae2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3caebc30-2203-4135-9de0-d924514d2d68",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "568ae48f-c378-40a6-8a44-690c149bd461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bf45b27-e743-4c5b-b43f-24dbdf6b398f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1acc71c0-3aed-4fb0-8187-5df4f998ddd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57dc2281-4c17-437a-b074-0f2c45655fd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd5d6c34-2105-42cd-9cc4-b2bbf6af829c",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad20d141-3003-40b7-93b4-f4982d3b5a8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28341c13-5fa6-4c07-b168-5cccdf33a670"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2719b5b1-5071-466b-b6d7-02f49ae00e3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "222ac257-7549-4229-86ba-946aaf853464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd4c9379-0d97-4ac5-b184-ec7cb7d71060",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "203dfbb3-6112-4dbe-a788-27c5fb69906b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce004b0f-afb3-4dd7-b2a6-37343fc0718a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc68a6b-e8c1-4f94-9893-bb4fdd7afd51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f423291-21e6-4f55-a263-4cfe2590d26d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78def691-dacf-49c5-8711-357faf8a781d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39aae3ac-4770-4b2c-9412-3ca0b4dc6036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c820b50-73d5-4125-ada0-eaeea7972a3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abcc85b9-4bdd-4930-823b-6b3b46d71c69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c915ad85-20ec-4fab-8d0e-4851ba26b52b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6789b80-9e99-4617-b521-4464762253a9",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6861f00-44ab-4dcd-a423-bac9bc1fdcd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a3f04d3-7b9a-4f5a-bbfa-42d95ca77d67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdffa400-047e-47bb-b0e5-31ac6fd1768e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b5a74c0-fd53-4def-abc2-85da82867bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e5b015a-a281-4dd1-91c3-5e44397688ff",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a21ca7de-feaa-4eab-8e36-bb7aa82cef67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac586dda-a0f0-4012-9571-f3f4d9a46221"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acbbbfb6-ee94-44a5-ac7b-34fdc7784ab3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cff479a9-2d2a-4ccc-a7c2-99ee7d35e3e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e946fbd3-846e-4f36-9996-d2e45ebf1e8f",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3238aa09-c59a-4bf2-b5eb-440c9f6427ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52dcf5e9-38e7-4871-9d59-28f0a5a8d2c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf0fd13-ca59-432d-87d1-e6be69d0472a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0780c4f7-476d-4fc7-a0f3-80c907986df4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44cf1d3d-dc92-425e-84c4-0f040cd4a0f6",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbfe1efb-a310-4f71-81a1-9c5b817bfb41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aab186e5-6b9e-4ee0-8b65-a50e7b02ca3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad14dbe-1318-4092-9496-5c7d489cc4b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d726aa1d-8777-4197-bb68-87e4e0c60735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f2d70c-e211-435c-83ae-962bd89d8497",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2514086b-b8cc-4a71-ba86-4692b526a110",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad4c7c21-9c38-4745-826b-f2e14aa7241c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d53810b2-914d-412f-9c3a-4ef7d4c0454a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd9b3b75-43eb-4a69-8f5b-056955d1a547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "972e50e2-2001-47b3-8525-526e783b0c50",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c749c457-13bf-4616-88bc-d9364f89d6d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abbe43ce-d58e-44aa-9ea0-cd64b9ae0336"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1e254a-1c38-45eb-908b-0107b1b0e82d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4110a33a-e4bd-4dbb-82be-718d79a68522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9fa31ba-ed9a-49bb-bcac-a54e424ea2cb",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e11799a-9879-473c-b4dc-8c5eead80bb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a44a0625-8909-4d35-9de4-d6568852bea2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b11f2f32-a7de-4576-849c-0c18584bee05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f95af1c1-96b5-4201-9c9c-2c70bcb28aaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31bb5546-1f4e-4673-b188-2964622345c2",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e58f1b6-d6c3-46bb-8b12-0dd6bb0fffa0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "915379cf-76de-4a3a-ae45-b83975124838"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4526aefd-4eab-4003-aa25-9db941abe9c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65aebc4b-7b58-4bbb-bdd8-7ca605826594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e1327e2-bb35-46d7-a448-9ddf4ef793e0",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c79945b4-eac2-4d71-9a06-94c2013e836d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0f6e4df-f670-4cba-acbc-661d1d741cc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ccce98-26d5-45c9-995c-6176f522432d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1000be87-f679-4de8-af4d-f86f9a39f2b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45dcf19e-93e5-4eb0-9d61-4004da41155f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c543300c-cc54-423d-9e94-fa8e141e9263",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "932f4168-f6d4-4ce7-aff9-d528c0295dea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b847a3c0-34e7-41c6-b482-e112e5a05e32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1769616f-210d-4101-af8a-9ce1ef7a07d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "179656c7-fd1d-450b-ac22-58a24e8009c2",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84567647-a192-4e69-9cbe-1e2594fa08ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf17bf5c-e48a-44f3-b750-2b786889dcb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e649e502-ab6c-497f-b696-d0ab24f346ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "976b1602-9f0f-4174-a36e-86625fafb682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84674434-62fd-4cb0-9e08-2b2b152595b8",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "240f648d-5985-4126-aa7b-b92b908ac76b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b1344e2-87b8-4856-97fa-90e2d6ed0861"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0790ce44-7850-4887-84a1-39fc8a0397ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3910d43e-74b8-47ee-be43-3cc83a3ae1e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14fd764a-640f-4858-a929-14e97d4e57a5",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a91dbf8-75d6-4afe-b820-ebdf6abc8d01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48e3eb5a-562f-42da-810a-a8dbf3f0011b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36fe7d81-20d6-4a2f-8267-ad6b47ec9356",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abf992c4-3a55-44d2-95d6-5f2d13691230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1037313a-d05b-4cf2-a42b-be038bb1e5ca",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba8030f-7eee-401e-ba0e-638fae03e9fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49c884fa-2462-4e1d-aa86-9602a7c1ad67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c5dd2a-bf1d-4bfd-9eec-a2c3f0c962a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d949420c-d275-4cec-a6bd-4670dedd5372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f33de7bb-6589-4eb9-9db4-c4fd51108e05",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2dbe4cd-f1b4-4261-be6d-3ada772ced3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "701b3581-73da-41f4-82e8-63d60bc1bb0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac090fd8-4699-4749-9879-50ff3df82cac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bbea449-8ded-4044-957a-da9738cb5885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d2b27af-8702-4ef4-a164-7a3c519ec8b4",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef942f8-e3d0-4f9c-9c0d-8776c6230504",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37f4544e-bda7-423b-b5ef-035481b2f458"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4515d55-150a-4def-8eb3-e980ccf80384",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af4eee56-1829-45df-9b0a-c375c8b1df39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a51c004-7212-44ad-81e7-2219ab7f0d5d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d530e798-cbe3-4ab7-83c0-0b3cab417a40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41c843c2-4a9d-44ca-b7b7-11b108ac6b84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b276fcbc-bada-4d78-bb64-b7c7441314f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89492a9a-2e95-4eb9-b28e-41c8cac74f7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53adc988-f453-4fe1-aed6-3afc001f60b8",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d160507-e040-452f-80c1-67733b0ecfd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f1cf87c-834e-44e5-ba81-1f453bb25a9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "921935c8-4dc1-4aa5-92e4-8fd836f30493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc679c88-71d1-475e-a633-e037664d63d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7c42f96-13a5-4a16-ac92-12fb51b04b49",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86dbfaf5-1f8c-497a-8844-3dc20efc25b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f254f68d-5240-434b-b946-e200d6503b8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f128f1fe-849a-438c-8ed2-3dcc71a37292",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6db76e18-4dd6-4bd0-9414-5baa98284ff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0d4c912-8717-46a5-9032-dd2b2da12b74",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1923b252-f36f-43d3-b659-c547e2b3dc24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1813f497-5bed-445d-b224-3af10d866620"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99eda69a-7727-41d5-99cb-d6878eb9b7f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "412a75b7-ac10-4315-b5b7-0af49bf03747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a327dce6-2b5f-41b0-b470-f1819baa1f96",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1934998-6093-4d25-9e41-3c0a83b89cda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f7f6910-6c46-4d24-ae0c-9922a27f97c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a61b2ef-75f5-4cbd-b1d4-5515b28c7c17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f16e577-fad5-4a49-910e-8134604d85ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c89bee4-3f74-4153-bb04-50fb29c0fc06",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a05980-caa0-415f-8034-50d1ecbd5c4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4be70a5-6979-4860-8c8a-6c02cfb5e4bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ea9452-255a-4f72-b4eb-263cc612b095",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ab5159d-463b-467c-83a9-d5f865e711f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f257ac7-92da-4b43-af92-5cac4f243b4e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1154eadb-4f2a-4387-bfd8-fddc746f4209",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87e85c72-57e2-4318-aa2e-edf3787644d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40a2846b-ab7f-4018-8d7a-06311b61145f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0629602e-e861-4dfc-9497-82c8bcea1872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "907734b2-e3e1-4e67-9619-92294ec7f57b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0203ede1-0e8e-45a5-8924-1ec6bb343ae2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2f39d0f-e597-4839-be4a-da7f53873440"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "310e8eaf-249a-4a97-9ac7-7b2c70953f52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "157597db-c89e-4e2b-b319-09a77243bd5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99bf82f1-45ed-4e70-9090-3dfc69672f35",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b4c92fe-b042-436d-ab9f-a52c2c0a953b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2729002e-5403-4b68-a3ac-4327d37608a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e79ef1c-d281-449b-98f7-09a6e1a13815",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "957e115c-655e-4769-b276-da0d988c032f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df93738f-9b05-47ed-b637-da4090ecbba1",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f90f99d3-b050-4649-88a7-eb51fa51f2e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3044efb2-c112-46fb-b7fb-df84568a602c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21630898-31de-4917-afea-320b02dc3834",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2b6c594-896c-4e53-a87d-545a1e19c44e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9dba42-8548-4cff-9982-345cccc164e2",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5cf8dcd-1d2b-4648-8509-d04be712689b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30157d99-3e0a-47c3-8ef2-32082c8a5678"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb6e17de-b408-46d1-8a47-24f47109f535",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13e41ca5-c905-45d3-ac42-36afe00ce187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6e3ba3-6a78-4ed6-84f1-23e04b595d46",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eca4aca-e919-490e-8e57-b4026a362d66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40f48652-f476-4a9d-b46f-89d53edf309e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d872a9ac-ed2b-4119-b2ee-65422b71c7b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddc09abf-b6a4-4463-a663-a0ab352bff7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "649d2219-7f3f-4bdf-8a2e-a7c8eddd2ca6",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "327dedca-63f0-45b2-8f3e-3edbd498b800",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b1abf11-b987-4041-b8ee-2698cd76c4d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c2524f-a8ac-4225-a7fd-4fa4813e2891",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9100227-56d5-4274-9487-18ac57754569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1963c0c1-fa92-4f87-a905-5531da0cd781",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8972acc-8b41-4234-ac30-5ddd0d5264e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdc373e8-3072-4c68-9ee5-d43d4190019c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd24505a-7f3f-488a-9d14-94b1baf3dd1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6616938d-4772-4cfb-8140-31146e9272ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baf0336a-0ae9-4dc5-9eb3-6da2c9472d50",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "343cc59f-e558-46b4-bb53-f72264a04dec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c99256f1-2668-4d91-af74-518ca2e6603a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7848a808-cc44-4e78-91ea-4fd4553c938f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a2825ee-d453-41a6-a03e-256532fb06af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d0bf8e-98ae-442e-ba56-2a9451d52d72",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4400f122-24f9-40e1-bd0f-1f9c07856db9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0453e0f4-93a5-4a65-a18e-057089306576"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57ab248c-25fe-429f-805e-0db12353616f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34835eba-d5ff-4f68-9ed1-af450f3687ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b69681f-b0f1-4221-89ee-f968aaf93b72",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49958d62-19b9-4277-ade7-4d22327ab432",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5da26ed-8f0c-411c-9726-1bc3683d93ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fda261c8-643e-42cc-ac90-34e8af1d7009",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "409f5d03-5830-47c3-b1e8-5d6057444a6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "884a1004-2ec8-4052-ad34-ec6deebb6e04",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a45a4c60-9932-45d7-b52d-79d4cdcaa0cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ff3361a-9e9b-49a4-b3f2-a3e184738b4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d34f72-fe71-4282-b11e-375f1856580f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3f76dd4-69e9-41d4-8f26-ffd82272f739"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a3ad3aa1-f5c1-47c8-ac68-0b0808053e95",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "779cd7ee-3147-40fd-80e6-c6f4c9cc2d77"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7b974eb-8b19-4cc7-9e6f-1930ee850c94",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6ddad0ad-8103-4c60-a666-6a8bc6d15e2e"
                    }
                  }
                ]
              },
              {
                "id": "a1221b90-f45b-48c3-9832-adf69274a353",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b146f1d7-60b2-4d11-86d1-ee24e1e5203a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3cb7dad-0d8f-42fd-ae7e-50a8c5387824",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3cea407c-e6c3-4100-a1d7-5465fb6c6770"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e43217bc-6ad0-4eee-8e94-ce3672b5ba28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ffc3455e-104c-46b1-a688-4ce41b271c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc170e0-10b0-4d30-afa1-95a64a0570f3",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4785c987-95b3-443c-8447-051dbf223ef9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ceb05943-fec2-42b1-8c14-8944cc7cf962"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e868a6-f0cb-45bd-bf4a-436e79ef88e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aa4092eb-1c03-43a7-bd1f-adfd51c166bd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f6b307a-ab67-4272-9a85-149fb7475e3c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9363588e-2b31-40c5-a8c3-ce6b4b73c022"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fbba61bc-e8a6-4ea7-a661-404e3ac9c006",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "77472795-a44f-439f-be9e-8ddad98aca46"
                    }
                  }
                ]
              },
              {
                "id": "7d566328-2ea0-4f21-b38d-4e7936357073",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "7ba9f331-76dc-40d1-b9c5-aa952ada41bb",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcfa7ca5-a4df-4c53-be55-8a1304b14a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "318c0787-7066-47b1-90d7-0879e0a9362f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9d3ed5e-f6f4-42c6-93f6-bf1d48e1c28b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "353c1620-eb87-4c9a-ac1c-268deb082868"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cde34120-3aa5-4ef3-a3a8-221be97437f6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9ce27800-13f8-4559-8d5b-b91b768b362a",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d112871-fc1b-4e0c-833a-93648c3c3793",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "69e3a11d-4def-4902-9bbc-405c540b22d7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9869b7f5-5f99-4813-847f-7034405096a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60020448-663d-4bce-bd30-776dd456d778"
                    }
                  }
                ]
              },
              {
                "id": "ed90954c-19dc-4a90-81ac-394c2c4a9d46",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "118572f6-3ea3-4f0e-9842-bdd72eb476c0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6c5d85bd-03c6-4f40-b737-29f802d6a664"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "49f1a1e0-e583-4882-8327-7eeb76cb5005",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ebb5fd6-1fb1-46f5-848e-44df27c4dfd4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "50c75749-5c8a-47a2-bc02-139120f03761",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "9af137e2-f679-47c7-a07d-85afdb639ef1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d86b8a05-1f15-4264-bd91-647adf93a025",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4d72e130-cb9b-45e3-a7dd-d9cdb6b0b281"
            }
          }
        ]
      },
      {
        "id": "c3d15087-2cae-43ca-8906-699b10977cec",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "d62cf33e-0341-48df-badc-f3adf9a4e515",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d2c9e6e6-bcce-4fcb-a5d4-2829af1128cf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "20e4cc6e-6bd3-41a6-adc4-ac4c1a2dc7a4",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93bdfb3f-7b9d-4844-9eb5-04a63f05ea9c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4dc757cc-c6fd-407e-904d-494de0e76d8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bd86371-d64c-4466-b0ae-afcaac91aa31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "289d0b5f-e67d-40f8-81fc-e2e5127db70c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0d10281-1010-480a-9556-aa6c4341b5e9",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeaeb038-ad4b-47da-b6fa-68e1187d1d2e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0be2566f-8250-485d-91c5-667428e607ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0be80f7-eb68-4826-9801-5f7d90a338da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9378a1f4-0431-4d98-be0c-c9f0b1e1e933"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b53a043-f5bc-4eed-95c5-d939324612e1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c2297e2c-0604-4217-b4cc-3a567bde6eed"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4c414ad6-22dd-4632-a645-f8f2fc19a6e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a501ea3-ea76-4c78-96a9-c65e01c0a096"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6c508207-a3dc-4565-8626-7bb749eb27b3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9a2d885f-6960-4ea9-a640-66bf4a3602cd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7853eb89-e276-4d79-af5b-bb460f95d5dd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b02d8926-4587-45e6-8811-f58b5fd81b10"
            }
          }
        ]
      },
      {
        "id": "e6239e68-4525-4d8f-8c2c-16a95fed5c11",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c267fb99-53f8-412f-92ff-5b912dcd73e1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3d62ac04-342f-4fe3-86c9-96381aa17022",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "64a8c49c-efea-452e-affd-db319a66d51f",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32fcbce2-dc83-44c8-a681-9d28db2d26d7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32d7c6ec-2314-4055-9aa2-08724761586b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a99bbd-7ce2-4bc4-a8d4-e09f001da7df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "29c08ad7-c56f-4885-88b0-9907bc190cd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a24838b8-3c1f-4056-acba-ad392a82ed27",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb260565-78b6-44c6-8dcc-183341766aba",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ecaabbcc-ec6a-47c4-8432-77c63f73f037"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c30107d2-4c16-4e12-b6c3-7712d964d0d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f9f50d1c-4dc6-49bb-8b39-fd2493280502"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dfd89051-4346-49a2-953e-98800f95083c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b9cf1cfd-60ad-4beb-86fd-09ec0a501876"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b2664ce-b704-4351-94b7-1ba24ce2f20b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f2b86a8d-0f43-4f60-ae42-61d6fafcd54c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "99fc4ab2-35bc-4534-9193-528b487a8b70",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "05369fc2-aeb5-4610-9aa4-29562306a281"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "96d907cf-2a6e-40bd-a36e-49554dd7555f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "961d8758-e69a-4ef3-bf97-9f5028dfe83d"
            }
          }
        ]
      },
      {
        "id": "e25cfaa3-e061-4552-aff9-64947dbb1281",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "975bff3c-0453-4f13-a3fb-d562f4d92837",
            "name": "Negative Testing",
            "item": [
              {
                "id": "387d715d-62f1-446a-a4ed-3694ecb07ad7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dc24c1a8-6352-44e1-b3b3-4236fb7daa37",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e79f2b5-ca5f-4912-891b-a65fc313d1ec",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fdc1fca1-5264-43ad-b8ae-dee9c4bd8a91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d62c5616-c9fd-4be1-a140-d0db11ce7776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "54370bce-4412-40dd-ab1a-c9d7beb973df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d554115a-ebfd-4510-8afa-0b30fcf6d4e1",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14f82e90-9e67-4d44-8beb-de190488fc46",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "69964f0e-6db8-4b65-a4b2-bd1d7ec974c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace1aea6-07c9-4071-92cc-34b5f3dc2ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7f72c617-3248-4365-a5eb-fff2909620fe"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "15ac5f07-eeb4-4073-a565-fe0b2cc1bfbc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8bbdcc11-dc6c-452a-a2c3-63468c1144e6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ede1b90-c287-45ad-b4d0-5f50dd81fc62",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6377fdf7-bc5a-4953-9139-8cf641e7ea14"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "181e3d86-d1fd-4577-b668-077da6aa29be",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7a198733-052a-4dd1-968f-7a1d3d332855"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5478ef6d-b725-4810-80b2-2d6c5a637d30",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4faad56e-c802-4ce4-b675-ec29df19c835"
            }
          }
        ]
      },
      {
        "id": "189bdcf1-4062-4cb4-816b-7f09667e5d01",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d63f1e4d-0b30-4c99-b188-6536074ebeb1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c7251b08-160c-4ad3-8ccb-cbd812e6c895",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "bee145de-1fa2-46af-9984-cadfab8a25f8",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8ea4e8b7-d0cd-4417-aac8-b70480566921",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f5c95f2a-6ba3-4be0-ad76-e8532f05cd03",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 224.53076923076907,
      "responseMin": 10,
      "responseMax": 3976,
      "responseSd": 676.7344347726815,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1679186587300,
      "completed": 1679186656277
    },
    "executions": [
      {
        "id": "80e7825d-b417-4fca-9372-2ac4dbad8120",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e4830108-b26a-495b-9c27-78e3503c8109",
          "httpRequestId": "648bdba1-b3ca-482b-8933-15ce4630d18a"
        },
        "item": {
          "id": "80e7825d-b417-4fca-9372-2ac4dbad8120",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "7bcf21b0-aa65-4014-a0ce-d35012b7f023",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 0
        }
      },
      {
        "id": "85fe1dde-5769-45bf-a41e-8d99e2daf165",
        "cursor": {
          "ref": "953c829a-f8a1-4153-8395-2d54585f751a",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e14eeebe-745b-4e29-834b-f226e383a583"
        },
        "item": {
          "id": "85fe1dde-5769-45bf-a41e-8d99e2daf165",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "8d71f386-4b46-48d0-b6ab-3a65d4ace2d8",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 0
        }
      },
      {
        "id": "0dbf2f1b-5ab7-4448-be27-fb66bb746d80",
        "cursor": {
          "ref": "1a4d141f-a227-4d35-a96a-a4c0998dd261",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b153dfae-7fb2-4d9b-ab3d-653cf3c1403f"
        },
        "item": {
          "id": "0dbf2f1b-5ab7-4448-be27-fb66bb746d80",
          "name": "did_json"
        },
        "response": {
          "id": "07e3173a-1ceb-463e-9f0e-a14f27ef066a",
          "status": "OK",
          "code": 200,
          "responseTime": 204,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ace2c05b-41cf-4c2f-8320-9d13d4d0fa6d",
        "cursor": {
          "ref": "158b370e-63f4-426c-a59a-9a9f5f9dc81c",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1462c82b-3587-4585-bfe1-6815956cb034"
        },
        "item": {
          "id": "ace2c05b-41cf-4c2f-8320-9d13d4d0fa6d",
          "name": "did:invalid"
        },
        "response": {
          "id": "2558a98d-59a9-4a56-ae9a-b2d69cd83ce2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1064,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "ace2c05b-41cf-4c2f-8320-9d13d4d0fa6d",
        "cursor": {
          "ref": "158b370e-63f4-426c-a59a-9a9f5f9dc81c",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1462c82b-3587-4585-bfe1-6815956cb034"
        },
        "item": {
          "id": "ace2c05b-41cf-4c2f-8320-9d13d4d0fa6d",
          "name": "did:invalid"
        },
        "response": {
          "id": "2558a98d-59a9-4a56-ae9a-b2d69cd83ce2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1064,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "05d0ba4c-2bea-4da1-bd81-a7229be39395",
        "cursor": {
          "ref": "fe9cb136-20a2-4479-aab0-10dd5915acfa",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a779c1a8-8d9e-49c5-859f-554a0d3beda1"
        },
        "item": {
          "id": "05d0ba4c-2bea-4da1-bd81-a7229be39395",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "c29cdd82-b809-43e7-9779-9e23559a94c7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 24,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b413f5c1-9ab6-413d-9dc4-7ec54441500e",
        "cursor": {
          "ref": "494a8df4-1371-4e38-b885-95a4071c3ce7",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "1173dda1-b248-411a-b868-abb565f9c03b"
        },
        "item": {
          "id": "b413f5c1-9ab6-413d-9dc4-7ec54441500e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b8254656-250d-493e-88a8-d71b917a5cb1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 24,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b148969d-2f1c-4fa3-a00a-13a77c87f63a",
        "cursor": {
          "ref": "9cf1bf2d-4f9b-42d2-9e5b-3dbdc3fa1539",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "eca8d20d-4208-4814-8e52-f08b94cff65c"
        },
        "item": {
          "id": "b148969d-2f1c-4fa3-a00a-13a77c87f63a",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "fc0cb8d6-a9b5-4c67-a6d6-e995b99bd35c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "877d5f8e-0779-49f5-912f-a4fc39fc32f6",
        "cursor": {
          "ref": "5bdc18ee-acb7-498e-9a9f-b1e9a9be169c",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6e22622d-f203-44e5-aa64-9e2f61b8137f"
        },
        "item": {
          "id": "877d5f8e-0779-49f5-912f-a4fc39fc32f6",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1c41d770-a764-4d19-b97d-491c345f59c8",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "877d5f8e-0779-49f5-912f-a4fc39fc32f6",
        "cursor": {
          "ref": "5bdc18ee-acb7-498e-9a9f-b1e9a9be169c",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6e22622d-f203-44e5-aa64-9e2f61b8137f"
        },
        "item": {
          "id": "877d5f8e-0779-49f5-912f-a4fc39fc32f6",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1c41d770-a764-4d19-b97d-491c345f59c8",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "37985265-b04d-485a-abaa-f97b9198b08b",
        "cursor": {
          "ref": "29e1b807-75d7-4c5f-8456-6e94c48673ab",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "09fdd53f-7abb-4173-aa71-c1a6c2bb4efb"
        },
        "item": {
          "id": "37985265-b04d-485a-abaa-f97b9198b08b",
          "name": "identifiers"
        },
        "response": {
          "id": "53797b6e-c392-462e-b7b2-7a82149e08c1",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c4d2335-4547-494a-89d9-c679d3c7024c",
        "cursor": {
          "ref": "60388127-cbf9-42ca-86a8-aff052d76063",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f276b0a7-1649-45c2-9b5f-5d3ab32b96ec"
        },
        "item": {
          "id": "6c4d2335-4547-494a-89d9-c679d3c7024c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e80b6041-0536-4a5a-9300-6e821bbbc00a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c4d2335-4547-494a-89d9-c679d3c7024c",
        "cursor": {
          "ref": "60388127-cbf9-42ca-86a8-aff052d76063",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f276b0a7-1649-45c2-9b5f-5d3ab32b96ec"
        },
        "item": {
          "id": "6c4d2335-4547-494a-89d9-c679d3c7024c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e80b6041-0536-4a5a-9300-6e821bbbc00a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40dbb9b6-089a-44a9-bfeb-2b39cce66e73",
        "cursor": {
          "ref": "5c72097a-ba4b-4c63-a6eb-01fb3fe13691",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "42771ff7-059b-4c3f-8f86-bb98931eeafb"
        },
        "item": {
          "id": "40dbb9b6-089a-44a9-bfeb-2b39cce66e73",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "32c26242-a962-4843-8671-7159b72741a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20a26107-3d21-4797-a33d-9152b97e7ba5",
        "cursor": {
          "ref": "6cff921e-ad7e-4a72-8fdc-bc3f6d7b5e2c",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "63ad1739-49e1-4dcd-b7db-723cd1171fb0"
        },
        "item": {
          "id": "20a26107-3d21-4797-a33d-9152b97e7ba5",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "ca1bb151-166e-49b9-8e91-7b7488e2a9df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24d1ca65-c0c9-450d-bd9e-f8699d0230b2",
        "cursor": {
          "ref": "f69654bf-6fed-4a03-ac9b-8341aa3c126c",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d5accef7-aeda-4451-a083-d1e512d95c31"
        },
        "item": {
          "id": "24d1ca65-c0c9-450d-bd9e-f8699d0230b2",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d57b5f7a-9e0d-4f82-a460-e2339fffe340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc65e6af-12a1-4237-8b3d-797ea6bc9ec8",
        "cursor": {
          "ref": "7564aae7-d1ac-42c0-9164-da0a3020b6f0",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a2b482a6-a38f-4982-b8a3-b7e2b27f4598"
        },
        "item": {
          "id": "bc65e6af-12a1-4237-8b3d-797ea6bc9ec8",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "aaceb7f7-e559-4082-9b96-bd6a7b6d2584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d02f1bb-b41a-4fe9-94d1-c9ba1d99b3aa",
        "cursor": {
          "ref": "2fdfd354-a2f0-43eb-8d5e-c2e15bfcc835",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "0d53f58f-e443-4e91-81bd-88fbc26ffad2"
        },
        "item": {
          "id": "7d02f1bb-b41a-4fe9-94d1-c9ba1d99b3aa",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "3cfca5bc-c44b-4cb5-91bd-a4287c68b8ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4148f4f-2555-404e-9e4e-df8c37c30e41",
        "cursor": {
          "ref": "0e9cfd65-984f-4062-b763-8991755078ee",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "630dbca1-ca01-49da-8b79-d74418e1da61"
        },
        "item": {
          "id": "d4148f4f-2555-404e-9e4e-df8c37c30e41",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c5ce36ff-ffcb-4840-8818-ce7e3097d84d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d6e5f0-968c-42eb-b0b7-d1bb6a1ac085",
        "cursor": {
          "ref": "100c9ffa-82c0-4c22-900f-72c2a287f162",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3c208209-6cfd-47ec-8718-e53313068d56"
        },
        "item": {
          "id": "10d6e5f0-968c-42eb-b0b7-d1bb6a1ac085",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "04539e0c-b106-4e2f-9d21-c51bc7853977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff26bec-4371-44e1-98a0-d9a3fe527cd6",
        "cursor": {
          "ref": "dddf4e6a-ef96-44ce-afb7-f74e475b9406",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "80b1adb9-f7f5-4776-84da-b34392509e2d"
        },
        "item": {
          "id": "9ff26bec-4371-44e1-98a0-d9a3fe527cd6",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "523aebca-3643-4904-aaef-43c8edecf15d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb0e8fac-c53d-4f20-bb51-3366b04d2c94",
        "cursor": {
          "ref": "64bc8c84-ea0b-44b9-8189-101804ce82b2",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "fcafbd3a-4560-42c0-a048-37ef2a3a4591"
        },
        "item": {
          "id": "cb0e8fac-c53d-4f20-bb51-3366b04d2c94",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "8c94ef7c-33cd-4055-9ab5-d7e46932fff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5abe791b-7195-47fa-ac1c-a1d8e7e20254",
        "cursor": {
          "ref": "2b366a5d-7825-4e35-a3d4-c2fbcc764e93",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d847a2ce-6920-4c12-abcf-8e2193d25381"
        },
        "item": {
          "id": "5abe791b-7195-47fa-ac1c-a1d8e7e20254",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ca0d2c4a-91ba-4979-9281-379423389436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b32fdf1-2915-41f0-a98f-c77004001b7a",
        "cursor": {
          "ref": "4f358c0f-1abf-494e-8cee-5af110a5a7c0",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "e682576b-ca6f-40e4-9cef-a8a1424ee81d"
        },
        "item": {
          "id": "7b32fdf1-2915-41f0-a98f-c77004001b7a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "2679e1af-ea12-4ef5-a105-b17feb2ed92b",
          "status": "Created",
          "code": 201,
          "responseTime": 1245,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "64fe3ecd-bfae-402a-b904-53a532472ecf",
        "cursor": {
          "ref": "8e1339da-93bc-480c-8eb0-15bf727d4c71",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f88d38b7-3249-41a2-89f5-77756efc5944"
        },
        "item": {
          "id": "64fe3ecd-bfae-402a-b904-53a532472ecf",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "77e15d79-bee2-405a-97dc-5712c04cc9ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9385e1e6-7438-49c1-ae3c-806304076160",
        "cursor": {
          "ref": "63124c1c-cb4f-49f5-bdf6-9e2f110a3813",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "04e09a7a-fa67-4f70-ac2f-9a07e5d1d238"
        },
        "item": {
          "id": "9385e1e6-7438-49c1-ae3c-806304076160",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "39a5c66b-20bb-49d0-8a26-a14f2b73f09f",
          "status": "Created",
          "code": 201,
          "responseTime": 3960,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "102304e0-2e1f-4e07-af98-b42dece3ab1d",
        "cursor": {
          "ref": "15de424c-4633-4897-a466-ba4b628d4476",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d2c0ca8c-7cca-4e45-b2e0-b3f323c3907c"
        },
        "item": {
          "id": "102304e0-2e1f-4e07-af98-b42dece3ab1d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "bf48b4fd-8c94-4d54-a36e-e8b465187238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85c2ec5a-2aa2-4a78-aa38-f424efc18585",
        "cursor": {
          "ref": "665f1445-7c39-459d-8a63-fcf3e13e1c8c",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d674b9da-2a66-4c08-97be-6f1622192208"
        },
        "item": {
          "id": "85c2ec5a-2aa2-4a78-aa38-f424efc18585",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "43ad97c9-54f3-4d67-96cf-48320cea523d",
          "status": "Created",
          "code": 201,
          "responseTime": 3976,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "cef7817d-1224-4f12-8b2b-e03bb331ab60",
        "cursor": {
          "ref": "e583c7b6-374b-4a3a-b2df-b00c72150ea4",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "da31560d-6573-4e8b-bf11-1542ac022396"
        },
        "item": {
          "id": "cef7817d-1224-4f12-8b2b-e03bb331ab60",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "0174ec80-38bd-4d7a-9e9f-f457ab7b9d4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d62cb627-3705-4eb1-8814-2ad3111f6cd6",
        "cursor": {
          "ref": "2509b86c-fb23-42d1-b1f1-7fd0ed35bc6c",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2ddbfcd0-faee-4ba2-bde5-bbd18218dc6e"
        },
        "item": {
          "id": "d62cb627-3705-4eb1-8814-2ad3111f6cd6",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "164e23a2-a7fd-4ef1-b273-3e7d1fe08dca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34c4557b-9cbb-4719-8839-9b8ad4703ef3",
        "cursor": {
          "ref": "06792e9e-aa9e-4de9-bb0c-7f38bf2d46ba",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a9a7f948-8407-4a2f-aec6-6be423e16072"
        },
        "item": {
          "id": "34c4557b-9cbb-4719-8839-9b8ad4703ef3",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "1a72b42e-7cad-432d-8b18-f248a1feef67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d45e2d1d-5195-43ac-83ce-0b7f789bc0d5",
        "cursor": {
          "ref": "05b78232-1849-4a9f-9a93-e1b6ae2402fd",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "aa0756df-226e-4942-960b-ce9640f3ca6e"
        },
        "item": {
          "id": "d45e2d1d-5195-43ac-83ce-0b7f789bc0d5",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "8531eec7-ccb3-4ee2-b4dc-624d6cafb7b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e977d1e-11a7-46be-a56e-a0c0fb981850",
        "cursor": {
          "ref": "d57a26a8-8e00-443e-a7a3-4c6b8d99d995",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "06542f3c-5d91-4770-99b5-b6df6e1ce50c"
        },
        "item": {
          "id": "8e977d1e-11a7-46be-a56e-a0c0fb981850",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "d64b99cb-9206-49f8-a5a2-d923727bd87b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a87dd6fd-f3c2-4dc6-80fd-c7caf5d6a239",
        "cursor": {
          "ref": "f74fafc3-c7e2-4f64-9d0d-d485c954cde5",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a980bb4e-9801-46fd-9967-b9ec3b9b005c"
        },
        "item": {
          "id": "a87dd6fd-f3c2-4dc6-80fd-c7caf5d6a239",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "6c1ac716-e1a0-40d7-b96b-233ed4d4a8e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b8372c-7b3e-4f9a-b84a-94a8e4dba8df",
        "cursor": {
          "ref": "2088fc11-e978-4094-a65e-7e51865cb0a8",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "6ec1a150-18e1-4481-85da-ed09e1dfb3e1"
        },
        "item": {
          "id": "c5b8372c-7b3e-4f9a-b84a-94a8e4dba8df",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4d5c1325-2362-4617-a404-0ee45f9f104d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c12c12a-5b66-4f38-baf2-8411e0002752",
        "cursor": {
          "ref": "7e1ca180-624b-421d-8b77-c1c08affbcf7",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1c34079b-f8fa-4131-b35c-210b9195b81b"
        },
        "item": {
          "id": "3c12c12a-5b66-4f38-baf2-8411e0002752",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "05cba7af-e695-4539-ab92-c48a48a07360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca67ba86-4b84-4113-a4f0-f661ce195efb",
        "cursor": {
          "ref": "4f3ea2df-ed5e-423d-8190-3a30073e8271",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "67b29bb6-a4c7-44f9-8933-efef55ae5372"
        },
        "item": {
          "id": "ca67ba86-4b84-4113-a4f0-f661ce195efb",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "057a4e9e-20f7-42a5-908c-ed8ad7ef2b69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "757c1079-718d-4d4d-931e-1442b271eda3",
        "cursor": {
          "ref": "9c596bdc-407a-4ff6-aab7-0df2b8b02a67",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "954e20c4-2d9a-4400-b3a1-e094df18aecd"
        },
        "item": {
          "id": "757c1079-718d-4d4d-931e-1442b271eda3",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "2d0ae728-fa4f-4622-b0ac-000d19c1c108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca979b9d-d1de-408b-8e3d-9fe002623aef",
        "cursor": {
          "ref": "60c80faa-33f7-484d-a97f-5edb13723089",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2faafa7e-2f0b-430c-8ede-e3500316fc4d"
        },
        "item": {
          "id": "ca979b9d-d1de-408b-8e3d-9fe002623aef",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "dfc88b4e-55bb-4f49-9bde-5e8df5aa6b54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25f70828-9322-4731-b2ad-d8bd018b89bf",
        "cursor": {
          "ref": "b3ac2d91-faf1-4a14-b5af-2140c7a18c62",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "0a1d77d7-b41b-4997-b610-3b1904a7af01"
        },
        "item": {
          "id": "25f70828-9322-4731-b2ad-d8bd018b89bf",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "089aa92b-0e27-4bec-8f22-c512c116fe2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3544434f-53ca-463f-b970-66e4a5b0af63",
        "cursor": {
          "ref": "96e2da82-cc13-43af-a798-98edc96a67dd",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "8ba284df-c9eb-417c-8a09-cf86212717e4"
        },
        "item": {
          "id": "3544434f-53ca-463f-b970-66e4a5b0af63",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "22df6c64-053e-4105-9d73-e32e1f7468df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3cc701a-a379-404f-a768-f0f605829e65",
        "cursor": {
          "ref": "12040b2d-3f42-4c3f-a883-1fe8cbbb8b13",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "635c7164-f93b-404b-ba8c-0240f41939fd"
        },
        "item": {
          "id": "a3cc701a-a379-404f-a768-f0f605829e65",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "0131faf1-ff0c-4957-b3c5-9c4fcd0d4b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58cbe59d-3347-4a36-ab12-b44e005be315",
        "cursor": {
          "ref": "dfe8a54f-086e-4bed-9a23-b28e7497f9ba",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ffc599e3-998a-40b5-bb4a-26a43f21ea2f"
        },
        "item": {
          "id": "58cbe59d-3347-4a36-ab12-b44e005be315",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "162e9707-9a7b-41f3-8d0b-82574881b3ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd346d43-4a10-49e8-a35d-9a1c67825b17",
        "cursor": {
          "ref": "2d90a3fe-0608-4869-b279-27f214b70487",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ef367b24-8b50-448c-8416-4763cdf9043f"
        },
        "item": {
          "id": "bd346d43-4a10-49e8-a35d-9a1c67825b17",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "044c018b-1d27-4e3b-9f29-73ef14b0c3ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d88cae2-9fac-4bc5-9d33-67158d0e3993",
        "cursor": {
          "ref": "8e28bf2a-d3a3-465f-a3ad-8401828fb0d9",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "9f853ab1-b968-4840-8e96-0c5699244f9b"
        },
        "item": {
          "id": "5d88cae2-9fac-4bc5-9d33-67158d0e3993",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "371e198b-04bc-4f46-b2e3-b3a541adce60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e21ab64-a32a-4894-b0f8-f15b8aaace27",
        "cursor": {
          "ref": "0ed5dc89-0707-4d8a-8517-a56c35bcdfd9",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "3c5cc3ed-299d-4bd6-89fa-d340db2058f4"
        },
        "item": {
          "id": "4e21ab64-a32a-4894-b0f8-f15b8aaace27",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5d413d8d-9c9a-4447-b51d-dea2727d9d99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4f17078-1b78-4af4-921d-b964d89bf6fc",
        "cursor": {
          "ref": "ef7b06b8-8004-4b56-aa04-943ceed73b74",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1eaeeb07-1473-445b-b687-a77352f50150"
        },
        "item": {
          "id": "a4f17078-1b78-4af4-921d-b964d89bf6fc",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "2c2f7c91-5bd5-4ebe-a521-9c5a294a613c",
          "status": "Created",
          "code": 201,
          "responseTime": 2572,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "ab9465c4-46a9-46d4-aecb-76f487baeceb",
        "cursor": {
          "ref": "b6f49a74-288e-4772-8298-770508f1e6cf",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2817b9ce-e7c1-4fa8-bdf0-6a783b7e0fa2"
        },
        "item": {
          "id": "ab9465c4-46a9-46d4-aecb-76f487baeceb",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b0b6cdfc-0a56-4d7c-8f14-590597bfce09",
          "status": "Created",
          "code": 201,
          "responseTime": 2730,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "b6433790-3786-4302-a774-82bde50bfd23",
        "cursor": {
          "ref": "ecb005e6-a52b-4221-927a-00f40b4b1e27",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "85819287-a106-474b-bd33-ca6c051f0cc9"
        },
        "item": {
          "id": "b6433790-3786-4302-a774-82bde50bfd23",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "f5c12359-514b-4e09-8fd7-bc3889f3d821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "792fa999-356a-4605-8d45-7394d3949253",
        "cursor": {
          "ref": "43ceb315-86cd-42a4-bd64-474509fa26a2",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "fc737f94-6398-4423-a573-64ba2ca6f0d7"
        },
        "item": {
          "id": "792fa999-356a-4605-8d45-7394d3949253",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "ab2579d7-6cba-46ce-89fe-97a6bb8a72ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa22468b-d70d-4040-88b4-59d061f46acd",
        "cursor": {
          "ref": "5f89db1b-54b9-4916-a4d6-da494310c614",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "84a547da-d777-46f5-a68f-606f3b6fc006"
        },
        "item": {
          "id": "aa22468b-d70d-4040-88b4-59d061f46acd",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "50c48dae-3532-4cac-8bfa-e4edb67c94bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fcedfa9-0a39-4f0c-a9da-898efe2c65a7",
        "cursor": {
          "ref": "1019aa2a-45b2-4e71-8590-973bcf0e3a81",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4dc35004-636c-4e95-86a4-1853e0ca3771"
        },
        "item": {
          "id": "5fcedfa9-0a39-4f0c-a9da-898efe2c65a7",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "8d6c3eb9-e34e-4e47-9661-40513a48b1c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b3d0125-b272-4bfb-9d7b-2a47881c7bd6",
        "cursor": {
          "ref": "8fb22532-f9a8-4b05-83ff-ab2879ed82ad",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ba274627-c426-46d8-9119-8f288af9013c"
        },
        "item": {
          "id": "8b3d0125-b272-4bfb-9d7b-2a47881c7bd6",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "7a5bf0b1-d1ef-4c78-8357-150d2be8cfaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "700a583e-d128-4c2a-9652-6d28f56948b1",
        "cursor": {
          "ref": "6a299831-57aa-47e7-beb7-06137a8c8e8b",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "be8d1b5b-0166-4b31-9b02-58b7498b77ac"
        },
        "item": {
          "id": "700a583e-d128-4c2a-9652-6d28f56948b1",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "3c19fa87-8673-455b-a4bb-d3737a2f72eb",
          "status": "Created",
          "code": 201,
          "responseTime": 2568,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "af7dc92e-1dec-4323-b0a7-d72c8e1948e5",
        "cursor": {
          "ref": "66405137-6218-49ae-b4cb-df74a39a14e4",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "8f2d3dd7-fa3d-4be2-a041-480c517d16df"
        },
        "item": {
          "id": "af7dc92e-1dec-4323-b0a7-d72c8e1948e5",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c9b8ccc7-8503-4702-a075-5a675e19bf53",
          "status": "Created",
          "code": 201,
          "responseTime": 2765,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "7b99c76a-dd0f-4719-a904-2d05fcda1e92",
        "cursor": {
          "ref": "122b2a86-82ab-458c-884e-1f5aa7c9cebb",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "bff92649-6adb-4c4c-9ecf-5adfeebd58d0"
        },
        "item": {
          "id": "7b99c76a-dd0f-4719-a904-2d05fcda1e92",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "3f410b2d-6019-4f18-81cf-a7c5cfb74995",
          "status": "Created",
          "code": 201,
          "responseTime": 2600,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "4b8a9ae2-fe04-4b53-a5a0-ee0ef29512ef",
        "cursor": {
          "ref": "a1e66854-5245-4902-bd67-c55e049cb84d",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "bbf86e0e-fc4b-4db8-b750-e3956b31372f"
        },
        "item": {
          "id": "4b8a9ae2-fe04-4b53-a5a0-ee0ef29512ef",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c47eb0ff-2c92-4d04-861f-0469ea5aba3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02b4aab1-6dac-4cb1-8e46-9e36664b8816",
        "cursor": {
          "ref": "edf3b0cc-79d9-447d-9a86-811a9325ada4",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "5e002aaf-dd96-49bd-82bb-36c761e6883a"
        },
        "item": {
          "id": "02b4aab1-6dac-4cb1-8e46-9e36664b8816",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "339793f4-ab91-46dd-8fcf-2dbc5d93f1a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2942ec23-b014-445d-898e-6cf3c1559ff4",
        "cursor": {
          "ref": "29e10c33-0fca-447c-a16f-a29f99b01cbc",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "fdbc4361-7ebf-4931-8b4d-f2bb89ecdb15"
        },
        "item": {
          "id": "2942ec23-b014-445d-898e-6cf3c1559ff4",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ede20300-15b4-42ea-ae29-5e110350b37a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2795d693-c086-4405-ab28-f113303071be",
        "cursor": {
          "ref": "be72ba1f-a263-475f-a845-7095d22a6718",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "26d2588c-e8ea-431c-95bc-e95c476c2680"
        },
        "item": {
          "id": "2795d693-c086-4405-ab28-f113303071be",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "75e23df2-f0ab-4fc4-991f-598098a76947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47bd90f8-6996-4577-9ce8-163fb6af4104",
        "cursor": {
          "ref": "020a811e-2378-4877-8565-2b31f09b90c1",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "9391429b-5224-49e3-bbb2-0b2c3d9659d1"
        },
        "item": {
          "id": "47bd90f8-6996-4577-9ce8-163fb6af4104",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "4401c85c-4f55-4128-b085-2d1df912f239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0faa6669-a78e-4e97-9d69-7c5e317cc52c",
        "cursor": {
          "ref": "647c569f-7b90-4282-8e61-1264341e3121",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "034f306f-4732-4c65-af30-1d3ef1208f08"
        },
        "item": {
          "id": "0faa6669-a78e-4e97-9d69-7c5e317cc52c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a44a4dd2-522a-4bd1-930f-c549f1963dfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b287a38f-0dd9-44d8-9109-e4964fb8f126",
        "cursor": {
          "ref": "e6635bb4-26bc-4e74-9834-3f636ca9c3b9",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b802bf59-869b-4f9f-bd34-a346abf971e9"
        },
        "item": {
          "id": "b287a38f-0dd9-44d8-9109-e4964fb8f126",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "38defb30-6412-44f4-bac1-98f5cf151b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a826a5-e785-4975-86d3-b8393d7b5426",
        "cursor": {
          "ref": "e7b145eb-8c51-401a-acd9-14a447ca9461",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "679eb1f2-debd-4fea-846a-c354a9c9c6d2"
        },
        "item": {
          "id": "41a826a5-e785-4975-86d3-b8393d7b5426",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "07e8051a-fe4e-4c7b-964e-b95493e48d61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70be9782-1d2c-489b-b5ed-5f9047faeb8f",
        "cursor": {
          "ref": "391fec77-76e4-407f-baa2-aa4296f39bc7",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "37955ecf-6506-486c-aa19-6dd95eb72d48"
        },
        "item": {
          "id": "70be9782-1d2c-489b-b5ed-5f9047faeb8f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "65980e80-8633-4ec6-a18c-5ce6b11bc260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e9d0022-d493-4582-855a-1b91a3aa8b61",
        "cursor": {
          "ref": "4a1f9c76-fb88-4504-af23-f1d950a7b3a7",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e26034dd-f99c-4199-a680-4135d266381f"
        },
        "item": {
          "id": "0e9d0022-d493-4582-855a-1b91a3aa8b61",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "c87b7fa4-e108-45f2-9e74-ae61c2b3a999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1fbdd91-28c1-4371-acc7-3e8b23d8ce43",
        "cursor": {
          "ref": "af3ab08e-55b2-41a1-ac5e-7c089a350ebf",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "00842add-30bb-4733-8811-f8b66db623a2"
        },
        "item": {
          "id": "f1fbdd91-28c1-4371-acc7-3e8b23d8ce43",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "fb1369ba-1ed5-4fbd-9a0e-3a772c9b01c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6efe6bff-8ac9-4aed-abf0-f76c075c17d4",
        "cursor": {
          "ref": "06cd65e1-2b11-426b-9b53-b539c9fd417f",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "89259df8-1958-4412-b476-155ece093192"
        },
        "item": {
          "id": "6efe6bff-8ac9-4aed-abf0-f76c075c17d4",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "c25e9222-a437-4f6c-88e5-42dbaa52ed4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abd873ac-dab6-4039-b836-88be893d5e2e",
        "cursor": {
          "ref": "6fee09c8-f434-49b6-baea-e886be2ff03b",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "14101a4a-055b-4d10-9c5a-d9fc59590757"
        },
        "item": {
          "id": "abd873ac-dab6-4039-b836-88be893d5e2e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e54d38ae-1636-47b0-bab4-89e22d01695b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d40e0b72-1898-4077-b81c-e6db98dbc8fc",
        "cursor": {
          "ref": "ad523dd0-b7a2-4842-a1b2-8e2f9ab17dc9",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "95d8911c-9fd3-4074-baec-56a8b3e498aa"
        },
        "item": {
          "id": "d40e0b72-1898-4077-b81c-e6db98dbc8fc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d0642667-13ef-4602-9e2b-ee81512987fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eafc6252-ca7a-4064-97fe-b7a1a1fdfe43",
        "cursor": {
          "ref": "fc2d5e3a-85f4-4294-888c-8843cdcb87e3",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f5543701-9b4b-4dbf-a8a3-316c4f400b4e"
        },
        "item": {
          "id": "eafc6252-ca7a-4064-97fe-b7a1a1fdfe43",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a2cbc18a-9e88-41b9-9824-3098d1c739ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34ce24a0-459d-40d5-ae1e-a6d05b1310ae",
        "cursor": {
          "ref": "8ac206dc-8557-4a7c-964e-99ddc2c21db2",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ff1280c0-fca9-4cc3-bd7b-294afb874c99"
        },
        "item": {
          "id": "34ce24a0-459d-40d5-ae1e-a6d05b1310ae",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "315a8377-d60f-4f16-93bb-336ed30cc9cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86cb631d-f0c2-45b0-8399-c189561585de",
        "cursor": {
          "ref": "95c681a4-faa2-4814-be92-b5da28c2d962",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "2ec2e5a5-88de-454d-b77b-bc617b57efaf"
        },
        "item": {
          "id": "86cb631d-f0c2-45b0-8399-c189561585de",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "94d88ccd-5f04-4cbd-b9eb-821090160ab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2132f3f6-9c3f-48b8-a294-81b84b3c6c23",
        "cursor": {
          "ref": "e6647e93-4214-4576-94c8-5161fa758fdc",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "beb39e70-6838-447a-92bc-2d966c01ea01"
        },
        "item": {
          "id": "2132f3f6-9c3f-48b8-a294-81b84b3c6c23",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "fe745513-388e-4e9b-b44b-4a36e1926844",
          "status": "Created",
          "code": 201,
          "responseTime": 2738,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "8b2624f0-9185-4db3-bb97-4d83a7ed3288",
        "cursor": {
          "ref": "524ea660-cb8c-4953-be36-0e141b296032",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9f0fe226-06f0-49a7-8e1d-8952d23cc5bf"
        },
        "item": {
          "id": "8b2624f0-9185-4db3-bb97-4d83a7ed3288",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "d301fec1-35c2-43c8-b1bf-968bbd864938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c8ca1d-86b2-4eea-b73c-4a7a9715c324",
        "cursor": {
          "ref": "c5b6689e-1620-4bb7-9b9f-41ab883e1a35",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e7a95fde-ea1a-4e5c-9042-83756b2f0931"
        },
        "item": {
          "id": "78c8ca1d-86b2-4eea-b73c-4a7a9715c324",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2a59edb3-888f-4e6b-ba0c-f84f1c47230f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cf56996-6893-418e-b468-177f3aa21b07",
        "cursor": {
          "ref": "772c986f-df34-4734-92bb-346bace32ddf",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "0c9bca50-438f-4eff-9833-c204777910e9"
        },
        "item": {
          "id": "1cf56996-6893-418e-b468-177f3aa21b07",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "8982594b-7fd1-48d6-955e-96af2f3f23ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88a90617-b0f8-4998-86f2-4a5b8dccea9c",
        "cursor": {
          "ref": "4a3cd193-10c0-494d-8f0f-da778b013e98",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c9037c37-f0a3-4bbe-9dbc-56c282bf3cfb"
        },
        "item": {
          "id": "88a90617-b0f8-4998-86f2-4a5b8dccea9c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "00c8e51a-064e-4f7a-b011-1a1c76035a39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3d538c5-541e-485d-8833-2f5fdf4b88a0",
        "cursor": {
          "ref": "6f209026-b665-42cb-b527-ff2434ba7439",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c9806cc5-bf46-4851-9602-e667b7ae33c3"
        },
        "item": {
          "id": "c3d538c5-541e-485d-8833-2f5fdf4b88a0",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "01d40055-bba0-416d-a15a-3460deade2c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "324625e9-24f0-40d8-8479-bef112c44bf4",
        "cursor": {
          "ref": "47a02dd4-725c-4db4-8188-b66318974dcb",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "cb8c1222-0207-48ea-bbfa-c2a02b185580"
        },
        "item": {
          "id": "324625e9-24f0-40d8-8479-bef112c44bf4",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "fe1f554f-d309-4c49-a4c2-f0947249cd9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61be0051-e032-458b-871b-92438f656df6",
        "cursor": {
          "ref": "fff588aa-3233-494e-986c-a366b155aae2",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "35c627b6-b728-4072-a83a-50164806872b"
        },
        "item": {
          "id": "61be0051-e032-458b-871b-92438f656df6",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "3c671123-588b-45f8-a212-08411e5a4e55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af837f45-30c4-498e-9c65-535bfcce659d",
        "cursor": {
          "ref": "c685f2a4-7eaa-4dc8-9dc9-9d6a53e1b3f9",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "3b4a3fab-7a6d-4935-8696-279066a0e814"
        },
        "item": {
          "id": "af837f45-30c4-498e-9c65-535bfcce659d",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "faf16de0-db75-4099-bc56-1a93c47b68e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07bb25a6-2a3e-4d43-98dd-745ddeeaac87",
        "cursor": {
          "ref": "18249bc2-b537-4664-b699-6c0aec85f609",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "1714bbc4-8a5d-4a79-8471-47760fe2a989"
        },
        "item": {
          "id": "07bb25a6-2a3e-4d43-98dd-745ddeeaac87",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "8593ab0f-e763-4b17-bc8f-28be7003273b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d73b44a-060f-41c6-bcd9-4b49e0327bf0",
        "cursor": {
          "ref": "404b2fb3-7a37-46ef-befb-bbb775bac6d4",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f8fba56a-b525-4335-ad5b-28885b87ac84"
        },
        "item": {
          "id": "9d73b44a-060f-41c6-bcd9-4b49e0327bf0",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "0e502806-27e7-4852-b6ac-1d2fb80c2b63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7683cfe-fbca-442c-b518-6e6ee242abbc",
        "cursor": {
          "ref": "132b7f30-8d54-440a-87e9-23764092324c",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e94e6f89-0b87-496a-b8d7-325fbab73f91"
        },
        "item": {
          "id": "d7683cfe-fbca-442c-b518-6e6ee242abbc",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "0b6ffb70-9ac2-4266-a431-a7044d0fe3a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb1fab51-f801-42cf-b9fb-2d9113a0e364",
        "cursor": {
          "ref": "2d85d3b0-1ddf-4eff-b7bd-2ccb3a7aa10a",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "ec5b91e0-88d1-4481-9da1-974978205bc3"
        },
        "item": {
          "id": "bb1fab51-f801-42cf-b9fb-2d9113a0e364",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e79b6fcf-522d-40ec-8417-8c9bcd8d500e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cef6e99-1eb5-482b-8bd8-51ea2b7a4482",
        "cursor": {
          "ref": "4e716698-4ea7-460b-86c8-7e8acf3496c9",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ba1e81ff-3bc3-474b-b95b-a9d82f3b46da"
        },
        "item": {
          "id": "4cef6e99-1eb5-482b-8bd8-51ea2b7a4482",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "27163b6c-7f18-478f-b898-a5526972a954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f78a7180-61a4-4489-82ce-b074e25efa41",
        "cursor": {
          "ref": "eb72b6cc-967d-4947-89e1-cdf0827f4f5e",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "fa1e32bd-6980-4b3a-85f0-7a4b70855645"
        },
        "item": {
          "id": "f78a7180-61a4-4489-82ce-b074e25efa41",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "213ee39f-214f-4635-8d37-0c3cf2cc1126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c29917b4-111f-4806-8b1e-1978e0fff4b1",
        "cursor": {
          "ref": "d2c687be-a8bd-4da6-9f5e-2891b3d0c01b",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "4d5ab3f6-e718-4331-aec6-b64b21bd90fa"
        },
        "item": {
          "id": "c29917b4-111f-4806-8b1e-1978e0fff4b1",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "b8c5929a-3059-4ab6-beae-14bba5262366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62805e43-5b87-4e4f-936b-2bcedc91a80b",
        "cursor": {
          "ref": "4b60b6c4-c5ff-4116-9c3e-72d38afed43c",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ea279f4c-ecd3-4181-8f17-0dc94c5be270"
        },
        "item": {
          "id": "62805e43-5b87-4e4f-936b-2bcedc91a80b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "908405b0-5965-4974-b503-8986e5e5952e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c87bbf22-53f8-4e8d-8f84-4b2a2cc1abc2",
        "cursor": {
          "ref": "4b7cfd7a-ab57-4f3f-9e32-402c5ce54c5e",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "c1457000-d763-4bce-8471-a8149099a1e8"
        },
        "item": {
          "id": "c87bbf22-53f8-4e8d-8f84-4b2a2cc1abc2",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d7ad41e7-c8dd-4fcc-8245-b01e0f7c5159",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "319549eb-7597-4175-b98c-fd73d97ac229",
        "cursor": {
          "ref": "ee132864-b333-42f6-a0ea-55bd4a5d2ebb",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "99bcf6c9-7af5-4e35-a0b5-63a905877626"
        },
        "item": {
          "id": "319549eb-7597-4175-b98c-fd73d97ac229",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "16cb37dc-6ec3-404f-917f-1ec7a8e79b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d85df38-f446-47ae-a435-4f59b8edf651",
        "cursor": {
          "ref": "5ddd9908-b46b-4b46-859e-eee01fc50d2b",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "643556c6-0c35-4bba-a65a-65b1f38decaa"
        },
        "item": {
          "id": "0d85df38-f446-47ae-a435-4f59b8edf651",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "4b85f696-00ff-4e8d-8fe2-d628051763b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b1c7a06-eaf7-496f-b578-5d24bfd5a33e",
        "cursor": {
          "ref": "1d131288-30f1-48c4-b6e5-77aa716d130d",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "729f36a9-0434-4357-9d33-2f5ff8b3c3e7"
        },
        "item": {
          "id": "0b1c7a06-eaf7-496f-b578-5d24bfd5a33e",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "c81c766f-7f93-4e6b-bd6b-59058f7e6173",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bdb2e05-2a1b-4cc2-96f1-c6360f8fa9d0",
        "cursor": {
          "ref": "20649b4a-2a36-4c49-b5ef-78cc3ec7eb62",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "9cf24657-4db5-4667-9c31-96111d5aaaad"
        },
        "item": {
          "id": "5bdb2e05-2a1b-4cc2-96f1-c6360f8fa9d0",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "56e3f905-740e-4465-819b-223507e5ecac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce54ac46-8004-4193-b045-463cd576803f",
        "cursor": {
          "ref": "876e2005-c6e2-4e46-9a31-d024e985b303",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "016564b0-bb5a-4274-900d-602652e32f46"
        },
        "item": {
          "id": "ce54ac46-8004-4193-b045-463cd576803f",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "8df8b3e0-158c-486a-97f6-893183def7fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58ee9821-aa82-41d6-88fc-60dae170c3b5",
        "cursor": {
          "ref": "705c0747-1ace-4ca8-9f7b-476d7a747165",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "0886e5f9-2952-4c50-8c5a-49d56a459cf1"
        },
        "item": {
          "id": "58ee9821-aa82-41d6-88fc-60dae170c3b5",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "da58df58-f72d-45e4-81b1-f89f88c900e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e5ceafb-d7fc-4f85-87e2-97042e78d833",
        "cursor": {
          "ref": "f5f418ef-4321-4bca-a8a0-a4b8f0c1150b",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "c9fad53d-0966-4170-b26f-a1f921dc7de3"
        },
        "item": {
          "id": "0e5ceafb-d7fc-4f85-87e2-97042e78d833",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d68f059b-72d1-4a97-abd8-f9591d035449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f01ddc92-ff26-4f8e-835d-3cdce47bc969",
        "cursor": {
          "ref": "6104e539-8441-40ab-bd83-a5684af939fc",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "f134b6cb-ba18-4990-9896-5d05876e520d"
        },
        "item": {
          "id": "f01ddc92-ff26-4f8e-835d-3cdce47bc969",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "7783cd12-b37f-4664-b9fb-d6db2a54f16e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "771cad1b-84db-46db-b1f3-86c151c39ca1",
        "cursor": {
          "ref": "a76563a1-ab39-441e-af71-f564ea9f3860",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a862c9a4-3d45-408a-b0dd-568f079296bb"
        },
        "item": {
          "id": "771cad1b-84db-46db-b1f3-86c151c39ca1",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "8b81512b-eb19-4d41-9d07-f2257e5fdd7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a23a570-b85d-4544-b59f-c9a1ef97fb9d",
        "cursor": {
          "ref": "dee06d3f-b91f-4ece-8b69-51838fd4ed38",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e113e7b4-8040-4a92-9293-3a40d5307825"
        },
        "item": {
          "id": "9a23a570-b85d-4544-b59f-c9a1ef97fb9d",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "65beceea-0f30-4ade-a0eb-859250d08b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "601d09dc-c917-4af6-a01f-d1865919be66",
        "cursor": {
          "ref": "c551ebee-fda9-406d-b502-0732ff9be109",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "7cc54b46-1a42-4ee9-a4b7-6eb26caad0d7"
        },
        "item": {
          "id": "601d09dc-c917-4af6-a01f-d1865919be66",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "b467d24b-ecc4-4281-9fed-bffa028723b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "152b5b31-9d66-45c6-b933-8a07ba7dac87",
        "cursor": {
          "ref": "1a0ae8de-b66c-4d19-94ab-73d0f8239b36",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e2e4ba24-70cb-4f79-844e-8b5d59f65dfb"
        },
        "item": {
          "id": "152b5b31-9d66-45c6-b933-8a07ba7dac87",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "25f7df13-d66a-4c48-b9e6-dc99652d69dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b4c9649-4c18-4017-9caa-41bd9bd996a0",
        "cursor": {
          "ref": "6756adda-d36f-46f3-b03a-b6fa697a55b7",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "f79b17ea-1a36-451b-958b-1e313dbc5bd4"
        },
        "item": {
          "id": "6b4c9649-4c18-4017-9caa-41bd9bd996a0",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c600231d-2f04-4e64-b5de-c394ac50530e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bb7146a-82c6-4a29-b96f-bea5034f233f",
        "cursor": {
          "ref": "be7ec6d6-6613-4bef-a3f0-18354c2e9f71",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "1f7a11d0-0e4a-462b-86ac-b3269622290a"
        },
        "item": {
          "id": "4bb7146a-82c6-4a29-b96f-bea5034f233f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "55609008-1851-4c7b-a096-b6604472985c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "e7bbb92d-641d-40c5-9605-3b58d23ce04a",
        "cursor": {
          "ref": "bc43c729-eafa-455f-b7c1-ba4b8803fa14",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "3461d0af-4813-434c-b9e6-00b26f43aab0"
        },
        "item": {
          "id": "e7bbb92d-641d-40c5-9605-3b58d23ce04a",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "5991668d-fda1-4c0b-b6d3-bcb0160b5059",
          "status": "Created",
          "code": 201,
          "responseTime": 2320,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "8c2f7711-00db-4253-801e-b9167fc29ed5",
        "cursor": {
          "ref": "dd972a17-dd09-40ea-a26e-f334ce142c40",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a5a53256-a34a-444b-8913-6ff5a5b40ff8"
        },
        "item": {
          "id": "8c2f7711-00db-4253-801e-b9167fc29ed5",
          "name": "credentials_issue"
        },
        "response": {
          "id": "ea0b365a-52cf-4e80-b939-503b70e18c97",
          "status": "Created",
          "code": 201,
          "responseTime": 2473,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "b714d220-71b5-46dd-8197-eb4d67ce8f27",
        "cursor": {
          "ref": "32f857b2-3695-4e14-9e54-96835dcc9597",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "64c20fff-febd-4253-af9f-15c63bbeb7b8"
        },
        "item": {
          "id": "b714d220-71b5-46dd-8197-eb4d67ce8f27",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "a50145bd-61b5-4699-8797-0c7daca1fbe4",
          "status": "Created",
          "code": 201,
          "responseTime": 2441,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f35954ff-4c94-4f26-8c6d-126e8d71f9c5",
        "cursor": {
          "ref": "99e9412a-f6ec-40d3-9b79-5ddf207db0f6",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "58b6ce4a-7d1f-4d9b-abfa-3ece31701dad"
        },
        "item": {
          "id": "f35954ff-4c94-4f26-8c6d-126e8d71f9c5",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d0e4b79b-59d2-4d2a-b230-3f6691f1ec67",
          "status": "Created",
          "code": 201,
          "responseTime": 2448,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3486ada9-dff7-4a95-be0d-7a12670177e9",
        "cursor": {
          "ref": "2786bf62-5477-47af-9944-1bac8e7f1032",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "9abad63e-4139-49be-8dfc-195482efd46e"
        },
        "item": {
          "id": "3486ada9-dff7-4a95-be0d-7a12670177e9",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "23f8e082-de78-4f8d-933a-7dcebd3e9c4c",
          "status": "Created",
          "code": 201,
          "responseTime": 2400,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d4d8dff-9be8-4b2d-b702-655e03b07a89",
        "cursor": {
          "ref": "db6a8389-3f44-48e8-996f-a2821e007cab",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b1577125-a8bb-4478-9be0-948649c61fa2"
        },
        "item": {
          "id": "2d4d8dff-9be8-4b2d-b702-655e03b07a89",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b4dc58c8-954d-458e-b1f1-600eb37374fb",
          "status": "Created",
          "code": 201,
          "responseTime": 2672,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-19T00:43:55Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-19T00:43:55Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "4d6d6e0a-7bb3-4736-b1f2-c5d59d820d0f",
        "cursor": {
          "ref": "b7c08ec1-1ff4-4d05-8dc7-713f5aa3836f",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6f19cbe5-db57-4e07-8f99-8faea8484d9e"
        },
        "item": {
          "id": "4d6d6e0a-7bb3-4736-b1f2-c5d59d820d0f",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f430e75f-102b-447c-bad5-dc7638bc204c",
          "status": "Created",
          "code": 201,
          "responseTime": 2567,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e0500a4-a57f-4e68-a997-3f3716f17632",
        "cursor": {
          "ref": "575e4850-0181-40bd-8b8c-ee818c0a721b",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a390d8e9-7966-4c70-bb47-428f05a56b75"
        },
        "item": {
          "id": "3e0500a4-a57f-4e68-a997-3f3716f17632",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f30f0233-0eb2-4aab-9074-05f1144c3897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e0500a4-a57f-4e68-a997-3f3716f17632",
        "cursor": {
          "ref": "575e4850-0181-40bd-8b8c-ee818c0a721b",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a390d8e9-7966-4c70-bb47-428f05a56b75"
        },
        "item": {
          "id": "3e0500a4-a57f-4e68-a997-3f3716f17632",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f30f0233-0eb2-4aab-9074-05f1144c3897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f67246c-3f97-4c5b-91cd-3fa3793702c1",
        "cursor": {
          "ref": "b2101f14-f417-4a7d-b3e2-e28ac2dbfda7",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "d66de1ad-c85d-485b-9710-077103ee3ba4"
        },
        "item": {
          "id": "6f67246c-3f97-4c5b-91cd-3fa3793702c1",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5d1e410d-1a66-42b1-8a56-f1f1a7c19f91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57995c95-f4be-47b6-8170-43ae1e32eb2c",
        "cursor": {
          "ref": "36acbd78-ab9f-4652-936d-e71d2d82b682",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "43c0fd57-41a9-4294-9eea-40b9ec3b898d"
        },
        "item": {
          "id": "57995c95-f4be-47b6-8170-43ae1e32eb2c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "378c6bba-ef73-40b8-ac67-b2124e98e3bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9ee016a-bb56-4ef7-a0f1-c2d5a1cd950f",
        "cursor": {
          "ref": "1dd19f1d-1f1d-4086-ad64-604af53d91ce",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "9a05fbfc-e33e-4707-8461-e47233defbac"
        },
        "item": {
          "id": "e9ee016a-bb56-4ef7-a0f1-c2d5a1cd950f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "13e97e5e-08a6-40b8-be1b-b8ed778631ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "356cdafc-1912-441d-8591-7525b2d0d28d",
        "cursor": {
          "ref": "882dd857-7461-4a79-8740-c170e46c06f9",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f4d02a47-4688-4c72-aae9-588ee0b4cd90"
        },
        "item": {
          "id": "356cdafc-1912-441d-8591-7525b2d0d28d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "266f7825-eb32-4d86-9d9f-eb296b599739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a10b2268-7e62-4a32-8e1f-cee528363386",
        "cursor": {
          "ref": "291cd23a-61fe-4b20-8649-a1c8c3ce4434",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "141c7181-5f64-48d1-9aa8-0a381840ad14"
        },
        "item": {
          "id": "a10b2268-7e62-4a32-8e1f-cee528363386",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "4c3de806-e025-4c5d-aac4-8bfd3fe4068b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c0d0569-36b3-4ed7-8a5a-a9b3db8edd26",
        "cursor": {
          "ref": "eeaffa90-cb37-43c2-af3c-64b2c2397534",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "2d7f78e1-dc86-47fb-b990-e67f50fd8ae1"
        },
        "item": {
          "id": "9c0d0569-36b3-4ed7-8a5a-a9b3db8edd26",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3fbfd1ae-3912-47d4-8337-35537cca85fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aedc1e2-5d78-411a-abc8-bee4347d224f",
        "cursor": {
          "ref": "25116d2a-0f37-422b-94e9-47fcc504bff8",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "02081de6-36ee-423f-ac2a-34ebcdcc8094"
        },
        "item": {
          "id": "3aedc1e2-5d78-411a-abc8-bee4347d224f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9be4e437-9935-4736-979d-110010ca1e2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a907283b-0bb0-4e25-b6ed-1bcf8d530207",
        "cursor": {
          "ref": "601fe120-74c3-422c-b264-9b5be0667c72",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "b81b82bf-accf-438e-a727-f12f35794ff2"
        },
        "item": {
          "id": "a907283b-0bb0-4e25-b6ed-1bcf8d530207",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2a72cec0-ae81-4520-be20-b4a0ffc48eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe9666b4-8e0a-420c-a692-b70d40925cab",
        "cursor": {
          "ref": "d130383d-2242-41a4-990d-c953e7d5bf0f",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "5f99a26d-92c8-41ff-95f4-475f5b39d132"
        },
        "item": {
          "id": "fe9666b4-8e0a-420c-a692-b70d40925cab",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "078fa9ad-ca16-4c05-b215-457c0d7291d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e34ec81-ac01-44d9-9119-8845fa2fa703",
        "cursor": {
          "ref": "3d15660c-64f4-419a-b23f-42892d99b833",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "08884e31-c302-4c8c-b865-9ab3e60982d9"
        },
        "item": {
          "id": "5e34ec81-ac01-44d9-9119-8845fa2fa703",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "543fbc41-6d69-4905-bee9-d6dd07c3ebf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d8027dc-da54-4c89-8908-4f7c508e55d8",
        "cursor": {
          "ref": "87c435e0-15ab-4212-b559-758a65b29adf",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c3642d25-4530-4499-aca8-fe9254a3377b"
        },
        "item": {
          "id": "3d8027dc-da54-4c89-8908-4f7c508e55d8",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6edab94e-1310-429f-9ffe-5b3f3a774b08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c954e74-409e-4604-8367-e73fe93740ca",
        "cursor": {
          "ref": "c9fdcf9b-e6f9-4d5d-806e-a05e70d7166f",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b7a7102f-f766-410b-927f-e7ed738c2773"
        },
        "item": {
          "id": "5c954e74-409e-4604-8367-e73fe93740ca",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ef14e307-3201-4b64-9fe9-96d5f9a33449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9a6036b-ce42-482b-af01-5eccf36cc91d",
        "cursor": {
          "ref": "712b6c28-52e5-42b7-a823-d0e96732e9fa",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "75842d3f-3182-4010-996b-44756c964a18"
        },
        "item": {
          "id": "e9a6036b-ce42-482b-af01-5eccf36cc91d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0f895673-66a1-4ac6-95d0-e3b2215e75a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbe6bcef-1172-4969-9fae-db95b7693b2f",
        "cursor": {
          "ref": "f0b4b83d-7a93-45b5-aab9-42931ec97310",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "9795e773-ce2e-4ccd-83f8-4e886d643899"
        },
        "item": {
          "id": "dbe6bcef-1172-4969-9fae-db95b7693b2f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2cb370bf-d83c-423a-89e9-f47432dbbf29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba9166d8-f598-4f28-bcd1-60b3e1ef8e1f",
        "cursor": {
          "ref": "f58ee3bc-6bef-4ef2-aea9-a75bfdb4276c",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f2b91bd6-88a9-4ba5-838e-10025cdf1945"
        },
        "item": {
          "id": "ba9166d8-f598-4f28-bcd1-60b3e1ef8e1f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d6562171-7c98-4893-bea5-f5cd005c55f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fc9e5a6-5254-4815-9e12-b3e6af181eb8",
        "cursor": {
          "ref": "ce633f0a-93c4-4a41-bbf4-e09023edd61d",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "75b432a5-9a6d-44f5-872e-64c50fcb1a52"
        },
        "item": {
          "id": "5fc9e5a6-5254-4815-9e12-b3e6af181eb8",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "18dd603a-e239-437e-9c51-c4dc0c67da7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32521e05-c94e-424e-a764-396581156d19",
        "cursor": {
          "ref": "e89456aa-a1ee-4c40-a6fd-db75130a4351",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ea8f625c-475c-4b3d-b195-c12c7c895e0e"
        },
        "item": {
          "id": "32521e05-c94e-424e-a764-396581156d19",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "32ce4041-f354-4767-9061-39b23e68d861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 149,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7551246-fad8-4767-bccd-3f016af2eacc",
        "cursor": {
          "ref": "ec895f35-cb17-4de2-8a06-eb74988e724d",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "251c2772-86d3-45e1-a760-36c2d86c3f30"
        },
        "item": {
          "id": "b7551246-fad8-4767-bccd-3f016af2eacc",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "155a3db5-e369-4028-a6ab-dc8591a4466f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c37d4e85-ecdb-4b2a-b986-5e4ac2fc1122",
        "cursor": {
          "ref": "2b82dc10-32af-4977-8b7a-aeeaedafe30e",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b977ee42-466d-46af-a1cd-e1e19b2637e9"
        },
        "item": {
          "id": "c37d4e85-ecdb-4b2a-b986-5e4ac2fc1122",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1808dbeb-ac4b-495f-b7df-9fd0c90e51ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "488e71f2-9f51-48af-843f-f87781065259",
        "cursor": {
          "ref": "408a70d7-6f4f-4b2b-bd02-72f079649d4f",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "7ad253fb-16f1-434f-ba3f-41a187abc35e"
        },
        "item": {
          "id": "488e71f2-9f51-48af-843f-f87781065259",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "85220b15-2f93-4f8f-9aed-4c4c9b0f62b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff628a4e-ecb1-4db7-85ba-a3b6d35ca812",
        "cursor": {
          "ref": "ed0465f9-aca7-4bba-8ad3-2fbc1533ec99",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "365b67cb-7cee-47f9-8ee1-ffab3d55a95e"
        },
        "item": {
          "id": "ff628a4e-ecb1-4db7-85ba-a3b6d35ca812",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1a35f425-03d4-459e-baa1-e24d163b2c9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "110af077-d84e-4149-a371-90bb59159e58",
        "cursor": {
          "ref": "380ea84c-d3c4-4402-bc1d-c3c9ceb90aad",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "379e4611-9bd5-4835-9fe5-411be03807ad"
        },
        "item": {
          "id": "110af077-d84e-4149-a371-90bb59159e58",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "77c6c085-76e4-4d3c-a62f-fe3868b6e1a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "624ba96e-24cb-4bff-ba30-c4754781c57f",
        "cursor": {
          "ref": "08cd9ed3-7ead-4b2d-a1d8-4cc27bbe49de",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "9a939c7d-14e7-4754-bf05-f1bb289822d2"
        },
        "item": {
          "id": "624ba96e-24cb-4bff-ba30-c4754781c57f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "327660e9-9569-4e06-96bd-e16818e419df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1437ce4a-5016-4aab-9674-c43bf8382e42",
        "cursor": {
          "ref": "3f54995f-dc3a-413d-8d72-c9f72ab447cf",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "7468a57c-bd1e-4152-acc1-3a6ef23970b4"
        },
        "item": {
          "id": "1437ce4a-5016-4aab-9674-c43bf8382e42",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "eaf6331c-3b24-4a79-bbe3-78b00a1d1c73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e25342f-cdb3-4da2-8b02-6cdeec0e7fe8",
        "cursor": {
          "ref": "05bce83d-3dd1-4db6-aec5-d771046b902c",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "97eb5751-4d61-4b2c-9aaa-7c8667fb95fa"
        },
        "item": {
          "id": "8e25342f-cdb3-4da2-8b02-6cdeec0e7fe8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f26e4607-ecf3-4a30-8794-c1128557b349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b1a9d7b-9755-4cc5-8033-7d08fb5f7fff",
        "cursor": {
          "ref": "f5449982-819c-4d4e-b154-06defd6bbd55",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "cc70b15a-dc1d-4185-ac86-915a0c5b280e"
        },
        "item": {
          "id": "5b1a9d7b-9755-4cc5-8033-7d08fb5f7fff",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "785680c0-eceb-471f-8689-70756ab72742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91076d7a-0f8b-4489-871f-37d4f814c3ae",
        "cursor": {
          "ref": "4c086933-e471-4d68-b4f7-f342be84c2b1",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "91e688be-6fb2-4488-a58e-a89353659cc0"
        },
        "item": {
          "id": "91076d7a-0f8b-4489-871f-37d4f814c3ae",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "40125920-6465-4766-8496-eabff2912ffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03105254-fc28-4550-9d67-b7daecee2cab",
        "cursor": {
          "ref": "5fab75ac-42c6-4b9a-b225-025edf7674ce",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "166c1b1f-3a78-4b85-ba11-2309aa8d9631"
        },
        "item": {
          "id": "03105254-fc28-4550-9d67-b7daecee2cab",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "eb783c12-94d9-403f-8957-a715f6460cc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f861b04f-341d-4340-95a2-20edebb206d7",
        "cursor": {
          "ref": "2efdc522-6bc2-41e2-86e2-072fc64cd570",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "5f823b9e-5818-4685-bfd7-3c17f2ca2bb4"
        },
        "item": {
          "id": "f861b04f-341d-4340-95a2-20edebb206d7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "19237055-5e3c-45db-8aec-b40c2ee9cbab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f99eaa1d-9c87-41e6-beb5-e0695b5e28b4",
        "cursor": {
          "ref": "26b14f3e-53c4-445b-b554-4300393da817",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "690f82ef-664d-418c-8ba8-1e3d801ba92a"
        },
        "item": {
          "id": "f99eaa1d-9c87-41e6-beb5-e0695b5e28b4",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "3e51e19c-cc71-42c3-942f-e60f8c332ad0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 148,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f92e60c-486d-4e5c-86c4-5f2ffe6ac26c",
        "cursor": {
          "ref": "ddf4c133-3092-4b68-925d-3d88c60275d6",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "237f0513-59fa-4440-924a-9a126a990576"
        },
        "item": {
          "id": "7f92e60c-486d-4e5c-86c4-5f2ffe6ac26c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "0f6ff08b-bb4d-4328-8f4d-f32e822b5c5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81974fcc-3c47-4655-b1c7-bdf3d40e7394",
        "cursor": {
          "ref": "0ba684eb-c808-47b3-b45f-273632e67e29",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f2406ca4-4744-491d-94ad-88bf443a5421"
        },
        "item": {
          "id": "81974fcc-3c47-4655-b1c7-bdf3d40e7394",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2f14673a-457c-4e56-889e-e03bbd8abf33",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "1c540f85-465f-44fa-b728-37ecdf068458",
        "cursor": {
          "ref": "a02b494b-7749-45e5-baff-fc85d67c5cfb",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "deb0ece9-a28b-4e67-a1e6-601dacea58ee"
        },
        "item": {
          "id": "1c540f85-465f-44fa-b728-37ecdf068458",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "ca6aaefb-b996-4533-adbc-4c90b93f981c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "6d579a82-b579-4e94-a532-b9dbf64f305d",
        "cursor": {
          "ref": "9fba1cc5-3044-4d13-b09a-f9c2bfd6a121",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "dacc3def-35dd-4de5-bf19-3ff2e0c5c9c6"
        },
        "item": {
          "id": "6d579a82-b579-4e94-a532-b9dbf64f305d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2b7bfdab-5dd9-4060-881e-7ed980d4877b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d579a82-b579-4e94-a532-b9dbf64f305d",
        "cursor": {
          "ref": "9fba1cc5-3044-4d13-b09a-f9c2bfd6a121",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "dacc3def-35dd-4de5-bf19-3ff2e0c5c9c6"
        },
        "item": {
          "id": "6d579a82-b579-4e94-a532-b9dbf64f305d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2b7bfdab-5dd9-4060-881e-7ed980d4877b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13506bb0-5c6f-4a8c-84cd-1bce42fdf1de",
        "cursor": {
          "ref": "cad03088-bb28-413b-a52b-73f8d2d4da2e",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "8730ec51-62a3-4752-9da7-09dfe1761615"
        },
        "item": {
          "id": "13506bb0-5c6f-4a8c-84cd-1bce42fdf1de",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "626c0e7c-086f-4ab5-b5ba-d7a5b520419a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae88dbe2-9a54-4f28-ba44-76d6e761c25d",
        "cursor": {
          "ref": "135ea54f-9c5a-4868-8ddd-49968d90f7a0",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "62dcb7a5-e2f9-4260-8d9d-c8d53d660296"
        },
        "item": {
          "id": "ae88dbe2-9a54-4f28-ba44-76d6e761c25d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "19fd7bbf-6b67-413b-8db7-3f091bcdf052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9124213-ead6-4762-a50e-c5a7ade884ff",
        "cursor": {
          "ref": "65afdedf-e57f-4813-9da6-347482b369a8",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "848c77d7-fa74-46fd-b2ff-f06c5c691fe9"
        },
        "item": {
          "id": "a9124213-ead6-4762-a50e-c5a7ade884ff",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "1c49012c-0996-4135-bb70-2676eee7c06f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d3d30ca-70b2-4af2-9183-8e31b9805ad7",
        "cursor": {
          "ref": "236e92a2-efbd-43b9-99ca-c1b5b5c98141",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "0e659226-99a5-4b35-ae15-b5aa5f6e215e"
        },
        "item": {
          "id": "7d3d30ca-70b2-4af2-9183-8e31b9805ad7",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "22afdc57-3a2f-4ab7-872a-d8d4795f6a5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f7bfbc7-80b3-461c-ad53-860dfa066bd5",
        "cursor": {
          "ref": "c317a39e-3011-4f89-b545-e3f7b97b53e2",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "cbd05e2c-ab4e-4f19-9e0e-243d81586748"
        },
        "item": {
          "id": "2f7bfbc7-80b3-461c-ad53-860dfa066bd5",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "73c3ee50-70c8-4d9b-969a-020d659b73fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad7af5b7-b8a9-4bf8-8845-98d13cb6331a",
        "cursor": {
          "ref": "1b867789-bdc2-41b0-bef5-bfd4ea404e55",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "02085197-d8de-4cd3-bd3e-3fab0a802797"
        },
        "item": {
          "id": "ad7af5b7-b8a9-4bf8-8845-98d13cb6331a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a8fa0c21-a2a3-4df2-93c4-61bcb56a7e53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5da3642-7d70-4b55-bfb4-498d301d79e2",
        "cursor": {
          "ref": "a89930b8-bc36-422d-ae7f-de60b515783c",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "bfcf20b0-aaa7-464e-8f7d-90dfbdbec0d0"
        },
        "item": {
          "id": "a5da3642-7d70-4b55-bfb4-498d301d79e2",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8f3e249e-1ef1-450e-94c4-fd370fdeaf31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51c2fe4e-9e7a-4d69-8ec2-fcca09836d70",
        "cursor": {
          "ref": "dfe28a2d-0516-4bba-9476-99893360b74b",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d20bb495-6152-432a-a012-529007fbd647"
        },
        "item": {
          "id": "51c2fe4e-9e7a-4d69-8ec2-fcca09836d70",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "00b181a5-c52c-4305-a9d0-045135b50550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64990ec4-31ed-4814-98b0-c4824b8c6b8f",
        "cursor": {
          "ref": "2c5eeff1-d978-480b-999f-84ab67870143",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5e54ca7f-a7a0-4471-9af0-5996aaf69351"
        },
        "item": {
          "id": "64990ec4-31ed-4814-98b0-c4824b8c6b8f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "095dd34a-9d60-45f5-86b8-edc0ab3591e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d394bd-4866-4025-bc81-1802b8026e06",
        "cursor": {
          "ref": "03e22235-688a-4d8c-868a-3c6aa8b123da",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "b839ece5-76c9-4a0e-a8dd-c1d923a62af6"
        },
        "item": {
          "id": "52d394bd-4866-4025-bc81-1802b8026e06",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "3dd0cac3-2c55-43d3-974a-9596d4b6b891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d778ce2-8e97-4a0a-9bd2-42d2531e931b",
        "cursor": {
          "ref": "b742226a-a9c2-4be4-9985-b666b5fdc700",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b26556b5-e28c-42ee-86cb-eff51160a98e"
        },
        "item": {
          "id": "0d778ce2-8e97-4a0a-9bd2-42d2531e931b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "700c3940-433e-495e-ad9d-1d04cd0579aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bf64fd3-30f2-4cad-8296-c19ec141375a",
        "cursor": {
          "ref": "17beaa99-0b86-4910-9d77-93fc240fb6ce",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "6df07ceb-9afe-422c-8a5c-a9edf62bdff8"
        },
        "item": {
          "id": "1bf64fd3-30f2-4cad-8296-c19ec141375a",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "fdcaa3f1-60a5-42ff-bdd6-d3cfb927f3f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab6378cc-a98a-468b-9bbd-c204e7499b94",
        "cursor": {
          "ref": "070cd212-ea7d-4725-a1cb-1f1a5457fb57",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "3f9e2cc9-780e-4cfc-b054-cec6d400b902"
        },
        "item": {
          "id": "ab6378cc-a98a-468b-9bbd-c204e7499b94",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "82726fd6-49a8-450f-bed8-f0a43fd11d88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26f8920a-b336-4a1e-8d86-c42fa05302f3",
        "cursor": {
          "ref": "5634fa3d-83ae-4f98-beef-d10fa38ccb07",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8b8fd73d-5abe-4a75-b7cd-0f3cec0d16fd"
        },
        "item": {
          "id": "26f8920a-b336-4a1e-8d86-c42fa05302f3",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c53e7b72-1a65-4347-a3f8-84f5f8fe0dc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d807cc-639c-4026-8a7e-c0f01f4a9ce5",
        "cursor": {
          "ref": "e6ba97bb-3e3a-4264-b730-828e38709a73",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "72e52f82-14f4-412d-b443-4d3900cc45e9"
        },
        "item": {
          "id": "52d807cc-639c-4026-8a7e-c0f01f4a9ce5",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "58b76ab5-e17d-4b6a-a94b-b13ec12f0982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d904d8e-5280-4ec8-b08d-3f6835001a6e",
        "cursor": {
          "ref": "113dafec-5973-44e1-9c18-07a9a2e2a4b4",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "2f159be5-8abe-468a-842d-c635bf53c7fb"
        },
        "item": {
          "id": "5d904d8e-5280-4ec8-b08d-3f6835001a6e",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "12520b4d-b156-48e9-8124-c87aa7fa1bb7",
          "status": "OK",
          "code": 200,
          "responseTime": 262,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "6bd6e299-2699-444d-b501-bbf37381983e",
        "cursor": {
          "ref": "7e5dbdc3-d8f7-4f0d-b192-398449aa337a",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "9f1cd80d-c37f-41ec-b1dc-0192f3f55263"
        },
        "item": {
          "id": "6bd6e299-2699-444d-b501-bbf37381983e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c05a2743-d4d1-489a-a2a4-08a44ba9f5db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12bac45c-e7a4-4727-a576-585042311d35",
        "cursor": {
          "ref": "9f6f5b8d-9c46-459f-a6f7-25bc3497ad70",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "29426dd6-a799-45d5-b65b-a6a06df9e4ee"
        },
        "item": {
          "id": "12bac45c-e7a4-4727-a576-585042311d35",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "18180d0c-01cd-4f32-a58e-ca879c28dbd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81de5f84-3412-4eb7-a314-2eef86b13469",
        "cursor": {
          "ref": "b32b26ca-b5d7-4634-8d7d-9b7a280ac8f6",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "53a33a3c-8ccc-46a5-8995-c2f65c0ddfc3"
        },
        "item": {
          "id": "81de5f84-3412-4eb7-a314-2eef86b13469",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "9fe7cf19-855b-49c3-a52e-9c14e2e002cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a093a15-c3a7-474e-a46f-19540f22acf7",
        "cursor": {
          "ref": "bf572d6a-f1be-4fca-a371-959c97060fbb",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "1fff65fc-a568-4613-ad26-0fdd7ad3c3cb"
        },
        "item": {
          "id": "6a093a15-c3a7-474e-a46f-19540f22acf7",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "dd55bc65-dced-451e-9ef8-2dd3be90c17c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dca2245b-dcc0-4bb6-9d50-38b9a98f5e9d",
        "cursor": {
          "ref": "9093ee2c-b5be-47cc-aa55-30e7f1f15322",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "01593cc5-d2c7-48e8-8bb4-00417ccffa6c"
        },
        "item": {
          "id": "dca2245b-dcc0-4bb6-9d50-38b9a98f5e9d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "70235936-8979-4f64-a7a0-04b95cdcba7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24d53dae-9500-441b-8beb-6fe589310564",
        "cursor": {
          "ref": "1e9f2ca0-cf37-4daa-b78e-61bf3f2083d1",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "e0378535-0887-43b7-a013-c0157eda37ad"
        },
        "item": {
          "id": "24d53dae-9500-441b-8beb-6fe589310564",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "6b10d3c5-8248-448e-bda7-178aa3daf9fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c417a498-2f12-40ac-9d0a-8ac833cec356",
        "cursor": {
          "ref": "338d8fd8-60dd-4f13-bddc-b063fcf6a35b",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7412dee8-b26d-4dce-ae0b-9fff9d885f98"
        },
        "item": {
          "id": "c417a498-2f12-40ac-9d0a-8ac833cec356",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "03e1ed49-b28b-4fa2-92ab-fe97bc82b7ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0c0a74-ad1d-46b7-a936-04cca2b14a7b",
        "cursor": {
          "ref": "0f50eeae-418c-431b-940f-08b8de9ce872",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "41caab04-e727-4a2b-ae8c-6312e1f32b45"
        },
        "item": {
          "id": "6d0c0a74-ad1d-46b7-a936-04cca2b14a7b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c1e0bb0b-696d-4671-8170-8475485d8a59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a68aef95-e5d9-4c37-89d0-4399c825902d",
        "cursor": {
          "ref": "3403ee40-3548-4daf-931e-fe13ff2dc081",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "04a1ad06-a4aa-4abf-8646-332f3519d1fb"
        },
        "item": {
          "id": "a68aef95-e5d9-4c37-89d0-4399c825902d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "4de990c3-8bfa-47f8-ac33-82e167aa6e96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c09fec58-9ef0-425a-b545-cc540c84d309",
        "cursor": {
          "ref": "39d59bd9-ceec-436b-ae07-324e3be4dbce",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "43009fa3-3b61-4cb0-bd35-ce29a7a9f0d0"
        },
        "item": {
          "id": "c09fec58-9ef0-425a-b545-cc540c84d309",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "82126baf-1ad6-4c99-aa2d-302309a63665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2dcdebc-33cf-4bcf-b301-96c8708e40ff",
        "cursor": {
          "ref": "c11c5034-3013-4947-a6ff-c352b8112e73",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "d1f65bcf-5c0a-4c1b-beac-c887cec2d8c5"
        },
        "item": {
          "id": "f2dcdebc-33cf-4bcf-b301-96c8708e40ff",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "74d3786f-fefa-4584-b4e2-16e11069dcaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98cb2290-438a-4607-824f-0dfe1b3359e0",
        "cursor": {
          "ref": "0c6df113-fae9-4f56-9a04-b4dc0a9ab83f",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "9ca40870-c4e7-46c0-9100-84bccb9bfe76"
        },
        "item": {
          "id": "98cb2290-438a-4607-824f-0dfe1b3359e0",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c804d0b7-aa33-4cb4-8b1d-d5de9f21d938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb37f62a-a0cb-47de-a6dc-2572d9cc70b6",
        "cursor": {
          "ref": "2376fd7c-5537-4fd8-91b1-31e2597e9f9e",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "bf5fec2e-2bd5-459a-ad07-e695747b740f"
        },
        "item": {
          "id": "cb37f62a-a0cb-47de-a6dc-2572d9cc70b6",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2fabd50c-6433-49b2-82ce-56a1b8efa69b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df85110-96e7-40a7-97ee-d979b332ca99",
        "cursor": {
          "ref": "a256232b-f048-4346-82fd-866ccfca48f9",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a080fa8c-5d5d-4a7e-8365-2cc9908247e8"
        },
        "item": {
          "id": "8df85110-96e7-40a7-97ee-d979b332ca99",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "af30debd-9317-405f-b2e6-fda1d6f6843f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ef83020-4eb9-44e8-8eec-cd78e4665977",
        "cursor": {
          "ref": "9336ed42-5e10-42bc-a58f-a491a4a3c0c7",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "8d4c9ca9-45e4-4a0b-95bd-46c01d5738fc"
        },
        "item": {
          "id": "6ef83020-4eb9-44e8-8eec-cd78e4665977",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "30c12e71-39ce-4dcb-97ad-77adb80133ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "febc933a-4b93-454b-833b-137859884b9f",
        "cursor": {
          "ref": "a85cf9ac-d511-4a64-9059-b2bc97969700",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "474577db-ef3b-4b73-bf34-dcf2cceaa054"
        },
        "item": {
          "id": "febc933a-4b93-454b-833b-137859884b9f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f73c63ef-9d8d-4342-a485-a5ae22e70278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf0b4ad-1a10-4729-b02b-10cd54828e8d",
        "cursor": {
          "ref": "eca0a429-8ad0-4688-9b2d-92012a85469a",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "52001732-f0b5-4695-ac13-7cff1317385a"
        },
        "item": {
          "id": "bdf0b4ad-1a10-4729-b02b-10cd54828e8d",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f265fa78-dba4-4933-8c77-d5e85a9e0c46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a115e8bc-fe98-42ca-b82d-6598a21d07c6",
        "cursor": {
          "ref": "d9b476de-77e5-40d6-a0cf-dbf3b59c83e1",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "684c11f4-c44f-4973-a8f4-b9ce60eb3097"
        },
        "item": {
          "id": "a115e8bc-fe98-42ca-b82d-6598a21d07c6",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "492af6b0-c428-45ce-bac0-e956c09639f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba52cfb4-5890-490f-809e-75b87fead35f",
        "cursor": {
          "ref": "d1f1680c-e8aa-4d18-9e7c-530ad73c70d1",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e67b2e36-bf97-4716-827f-865549a22c9c"
        },
        "item": {
          "id": "ba52cfb4-5890-490f-809e-75b87fead35f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "66345db0-f800-4489-9ed7-a21ef8c84e44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "008746e2-2a92-4bae-ac90-ec13c3841680",
        "cursor": {
          "ref": "c6596682-b724-4445-9be5-fe7f7afcce4b",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "123f9572-1d98-412c-892b-3601b6521dd6"
        },
        "item": {
          "id": "008746e2-2a92-4bae-ac90-ec13c3841680",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "6010891d-d49a-4482-b037-ef03240b3868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a884fb30-0fd8-446a-ac35-34a340d88eb8",
        "cursor": {
          "ref": "36a41b58-7e82-4682-b1cc-5330298091d0",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d83e4a81-d47d-4d8c-a571-12f98fbe0821"
        },
        "item": {
          "id": "a884fb30-0fd8-446a-ac35-34a340d88eb8",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "488c1afc-7bc5-4082-9efa-cf22f8071dd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "175fdf74-a07e-4e2a-b221-5b27e494be94",
        "cursor": {
          "ref": "2a3d6793-3ab5-479e-8b33-7c00f09d8971",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ec2454a2-aa20-4e4a-858a-9178121900d1"
        },
        "item": {
          "id": "175fdf74-a07e-4e2a-b221-5b27e494be94",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "19ba846d-7828-485b-b923-302f77b7b9a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1649f496-0da5-4c1e-b1da-62907659db0f",
        "cursor": {
          "ref": "86b98f57-2636-4797-912d-f7692b2d5a7e",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "7f28e340-a190-480c-b00c-5efe7c9d47b0"
        },
        "item": {
          "id": "1649f496-0da5-4c1e-b1da-62907659db0f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "18bfed01-8607-411c-9fc6-d940eef264d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "675d974e-b175-4970-beda-46d14fcd4547",
        "cursor": {
          "ref": "a0b45a99-ed46-4c56-b895-78f742debd92",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "e67bb7ca-c9da-4c6d-b417-15d95e7100c3"
        },
        "item": {
          "id": "675d974e-b175-4970-beda-46d14fcd4547",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "383308df-d55c-42b9-9b0f-e04384bf12e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77c6339c-2c77-4588-a6d3-5df509ce5e03",
        "cursor": {
          "ref": "da79db28-1c66-4a46-921f-2d6599a72657",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "0c6a8977-1c9b-4a47-bfd1-bde9a3cef253"
        },
        "item": {
          "id": "77c6339c-2c77-4588-a6d3-5df509ce5e03",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "f6491925-7b86-4e39-9102-83f37f256cdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be0cb2b9-2416-4564-a13c-942d20d26c92",
        "cursor": {
          "ref": "589992b2-57af-4cac-9828-c7f68a040cd0",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "18c295ca-6a4b-4671-a4b6-23fcd5f1292a"
        },
        "item": {
          "id": "be0cb2b9-2416-4564-a13c-942d20d26c92",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "55eb9bf1-c226-49c1-980a-00d012051958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10c44da1-bd5b-4cfd-aef9-88ecf3b3caa9",
        "cursor": {
          "ref": "f8022ae3-35c2-4590-a260-677442b06f82",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "7e0b84cd-d0f0-4020-ae1e-8431167d5fa9"
        },
        "item": {
          "id": "10c44da1-bd5b-4cfd-aef9-88ecf3b3caa9",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "bcadf0fb-b3d5-427d-ba8f-1779e03a3b14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "607bc804-7553-49e5-bd16-2ff4dde5120b",
        "cursor": {
          "ref": "743774a5-fc5e-4f3a-9aa3-0abefb62025d",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "16024b19-f97e-44c9-97da-3f9e59367a5b"
        },
        "item": {
          "id": "607bc804-7553-49e5-bd16-2ff4dde5120b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "69b300de-ee3f-45e3-a04a-a2865a749518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9f1a7fc-1c22-4295-8e85-fcb31662199f",
        "cursor": {
          "ref": "c3ab1298-562a-4e25-92ae-baa35734446c",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "7c8a415f-2a15-4088-9f54-9d1cab77288c"
        },
        "item": {
          "id": "c9f1a7fc-1c22-4295-8e85-fcb31662199f",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "38c44131-54f1-4830-9403-0faf85564e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac874b91-bb64-44e8-9528-2855082b3d0e",
        "cursor": {
          "ref": "7bb24b48-a435-4ca4-8474-60aab91d1d1a",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a4fb3e83-dfe5-474f-96a1-325e0aee8966"
        },
        "item": {
          "id": "ac874b91-bb64-44e8-9528-2855082b3d0e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "ff4ca6cd-a8d2-437f-9f64-a7379f6d85e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c2f4b35-49c6-4e57-bfc3-882e6dd17df4",
        "cursor": {
          "ref": "eea69d64-2969-4b13-9d6d-3d07d4ef3e65",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "95d0d6d9-7fff-4859-9bc5-a816cf01c69b"
        },
        "item": {
          "id": "7c2f4b35-49c6-4e57-bfc3-882e6dd17df4",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "4361ddee-1e72-4e07-9b68-17e8825e2499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb6cb552-cbc6-49e1-80b7-4adaf3996511",
        "cursor": {
          "ref": "c26f8b16-a7ad-42af-8512-ed9644fb15b0",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "17a0ccd7-39f1-4d6c-8d0c-9a6e4106bf52"
        },
        "item": {
          "id": "bb6cb552-cbc6-49e1-80b7-4adaf3996511",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "12e71dcf-75ec-4482-b661-fa0d16948f61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e254b9bd-5c8b-4e54-948a-6792277eb524",
        "cursor": {
          "ref": "14539050-e26f-48d3-8e28-910a65fc8022",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "2463e731-b77e-4677-8cff-b560259a910a"
        },
        "item": {
          "id": "e254b9bd-5c8b-4e54-948a-6792277eb524",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "9a318dc3-a4b3-457b-a0bc-a3c8772bad83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81ca3bf0-cb5a-4ce4-bb7e-b261779273d1",
        "cursor": {
          "ref": "d880ffcb-1543-450b-ad15-f419df6c2fdc",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "7107ef50-abc8-4450-9501-2171e189575d"
        },
        "item": {
          "id": "81ca3bf0-cb5a-4ce4-bb7e-b261779273d1",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "3de6b978-d787-4574-8b15-848ed3cd6684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cff90d8-f29e-400c-a293-5c2b2b3f294c",
        "cursor": {
          "ref": "84b97ac5-defb-4c9b-a42a-d1bb73a93fc0",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "232b1c5b-6818-4259-a926-78e038c86d3e"
        },
        "item": {
          "id": "6cff90d8-f29e-400c-a293-5c2b2b3f294c",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ba3be9fa-f314-4bd3-8fc7-5f31806cb015",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ce328cd-9995-4d2c-bf07-b436471c6322",
        "cursor": {
          "ref": "ac3465ca-a67f-4e94-9b89-5bccd6e766ef",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "8d3ae06b-1b93-4ba3-9c40-63fddbc9fd29"
        },
        "item": {
          "id": "7ce328cd-9995-4d2c-bf07-b436471c6322",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "60020930-ba04-414a-ae73-b5938d2c555e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "165bd5d7-3c92-4c96-958a-bec84efab953",
        "cursor": {
          "ref": "cc5c159d-1c5b-4cb8-af3e-e3f61e1624f7",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "8c8eda70-80f0-4eb3-b679-6244f743f62f"
        },
        "item": {
          "id": "165bd5d7-3c92-4c96-958a-bec84efab953",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4af9d3b1-2e75-426b-b360-28c5e3fbbd66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "973458cf-8cef-438d-a648-dfc5a09324fe",
        "cursor": {
          "ref": "20feacbb-3681-4bd2-8864-53897914bf06",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a690ce27-4085-4695-bb84-89f17627b00a"
        },
        "item": {
          "id": "973458cf-8cef-438d-a648-dfc5a09324fe",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b072b27a-cfcb-4ad6-aa69-e78dad50cf26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "920e0976-c5ae-4ffa-9263-c5ff0c25643a",
        "cursor": {
          "ref": "aa13e55b-383d-420f-95d5-6b2af0c3f7c1",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "adff7ae5-5ed8-4166-bb7b-45e45fdac3e9"
        },
        "item": {
          "id": "920e0976-c5ae-4ffa-9263-c5ff0c25643a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "4c7e6e41-a2ed-4edf-bf3b-67c3bd420f59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1959ecb4-bad9-40f0-852e-d684817c0220",
        "cursor": {
          "ref": "7ca38e8e-bc2f-4ac4-894a-42acde38e06c",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "292c9386-cb90-4a43-92e3-f4e6d06355bd"
        },
        "item": {
          "id": "1959ecb4-bad9-40f0-852e-d684817c0220",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "c68a1e29-7232-417b-b3cb-c6e22ff66f95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d76013b3-5d68-489c-b84e-a45bbe530ed8",
        "cursor": {
          "ref": "a494965a-61c2-418e-a9e3-b0f6025bdf45",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "b5bdc65c-50a8-49ec-8edf-db0bf17903d4"
        },
        "item": {
          "id": "d76013b3-5d68-489c-b84e-a45bbe530ed8",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "bc5849bb-2c3b-4d9f-aae9-fc8ab8519303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da71f436-ca86-4a4c-8beb-7322123f21ad",
        "cursor": {
          "ref": "0dfae0b1-29ce-4ea0-912c-7d64934e2751",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "2454176f-4ee4-4d53-ab8e-67cf4876663c"
        },
        "item": {
          "id": "da71f436-ca86-4a4c-8beb-7322123f21ad",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "daa187f3-eeed-45c1-99cf-b0af334c682f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3caebc30-2203-4135-9de0-d924514d2d68",
        "cursor": {
          "ref": "dfafbc9a-dbe8-4abd-a1c9-4f2b93bb6126",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e6862c13-da05-4fff-9daf-d27605cdf2c7"
        },
        "item": {
          "id": "3caebc30-2203-4135-9de0-d924514d2d68",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "bad70865-a217-4852-8807-9edd3920b45f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd5d6c34-2105-42cd-9cc4-b2bbf6af829c",
        "cursor": {
          "ref": "0c6f7850-c88d-4fe3-9bf2-f54d562516ab",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "3d63824d-992b-4e25-8b67-ae179c610281"
        },
        "item": {
          "id": "dd5d6c34-2105-42cd-9cc4-b2bbf6af829c",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "cbfe1ae7-d869-4e48-b140-f5b7466eddfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd4c9379-0d97-4ac5-b184-ec7cb7d71060",
        "cursor": {
          "ref": "75678e3c-1f61-45a1-94dd-706d2916e54c",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "6e5f7ec3-c373-4b93-b013-a62a86b6ad51"
        },
        "item": {
          "id": "dd4c9379-0d97-4ac5-b184-ec7cb7d71060",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "6105c7a1-359f-4be7-a3cb-4fd93dded414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78def691-dacf-49c5-8711-357faf8a781d",
        "cursor": {
          "ref": "e3306c89-7dd6-4502-912a-29cd6e619e99",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "ee6d0fb8-ea7e-4c9b-be0b-f443c9f0e99c"
        },
        "item": {
          "id": "78def691-dacf-49c5-8711-357faf8a781d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "1cc35c7f-dc3b-4ce6-b5c4-f074fd5079ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6789b80-9e99-4617-b521-4464762253a9",
        "cursor": {
          "ref": "05c0be68-664b-4f0f-b443-d05fc454de42",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "234a1243-9af1-4062-afc7-73e6a605e09a"
        },
        "item": {
          "id": "a6789b80-9e99-4617-b521-4464762253a9",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "5d20fbdb-1dfb-498e-9e06-c6b019fdcbd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e5b015a-a281-4dd1-91c3-5e44397688ff",
        "cursor": {
          "ref": "26115cb6-902c-45ac-ad71-002a69b41894",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "4460926e-7808-4f25-b7e6-003018f01a48"
        },
        "item": {
          "id": "7e5b015a-a281-4dd1-91c3-5e44397688ff",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "f5fbd54f-1688-476c-8414-8829ed3662e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e946fbd3-846e-4f36-9996-d2e45ebf1e8f",
        "cursor": {
          "ref": "748e7840-49bb-4967-b3ec-17e5565431b7",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "7f74e560-2926-41fa-8c85-de7e0a5b2234"
        },
        "item": {
          "id": "e946fbd3-846e-4f36-9996-d2e45ebf1e8f",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "02a097d2-85a5-4624-b32a-2c23d1d1ac9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44cf1d3d-dc92-425e-84c4-0f040cd4a0f6",
        "cursor": {
          "ref": "917559b5-91c4-44e8-9dd5-612351569afc",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a043b8cb-4df5-490c-b26f-acdd4e8bc5e8"
        },
        "item": {
          "id": "44cf1d3d-dc92-425e-84c4-0f040cd4a0f6",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7f1adb5d-298a-4e77-b053-22920bf3d4c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96f2d70c-e211-435c-83ae-962bd89d8497",
        "cursor": {
          "ref": "c0d1173f-86fe-4af7-98c7-144569d8341b",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a58eb41f-1fab-4efa-9c23-d8f77c1fbfed"
        },
        "item": {
          "id": "96f2d70c-e211-435c-83ae-962bd89d8497",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "495364ec-171e-433f-b05b-d3507729ad36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "972e50e2-2001-47b3-8525-526e783b0c50",
        "cursor": {
          "ref": "00d58548-5821-4822-afa6-e91db063a0bf",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "bac59214-d295-463a-b55a-f90c651f11c3"
        },
        "item": {
          "id": "972e50e2-2001-47b3-8525-526e783b0c50",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e30eddf0-501a-4b6e-8e17-7e0bc34c7a0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9fa31ba-ed9a-49bb-bcac-a54e424ea2cb",
        "cursor": {
          "ref": "34ed8e3c-d33b-44b0-9bbf-1d99e17291c5",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "84977991-0079-4651-815d-f8cb679da91a"
        },
        "item": {
          "id": "b9fa31ba-ed9a-49bb-bcac-a54e424ea2cb",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "4041e958-ffa1-4694-b550-9e0d390e90e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31bb5546-1f4e-4673-b188-2964622345c2",
        "cursor": {
          "ref": "9883e610-4f7d-4b90-97f2-5c6ac1b13b40",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "0a66c907-3dca-4f1a-8d60-9305fbfca96e"
        },
        "item": {
          "id": "31bb5546-1f4e-4673-b188-2964622345c2",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "08a11ac0-94c0-4d1b-a66b-fa314e7dbfbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e1327e2-bb35-46d7-a448-9ddf4ef793e0",
        "cursor": {
          "ref": "acbe3e75-0ebd-47c9-9f38-694dc2740149",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "0dd86b25-2c2e-4dbb-a59c-b4dfae1f1934"
        },
        "item": {
          "id": "9e1327e2-bb35-46d7-a448-9ddf4ef793e0",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e6419574-87ed-467a-9e10-ac98ec0a4a6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45dcf19e-93e5-4eb0-9d61-4004da41155f",
        "cursor": {
          "ref": "c98b4a6d-62cf-4c8b-8afc-1956391025ec",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7bf78928-a3a0-4d77-bc38-f903bc9a7ce1"
        },
        "item": {
          "id": "45dcf19e-93e5-4eb0-9d61-4004da41155f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "39cc5ef1-29d6-4ba5-a784-527204651e31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "179656c7-fd1d-450b-ac22-58a24e8009c2",
        "cursor": {
          "ref": "c5f73a15-739c-47c9-b0b2-ea7d3437a39f",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "d23d2ed4-5d70-4388-83b2-e620bec549ce"
        },
        "item": {
          "id": "179656c7-fd1d-450b-ac22-58a24e8009c2",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "38fffeb1-9d2f-45e9-b1b0-c70d83d8749d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84674434-62fd-4cb0-9e08-2b2b152595b8",
        "cursor": {
          "ref": "1d3b381c-2954-4501-abb5-9377356d1ba3",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a831f4a3-443f-4863-9eee-cc19e6f829cf"
        },
        "item": {
          "id": "84674434-62fd-4cb0-9e08-2b2b152595b8",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "4ab62ba4-056f-404d-995a-54caefe09fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14fd764a-640f-4858-a929-14e97d4e57a5",
        "cursor": {
          "ref": "1a2294f9-a7e7-46f8-af80-d7ed6c8bef7f",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "becb0339-1eed-4fe7-a985-47b149f78086"
        },
        "item": {
          "id": "14fd764a-640f-4858-a929-14e97d4e57a5",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "868a36f9-87ce-46f7-aeac-81ec46c8ae4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1037313a-d05b-4cf2-a42b-be038bb1e5ca",
        "cursor": {
          "ref": "7da2d1f9-8b96-499f-8670-f3505ad4ee5f",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2224d6ab-0a77-4458-b2c3-a9ccabd6e8ea"
        },
        "item": {
          "id": "1037313a-d05b-4cf2-a42b-be038bb1e5ca",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "59db53b0-9ade-4aab-98d2-6614272b058e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f33de7bb-6589-4eb9-9db4-c4fd51108e05",
        "cursor": {
          "ref": "6300f45e-1d76-43c4-b6cd-7b585f0682a5",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "767ea5eb-a2c9-40d2-872a-ca4c3c45f71f"
        },
        "item": {
          "id": "f33de7bb-6589-4eb9-9db4-c4fd51108e05",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "aed27bdb-7c2b-4129-9e57-2f2be6bc6718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d2b27af-8702-4ef4-a164-7a3c519ec8b4",
        "cursor": {
          "ref": "ea72f7d6-3116-43e8-b0d2-668351486564",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "3675e0af-171c-49bc-923c-1f8ad5844b17"
        },
        "item": {
          "id": "6d2b27af-8702-4ef4-a164-7a3c519ec8b4",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b51f10a0-24ad-47f9-9fd7-f02fe1564d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a51c004-7212-44ad-81e7-2219ab7f0d5d",
        "cursor": {
          "ref": "6665ae12-2183-46e4-aeeb-726dbb0660c6",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "ba3f68c6-68d5-4b54-a37c-5b0bf576e29b"
        },
        "item": {
          "id": "8a51c004-7212-44ad-81e7-2219ab7f0d5d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3f1a59ac-8780-4b17-a1f9-47c14b6a9bb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53adc988-f453-4fe1-aed6-3afc001f60b8",
        "cursor": {
          "ref": "8b0360d2-9699-4411-8b08-3ae075fd7645",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a666b267-36c0-4e2c-a2f5-74b6db30d62a"
        },
        "item": {
          "id": "53adc988-f453-4fe1-aed6-3afc001f60b8",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "51e5dfcb-96ec-4813-a00a-d41b2527d87a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7c42f96-13a5-4a16-ac92-12fb51b04b49",
        "cursor": {
          "ref": "268fb9eb-97bd-4aab-9498-10ebb07e984e",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "aa15ba56-32b1-4d81-9800-d83f907fe625"
        },
        "item": {
          "id": "a7c42f96-13a5-4a16-ac92-12fb51b04b49",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "440df786-0a0c-4feb-adf7-8c7a84ac5dd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0d4c912-8717-46a5-9032-dd2b2da12b74",
        "cursor": {
          "ref": "5be86b64-d805-4441-b942-df23881077f7",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4ab20688-155f-46c9-a219-71656104060f"
        },
        "item": {
          "id": "d0d4c912-8717-46a5-9032-dd2b2da12b74",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "05ef4417-f7fe-4e96-83b1-034816095c5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a327dce6-2b5f-41b0-b470-f1819baa1f96",
        "cursor": {
          "ref": "ee296f0f-41cc-41f1-b6c4-90fba352a8da",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e7bc88b8-e640-45e7-84fc-4a4b8fa4e456"
        },
        "item": {
          "id": "a327dce6-2b5f-41b0-b470-f1819baa1f96",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ae6fb61a-c938-4bbc-8ae8-f2eb08e31c59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c89bee4-3f74-4153-bb04-50fb29c0fc06",
        "cursor": {
          "ref": "d9230e98-89cb-48d5-9a4f-c371a8fab6c9",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7bbbf79d-a0a4-4497-95af-66298064464a"
        },
        "item": {
          "id": "8c89bee4-3f74-4153-bb04-50fb29c0fc06",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "2c1d234c-b014-4e36-ac2e-3a57d27c0935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f257ac7-92da-4b43-af92-5cac4f243b4e",
        "cursor": {
          "ref": "67cc8b4e-8b46-4c0c-b009-1337525aa2ce",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ed8a889a-83fc-4426-a885-6de3b4d0a7bb"
        },
        "item": {
          "id": "0f257ac7-92da-4b43-af92-5cac4f243b4e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "11a2f85e-fd95-491e-80af-6aeac686047a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "907734b2-e3e1-4e67-9619-92294ec7f57b",
        "cursor": {
          "ref": "437da24b-d25a-47c3-be64-dd9f619d1b64",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "bbf5b161-5cdb-454d-9a03-e6cfd32f120b"
        },
        "item": {
          "id": "907734b2-e3e1-4e67-9619-92294ec7f57b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "dfb307d8-b7a5-4bdd-9c8a-f24282814c71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99bf82f1-45ed-4e70-9090-3dfc69672f35",
        "cursor": {
          "ref": "2516da7a-fe6b-4b18-bae1-86be7ab116bd",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "7da96722-1824-4a4c-9aa2-8334ea19b555"
        },
        "item": {
          "id": "99bf82f1-45ed-4e70-9090-3dfc69672f35",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "0f972ebd-537a-415d-b565-a2f32081e8d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df93738f-9b05-47ed-b637-da4090ecbba1",
        "cursor": {
          "ref": "35679fda-25e8-4bfa-86a2-7de569616082",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e33b4e67-a47b-48b9-87e1-c1c008192b57"
        },
        "item": {
          "id": "df93738f-9b05-47ed-b637-da4090ecbba1",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "0541fe65-bbe9-468a-bdc0-f44b5cbaedc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd9dba42-8548-4cff-9982-345cccc164e2",
        "cursor": {
          "ref": "889be74b-ee8a-487d-84ae-2e0364e08222",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "87a6e2a2-1768-4be6-bf32-5c5fb041628a"
        },
        "item": {
          "id": "cd9dba42-8548-4cff-9982-345cccc164e2",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "4fa7ecd4-bb5d-4ad2-be3f-853f63aaf1ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd6e3ba3-6a78-4ed6-84f1-23e04b595d46",
        "cursor": {
          "ref": "f898f6f6-4103-4663-92c3-aaef30b40985",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "bbaa8190-b42b-4da1-9d37-17d36371dd17"
        },
        "item": {
          "id": "dd6e3ba3-6a78-4ed6-84f1-23e04b595d46",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e659891b-8a36-4270-b813-5794191e944b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "649d2219-7f3f-4bdf-8a2e-a7c8eddd2ca6",
        "cursor": {
          "ref": "72df50ba-a88d-4896-a7ae-97622812dc4e",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3a3315ea-a945-4030-ba3a-ae343bd469fd"
        },
        "item": {
          "id": "649d2219-7f3f-4bdf-8a2e-a7c8eddd2ca6",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "3035ef1d-5e76-4413-a4e8-b163923ff1f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1963c0c1-fa92-4f87-a905-5531da0cd781",
        "cursor": {
          "ref": "ac5cc6dc-1723-4435-8214-72e84d21ebb2",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "1f2ea7a6-e18d-404b-8670-c344c64b46fc"
        },
        "item": {
          "id": "1963c0c1-fa92-4f87-a905-5531da0cd781",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "cda1604c-6256-4e69-94f4-b40915937c92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baf0336a-0ae9-4dc5-9eb3-6da2c9472d50",
        "cursor": {
          "ref": "c6cfd937-e839-4ce2-a9c5-5be389c55777",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "60e07751-4608-4d6e-9019-97b56b2bc386"
        },
        "item": {
          "id": "baf0336a-0ae9-4dc5-9eb3-6da2c9472d50",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "74c14a07-fc25-4a26-b3b2-8e0fa4a379a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d0bf8e-98ae-442e-ba56-2a9451d52d72",
        "cursor": {
          "ref": "64a43c2e-0e3e-40ad-8be5-563882560a10",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "38d94b8b-39d4-45d3-8c8d-aafc74e7ccf6"
        },
        "item": {
          "id": "c7d0bf8e-98ae-442e-ba56-2a9451d52d72",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "27730f73-43da-45b2-b28f-bd4d5b39ab93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b69681f-b0f1-4221-89ee-f968aaf93b72",
        "cursor": {
          "ref": "bd2a4a4d-565a-4299-8df1-fa08fdd9d268",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "20ba1940-dad0-4795-bde0-b0ea722a4e3c"
        },
        "item": {
          "id": "3b69681f-b0f1-4221-89ee-f968aaf93b72",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "07200b91-c32d-491d-b693-49c8cdd954d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "884a1004-2ec8-4052-ad34-ec6deebb6e04",
        "cursor": {
          "ref": "84a17317-c3e6-464b-8d8b-0023786ec6c3",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "02cd0ca3-9a41-4093-8ffc-ba14175a4afc"
        },
        "item": {
          "id": "884a1004-2ec8-4052-ad34-ec6deebb6e04",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "3c8bfef0-ad85-4461-949e-09860b44e364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b146f1d7-60b2-4d11-86d1-ee24e1e5203a",
        "cursor": {
          "ref": "361ca3ad-7eac-41b8-9f02-ee36c544010c",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "81ad6a0e-7f06-4bf5-a469-1403eb9514ea"
        },
        "item": {
          "id": "b146f1d7-60b2-4d11-86d1-ee24e1e5203a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "637f6629-fc67-4679-b212-21e2a2d24312",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "acc170e0-10b0-4d30-afa1-95a64a0570f3",
        "cursor": {
          "ref": "5a5fc281-27a0-4b45-abe6-c86552a04eb9",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "953cf7ca-def5-4887-851d-c2e8e5cbf0fc"
        },
        "item": {
          "id": "acc170e0-10b0-4d30-afa1-95a64a0570f3",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "6d1dffdf-71bd-409c-a5ce-2af6b3565b6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "7ba9f331-76dc-40d1-b9c5-aa952ada41bb",
        "cursor": {
          "ref": "306e1461-177b-4697-84fb-467dd8468b7b",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b125ad4a-60ee-4a79-a37b-8a628ec8b8d0"
        },
        "item": {
          "id": "7ba9f331-76dc-40d1-b9c5-aa952ada41bb",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "04fff5aa-3771-434a-a91e-d901bb55464b",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ce27800-13f8-4559-8d5b-b91b768b362a",
        "cursor": {
          "ref": "ebb59726-df36-4cf2-bb68-cc3c312e7e78",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "dfb283d6-6d8f-465e-a51b-773d133eaa46"
        },
        "item": {
          "id": "9ce27800-13f8-4559-8d5b-b91b768b362a",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9e6a26b7-e6e6-4a78-ba4e-44f431810cb2",
          "status": "OK",
          "code": 200,
          "responseTime": 2079,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed90954c-19dc-4a90-81ac-394c2c4a9d46",
        "cursor": {
          "ref": "5872140c-45b1-4e23-8beb-62ca70dd4ba7",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "9dd3cb49-a9b3-4169-ae88-89ba3773de77"
        },
        "item": {
          "id": "ed90954c-19dc-4a90-81ac-394c2c4a9d46",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "627c90f4-b266-4ed1-b6f7-d46af8535ff9",
          "status": "OK",
          "code": 200,
          "responseTime": 2334,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e4cc6e-6bd3-41a6-adc4-ac4c1a2dc7a4",
        "cursor": {
          "ref": "a9e7d618-a3cb-4726-b08f-8f3ff382e228",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "928ee6f3-a006-47fc-8483-06222f7c3339"
        },
        "item": {
          "id": "20e4cc6e-6bd3-41a6-adc4-ac4c1a2dc7a4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0ab6a2d0-bae2-443b-8655-548458262929",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "20e4cc6e-6bd3-41a6-adc4-ac4c1a2dc7a4",
        "cursor": {
          "ref": "a9e7d618-a3cb-4726-b08f-8f3ff382e228",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "928ee6f3-a006-47fc-8483-06222f7c3339"
        },
        "item": {
          "id": "20e4cc6e-6bd3-41a6-adc4-ac4c1a2dc7a4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0ab6a2d0-bae2-443b-8655-548458262929",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "20e4cc6e-6bd3-41a6-adc4-ac4c1a2dc7a4",
        "cursor": {
          "ref": "a9e7d618-a3cb-4726-b08f-8f3ff382e228",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "928ee6f3-a006-47fc-8483-06222f7c3339"
        },
        "item": {
          "id": "20e4cc6e-6bd3-41a6-adc4-ac4c1a2dc7a4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0ab6a2d0-bae2-443b-8655-548458262929",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "a0d10281-1010-480a-9556-aa6c4341b5e9",
        "cursor": {
          "ref": "4fb5a454-602e-4970-8c8c-d4c7dba7c469",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "da8cd809-edf4-4e2c-8878-b897595a4140"
        },
        "item": {
          "id": "a0d10281-1010-480a-9556-aa6c4341b5e9",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "e2368e86-6224-4da5-a2ad-f580d90cbc1a",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "64a8c49c-efea-452e-affd-db319a66d51f",
        "cursor": {
          "ref": "0a7913ca-5c5d-4f15-980f-fbc8342ca177",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9dd91ae6-1ea6-49e9-803c-48c265af7166"
        },
        "item": {
          "id": "64a8c49c-efea-452e-affd-db319a66d51f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "090bb499-d6e1-4e91-b5a6-17275bdfc497",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "64a8c49c-efea-452e-affd-db319a66d51f",
        "cursor": {
          "ref": "0a7913ca-5c5d-4f15-980f-fbc8342ca177",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9dd91ae6-1ea6-49e9-803c-48c265af7166"
        },
        "item": {
          "id": "64a8c49c-efea-452e-affd-db319a66d51f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "090bb499-d6e1-4e91-b5a6-17275bdfc497",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "a24838b8-3c1f-4056-acba-ad392a82ed27",
        "cursor": {
          "ref": "75ce5d69-0f05-418c-91fe-273d0210b12d",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "9088b7ed-fad8-4b1f-9481-2ff619689ce1"
        },
        "item": {
          "id": "a24838b8-3c1f-4056-acba-ad392a82ed27",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "68d9aff1-6ab7-4fe6-afe3-ba5e746db93d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 109,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "dc24c1a8-6352-44e1-b3b3-4236fb7daa37",
        "cursor": {
          "ref": "47a436b8-903f-457b-b868-a43ba451bc0f",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ee4e8ad8-2ca4-42c3-a011-8d4f5cb6f897"
        },
        "item": {
          "id": "dc24c1a8-6352-44e1-b3b3-4236fb7daa37",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c63d12d1-1779-4c34-95e6-cec976b3ea1a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "dc24c1a8-6352-44e1-b3b3-4236fb7daa37",
        "cursor": {
          "ref": "47a436b8-903f-457b-b868-a43ba451bc0f",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ee4e8ad8-2ca4-42c3-a011-8d4f5cb6f897"
        },
        "item": {
          "id": "dc24c1a8-6352-44e1-b3b3-4236fb7daa37",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c63d12d1-1779-4c34-95e6-cec976b3ea1a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "d554115a-ebfd-4510-8afa-0b30fcf6d4e1",
        "cursor": {
          "ref": "d771797a-b0c5-49b1-a950-14d8bba5526c",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a67ff446-085f-4041-a7ec-8ef81ec3a742"
        },
        "item": {
          "id": "d554115a-ebfd-4510-8afa-0b30fcf6d4e1",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "be3ffbba-ec7f-4170-89ae-b0d8aece4fa6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}