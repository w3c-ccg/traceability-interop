{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "95ee15b2-d0db-4798-9e89-b49eb321e65d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3376e1b4-30aa-43e8-b0ac-185a2dad9eea",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "21371ec0-f780-495e-a701-9a1cecd17980",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "59782dd7-eaeb-4c1c-a518-0c2951d5ce32"
                }
              }
            ]
          },
          {
            "id": "f8704176-4c7f-480f-97e9-2553e86fed03",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "35e9178a-0e83-432a-bddf-27039ee57d3f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8104fc73-130b-47af-a284-d2aab2bad103"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "3bb8c9dc-0e1a-4bc7-8b60-b45545582715",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "0a13845a-7d7b-4f6a-9894-b11e8396b979",
            "name": "Positive Testing",
            "item": [
              {
                "id": "148df7c7-b332-4edc-a381-199e8e196d3d",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "58595654-dd11-4247-a41f-2f062a72d3a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "521bef45-73a6-41ff-9451-718f6f6c8d4c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "29d9ac57-e7cf-4b45-ba7e-39ed9eaf5747",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "29ac5ada-9b9d-4b59-849d-40c9ef7018a0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9ba2b7a1-faf6-41ae-9f33-aa0f3c902b6a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b612fd43-07b2-48cf-8b52-931cb8c157b5"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2ceacc71-115f-4189-b703-4d89680f7804",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "30ba057d-f569-4415-a4b1-2d35d892c797"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b04164dd-7670-4017-8512-edb6545c99f3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "09973c14-a7d8-4e96-a76a-8e40356ca1fe"
            }
          }
        ]
      },
      {
        "id": "3ae6d463-eb46-49f6-83ac-f1837596b3da",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "f2455c14-7727-4e8c-a483-ecf965f9b624",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d335dfb4-a874-4b90-96ee-fe4fd7d4250a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "66eac3a1-3e6a-4722-a36b-1e63f5dd517e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0892f7f2-42ca-4f0e-ab5b-3fbd38cf915a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba4d4ae5-572c-4410-9b72-bfb23be2a34d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c62e4c27-f589-4179-bcf6-eab844add3b7",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda48409-3e5b-44e1-9dc5-bab179b2cde9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f1c79e51-39e3-40ef-a6f1-146ffcebd5cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f65fc99e-c444-4082-971d-3f67661203e8",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99cd83c2-6b7b-4400-bda5-026ed203d016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb9152aa-92ed-4ac4-9629-6afd50339b6b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f570335c-0137-408b-97a7-36d6d11f2718",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e7df6b8b-e5ff-40d1-9d77-86bc2a4e07df",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ea7914-5a04-40fd-bcb5-a3a281dffdd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d5557da2-eb27-4bbb-8a3f-5e7a24e68c10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3f3831a-3b7f-42d1-87ea-a5271c5c21c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f351216-345b-4220-8a04-1db706033e93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a7ded04-8955-4076-a3e7-b11f9ee5a90f",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a1b44b-5c54-4f57-9d1b-b1871deebe3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7921b00b-4538-4acb-8c70-64c50961b6ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b318c723-5389-47cf-b14e-a834fccb4d07",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "def862b1-ab31-4c84-8035-f3eed8ce79ce"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f8693c19-0fad-483f-a4ac-0130d1f30e94",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5c1e035f-60ce-49fa-961b-290ba54e3cab",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c3ee4a75-4716-4558-9c53-c41616280269",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "cf8a1bb2-ceed-4290-95d7-bd3126be6a89"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "95d5b47a-8413-4ba6-9d8e-b55267e35e98",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "d62d0ac9-f16e-4ccf-8910-f929ee07e04c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "69eaf038-000f-4b8a-9eed-0cae87309143",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "020d811f-b173-47cb-b603-8b798ddf29fd"
            }
          }
        ]
      },
      {
        "id": "0829f979-5bc9-4d87-bb97-c86638748892",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "b08136bb-1fb5-4224-bd1a-5aeeca3a726a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "81a46b02-4493-456b-b71f-0a940f45ed1b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "08376f5f-17be-493e-9765-6b833b2feaba",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d358f8c-92e3-4eb4-9458-3980828940a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f58b82e7-288e-4c67-8ce7-9610fa54686e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11995862-674c-4e43-9e03-c50a719f4c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c37bfbcb-0bab-4df8-99b3-e81cc33dc0b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cac22e5-77e1-4929-bfa5-220523e15a56",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdf85f17-d389-4efe-842c-36a04b0d487f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d54cd8f6-3263-4f71-b4be-450333ce06bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4833e329-622f-467a-8b4a-15a4abbc2c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5789edbf-8e46-4a91-876e-a2e7c90b335d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab36973e-bdb9-4300-83ed-e4d81cac33a7",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89fa36c8-9e18-47de-aab0-67756e12e8e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "249359d7-5b1f-4372-854d-e98de158fbfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7d49f3a-b7cc-451e-a8d1-a8aaca0142e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a508283f-4bfd-4efa-9d59-30d6a432c27a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5edeb56-ffa0-4600-a6af-3c24f6b16bf7",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "187c2720-9546-4de3-86f6-419366c3cf08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bc41b34-2616-4dfb-84e1-762f3d846d5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43c1edd6-4b62-4a2e-8149-ce9eb6670c85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e18e6498-f892-46a4-836b-c7926498a9aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f32231bd-3ed7-4c53-b0f3-1e2b28e6ed4f",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22eba01a-ca3c-46eb-aefd-ea34314f1f5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1354fbb-daa4-4064-8af0-262605dca8da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38ece1a9-a0c3-4043-95bc-36718d3ba3f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "085680ae-96ee-4e58-a292-29c2faa3c93d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "468f6a28-1d8a-484e-9cf1-ad6d6e5293c1",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa0fc477-06cc-4cb7-be90-0a1fc27f57c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a667035f-5e08-4722-8724-b79e7615e988"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cd3913b-6600-4f5f-9396-3bb2acf58358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3b3b0a5-649f-4e3d-999d-5d0704841454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c14164a0-0aaf-43f2-9c56-ee690708d663",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e2caf11-7e86-4f25-a2e9-0e3b2f85f082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ea5cf1c-bdb1-4150-8ee3-7ca9b91a1d4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a6d7587-eeea-47e5-b831-ab36f8496d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78b9db93-54f9-46cf-aaa0-10524cb8db99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da1b901b-cd3d-4f6d-89c2-bebfa19892fb",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de3b32db-427c-4851-a33f-75fafc27a712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63b29d65-dfa4-4565-9e40-3beaad56adc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4ec875-4631-4f36-ac86-4c5960a7a0e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cbb4d69a-3cd2-436d-975d-e85c7c6784ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f606e9b-36ef-4ba5-a799-31a3acc9e337",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "281bdff7-dfa9-48be-8e28-da2ecfa53c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6492654e-a281-4076-804e-a0c237361baa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba650eaf-ec94-4371-9be9-8efe601e4e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3347a64a-e9e4-48fd-b01d-b2fcbb559c84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92db2086-82e6-4547-a5b0-cd14cc56fd3a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36b2af29-7ecd-4d79-882c-a6240235d00c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22e1b382-eaa8-4b63-b5cf-137c2ef9f97d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d48ed064-c4cb-4a73-91f8-6c045e79f295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c07e3250-7dbc-4e36-9c3a-2ed061b59aac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c076a4a4-1111-4b73-853c-aef46159de05",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "324dfe0e-7011-4f76-92f8-87332855ee5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48c112cb-6ee7-4683-b385-8ea7cbd22b6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c6e0c40-8a64-4e39-9699-cdc493e052a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42bb98f4-49cf-4d3f-a1b5-925a0ec88674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df4c16cf-5fd8-4967-9c40-3f6aa9746b19",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c72add-54a6-4518-a35e-00ba3f363e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8843eb86-37d4-4cfe-8460-10c6a9643fa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a063618c-c1a8-4fc3-97fb-88c0d44242c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7be4aefe-5cca-45b8-948a-97ea5346b62c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a4b0a99-79e5-48e0-93e5-8b2e470ae2f5",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c2fd06-0ff4-497c-a049-7eb89a29d189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "576e3345-5dff-448f-88f0-f497a3e39ada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e18eb7-0bb6-4cbc-9b9a-fba9ed359afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6dc96092-d28b-440b-83fa-c6355272b340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0db1a9c-76f4-4d9f-8b73-b3149471e1eb",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74135aad-5f5f-4ca5-90fa-87ac045832dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00e19efa-e14a-47b8-8b35-6ed90c588612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80121071-0b70-4cec-b591-bebb19829423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "45ceb8eb-9872-4381-9fd6-e08c11c5fa85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5596ee62-fe5e-490d-a865-e8396369fd0f",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe6e0db0-b3c3-466e-bc25-0eb615a07bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f186876-7a9b-4b3b-bda8-a8e9b3932523"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "412b95b6-b7ea-40fd-9dd1-75c822495693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df836e1c-7661-4523-a0c5-17acb06f9166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "286a0613-fa27-4d4e-b8f3-e82663f357c8",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c14129f1-1172-4e5f-a8bd-9a598b552c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1c9a679-cf24-4d8d-90f6-280ddcff614c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5fc46b6-8b24-47f6-93cb-1861e9654b5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d30e5bd-521f-4614-b14e-ecf185a886ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f92130b2-a1c6-453a-b3f1-c06a3b4e903f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a1bdf3-a7db-462a-82b7-646dfa7e5e07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad489c70-9ae0-4e3d-8464-9ea065c8ba79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7525b55-16b3-4a1e-8b84-75902239ba10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae6dce4c-6957-4ca7-a1f1-ff65db841847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "480971b4-8a75-4bca-94d6-bc476c46e604",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85f24154-f888-4368-9cbb-4ac3d2509679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c62a11a1-59fe-473b-af99-ab218508d0ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4737151d-391d-493a-97df-6228cce5c592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "59a6c2f6-7145-445c-a40e-4d5079c4cfaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fd555dc-c033-4d1a-92df-140933a0a293",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e21e7c82-94c2-405b-9bae-1ae7821d3ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce293ede-2ad3-40e7-99dd-70529669ad9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb9896f4-5d32-4622-bd4f-17e95501e80b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "32e85a10-a8f9-4512-b274-3a3b733d6540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa9e872-cd02-441c-91cb-43188aa40720",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09de1687-474c-4d95-a499-99f90d5b56dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "282c7377-1eb4-44bd-a0ed-585b8bc08988"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a79a08f4-dd5c-4fbe-ab0d-f109bc3f58d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1081211-0ec8-442f-9f65-96bcb2d792eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43bf64b4-8969-4248-b356-e39ff875d557",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "471dae17-a205-442c-b314-36034c1085c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "539341c8-9edb-4e79-af0c-ddc8130ecb87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a21500-f8f7-48f3-a87e-039c86bb53b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "44574dc2-33df-4b31-9da7-8f2d6a4a0698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "110e4237-3f76-4673-b891-ee9e9e0acaab",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbab06cc-67bc-46ef-a97e-dff8e76ab33a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "270eef70-b3a5-4978-9fd5-3663ad077ff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b59683-d027-471f-9ce2-981108bbe189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2aad4294-bd86-4559-90eb-633b88795381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71d74984-7f56-427d-9afc-9d523bc19151",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0b711f-cfc8-4f97-9e44-4f2ab9e06266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2572ce12-6ff2-4049-9b51-3ebb437b2708"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a55b68f-592d-4ca2-be0b-40595f15f6f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "203ae888-7dd9-448d-909b-d778bf5bf260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a378a6b-3d43-4dae-9983-1ffc2b80840e",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b390ce5-e7f4-4518-a729-5ba86b7b9e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b90f2ba-c511-4f8c-bdc2-f9e97ae6bf2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbbc4ef8-f116-47f8-b6d8-58086f4ec90c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8f7f497-a962-4786-a6ce-7518825774cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98726058-e06b-4c31-b63e-d68a493ee68a",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8534e0c-0ddf-4f8d-b2cd-58c1f6b025ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e282c709-30bd-41ed-b2c2-27329cc246b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c5e162d-052f-4af4-bbd7-8a777827e52f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5970b1a7-25d4-4c5d-aa63-808e2c56c10c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c558cb57-5c82-4180-80c6-aa5b7a4f0b5b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a8259c3-e05f-429f-9af6-01d2e2f961ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5487b64-32d9-41d5-a6de-4d2334ac68fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44623ee2-4b72-4148-870e-4261408ae1fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9618cc15-3869-46e1-921a-48b026678962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b7a469-d0d7-4638-97ed-ab06f4b0826c",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f87d8ab-cc07-4da8-bace-43a13d06b63b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16a40ed6-1f38-48ba-a6bb-036f44f993cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffbec478-29e6-4a37-aa69-d5ebafa2cbe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "659fd668-8e97-496d-b82b-985414e25368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6fed6c-debf-4c08-b25c-a9126df48d47",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6b0c9ca-d66c-4290-b68d-188cbaae68c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dffe772-929d-4fbd-b43b-456ceecb2186"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "580f578b-8a54-415c-a683-2edb84be7010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b9773ba-ddc5-47c6-8911-c859f61d7896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8049a3c5-96a6-4fe7-939e-0a99015ca3cc",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85ca64db-90f5-424f-836e-a29c297c411b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37bf2892-5b33-4c6b-bff7-abb56d4e4995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31894856-ab47-4b72-807d-7bad479f2e26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a947b8e5-8d87-401b-8f65-916d8f255b64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d95ce1b-d538-456a-ae0d-e61c5c349c0b",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27f18a50-410a-4f9b-bbc4-f95736b2351d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77cac455-25da-4340-a8d3-5d952aa5f500"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c7dc2c8-153f-43de-a1a1-563adb5d8e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "2edb767b-a222-487c-b7c7-df8e37f7eea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e971fd0-4ef7-497b-8e46-73ff7c289bdb",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ae0b30-28b7-44e2-b069-60ee2705efad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3635d2b-3e14-412a-a318-fa48fa5ddf12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8003738c-c2a2-48eb-988b-d4d726d113eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "201f2406-3e3e-4a10-b20a-a7f90f328169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bb63eda-7814-46a0-a599-65b71741cace",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "020696b8-597c-42b6-8d1d-cd30b8446f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afc32d25-9224-426d-b61c-94c25ab6a11c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb36cb06-09c6-4819-89fc-165372950c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "572d9acc-d523-4455-8c42-7cd259fcd2d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68eae28b-c20b-49d5-b1ac-2cf2e8e849e8",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cd031c9-4ec5-4c46-ac18-4a0e6b6dbd84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "625dd4bd-f245-4741-9fdb-771155c701f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24fe7972-f76e-4472-91de-edc256daea1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "89ad4db8-ca7d-4be9-8bbe-098e6e261dbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c68b691-9187-4b5a-821f-40356df465b1",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29f11dc9-d4e2-4e11-a54a-3f7609e7297b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb04e2d9-50c6-425d-8f5f-94837d82cb7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea24e88-86b8-458e-bc97-e0f7245813dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "533a4350-372e-4ac2-a972-6a5708c616be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f87edb4d-aa02-4b71-85fe-26bf3a744f26",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "658245b1-68b2-4b92-bab1-208832764c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d49b67a4-4f2b-4caa-930b-bbf82421de25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de695bf-89c9-4062-afd1-32174f760c50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0c7b8306-e9e4-45a1-b520-f1074f69118b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79a113e5-aa4d-4f06-8b87-8734aee1e638",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b326d266-0717-41ba-96ae-36c0545a691a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5df92520-bc83-47cf-87c6-9ea9ea4e2d01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ac6ff27-aede-4cc4-8317-333971dc7684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "61e97c33-321d-40f5-b94f-7bebcc019175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed56bbd8-ca51-4a94-a4ff-fae0c895ffbb",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd3a2ada-5a2f-4000-abda-44cd8f1fcaed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53a02f9b-d5fa-4d12-9b1d-d2c44322c761"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "578afa14-5749-47c4-afd2-80630d62c587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "91ee1bf2-e4cf-4692-96d0-631e61d15137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61e04d40-95e4-4d33-8b93-2d0bb5a7545e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67eda54a-af1e-4497-b938-43820b45d705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b69dd45-b4b3-4e92-b38a-fc0dd8111ea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b319a2b-a49b-482c-98ed-7da97eedbb2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c825a847-cc70-4279-93f2-1067032ee057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c49acdb-e82b-41a7-bc17-09d2453e75f1",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c455ac1-82fa-4299-8e3e-a8658b2cf238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7e5bdec-7e39-463d-acf9-2e40fcf9792c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "637c1d70-7b86-45d6-8f65-b07b5c3c34f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a38a9685-d680-441e-a4b0-524e51e1c25e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43d62677-45dd-4de6-82a9-b1eab3c65309",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c12b77f3-a69b-45e4-9640-753b2e34ad17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "907f94b8-864a-4530-bb54-ba140399cb2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1707746b-e66d-4073-ae46-1f93bf723bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc2b9da7-231a-42db-b1a7-4c8db46c26c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c565533c-5b4b-4d7b-9714-0391cf09ffb2",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32643dba-69f1-4f5e-af9f-9ecd03a97aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e1f9f39-5aca-4975-8c23-bec681a6f4ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ef0b37-f73e-4617-96bd-b1d11f1dda0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff2dcc5f-4bc7-4167-9fd5-57262212a888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832458a2-0104-4dc7-ac12-1248950971f6",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe42b6e-df54-4c2b-8dda-71077643cf6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19d2fc13-bcf3-4ac9-8210-747fdb10ba20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45dd6b9a-5ea8-45a9-a53b-53d7fe9a61c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "397fadad-524a-4b50-a7cf-1dd739139ccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73e98db2-6644-4420-819d-bdb3c343478f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b590630a-7a38-4bb5-a5e9-d8c159148b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b91202e-a7ee-4b5a-b186-6fa594a4cf7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c408cff2-4f12-43fa-8737-167454b945a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9aba55f8-e44c-4b5e-8c99-e84c9a4706a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8fa4f55-c16f-48db-bb5a-f2ce196c2159",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93152838-0267-4198-b5b0-1343f3c3db68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2303f497-f2ef-4ae1-a726-0fab198c8d69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a37fa50d-be73-4ee1-978a-ce893137f211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa3b7a61-d295-4812-95bb-d1e4d27f8468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7e6f104-6a39-4795-b5cf-ba84e1d92aa8",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f6a5ade-e70a-45e3-a35c-070d4bd23e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b602fba-523d-4933-897f-4bc32c52cd48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065e22e6-dad7-4e0d-9191-6737e9d77c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0837c2dd-716f-4402-8803-c85afd1263ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d00ce52d-333f-49d1-8b8a-bbc308f01bca",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc809ad-5587-47a1-b5f1-8448a7ec836a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38e44435-8035-49f8-93d3-c14c639dae49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7704a3df-7ae2-482a-ad1b-a016a4e82fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ef858d9-5d4c-4c8a-8ef7-7578bf4981bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e72304ed-df8e-4c8a-b342-4d7fafa1a3ee",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53eaddaf-be8f-4607-adff-15e123c02ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6474671-1bdb-43a1-b92b-18513382426b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9896adb1-a965-4108-8c9a-6f0ec5f74cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fef83acd-549b-48b6-b1e6-47b274d17c44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3d754cf-6e58-40f4-8e07-ef63edb19549",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80382189-da25-4bb5-8f4a-736bf8286cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4a3e634-0cf4-43ab-b85e-68146243d8d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46bde09d-f8c5-4adc-bce3-c3a1dab8ec54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b4581dd-7a54-475f-8118-9426eadd9c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd683b8-cf7b-43e2-b857-73d85a4bbe1f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b523ec33-defe-4af4-a4d0-f77e07d76a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a7303c1-33df-4a7b-9e98-638b1588d013"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebfd5c66-2307-4f73-b045-42ef5ce8e8a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a66386e3-4f10-400a-81da-b5bcfd0bb1a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3444cca-a44e-46c8-a112-2abef62e87f9",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "468a3011-11b2-4daf-b542-9786332a7ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf92fa42-cda2-40da-87cd-652ccff885ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1629269d-3b31-4a01-9ff9-1f3d9368499e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "401f6b44-1d0b-461c-b93e-2ff16c5fd380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bedc28d-54c0-41c0-a62e-5440adfa14f8",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1b43204-7c5f-490e-85f8-ff05a0be1c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efbda12f-871e-4d10-9fe2-3a730c7cbcbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c647c0e2-66cc-4e84-9bcb-b68a1b4f6272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7d2f54a-dafa-4564-b81e-1f9b7f0320f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e38facd1-b8ae-4c5b-92d2-99da375e4a54",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d667f84d-4263-4677-b924-f76cafbb81d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfb427ba-23f9-4a25-b614-047c4ac96869"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfa277df-5192-4557-a227-0f636cc35ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aeb9064f-3977-40a6-b201-c928ff7415cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d18dc8df-882b-4eba-9aad-6a9fbf188666",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5c98cf3-72cf-432a-b8ad-c196ae4d9381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b4aaeeb-97d9-41e5-b25d-8da35d8e4fcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "577a30c7-d257-4acb-818a-6cb2aae40f93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8dd88968-8c6c-4454-85e7-5fdac2ecd184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "962b9ff5-646d-4a6d-be07-c83bd08f2105",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e807eb16-8c64-4ba2-80b2-5c44f26356d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "411b3bf1-a42c-48ce-b971-c59389b99b8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f4b7efa-561d-42f8-8ae0-192b82341ad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6674678e-229a-4a8e-8048-70e233c7690c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "024d5e44-c930-44b4-b331-7c64ec66b1d8",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07ba38b4-c18b-4d89-8a62-db135b2966c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14f3f34c-fab1-4d02-9c63-5405b100ae96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "871ad62e-40de-4b72-b2dd-734deb599836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b58a476-879b-4511-908c-e242ee863fec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "455e1b98-7c96-4cfc-864e-a43f760df1ee",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51797f97-0159-4df3-be80-fbf3c5addad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2f7a355-526c-40f5-9261-3eae81883497"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c32b5a00-8dce-4062-a945-670c667c3b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "dbaf4963-8a38-4a63-9de5-45463ebf9f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca9a430-deb4-42e5-8c9a-1cd5d4d523a8",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c53ade9b-b15d-4966-802f-fb57204d2f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22ca4499-ba5f-4821-b993-4a75827dc601"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6088a6c-7d06-4d4f-a6c9-24baa00a6779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "71b51628-8913-4255-9658-ba7da535d97a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a56717-1046-47f5-9319-66babfbbb1cb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc2b453-2d1a-46fd-9740-cea62ae4e12b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5437166c-32a5-4321-9b9c-72243457ef63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae8f1fe-4449-40c9-b671-b0482c546ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "44096545-5e80-4a73-a0f8-f1678868a9af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "651d3dcd-b247-49ba-8cac-04a5f0faa521",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb020f48-6934-47b6-9f86-f7ee33af1803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a6b7044-ecf5-43ef-8dc4-00734f1f1368"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f8729db-5d39-45ac-b3c7-b31aa74683ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a351554-0080-4b9d-bc49-5d0eaaf3ea34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38c5cf6-8b08-4623-9945-7f75e1a137a5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eb014ae-5932-4e70-b2d7-fbd08b4e084a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c78addf-1178-4fae-b955-293441fcaa71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ffa9d7-9394-447c-aba8-d0d7446262e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b03ecb3d-5992-4019-b90c-5461f0c6e62f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f828bf89-38c6-4b5d-97c1-d5bcf96be154",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "192433c9-011e-40d3-923e-c1bcfc02b68e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5aad92c-71ad-4ca8-87ef-8de66974bbe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11e15665-ab3b-4b6c-95b8-e3cb61a73b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e68292b8-03ab-4f12-93e4-e3351620a0ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dda1e133-ac9d-4251-b5af-62faa878fa5f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f712d3-8b2f-4a9b-844e-22d16e8e1dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64c23b08-8941-4bec-ba48-749c9d96d27f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efe80d47-b153-429f-b73e-7dfff3ec3828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2019bfb1-9149-4ef1-9d3b-cc920ac3257c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58c4cea1-483d-4e3a-8805-f492757b1a16",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84656011-d83e-41d0-9ef3-c2f2929c7889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c23624d6-23a5-4d5b-a5de-180c429acbba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "631b0be3-5b90-41ef-a3a2-1989c4772b49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "104be800-0b01-4ad1-b1a9-fb44c509d9ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d00ed21-ee22-4fbf-b991-9f896084a422",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e23e7f3-4213-48f5-b2f3-74450c9719ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0579c57d-1d2d-4183-99c5-3d10ba5e67c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "031e24e4-7f0b-4235-9fb9-b6a24608bcfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "40b31e0a-0099-4ad6-85e6-59734b663572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ccaf614-171a-4afd-a6bf-fd4bec89251c",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f5ddeb6-a8e0-422b-a920-33486f12d780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09d64fb9-849e-4095-9875-6da52ff9831c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3764baf0-ef55-4e7b-910b-5a599c7f6e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6aebf4df-eca2-4910-8a9d-ba88e6aa38b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad1331b-39be-4f41-b629-975b6c5658f8",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4ce4b34-c344-4d06-99f0-cbf8778527f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45118649-097f-4445-bac6-aad3e82f3807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "136f2032-ac38-4f54-a340-6695cfec4780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b100ba0-792c-4df9-9977-a506975f903a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d71e09f-f7d8-4346-9f12-059e0c546045",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b9fab98-5617-4c1a-83dd-298734880c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfbf0977-c0f3-4771-88ed-8d91c4045235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed050f71-3bb3-487b-81f9-de8d295e0a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "64b0a630-2809-4c28-9c15-011e747e5f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a85d4c92-aa53-400c-af6d-050f3ae87757",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d4f0c54-a9fd-4f91-b7bb-b14335fa6eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eba2e48f-70db-4d58-a0bd-83d8d73f951b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c591af6c-5720-42a2-967e-e63b656ce82a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "397afda1-4e28-4ba3-ba3d-4f153b93c828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd81821-3468-43a2-854d-aae9da767623",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73dcb556-5ef5-49c8-aeaf-c6a6e37dc905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "057dd939-ffd5-4923-9833-5391ed1c0358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4435db6a-0757-445b-a2b4-f0f219a38e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "38125dd3-c98d-4a28-a634-8db5b8177db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af4a2bfa-c792-4eaa-9d87-c6b7e6e8203e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ccc30f7-d4ef-4d9a-ba9c-9ef43b1a1360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b04a78c-070d-46cd-952e-babe0f70868f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "043b81e3-42e8-47b6-8723-f12da1ec8427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7767745-e13e-4b5b-b1a2-996b3a96a7f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "455972b2-a6d5-4458-98e5-60ce9ecefd80",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc80862-6255-493f-9916-34d110d8aff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88dffc64-33de-4623-8ff3-361a27f7806a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e5495d1-d690-4019-b519-1b0d7df56e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef2535c9-e578-44f4-82ad-e5369a83f7aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9345b1aa-dba6-4fab-8859-154ee14e81ca",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bdb25a8-dfa6-4bc3-b0a4-4f04572c6d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "406d1b6d-f2bd-4c9a-8c51-92f624af0388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db3833d4-5ab7-46eb-93fe-c56fd2027825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bbe086e-b67c-47e8-b357-c34d5bf82c30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b24d072-5acf-4e41-b9aa-3a20d2d9d290",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ce7c3a-8628-4886-ae94-2a9966f94f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9d183f2-bef1-4406-9145-742c46151805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43da906b-39b6-4c71-b5be-59536ba26609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b7c0971-228b-451f-a647-7874986e1c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99166596-6397-46a8-acd1-e3ba718182ea",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb3fda7-b52f-4c9d-ba51-26d20d9f8646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fb6398c-c6b6-4de5-a57a-34e64984060b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd3e57ab-0a32-4518-b988-66b00ce18b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "61dcbe03-c8eb-4fe8-bc11-2c1862bbd00c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edeedafd-77f5-48b4-94ae-e2a9aa326ca6",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d89e40c-2af4-4485-98d4-250ec9cc31b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60ad93ca-76a9-4fef-b8d9-d4579e9f157a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4251b06d-eb05-4600-b77b-c89d3c3244d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1335bbbb-6045-4742-91a6-eb5215a3fd7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9acd4cdb-7107-482d-bd9f-0b87bd92a336",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8218d333-4211-41aa-ae43-e72db91ecc4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86cf3f3e-9560-41cc-a13b-767025dd18ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5736699-3d7c-4f33-ae78-8c3c3b18dbe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "411e30fd-6716-488c-bf09-c7b9f1890065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6dd6062-1cdf-40ea-9e17-6c2df2a28213",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0abe83c2-c046-4399-b940-ae3284dcb518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "304121ca-c623-4564-8f27-d44db44c3850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "433d2cd8-545c-4679-ba3a-48e2735e9536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b4dc0ce-d7a5-4c69-a8e2-d575de853306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df5de038-ce19-4611-a58c-5b9eda8ea1ce",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d1871c-4bc5-481b-8b56-a6a3fd7ba523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d67c9d0-5b7b-4b1b-9456-0caeb423c1e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a1885a9-4ca6-4e73-99e8-0af82130d91c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e1fdcb5-7cbe-4731-b882-7362f16af9c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bec2360f-284c-40fb-b74e-597723e346cb",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae326966-bb0e-447f-8a64-8d547cc0742e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fac1c022-dc2d-48fa-bbe2-838b98e2d11c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed2cff31-1224-4c75-bf48-cd51cd1aa6b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3e82484-6139-4d44-aff8-68fb35d5fbe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce73732f-9e76-4acd-af80-80b3722736d1",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f6339b1-3d4a-48b4-9986-2e0931de91eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45f0c773-0fed-4ca0-8ef2-e96559fbb360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "069f2f42-42d0-42b9-88ff-de741d021d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "387d503c-bbc8-467d-862d-d11ba35cad16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4989faf6-d38e-481a-a2c6-89f9d016009e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47eb9853-3cdf-42a2-89c5-449cf03b708e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55535f45-6e89-4fe2-a3d9-c7df9ee7a0f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76972da4-90a5-4d28-bb78-f01b6f662535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "955f8e65-c280-4659-8155-4d979966a9ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d89f71d2-045f-413a-aff6-449efb9ff4ae",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe8a08b-8b0e-41d7-abb6-9edb540d949f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8a3c602-b127-4215-9de6-79635730f983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67cbd956-cb46-4492-b1e2-209331677085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aaae998e-766e-4518-85d6-471f2a895aa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cfd9b50-cf21-4478-b0b4-332cb4161291",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef4ace3-4e65-4f43-b2c9-19b687f8d9df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a415e68d-cb14-41c5-9848-f8ebec0cf953"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25b76549-76c5-4aae-82e8-e8190f6ff7d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "52bdcb90-0fe4-4591-93a7-ee98c924c35f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba8d68f0-b2fb-4250-a0e9-a05dd491a547",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b93fb01-474d-43cf-870e-9f3acf0a9a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "302200c1-62f4-4616-94aa-8c8447125345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "408fd19e-c7b0-4196-9ec1-63abeabc774a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3df6e714-aa1d-4086-9a44-59afde2057bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfbebe11-9e74-40be-a390-24bda6c3486a",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f8cc7be-b0e5-4a5f-9b8a-3c559f6cca5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a17a903c-ae17-46c5-b1cb-3b365a309af0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62cb8cf8-e4ee-4ccf-934c-9d5e2f942aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f7a1894b-6163-42fa-8e11-8d1544372046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ce023d-3965-4f9f-94ee-9d7348e12908",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9456001d-05cb-4f1e-8e25-3a3cf031e76b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c32e6b72-a8cb-4b5e-9d78-0d2cc8d5bfdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b18c08a-ba59-4b41-9eac-672637a92a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f977b15a-6fb8-40fe-8fad-e21d21c887ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3accffba-3463-4c94-8cd5-7f9ba8964deb",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a983926-33d1-4fd2-b219-233b843cbebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6d15f2b-8a3b-487a-8d75-4a0bcc665c0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a6319b-c97d-4888-8b99-4baac24629e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b53141f2-3299-49ac-93d2-ff06edeba0cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6ff2d9c-4fd8-418e-8d5e-82fa4e004099",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "860c0843-beda-4d6b-8059-596257259e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10a1e448-69fa-420a-b702-7773773980bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e358a28-4f20-4cc2-bde2-4eb27f54e2b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "07d67a7e-bceb-43e9-9b90-1ed8636a986f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d425a6b-e973-4734-87ad-b62c3952ec27",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e20ef70a-52e1-4760-b3e4-39b78e47ab51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "701fbfb9-d621-40bd-b9dd-0509ae876479"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "912f7f96-f059-464b-9cde-81832f60a25f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "876a8c95-9ec3-4ea5-82c3-1f5d7092ec01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3398c48-8e89-4afa-8906-168892ee0102",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee3dadcb-4bcb-4c7b-b2a6-1a18489be142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbe2afbf-e10e-42b1-91d4-d12c4f81fe88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "957ebf47-9080-4164-aead-eb59363b2ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "07ae842e-fc84-4cf9-be5f-8acc2aaa8616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35882b9a-cf29-45a6-8e9d-89aad7ce0883",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f399823b-2333-4a3a-ae91-7e1900828751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f760b455-55dc-469a-8863-c100e59fc9e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc2fab2b-067f-4922-b946-33503bbc9572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc4542df-c086-497d-8e6e-c0f43074b776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "886b47b8-ebf4-46ba-8525-476ca95f017e",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a46c4f-4433-4d78-8be5-b7638fc69a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5adbf84b-3a6d-4e3d-9108-7276858a0283"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10344a86-0b8f-4acc-aa49-07c24f577a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a81a6f3-3982-4e1c-872f-cf4e407b2538"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "74ce7845-f59e-451f-9ff2-e3886898ace1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "14549334-e6a6-4f10-8644-1513d3cc6cf6",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80686c21-01bb-471f-ac29-b4ccc678c025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f82f73fc-d5e5-4b70-b7b5-1a8a41aaca22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07cb13fa-f36a-43d0-976a-56ab190b7f4a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62748b01-4e14-4bcd-a29a-be06df814ee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bed1e75-7bf2-4687-badf-367584132ca7",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "907b3a2c-980d-4d2e-a22a-8b6e71629010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "401eb806-71c0-4d8e-8e2e-3a70b6f44a6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2679e74-01e5-4c5f-9f07-ccaaaed41a75",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed9d27bc-e089-4f0d-a900-64aa69c2b172"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a56ee35-0e97-4a37-bda6-02c93c9ddbae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cfbfffe5-a58c-454d-9478-83a569756f76"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f18ed56f-976d-4e8d-8fc9-447244150689",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "21cad818-73d5-44b6-a3f4-df551c2a8fcb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "094f40bb-7eb4-48b8-88e9-352362343078",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d0dab4f5-0749-4289-8c54-64dc46f1f1e3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a36f211d-74d6-4dd6-b561-59936a2bedec",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "adac8a1c-c2ec-47e4-a13f-12b9c8b44376"
                }
              }
            ]
          },
          {
            "id": "3d657a85-42cd-4687-bb5f-0b127d159db9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2b9b1031-4d2a-49ff-ab68-f68345ebb5ff",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7acd26a-6d2b-4c6e-947f-c7ae058f2244",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "446e1611-e2a5-414e-9a15-7e944e263323"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4ddea7e-3921-4491-a458-990b6f0b3df5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c8c56767-6b20-4d53-9b1f-e7409ef06d40"
                    }
                  }
                ]
              },
              {
                "id": "d6453b59-2e01-4bf8-be78-a0d883d08d29",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "54f57573-b55a-4c75-88e6-ee0720508500",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "52cbfcf0-7c1e-45be-9abc-89d1951d076c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f1ff5929-979f-452b-a42b-2389c24ad8ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8ac0735a-d2cc-4c0a-a40f-5b7b8398ad5d"
                    }
                  }
                ]
              },
              {
                "id": "9e01f287-9fc5-4b35-8542-5fcf1c7cf8b4",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce2b7f65-6088-4030-bd0f-2336b639b8f9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "82cea675-616f-498c-96e5-851ce094cd1c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33bf123f-3d20-4eb0-bb6a-71b9a19e3d24",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "517f0824-066d-4ed5-a3c7-ba37fba17777"
                    }
                  }
                ]
              },
              {
                "id": "f8ab6e7a-a2b7-40c2-8abf-90fc81d4e49e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0240fb66-3ad7-4634-b12a-45794ffbb6d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7373c3b6-41f7-48ea-8e36-497a9fca9845"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a2cc5fe-d01a-43cc-89df-533f36ae8341",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "bcd80f6b-3fc8-4570-81a3-6ab497018e53"
                    }
                  }
                ]
              },
              {
                "id": "01f7f48c-cce4-4f4b-a69f-7b63d75ad9a7",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6d93be6b-7010-4056-a3e0-f8370c82f0b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fcd85d1f-04a1-4dbb-bebf-2dfff6bc2b07"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "166e6eea-581b-49cd-a5c7-e716571ddbe7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "a67d422a-d0a4-45ca-9653-57bc1fe767b9"
                    }
                  }
                ]
              },
              {
                "id": "ef953fd4-c500-4ee4-a10d-10e5d914cb4c",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4890e90b-aa30-4411-978e-db0731ca54df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ae2264a8-0703-40e6-99c2-5430710a9979"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7893ecb7-bf78-4912-9f9e-f6683cb1ccdd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f37cb1e8-cc65-4b73-a7ad-8dae75005347"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2798bb58-c838-4f4f-8ebd-148d68db467c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c5004c59-1a20-4f71-87ea-24e688acd411"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c71f5be1-7d3a-4533-90c5-401fa3f6b972",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "981dd696-ea9b-43ef-94b9-92c84b9ef172"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4b8a7ff8-dfad-4a44-8ad4-971d3be8113f",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "03423cc2-0fe2-4aa8-9fb1-92560c36d419"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ad95560e-7c04-42a8-a660-5fa6ef53944b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "069d0a36-f219-449b-9558-687fa5ae00dd"
            }
          }
        ]
      },
      {
        "id": "24c0f5f2-442a-43ae-bed9-0621a8edd01a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c305644d-ed25-491e-9399-7b4e3b644bc1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dcf07005-08b8-4e5f-9d52-a7524c56c3ce",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1d4839cf-8831-4788-ac13-d1c91684a820",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c41b9229-63b4-4058-95f1-ffea239c91d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dcb46e0-8ea6-4385-b2db-df4281cfb17f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1603129f-41e0-41f6-86d1-9aedb375abe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c8c7f35-11cb-4640-a80b-8cde76f40043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8801d2b9-ce01-47c8-85ea-1a0f0ad1fd56",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c4f1ced-a2f6-467c-8c65-3cb9dca8aeee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0faad33c-eba0-4cb7-88f8-fd4ee7e8eb67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03405570-7190-4260-9c08-ac06a1fef6f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "10789fef-2509-4d11-b6e0-1e3db79fda63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3297005e-550a-4a71-9e8e-3675066d84d8",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "109f8382-2109-4c0d-9586-ff0b17939f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f21fb57a-ba26-459f-8f56-2369298b52e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88dcfa4d-2463-4f2e-bbdb-16f00d84dc99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "31ed2e4c-208e-4c52-9519-7ca1df34ea5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5db5834-7043-48f4-b96b-565f918a982c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e83aa8-e34c-4c95-96e4-51435f70df82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95aedc99-01d2-4355-96d6-e0c9b5acfd50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec31810-2083-4b0b-a1bc-98869252ae94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fe27063-82cc-417d-9fe7-c1fd6676bff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f074408b-b8b3-4f08-8a71-0690df95a9f9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aef7f530-19a7-4d40-bb46-f00d8df37e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c84d8311-15e4-4bc5-ab76-6118b5ad1b1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18661b9a-1e94-4d18-a141-42afd0b160f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a54a4d16-eb5e-45ff-b97f-bfa225187220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac6cdaf-8b91-4d08-aae5-28218b0e7b64",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13543512-1876-4efc-b022-3c14abf08af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "750afd32-ec11-47eb-9aae-4b26fcf1feaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac1c3361-c62f-4685-a165-75613ea8330b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "db386c70-4734-4c68-9337-c2ba37462bfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83185746-0cc9-48ef-82a5-f5e8356453a0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e54d2d25-515f-4e50-8eea-4bb8438c7201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef9de37b-5d8f-47b8-bc3c-d7a96f98da4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5c398bf-6bf9-4378-9075-aaf7ec9ac7cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "35006c44-79c8-4ec1-b6a5-7e93aad486a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c49b9cb6-3b56-41c1-8bbe-45d8a9c65380",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28dc1050-b971-4b31-9b42-4ae8e2d5b8ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1e90aec-fc69-4083-a43b-1022060ecd80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "158d446c-498a-4b3e-9e1f-92127566efd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fb9a771-5a81-4225-b6ed-362e17334b3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89070200-4343-46e8-b0f8-07e4ca478113",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd06021-85a8-4910-bc12-35a76821341f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2122b4b-2987-4a1d-abe8-da78965ad70c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceef7282-9492-46d6-8582-8325e2b91704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "15d94269-9aba-4315-a1b8-b6d48e1fb671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "780e75bf-c3f3-4813-91c8-6a0189494b75",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a1e4db0-57c2-4ffc-8441-dbbf5c4f8d75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99aa69c5-0bcc-4731-8e15-75e4e942bbc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69ef4904-dd8b-4aca-9792-dde35c2a9790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ca3e0ee-ac02-42ec-896f-e2ec4fdff9cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16633f6b-b4b0-4a58-a481-0fcf16a2b1fc",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb684b3b-82a7-4d52-816b-d8ff6050414c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49e0272a-372c-417a-8365-fe083186b01c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56dd928e-e9c8-4398-acb9-37dbc7235eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a496006f-fb50-4326-a7bb-ccd8a016ecc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c18358d8-1ecf-4e9b-8214-59f6ed6c54ad",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e81539ef-9743-4d23-bb53-ffc4c442b6d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "995a5370-eb91-44a5-8dea-42e4413ad343"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90c5a14b-a333-479e-80f1-de5ed622aa76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "35f00702-0ce1-4887-b21e-803ef7509a95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e3d1d7b-4f11-4988-bc49-c0f4bdd18c2a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd302013-23c4-4d31-8a30-d9b16607042a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abbb714c-e570-40b8-a835-03b51fde7ed8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9604feaf-f47c-4f08-9bf5-56aadbb4d2cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3de8d686-2fdb-4f4c-bb60-60a13011b84c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7477ddf-8b61-425e-ad7e-236baf57581e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72d4629-7771-4151-88a5-9423eab73a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b2ab467-474f-4cc1-914a-1f7395de1c2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45b5e827-bbc6-4203-9010-b43f0e52da3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "3dbd3021-a63a-4e36-90de-d9bdabc6f0da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "722064bb-b3b5-4b54-98ef-9490e6647e6d",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4af0943-e5a6-4aac-ad0b-b56b0b64dccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30c146b2-8923-4818-a9d2-a336d606fba4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "584a154f-5503-48ff-999a-3413405be614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a20461ab-b446-4077-b3cf-0f436d407266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9156e0b2-6176-4ee2-814d-7c4616b38358",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "689a9076-0628-4b96-874a-d81b0afa9504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf633871-f691-4f42-9f93-fbebb7d71d16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be48ec4a-edbf-447e-a3cd-e2bcc4d0a611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea377ca1-ab23-4544-b2e8-a448c7cbe658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb62e480-8cf0-4b74-8eea-fd1292aa85be",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "421a31c8-1871-4c5c-9543-b1cc1ffbe23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16815577-582f-44ec-8c56-f67ebe8883a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e3e6c57-bdf2-4d59-91a3-23e2e26c2ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "acd059b5-c17d-4aca-bafa-24dcbeb8c7ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a291c10f-f830-48ae-94f7-e863279b0a46",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b11bea0-ee45-4bdd-a169-37de3c2baea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c7e3322-08ac-4954-a5af-17ccf47e8fa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d9849f1-8b43-4d5d-839c-671a59b19260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cffce41f-ae61-425c-8458-0396608ef75c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d823227f-4f3d-4cec-95ba-565961f7bbf9",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d7c83a-977b-4d32-b8a3-cbb71bf59ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab916691-16cd-401f-8551-082e57d8aee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd184be-2e72-4a14-b606-2a10008e5aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42d1caa0-4398-4d7c-822d-34025d656956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fff2156-699f-4615-a098-ddbaf3b6d95f",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2223dc88-ba77-4139-a415-9ddd976bc9a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b99b22ca-3c44-4b01-9442-544834d7f891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a1a1092-c819-4d97-a91f-e61f2134a569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf8aadf9-06ce-4601-8eef-c2854260837b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa5ce11-9bfe-4c9b-b215-e153075647b4",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf1da6a4-2909-4311-b8b1-b2636f141a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b15977e0-5cff-44c3-a6d3-ae205e265075"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bad09c2-23b2-4f9b-8bdb-d8c52b2cac02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "007077c7-9f89-4809-9782-627b68dff73e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfe70315-94ab-4939-a1a0-3e0ece1dcc64",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "717fe644-7673-4919-8a1d-b0a24477e35f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16d06985-a200-43c7-8153-44b2829030b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4791adad-9f2f-45f1-b391-e571701dde91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51a190f7-603f-4938-8eb2-a7eb8cbbbf40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0e091b3-d0b3-4424-a0f4-8faf589a177f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f155028-d29b-4917-9fa7-8f7aa25fb8df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffe6b68c-c409-4143-bae9-2f145031fe8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1da81af-e6f9-45b7-9aa7-f82f46b71688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ff164a8-c4eb-4360-b8aa-b4b48922a661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feed1af7-64ed-4b0e-abc1-6a7691b4438e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fd6d9c4-7837-4cfe-a7af-0e47ec350ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2275edce-01c2-480b-b171-4b5e105878e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8443ea72-20ba-44d7-85d5-73bc0968aec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c53f24b8-b149-446c-9203-0a9a00575935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04d7bb8d-146c-42fb-967f-c168ba9af805",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "849af7e0-b552-45d8-ae76-5dd84b52c664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24a451b7-1b79-434c-94da-088c5c4a902f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b19e50df-5c4f-4764-bbd5-39b8cf6c7391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "231b30bb-ca6b-434c-bcac-75c77d6628a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f3e431d-0052-4507-b003-b94f50a46472",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a8775c4-66e0-46cb-ba25-0f45d85089d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b3b9ed6-7501-493b-9e13-fa0a92de2a56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3287ecef-c9da-4fa4-b8b1-5ce64df4301b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7c43770-c860-4ceb-8af8-1b7d506b969c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1048dffd-5b07-4b76-bcf0-7ab660e4f4ba",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5f8e65-42f0-4d7d-9f21-349697e8f8e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63448c73-07d6-48ba-b631-ac3ac76b9f1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f734f40-d855-44f9-902c-a4ed1d2f95f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7aede77d-977e-4fa7-a1bd-4e5db2120f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c43b6dbe-697e-4708-afda-0145747491b7",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bedab56-f8d9-432f-9a3b-e23c11ba9402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccaad77d-19e1-4ec2-a8ca-e08f6fddaa52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0a36c81-a740-4269-a4b4-72cd21fd0028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c311414-83fe-47ba-9c51-808a8aff5232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e192a6-43b7-4b6c-aea5-fcb95429a467",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "049ad7d9-1e15-4b9b-9259-6a9d328b9f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "811664dd-cef1-4d88-999b-2a8f274fc2ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "badb230a-f2db-419c-ad11-05710113ea03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bb368c9-cc83-4bad-9b31-47f43909c2f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b1511a-1441-4e64-887d-7fe01d392c95",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb21e07b-8a06-4c37-8b86-c12f7a4d2fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91b78468-cfc2-4633-9968-4925c4af394f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c6c8af-8da7-4989-9d15-f2f3badbe8de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "103cf1d4-b8a2-494a-a85f-895e5c30e76c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dfa998f-c088-42f8-adce-e7d7feea1d41",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0726c3a-24c0-4a0b-a903-63b3773ca62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bedffad-bc80-4d51-a02a-21f145bc3f59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc0c35c-4e0b-45a8-a623-58125580e381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33dff0f0-8893-4fe0-939b-c8fc5c07eb41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e5cffd7-54a6-4193-a126-26da8150e6a0",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e5f5d0-be47-48ab-84c6-8c5453ed0772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5058ba6-998a-46d4-8f2d-649e5c8172e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c277f46-ce70-4221-8897-252dbdcf4506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "005ca86c-b045-408f-831b-18e28e94dca3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "62316ec7-b7e8-4bcc-b5d6-ba1c281322ca",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7785a8f9-8829-4aca-b50c-01fd192e71fe",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1f82fdd-fdf3-4d2a-ab21-e5d5ef464efe",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "587fd800-6051-42d0-a5bc-fd5c50ec45dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d081169-78b5-4385-85f9-230bc21ec3fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d6a693b-da1c-452f-bf3d-b5cde09368ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df8a7fe-6659-450c-b6c5-151443f4151c",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a555726-5686-418b-98cc-efec8a6d829f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9f98d790-f7b0-4d63-962f-da913aa46e68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d32e87a-555a-4574-ab19-0cfab325941b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c67a5d7a-b1d2-4724-a4d0-9e8c4df0acc0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6bbaa3b0-0174-429c-b1b6-503f6525b75f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ad6999c-c4b9-4cc1-86ae-9d63b9a00233"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a2c7d91-f08f-4f95-8e28-aad9a4cdc7cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f015d9b-13be-4da2-a8c7-e639a5300254"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "30d89a1e-4524-4e66-a729-80fea841867c",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c02ee3b7-782a-4570-aafd-dfa64439412f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bd10637f-67bd-496e-937f-097b0d5eb783",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7417e49b-f256-4dd9-8f5b-238618609348"
            }
          }
        ]
      },
      {
        "id": "0809d18b-83dd-46f3-b8e4-fb361e14abff",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "922ae4a6-a82f-4d51-bea7-7ec30acdad7d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "edb19309-aa0d-43f2-ae6d-58b6564c83e5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9f4e67a9-e5f2-4c38-b4c2-1adf12bd249b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c17dee2-c261-415b-b2df-7055975f0701",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfe655c7-da1b-4a97-9030-df2508e74bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f497e69b-29c3-4ec3-8e99-4700228e3450",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c6f71e-13f0-4360-9896-635eb7f94af6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c86a7967-e281-49a9-a30c-344e3a5c812a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "986e735d-c35a-49f2-a021-4439a36b15ee",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "346de6c1-aae0-4f94-a5fc-3b4efd8ddf0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ad397f6-0043-4292-bde8-268f5922ec20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b5d05fa-9ec3-44a5-a293-7eed80aedf5b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17cc9a54-0143-4696-96b8-11df0ca452f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7372d43-5b3c-4f16-8463-bf06ff6710f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb1c588f-ec88-40cf-a7fa-56b4909c2dcd",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be41a73a-17b7-4b1c-835f-72e05d1259d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c81e5d8-9b6f-4035-a5df-7731683ca84a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b20b5cba-9c53-44bf-b365-d12476ef1b37",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "431777c6-8a54-4fb4-aaad-c40bb6352fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9e4d7ca-7065-4971-b735-931edead0b06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "089e4208-d5b6-4ea9-8ef7-1948aa7c9c7d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c34502ce-e3c4-411c-bcd0-362207f3498d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ec7d850-f245-4fec-aecc-731153c4315a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ab8b3d6-246d-4bea-b4df-7122bf0a0935",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38f7cd5e-11b0-46de-a5c6-e63285921f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74f6b43-91f2-4c1e-b078-d4fac3ee4e6f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d2e6e9-d2c4-4df0-a5c4-a27a918aeb4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6aac5466-b9d1-41e5-a375-e8bc99de8c98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f1b7e3d-f17c-431c-89e5-3474cc0bd731",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8db2941-1c8c-4eb7-ab74-e6b2fa50c270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1956c0c-468e-46ff-956e-b43d8e408956",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01213c1-659d-4c14-9d63-5c51b7d190c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b9c0d4e-900f-4276-a19e-a4a7c14e6135"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0adef5d3-7390-41ab-8164-bf85d2e316f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5532b2d-f946-4d82-b555-1f936648c6dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b2567a8-b3be-4fb2-bafc-ac37f045830d",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "696afb2e-fcb2-4c41-a975-4eb15dc3d796",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdccbd39-5068-4c74-be13-e5708d22b4cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f38ebc1e-3784-4a23-a507-f3ce7de9e6e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f2812df-9907-4743-919a-1a3bdf89969d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a1abea0-74eb-44fe-a47f-8b09acd4a77a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd69952-b4bc-487e-937c-a2fe6ce37493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "675e18ea-3eff-4b6e-b47a-9484b13e3bf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d036ce-0110-4c88-a0d4-463c8e2c25eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "403b2a6e-36bd-4e12-83dd-311b429d941b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fef39537-8ed7-4363-80c3-e451c04fb684",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fb86ae3-9d76-4647-b6e4-c859afc332d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fc2c073-5a39-42e5-ac21-88abe975c808"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6559039-af54-40f1-8020-bbf073567476",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5317942c-20c1-42ea-9dce-f0649a7141cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df818dd9-0224-490d-9d60-345af043d13c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db91fa61-1f14-4489-97ed-88f6229e9891",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38f2a2bc-ed33-47b1-a93a-ea1c306a6a8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e444c122-f0a6-454c-ab76-0fb9b134878c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95a54d71-c4ef-486d-bf0a-cbf06c3c4157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90696a79-923b-4d0e-9d51-ac5bbc226446",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a333df5-b105-4665-9fa3-3a7fe6ab1a7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4113bc11-fd31-478b-b25f-3686a254afb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d24348-1e90-49e9-aaf5-25622c1fb523",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2edf42da-2d9e-49c6-b6f5-5405317fe671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c4277d-ffcf-4c7b-a92a-5c79de3ba38a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "713036e4-00f1-4a42-85bf-dc37ec590d3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c53a0a6-815f-41fd-b332-3ba304b3e9c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8e2da1f-027e-4fe8-8a32-ac5d3c4c505a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "141ce4cb-768a-47d1-b89e-a6e91e892b4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "224abeb1-8720-4e68-a1d2-5609f13fc550",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc879eae-b2fc-4cf5-ae60-86e38a9f7dd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d0b5e3b-3f22-43a9-a17f-8d2a559ae394"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5194e07e-120c-4dab-9bb7-6045b83757a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c49a685b-c1b0-4f7c-940f-e0ffa30bba7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c8241c3-1b81-4b6b-8699-9cdaf895f5a9",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afed65a9-33f5-4e87-9ad4-2928b1c8f1c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6aeebfe-70bf-4f8b-b9b4-0b4d62168d2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd1565e6-e1b9-462d-b123-514fd4a9c173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bea1d2cf-3d7b-44a7-8eae-26b0b600da5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "109b5a8a-ebbc-4c3a-8919-4c3ef22dbf1d",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b773bd3f-463a-4e2e-9858-9b720f9009c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dae26e06-185c-4e2d-80d2-168b07e89861"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6057adaa-bab1-4b39-a856-205546b9d751",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6328aa7-f34b-4f8d-a4ac-675532645fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dee9615-2517-4ff4-9012-856c308f4467",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd9864a-6157-43c7-8376-35b1690d19bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3f33efb-8afb-47ee-a87f-6218535d9b2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b9baae0-2caf-4e73-9fa2-7792233191f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f684641-07c5-499d-9cd6-f50f1e375f31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ef7ca5-b726-4d2b-8cff-1ec8669c8f2f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c07beb1-c038-4be8-8327-31628a414eba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2b67da8-102c-402e-9706-e3cc460c493f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ae4e8c-694e-4faf-a3d0-f35ccf4ea87e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edfe1a1f-1cf0-4471-91d8-756c21400615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a69fbfa-e7ef-4451-8834-54fb38be6f17",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85097c9-6c16-47ad-ba57-434b3b985a74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a7c95dc-e5ba-4ffc-9292-cd3536b77c74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c64e47bd-f1a8-41bb-a1d0-1babe9af1b6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02660c69-dc68-45cf-8f27-c690669a186c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b9061d9-0d3b-431a-8fb6-f78b5384d441",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efdd81bc-1000-4464-a8cf-5b99be25bc0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05dd5f01-fab2-4921-8a77-2e3a653111d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6f760c-11c7-4225-b2d6-f88e6f6f1571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b79d9e68-7f70-477d-80cf-c5a06439cb1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c704aa-1aa8-4625-8be8-de3597012189",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19719ea8-1cc7-481a-8e7a-7e42c1451b66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50ebde38-41e1-44aa-b5a6-34baca458445"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5270d6b9-6ccd-4e6c-a4a8-0dd96d898f2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7965cb2-aaf4-4b6c-bd50-9f757cbbadc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9a85fb6-5374-4b14-84bc-879e70755306",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b26843ef-cf3e-48bd-9c17-61466362c960",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89822d36-4e6e-4ba2-9da6-24b7707e14d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a55a1a3f-7885-4ba9-9f7d-a85ba64ac0b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4335e1e-efae-4f68-acb9-4c8df1d8d2b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "599258a2-7303-484b-90aa-559027f9d1fe",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdcc83ea-bd1e-4531-894c-ec9174796596",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2baa7f9-da4a-4395-8b72-354050953f96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a1987f-40cb-4745-a0cb-65b2b8c1d6ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1e7fc7a-e52c-41d6-8ed2-9a310aa557d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2eb9ab-b30c-4d92-b82d-4079ec3f371e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5922704-d7e1-4c78-985a-4f61449eccff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "438e5548-6c04-4c21-b2fb-2b1f5f29bbf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7afe9aad-d40f-4fb7-989a-9453c779c426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5d9d5a2-8f5e-40c1-b0af-a74e89441e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd02be58-f680-4075-9399-de8ba6612b92",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d00206c3-7e72-4b39-a95d-7b6a629ef8c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "503196ce-1070-4921-8182-d030a34b930d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3252da30-60b8-49bd-8037-9eaca1a47995",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a5caa64-5289-4695-95fc-9594b53d343a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bff7885-18cc-4e7e-8b50-747235b352aa",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15d667e0-6e53-4bce-a9aa-018a05b7c521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa4f1844-b0d0-4d37-bb76-86f3bce6aa94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c34470-9035-477a-abf5-56a2ad5d2e8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd1ee877-f08e-4e41-a86a-f4df9c629bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d16cda89-c519-4214-b6bc-900b9622f6c2",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d9139c-388c-41d6-982d-908f3decabac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7e2ce45-9e12-4598-8c79-9298b1391dce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9897f05b-6cbf-45b0-8dfa-fe9d61470202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62843c96-af33-43bb-ab4a-8d80a1080db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c33fd73-8450-4072-9c85-7b3b92e0e863",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a515a3a-4dae-4e81-abbe-806e87e0ca05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34d88569-b7dc-4d21-a23d-04cd3a50884c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd4dd9c-683d-4bf3-bd7c-a3eb0dadd5eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7e6ec9c-f4f6-401e-b5ea-fb53ff19cbe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b717862f-bcdb-4524-b294-424781b72cc6",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad4c2b89-2b83-488a-b69d-6bdcc616ce72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e92e6ca-ef4f-4b18-9447-dc9fbea72faf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a4bc12-8da2-4925-a0f7-9f8a05853d35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2233c670-7e15-4c7a-bd04-75fda212df7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb7e2a18-1f84-4353-8125-50a80a32136d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a8b6332-32fb-48af-b959-acae80a5941c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "639fdfdf-cbc8-441f-abc5-e2a0ef150137"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64f12ec3-5009-430a-9856-77ef804c597f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ff1f05e-4247-453c-be0b-9c5c9e776262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c25befb-2250-4c30-8315-f3c161ff7e3e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60180243-7398-4f88-81c8-71f3e595ef3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8adbf61a-da09-4e68-a8a2-ce48a2b4d1c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "259835bf-6596-4028-b2c4-9e4a79517ad3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38c4f3b6-45cd-4345-8d58-a6007cb77035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce6d4f52-e66d-474d-a43c-c02e4fcc0242",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e02237d6-e215-4734-85d4-b1f36dc3c6b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "534c3dfd-4b4e-411a-841c-0a94ac7d9a75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c52166-5be8-424d-bdd5-7e42cf324540",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b034480-c26c-45d5-9037-31e2eb83afd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4dd059a-8472-4467-8828-3b136744fb67",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb53f71-21ef-4fe7-9b70-c596ac799349",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b286327d-9ab7-4ce6-bb3c-9ae9f4878f01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db4265a6-d1dd-4850-820c-42a3a6ea491d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b893a715-a44e-4d1e-bcdf-a53c6d8ae02e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b16dd8d7-b1c7-4545-9f23-fe38a575dd2b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9262596e-a67a-45db-b99f-b5aab69d34e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd93d0e7-8a02-469e-ac6b-6a1f2cc53364"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a87e56d-7c0d-4972-a492-dab416ec219c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "766a1e08-4e3e-4ef9-bbf7-be7cd9eb9888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9553d0d5-2ff8-4946-8c55-1b8daed8fc83",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce86a5a-6c2d-4c6a-b39f-70c1f8f850a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "740edba1-ab34-437c-a5e1-e307ac0fa357"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e50a488-4599-4097-adc9-484382906796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11ba4ed5-eed3-45a8-b683-34a6e5340bcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80df5ad3-b9a4-4c9e-ba21-57cf324832b8",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a084d61d-cc98-40f2-a7ff-7933bc22a99b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94d6223f-357b-49cc-9144-b18fa09ed305"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc85ea6b-263d-4980-bcd6-9ca283aa7550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc428c69-1238-4d2b-838e-7a8bc77dd17f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f06ae129-a5aa-4802-9180-57c96f943ce6",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d747ec3-0dfc-4cb7-ad55-aad20e06653c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "736d0368-1bda-4497-8b5a-dde4f43e9bb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a88a01-b8b9-4d1f-85ab-4c3a7a87d54e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eebe8a5-9918-454f-908b-999335776f71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63296d13-36be-4fa8-9ba6-5d4fdc0c2bd8",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb892eba-f5af-41ec-929b-624bb9ba8a5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d9dca02-6934-4d4e-91b7-0baf2dc11c76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f227efd2-f823-4e26-9234-80b98d394717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0124b54-d9cb-4dbb-8fed-5d00046b063d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0d74262-d1f3-45e4-9b86-a6727d5206c9",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a94d67-ff95-4fe2-9756-0f6cffb05451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb025368-ee2f-41f7-9eb3-ace32cdc5285"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25dccc5b-b891-4842-9250-d8d00698183c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9b1fe35-ba06-498a-98c5-47b7300dc09f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9893fd07-bc85-4946-af4f-6ee5319602df",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ddd93a-a2f4-40fe-9ca4-06a3059853f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ea6f0a0-75e2-402f-b118-5a8eafd9d628"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bafaa40a-3a1a-4765-b5b6-bdba02ceeaa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6d367da-5eff-4106-a8ef-36e48b3e222e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9487df0f-93af-408e-afe7-612f2131c179",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6196d8c4-782a-4a97-bff4-fb6de5cf7d2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acbe2080-ffef-4841-900a-bbc15a623b88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa37755-96c5-450c-a18e-e9b86a79b040",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ba0eea9-cb83-4624-a361-cefbcc17aa58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a139a4ba-081c-464b-9191-6ac59289bb78",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e40992-25e0-44ec-96c2-3b124aba52c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4db74502-6645-4cc1-82f0-01a11b83d838"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10939c37-132b-450c-8276-34b0ebdb7dd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d0dc5e2-17da-4ecc-8f6a-5787609e9418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf286bce-f94a-4b20-ac5c-46b09d1d341f",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b374ea-e5f2-4511-8b4b-b1b070160a28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d8365bf-0ac8-41af-a5a1-20b6af563266"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9cc0607-ac59-414a-b0c5-e9c13cd6e2c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43e5bb08-4617-4501-8833-72b634e12da4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d52cadc-d15a-44c3-b651-4db7d6b9d84e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bafa3bd-0bd8-4f3b-a2ff-03b22c7792db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e454f8e2-c727-47eb-b735-3218fb2dd892"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc2352a-cc0d-4ffa-9dab-9740b680d0e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87e59d6f-dac3-47f2-9690-d59e2d9102ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f74b3ad-3529-4a3a-962a-2776195ffe5c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e4f72d4-89cd-448d-bd26-dacd5f249451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4358be6-88a4-42db-92f5-0341242631dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff71d6f-2f1a-45cf-b120-789a48fac1c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f67bb0d-f5e7-4ef2-8fff-1ecba1a06d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590e2663-f228-4600-b668-876ab2e5115f",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "520a7104-e2a2-495d-8cfc-4558cd22e777",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdf44575-275a-4a19-b3fd-34734228a4aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "140ed490-df29-4543-b2a7-d2626a795a40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3038a1d7-b3c0-4ac8-bd28-45744ec842be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d59fb87-0216-4e17-b266-d89e0496886c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfa72e63-088d-4ca5-9fea-a51f03589fb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f0351a5-8b98-4ed5-8da2-7402c0fb67e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eddc67e-d4e8-4be4-b74e-1d71ffbd105d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "656c3e01-c11c-4c46-ba32-a5fef3adb4c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92db8f23-6a99-43cd-8d20-e1681039cbc5",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d83fab9-bd6c-4ed2-bd56-6b2b0b03181d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97c2eb1e-3b53-4dd5-9cef-286d56566f5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50f16d5c-d056-4101-a0ca-3690c4dee723",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6c22179-d5ba-400f-aef2-5a4edb4b983b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40cba406-141c-4d95-99f5-9802dd8c227d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abaac851-dad3-4641-9fd7-7dd967e36c43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f5f0ea9-b899-42d2-8dcd-7ccf08ab35b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d46153df-7506-4046-a61e-f35e7d7fdaaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67232ddf-b285-4c2e-adfc-f94ba06529f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e8e6938-932d-4992-a147-e4965d89c7ea",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dfaa1bd-4169-4bc5-ae5f-388d19271a44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8de90673-1437-4a07-baee-061f27cf9d59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd047a1-f098-4cea-8596-9a3790a485c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "648b825c-da82-4ee9-a021-3c1ba44a3c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "933821d6-9c32-4fc8-83ab-5fe62649f345",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e41d020-4153-4d1f-8abd-b683b169d682",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3131770-fdc2-4f8d-b406-9897884c32a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c69d1df-da50-445b-acbb-f0fa736aee4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "424b91ab-b206-44f6-a4f9-54cc1d76cd71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "952047dd-351f-46ee-a159-4d37554009f8",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11735edd-41e3-4704-a338-46e42feebd5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20e92a1e-2a44-4a92-bc5f-423c79209fb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e318c5b6-91a8-4ed7-bcf3-666ec3f5ef01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6fe962e-39fe-4b8e-8321-e77b6347260b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e5177dc-402b-41bf-9e3c-bbfc22d84af4",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81fe242e-b15f-4234-b0c4-8a506998beb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0c6d83b-7381-4d24-89b0-754a0d786933"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "713cfdda-3e5a-4bf2-b1d5-2c5ceb291418",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09cbb643-8ca7-48cd-b5a2-1c867d6e5aeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca99af60-4366-41f7-828f-b526e1cd37fb",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "515ce497-e2bf-4704-a599-a11fe7659837",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3206657d-495a-4af8-beb7-1478dabc6a01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f87eb737-f3a3-4fdf-a075-7a32ec81bf4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf4537e6-6a4b-41b6-b2f0-bebff811149f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69ccb791-fefa-4f1e-9005-6ff411d9eef0",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e4b88db-f0c0-4548-bc8d-f22efa12d5e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa5f13f2-f28c-4b9e-a0a4-6e74e1d95a33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1a98ba2-d70b-4c30-85c5-427884fb82a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81746102-069f-4e6d-9e98-9bf8d2d2716c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "103f0bf5-c43d-41e0-9337-80723ddfacf4",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac988ae-ae17-4b08-8136-fcc324f241ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b70f1f6d-1a3f-45da-bc93-08da50c31f45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d8193b-a764-46b6-823c-3228363c3f56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "114a46db-a7de-43e1-9a8f-0322d65bcc8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8823bf7-c0cb-4a07-a6f7-800ddcf24822",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b46e590-6b30-4394-ba5a-a1569a3d4cc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bf4ee8c-4443-4c71-a170-6bc30acf2d6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08216f66-cdfc-4a64-8655-fe5dbcefb81d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab4ab549-48fa-4403-9f5f-5018e1fc0d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "576e78aa-e3cc-49d2-b47a-3748a0548172",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6bfa959-788d-4dcc-b4e0-2957a9c740e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed507c8c-c4e3-4cd3-9299-32e5f56d0508"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b79cf593-43e3-40cc-a673-1939d0a0367e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "163af14e-0d5c-457d-9d9a-2ccc7b0f9bfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af077103-0c31-481a-b4dd-a32780780cf3",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "574c9db8-d1f2-469c-857d-e6e897ec59ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80221e6c-4760-4de5-982b-4f3a9fcd554b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42428341-398b-4482-95c3-3b7b10390366",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dafb332-4142-47a4-9889-e2bb5f778ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a0aa7f0-9e5a-4b5a-afcf-7c12a5bee558",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb8c1090-d85f-4cc5-82ce-19b5b034d4da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e36c0891-48a2-4d4f-aec6-070fbaf33d96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ca9a98-b5b5-476f-a96b-3cfb13ef78ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d79e15f8-1569-4514-a265-fb1817dcc56c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df39adcc-b157-49fe-9071-bb7788cf81fc",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9813fedd-3102-40aa-81ab-1151a64e58d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8447ed07-9943-450a-a350-0b27e7b26e58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a379f9a6-7c2c-4fde-b0a5-dec5cebe3ef6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba18aaba-b552-4220-b12f-f5493f55d84c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1777f589-a72a-4d88-b71b-9d1c86b139a9",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab5c32a-ee51-417f-b7aa-e333b35e7192",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d780cf1d-81d0-41a0-b8e8-8a4649066c0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e88eadde-a0c1-4ffa-acb0-06632ad55a95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2b892d3-a922-43a8-b4f7-44256f037e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d578fb26-9c07-4977-a9be-d5c4699fa54f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "854631ee-9f86-4bf6-930a-8d3b5029a4d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "894051cd-80d5-40ed-aab8-c787a54b6f3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7beae3e2-3849-422d-9516-776f03cf4b90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c803f8aa-d0e8-41cb-ab74-04406a0b8c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d1df054-44fd-4977-8e08-086b5172be2c",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f5ad87-b6ce-40da-9b91-3cdd2021fbbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43b7e5d9-3b09-4953-a016-d99f562753b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f97145-4230-40ff-890a-f222290e999f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f04ae497-b134-4127-9efd-2f4c79425ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c6c420-1655-4ecb-b030-629e5244f899",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e52442bf-5c16-491a-b33b-8dc0af977cfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bc74fbb-d350-4a37-9180-b3d7089939ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2177839b-c2e6-4705-8895-938985a1a214",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba273e42-53b3-4941-bf6b-628b97122ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2a18b0d-55a2-469c-a118-ab71616be025",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca85ec3-db6d-4a87-aa8c-30dab395d452",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba70bf0e-1cdf-48ae-aba6-f6b0a4daf13c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "840ced52-110b-41a2-86db-0550927dad07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1936b0a2-98d6-4cf0-80eb-1a6d43a1619a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ddb1f5-4ffc-43a0-8d9d-1506910e8b74",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6322985c-7ff2-4c1e-bbde-026a7c59f317",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43bbe569-e6d0-49c2-93d1-b10689b50b2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5397b4c5-70d1-4392-b5ee-74c3e88c03da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1740fe1c-489e-4ad1-891b-8f6a281d308c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cb973c4-3f05-4799-ab1d-c5b45517ffa6",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38be7e18-8223-4386-83ce-11f9f589f2d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d5a1f26-53cc-4185-8df1-5ec41ab6dfbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8649abc2-d541-4b5b-b0fb-a1ee588009dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43424afc-185f-44e7-a0b5-4570348f3619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecf95396-cd84-42e7-a292-031d41224341",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b9856f0-3b76-4524-9d51-49379f6d8e7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20d50e76-5f2c-4452-a93b-74bef82c19f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08cf7164-77a7-44f1-aa65-5d6696ce5fca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "545e4349-4df7-4f24-94b6-2146e9c23e1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b8e129-64f9-4467-9ed2-d2ffb897cfb5",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2ef82a6-c4ed-4229-a5bd-f2946a82700e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9b1bd17-cc83-439b-9ad4-209bcdc47fcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f038de1b-e8f3-443b-9124-cf7afa60a01e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d524d900-14b6-4e0f-9f90-351869fcba22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "064ea09e-a4ae-4a32-b91f-32b32c3217ab",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f92704-a6cd-440f-afae-ea66a43388e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72c37839-3fc9-4134-9cbd-d7c30e3413e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26038120-bab3-4351-b541-e2e87c1f7432",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f4ec27a-26c0-4da8-ae56-4928e3717681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f49943d7-b40d-40a8-9a0b-20c0093f5d32",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "104b53ea-4635-4b39-9d90-e1ec140ec4f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fae628af-52f7-4109-a214-31a359186fbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d290c19d-fd98-411d-8ad9-a1ccecccc2a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "012945cf-c956-4034-b77d-de600e61c682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23278396-6603-46af-871b-f5dd6a4c8e46",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bef229ee-e491-4449-b96e-ae51613dc405",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c434ff96-d2be-42f9-a287-1ea796b85bbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cfec589-7242-4ea9-9f37-275b02f6c7ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "262dd81e-d338-46c7-85db-e1b50df578d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac31194e-71cb-42c0-89db-c0944fc2108c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6184c339-d7b4-421f-807f-9c2704a8a4ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "726361d7-b234-4f64-b45e-20211f3d84bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b895e9b1-6385-4a06-a7f5-6704c73eba1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfca914d-ac1c-4a70-b042-4140acc55900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66f638fe-24e5-4647-88fb-2c3f57d447bb",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45aa0815-52c4-4171-8a59-f73868f8d216",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c383449-6c07-4e46-8136-11c1441b60d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e8357e9-833f-4845-9ae0-b1db86ecf6ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e3040d0-8f85-415a-8941-a6ba538544ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "895ab87a-b502-4628-907b-ce97df7fb340",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01aa2c14-824e-46a9-a34f-a513c80fc82a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "559e74bd-1521-4a11-95ab-47d74956554a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e12f48cd-060c-4c06-a6f3-de4a3f6e4e07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb03061a-473d-4c54-ae18-5821219041ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab86940-0987-4529-a482-1b32aa790b0c",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "577933ce-6f63-45d0-92fd-d10bd9befd82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94b63aa8-dde8-470b-98b9-d92fb5460e05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae9d707-3c3d-402d-a2b4-484701c7e775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84476b1b-faf3-48bb-8e68-587a274cae97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6602dcfc-6532-4055-a3cc-41a917a43c21",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "404fe35f-07c1-4aaf-b7b5-a8c43d848a86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7de3a695-3856-4ade-a44e-d3c3b921631a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e176960b-7a22-4862-97b7-4a81db5cab3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ae7a3bf-126d-4343-beb5-32a3bf27a292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160c7383-b160-4c32-abb6-e711de4b29b3",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8db9f4fe-ccc6-4f0d-8c73-29e402d509c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d274631-db1a-45d0-a0ec-d6fdf44bfa78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a83e6d5e-c78c-4fc4-bee1-09a0e6d7a2e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "291a878f-d557-488f-badf-8a6ba6f5073f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c192323b-8cff-434b-9893-0feec5afbb15",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c0a50de-c5db-4496-acec-a44fb38146f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ed7cdbe-8daf-4b93-8988-520d66b5317e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8461107e-78a3-4887-8c80-40155ca5d449",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6021a9ea-b6a5-4c24-9710-7eaf46d4e244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b6cf42-c0a0-420c-86d6-2d84a44b793d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0422c1e6-7445-4a8f-8b07-f2532be7d05a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d101d9fe-bd2d-4dd3-8b07-15fb09f75005"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08a7a133-35c7-463f-801f-3201e85f41a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "960bb6cc-c1d0-4746-9e6e-092d7022dae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2740bd6-cad6-4091-bca4-d98504e29473",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f41b6a-eab6-454d-aeed-9fcab563d766",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdfbd6c4-2821-4d01-a43f-f9308cfd41d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4710a1-604e-4682-bfc8-8bf195b4a561",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ab8e477-17e2-45ca-8068-29bf9fe57fd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa0c389-f959-43c1-9124-89f285bd306d",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6177c6e8-1989-40ed-ad8e-5f7e12e78092",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c51cb3b-bd49-4569-86c9-0ee2c854fcf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd506be3-e952-4430-8750-b6da9808f805",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f12ed0e0-669b-41c5-8a06-0a01de014608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "454f0077-294d-4ed3-bb41-59fe6fd5ae93",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "011c6c71-58ff-4d8d-9ae8-ddbf5cdd1520",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fb9b0e8-9fc5-4f18-9aa1-9bf5870af0b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2187203-ac59-4d58-bbfd-b5cb363d6d17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64e62b7e-80ba-417b-b2a5-b9e9bf9faced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9431e590-b360-40b9-b757-e6a9f1e07f82",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c3c2f1e-75dc-4274-80a0-055fed9af6d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f039f3b1-5e2b-48d8-ab46-c36b2749a82a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf98ba56-6cc9-48bf-8b25-282cd0a717da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5deec6d4-ddff-4ef1-803f-c6a2e7c7ebfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf81b801-111f-4ed0-8e23-d11a2609421c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56e37afb-43bf-49d7-93c9-f24459ad4620",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1af3d548-9b25-45c6-aac2-a383b12ca1cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c22f681c-2193-4073-be7b-0b51075643bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7764bc0e-1fe3-4404-9532-c82646e994cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf2e5ab0-c0f7-4cbc-b8f0-de939af5a11d",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f786147e-7c44-46ca-b41d-96331c80fe02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e68c4315-f4e9-4994-8a87-3cb057065e4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b5007d-657b-4c88-9526-ba0fbd85ae7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc784636-5aa4-422f-bd92-95d6aba918fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34012678-8561-45d4-b425-10694c289700",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99f80af3-a004-4de0-a55e-a4cb97f7d533",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5338c471-6b9b-4b79-9337-7afd72fbf322"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c89aae8-17ec-4e77-b41d-4a3fdd00bb0f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22439948-c1b6-40d2-be6e-a94ab9882394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "640359a4-83b0-4176-aafb-8318726a61b9",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "389ef222-1412-4dea-b0c0-6b40eb050d0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb30677c-38be-4b78-aef5-a3fe58f2a2b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28a3f345-5b46-4680-8cad-47f0f88cefec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "170d99c4-7b1f-4564-92ba-ca937fc3b8c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "603ea4e8-7db6-43d9-811f-a076d90b1518",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e602573a-a412-4b42-bdab-ca545bbab7e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddfa7605-b12a-4467-bc78-adce797a7db9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32b63865-688f-4e0b-be99-8e06df9b898d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f108a496-fd82-4fff-9f19-ef310481e6f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d03f7ac-f731-4b57-87b0-719560a53889",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "387e3776-8ae4-4387-858b-3b850ea4cefd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2bc2326-ce5d-49a3-8196-982bd16359c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff3e08d-0375-4e76-95ce-0506688269c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecf59118-dedc-4cd3-af04-8d4c57369636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a7cdba9-8f01-4b3e-8099-cda43f7b687d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a822a83-57bb-4d27-83d8-c36cec231f97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97717aaf-a7c3-46fd-b4ed-89b976001d93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97e0a5c7-9e2c-4304-8c3e-b3c32ccf653e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "952792ec-0f7a-4952-a03a-0f666358bffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d70aaa-05cb-4e04-a7f1-231904b9a467",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d4e63fc-c10c-4513-8f54-e77df7543e45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3e8bf67-15a7-4c31-8d3a-1007ecccd53f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe95220-d40c-4c68-958f-99962867ebec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "268ca9f6-d7fa-4a7d-8089-af8d613468fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf9d1e46-94f4-4207-aa59-c1a9531ab25f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fae153c6-e98d-42d8-99fc-f3a1c5451705",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "faac51c2-756a-466d-988e-3df89389f27c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77783009-c2e8-4081-97d0-874319a2e474",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "578f1505-0499-45ca-888b-75fb009a5974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbcbedbf-e5d8-4ed0-a429-1c30bb6a0ada",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c0a8db8-83f8-4cbb-a969-de25ec41f1dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b74bcd32-9642-4880-adfb-eba3a255750d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "038f87a3-5e7c-4210-981e-b99ae567981f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89e71989-f14d-49a1-a472-61bd5d0d2fb8"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c2c4fd15-1776-4068-a4b9-7de1556f993a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "429a4fde-6068-44f4-8dbd-fe9d5b2ed070"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a752c75-29ec-45d9-9d2f-f0be4a2b01e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5c1ea33a-54e3-4754-846d-71e0998631ad"
                    }
                  }
                ]
              },
              {
                "id": "028de369-a80d-47ea-88bb-fc198abbdeaa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "541b2910-0f09-49c2-b068-812e308fa004",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7f4c10-1a45-4ce4-abc2-0c2a5dd9df32",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5f281603-92b0-48d7-acff-7c0d88f0a34a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "231d9ddb-9103-4771-87df-0e6832761e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "04e94647-d527-4129-a491-73cba9b2af8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94792b86-0420-42f0-b0c1-2b7e8a498e6b",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdda401f-45af-43fd-9c7d-9473bc98ee53",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a4bc5485-343a-40be-a368-b48887d0ea2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d15edad5-8311-4f43-a27c-6a58e58ca8cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9a773702-4bde-488b-8eec-2c007c6de781"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f9778fa-04fb-4dc0-b102-34b72159dfc3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9e428d6f-7a66-4ad6-946d-1ad826a981ac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e17a5a67-7704-46e5-97f5-d6be4bbbe186",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cd450e58-a6a0-4811-8e5c-e3e94495925a"
                    }
                  }
                ]
              },
              {
                "id": "06c82aef-1c79-4bb8-bcd6-8b9107f4405e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "f78a518e-7735-4e5a-a86e-75d3ced232e6",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3725113e-a22d-4f1b-9f6d-d31ffa2cbfcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "b51b21cb-8e35-4eb8-bb7a-ae4f87408d2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cafa9c7-c905-4938-896a-ef1de9b1642c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b65b829b-d540-404e-9922-4bf96371d458"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c8326ab7-73cf-43cd-b448-e1ff23e7f0cd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d9b9da92-06c2-46a5-b67a-bde046534222",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d389d6fe-d7bb-44bf-888f-e6f060d16bfb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ebe7aed6-eab3-46d3-a5b5-f7105da71411"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5222d731-5e6c-4192-aa36-6b4f38a24f83",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cf8c166c-c39b-4a96-92aa-6576528dc7e9"
                    }
                  }
                ]
              },
              {
                "id": "c0b6def1-c9a5-4684-bd47-268b260661d2",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b29edd5-f098-449c-8f03-646e32f2c298",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "de5a5406-0f62-4acf-85cc-5e46ae4cce20"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b46e9a0-5a9a-4ef8-b496-5c2493bb563a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "163c78dc-dbdb-4e04-adb3-3ba539ae7872"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "43a1178f-42c1-4e67-8586-e4ca858a7dac",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "8753ede6-eacc-4972-a17a-41ec60f67947"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a84899ef-751c-4e46-b617-d22b69244045",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0097d688-335c-4d17-bf46-b4eceb5c1678"
            }
          }
        ]
      },
      {
        "id": "e4aec3cf-1080-4a96-b8a1-3dbe15079cc8",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b0671f32-87be-4e0d-bf9e-04bf85be6a5f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ef06e5c1-d436-4a69-8dbf-e1961ea62b82",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "034a9437-d3d1-4043-8d67-cad344b17ee8",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a336b0-d47b-4828-91f4-de96f640c622",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f269e60c-0406-446f-a2c4-a44ab9f4ae56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fbff643-4493-4b67-8eb2-c51483c78562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0b8bb5e3-a037-4d63-8c9a-26f5889a90a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14e6d093-52c6-4f71-a898-90aed32489cd",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6217fae-e5d3-4dbe-b850-0af23ace9db3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2aa07488-a391-48f0-8a20-32e0d04578f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71ea2a06-7bcd-4360-8deb-3600432f6405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75c1cdb1-3abd-49b4-baca-671188170b68"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3bfee186-1d90-4dc0-993b-6ea5c7e4708f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89f0c786-9af1-419b-a192-9034f2223a3c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f652adf6-25a4-47fe-8f34-b6784c421fff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9287f9d6-661a-4dee-9c23-aa286c75e481"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "25b66e1a-7df7-4b67-8257-06197d003e37",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8b030b44-27e3-4432-acd4-5c6ff91fec08"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e5a96844-ffd1-4ace-bd1a-97a26f2a4a3a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c6a0797c-8556-4733-8b82-e55f5113d4c9"
            }
          }
        ]
      },
      {
        "id": "5f90a4a7-0cc3-44ef-899e-33ba27c2eb92",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "7a6698f4-3e74-45d1-bc6e-a7def50f9210",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dbb3aa17-8d6a-43e6-8699-c283072d8620",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "19dd4ee9-a3bc-446e-9457-d0dde1ad218a",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe644d8-8653-40de-9cec-934089be175e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2033c9b9-dba7-407f-b59c-669116e48ded"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ede127a-d716-45e8-9f17-ca4b97db72dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb7970ff-4617-45cf-9098-4d5b900a5c5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aebbd5a1-ef65-4d1b-88dd-0df093f8b1ce",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9c73e36-d358-473e-aaad-ec9d5c3e27dc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ba50619f-222b-4819-8e28-a29ff3e950c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79d19f61-e094-45b5-955c-2cfd8532ddb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12bb71dd-1e0f-4319-b842-3b2c9f74751b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc5d1c62-d8de-481f-a222-9b9a6866660c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e060d4e3-9fdd-4a35-b37c-0fcdbe4b1184"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e19cd0a6-322d-440c-acf5-c002138cb3d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "77b6ab77-cfed-4bef-82d4-1d3963dc549c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fef8349c-7e6e-4eec-a866-a476cbc68274",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "49c1137f-2db2-4157-b547-8d624445969d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "66b8fa9f-df98-4c57-8fb3-759ff7e4a594",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "14853826-d2d5-48d0-957d-fe66b6e60b84"
            }
          }
        ]
      },
      {
        "id": "44f58010-590b-45ba-b582-c42eedb771e9",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "67a01b6e-18f2-4e28-9229-af437f6a6784",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5c85a3a6-60d8-494d-8c84-5f54fb6fd366",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "155d2d7c-509c-48f2-a391-5f95bb7a4258",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ebe0b06-e830-468c-89f3-8b9f1bed6199",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c644636b-8c55-4efa-9ce7-834957a64597"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff5ae0a2-9598-4f95-9072-0b876b594494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "85427433-2dac-452c-ba1d-a2e25e9f9f73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2516596f-5c2e-4d78-93d0-2533a8e2be5b",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c9d9035-2378-41d6-aa72-1248ac631777",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "3b5ce3f7-45f2-4546-b28d-93a68cb16e77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a713bca-2ca5-4e74-ae66-37cef5250825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e8392e0c-a8d9-42c6-b37b-cb1702f5df78"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "216449ca-d6fb-41c3-8923-171d0a2b0e9b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd334d07-6676-45e6-86d2-33213ddc63ff"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b7c2ea0-fb73-4f60-a839-dc8cadf7a784",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "35a33ba9-94ca-49eb-9b3a-f02167b76ce3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a6dd68f6-a0ff-43b8-9200-618185eae42d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "11b37c1d-ade9-4269-a8d6-b2c761f04abb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1c6d2b9a-7197-43b0-b7f8-c7537c4c038b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "47071cf4-6419-4e4f-97fd-9b12b5c5a78b"
            }
          }
        ]
      },
      {
        "id": "34f48048-7502-4408-9767-be7573bb3076",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "afd90902-aa6d-4a70-9726-748b19150f17",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b0b411c2-ccab-436b-9e4f-c9e16ad77c79",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "64615801-5cdb-4bf2-b222-8253be318bb6",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3d019090-11ba-4490-ba47-25653662806f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b24feb8a-31f6-4411-9942-9d0849e40f1d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 254.81538461538452,
      "responseMin": 11,
      "responseMax": 6329,
      "responseSd": 758.9471785067219,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1683938094070,
      "completed": 1683938171734
    },
    "executions": [
      {
        "id": "3376e1b4-30aa-43e8-b0ac-185a2dad9eea",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2e2ae01a-392e-4a31-a493-55a39da59c76",
          "httpRequestId": "3313600a-8fec-4d2c-94c6-3c6be4d949ff"
        },
        "item": {
          "id": "3376e1b4-30aa-43e8-b0ac-185a2dad9eea",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "98a5a1bb-e2af-46dd-becf-ad54d0ac024d",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 0
        }
      },
      {
        "id": "f8704176-4c7f-480f-97e9-2553e86fed03",
        "cursor": {
          "ref": "9b1f9199-2dcd-4caa-b7ea-aba60426ec1f",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ccf933d1-2ad6-42c5-a0c9-63832c2eb0b9"
        },
        "item": {
          "id": "f8704176-4c7f-480f-97e9-2553e86fed03",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "26f3df31-b715-4bfc-bfc6-cb68080181cb",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "148df7c7-b332-4edc-a381-199e8e196d3d",
        "cursor": {
          "ref": "06b49e3d-590f-452d-91e0-de8701582076",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "cb86fc92-1292-4845-9489-ad33a9da0f03"
        },
        "item": {
          "id": "148df7c7-b332-4edc-a381-199e8e196d3d",
          "name": "did_json"
        },
        "response": {
          "id": "65e60134-cc66-4ce4-94c2-1dfc76d6d424",
          "status": "OK",
          "code": 200,
          "responseTime": 355,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66eac3a1-3e6a-4722-a36b-1e63f5dd517e",
        "cursor": {
          "ref": "78b023f1-c024-4737-93db-75121de224c3",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8b151563-c905-4d14-bcb9-7ad03c49dbcd"
        },
        "item": {
          "id": "66eac3a1-3e6a-4722-a36b-1e63f5dd517e",
          "name": "did:invalid"
        },
        "response": {
          "id": "779ca3f6-92ee-426f-9f44-a54f224b4ca6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1743,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "66eac3a1-3e6a-4722-a36b-1e63f5dd517e",
        "cursor": {
          "ref": "78b023f1-c024-4737-93db-75121de224c3",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8b151563-c905-4d14-bcb9-7ad03c49dbcd"
        },
        "item": {
          "id": "66eac3a1-3e6a-4722-a36b-1e63f5dd517e",
          "name": "did:invalid"
        },
        "response": {
          "id": "779ca3f6-92ee-426f-9f44-a54f224b4ca6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1743,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "c62e4c27-f589-4179-bcf6-eab844add3b7",
        "cursor": {
          "ref": "d1421d12-0218-4d95-9932-96923989b2e2",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4737b207-e89a-4e67-a708-81438252d05d"
        },
        "item": {
          "id": "c62e4c27-f589-4179-bcf6-eab844add3b7",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "1e048eed-36ae-405a-b3ef-afe980c04837",
          "status": "Not Found",
          "code": 404,
          "responseTime": 45,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f65fc99e-c444-4082-971d-3f67661203e8",
        "cursor": {
          "ref": "7d5724a3-e132-40a9-8f63-c399659b00be",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "77b4c4cd-bc28-4d77-aea4-ffbe80bcb90b"
        },
        "item": {
          "id": "f65fc99e-c444-4082-971d-3f67661203e8",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "96121c5c-d630-477a-9c02-63f973438b96",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7df6b8b-e5ff-40d1-9d77-86bc2a4e07df",
        "cursor": {
          "ref": "0be8dc6d-0cf4-4477-b438-e6626d9cebd3",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f5eacc49-5e37-48b2-a952-85e8a4abfc23"
        },
        "item": {
          "id": "e7df6b8b-e5ff-40d1-9d77-86bc2a4e07df",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8318fbf9-b97c-44cc-aeac-d116b0dd3483",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "9a7ded04-8955-4076-a3e7-b11f9ee5a90f",
        "cursor": {
          "ref": "2cdcc170-08e2-478f-8f06-88c2b2a52f9c",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "24a23095-c3c1-427b-8ea2-cb90e612aad9"
        },
        "item": {
          "id": "9a7ded04-8955-4076-a3e7-b11f9ee5a90f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "e9f4c7e3-8d4e-4d8b-87e7-25d1566435da",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "9a7ded04-8955-4076-a3e7-b11f9ee5a90f",
        "cursor": {
          "ref": "2cdcc170-08e2-478f-8f06-88c2b2a52f9c",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "24a23095-c3c1-427b-8ea2-cb90e612aad9"
        },
        "item": {
          "id": "9a7ded04-8955-4076-a3e7-b11f9ee5a90f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "e9f4c7e3-8d4e-4d8b-87e7-25d1566435da",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "5c1e035f-60ce-49fa-961b-290ba54e3cab",
        "cursor": {
          "ref": "f1f2faa8-de66-4a75-a5a8-f77b751f9264",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5a906b8c-34cb-49fe-83f2-580088df0f6d"
        },
        "item": {
          "id": "5c1e035f-60ce-49fa-961b-290ba54e3cab",
          "name": "identifiers"
        },
        "response": {
          "id": "b07622e3-8a95-49dd-95a7-f533ab5d92c4",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08376f5f-17be-493e-9765-6b833b2feaba",
        "cursor": {
          "ref": "b77ab984-9899-4fc4-9527-1615da7df55e",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5bf275e0-6ab1-4e89-8e70-e18f42093218"
        },
        "item": {
          "id": "08376f5f-17be-493e-9765-6b833b2feaba",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4b2ceb4e-878b-4297-a961-34b4d8392448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08376f5f-17be-493e-9765-6b833b2feaba",
        "cursor": {
          "ref": "b77ab984-9899-4fc4-9527-1615da7df55e",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5bf275e0-6ab1-4e89-8e70-e18f42093218"
        },
        "item": {
          "id": "08376f5f-17be-493e-9765-6b833b2feaba",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4b2ceb4e-878b-4297-a961-34b4d8392448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cac22e5-77e1-4929-bfa5-220523e15a56",
        "cursor": {
          "ref": "9b656227-d773-496c-8c75-2a58d3c5af07",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "fe337aba-8fc6-4661-b78d-d9791a39863e"
        },
        "item": {
          "id": "4cac22e5-77e1-4929-bfa5-220523e15a56",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a4a9aaba-e167-4000-93c7-c511f3f49671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab36973e-bdb9-4300-83ed-e4d81cac33a7",
        "cursor": {
          "ref": "486581e1-7c9d-43a9-8c8c-6877d6b62249",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "31d74e42-27ad-431e-8752-7de94c5309c5"
        },
        "item": {
          "id": "ab36973e-bdb9-4300-83ed-e4d81cac33a7",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "37efdf21-d2bf-47b7-9b9e-0f3ec7ade4ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5edeb56-ffa0-4600-a6af-3c24f6b16bf7",
        "cursor": {
          "ref": "319e7db8-7579-4b08-bf9e-8dbc9cade56c",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "dde88fa8-57e4-44b9-a008-89bdf9d6f9ca"
        },
        "item": {
          "id": "b5edeb56-ffa0-4600-a6af-3c24f6b16bf7",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b9f9f3b8-3991-458c-acec-4e841277ffbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f32231bd-3ed7-4c53-b0f3-1e2b28e6ed4f",
        "cursor": {
          "ref": "c4e22997-c8e7-49b9-b8d8-77880e0eed00",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "bb7e0c4d-d4b2-4505-8a2e-9a788651e318"
        },
        "item": {
          "id": "f32231bd-3ed7-4c53-b0f3-1e2b28e6ed4f",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "be320656-fbe1-4a13-84ee-d7fcc25ee6a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "468f6a28-1d8a-484e-9cf1-ad6d6e5293c1",
        "cursor": {
          "ref": "bf7dbed2-7a39-4ce2-9fd7-cf56d92c2f48",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "98d0cc5b-cc7f-4581-a2bd-03ced3bcc634"
        },
        "item": {
          "id": "468f6a28-1d8a-484e-9cf1-ad6d6e5293c1",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b3279bd9-7f22-4d46-94af-303b991f2583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c14164a0-0aaf-43f2-9c56-ee690708d663",
        "cursor": {
          "ref": "ae11306c-66e6-4ed4-bbfa-3a1af58bf31a",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "45cc7892-d3a5-4d34-bb4f-6f5c3167b60b"
        },
        "item": {
          "id": "c14164a0-0aaf-43f2-9c56-ee690708d663",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "69f9ae02-7f9b-4864-9a00-bc823266c7d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da1b901b-cd3d-4f6d-89c2-bebfa19892fb",
        "cursor": {
          "ref": "8ac53b47-fb22-455a-834e-a6b86e230778",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "fbf86c91-db99-4c8d-99c7-d76359d959ce"
        },
        "item": {
          "id": "da1b901b-cd3d-4f6d-89c2-bebfa19892fb",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "76b452bd-61f2-46f9-b06a-db2be946094b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f606e9b-36ef-4ba5-a799-31a3acc9e337",
        "cursor": {
          "ref": "c5062d50-86d8-444b-a552-ea772e5a138e",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6f682154-7765-4347-a118-dd04c9143f93"
        },
        "item": {
          "id": "9f606e9b-36ef-4ba5-a799-31a3acc9e337",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "9757ba4f-c73b-40fc-aeb3-36ddfb583188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92db2086-82e6-4547-a5b0-cd14cc56fd3a",
        "cursor": {
          "ref": "ff03434f-37e9-4cb1-bff8-7b032345414d",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "bf38c20d-5ce7-4137-a3e2-0a781bad9b5c"
        },
        "item": {
          "id": "92db2086-82e6-4547-a5b0-cd14cc56fd3a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "06b78d1a-94f3-4731-b630-b6db5b47f9aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c076a4a4-1111-4b73-853c-aef46159de05",
        "cursor": {
          "ref": "ce713966-4b88-4ce1-abf1-8db1a97c8d0d",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "5530e5a8-46ca-4309-9bea-6cd5046671b6"
        },
        "item": {
          "id": "c076a4a4-1111-4b73-853c-aef46159de05",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b14bceb3-d271-4f29-bcec-e0f5c98c1d12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df4c16cf-5fd8-4967-9c40-3f6aa9746b19",
        "cursor": {
          "ref": "56fa8b53-a50d-4f5f-a29e-9f7745ef0e81",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "25e5a38c-080d-4c9e-9a31-9a90780dbe56"
        },
        "item": {
          "id": "df4c16cf-5fd8-4967-9c40-3f6aa9746b19",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "40cf0613-151d-4ff6-96d9-8f0bc64c7d33",
          "status": "Created",
          "code": 201,
          "responseTime": 1597,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "7a4b0a99-79e5-48e0-93e5-8b2e470ae2f5",
        "cursor": {
          "ref": "3ec0fa1d-da2e-4aaf-8f3d-96076fb5592d",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3c12e02e-9262-4ead-9e31-88ea8ef077e6"
        },
        "item": {
          "id": "7a4b0a99-79e5-48e0-93e5-8b2e470ae2f5",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "464dbdb9-b418-43ea-8491-5d74a28308e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0db1a9c-76f4-4d9f-8b73-b3149471e1eb",
        "cursor": {
          "ref": "c24a11cc-6f36-4343-88f1-18f5eccd0595",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9a061f00-939d-48a2-bbde-52c6d49b85c8"
        },
        "item": {
          "id": "f0db1a9c-76f4-4d9f-8b73-b3149471e1eb",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "08b750a6-06a2-4f4c-8da4-db5086b9de41",
          "status": "Created",
          "code": 201,
          "responseTime": 6329,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "5596ee62-fe5e-490d-a865-e8396369fd0f",
        "cursor": {
          "ref": "5efb2db8-2e18-4cf0-a61d-2dbb6874a048",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "dc8ecd38-7bcf-4087-a5c5-1cb556baee5e"
        },
        "item": {
          "id": "5596ee62-fe5e-490d-a865-e8396369fd0f",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "59ba23cb-e932-4cea-bfe8-976bfaecf59c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "286a0613-fa27-4d4e-b8f3-e82663f357c8",
        "cursor": {
          "ref": "dc2efa64-ca34-4652-af9e-07708977b655",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6a95069d-4754-4489-acea-0b624fe9660a"
        },
        "item": {
          "id": "286a0613-fa27-4d4e-b8f3-e82663f357c8",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "397f9323-b086-4dd9-9f98-ac7957d1d980",
          "status": "Created",
          "code": 201,
          "responseTime": 3178,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "f92130b2-a1c6-453a-b3f1-c06a3b4e903f",
        "cursor": {
          "ref": "c57808d5-9ca6-461a-b391-248fbe3b66e4",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b808522e-c5d1-48e8-aa93-f580c5e6c9ba"
        },
        "item": {
          "id": "f92130b2-a1c6-453a-b3f1-c06a3b4e903f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "ca7946db-ddc3-4ce6-a12d-7b5532d7dbef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "480971b4-8a75-4bca-94d6-bc476c46e604",
        "cursor": {
          "ref": "1e2da283-36c8-473b-9c81-bd1d630b3f17",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e38c9238-bcd1-48e2-a04c-a31ac6b7c905"
        },
        "item": {
          "id": "480971b4-8a75-4bca-94d6-bc476c46e604",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6e667a93-692d-461b-832b-d2e9597ea933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fd555dc-c033-4d1a-92df-140933a0a293",
        "cursor": {
          "ref": "8a23aa29-3677-49e9-98fe-cd59de53dabe",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "7e3c0288-a556-4160-944b-f9bcff036e3d"
        },
        "item": {
          "id": "7fd555dc-c033-4d1a-92df-140933a0a293",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "f2f3cb9a-2168-4905-b087-ced6430d4425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaa9e872-cd02-441c-91cb-43188aa40720",
        "cursor": {
          "ref": "abe14f48-875b-47da-9845-2dd72a334805",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "c1100906-852b-4a84-bd6a-5009105d6f05"
        },
        "item": {
          "id": "eaa9e872-cd02-441c-91cb-43188aa40720",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "c022105b-17bc-445c-82cb-9f459e101a61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43bf64b4-8969-4248-b356-e39ff875d557",
        "cursor": {
          "ref": "8566336a-da23-4894-a0b0-bd9688d61b1f",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9bf17bff-ce39-47d3-ab6e-f3c23ea8315d"
        },
        "item": {
          "id": "43bf64b4-8969-4248-b356-e39ff875d557",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "0484d1d3-b4fe-42aa-b484-be30e829cbe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "110e4237-3f76-4673-b891-ee9e9e0acaab",
        "cursor": {
          "ref": "f476cf87-d1b0-4e8e-aabf-75715d26bddc",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "1a3b3f56-0403-402f-8624-887142d524ff"
        },
        "item": {
          "id": "110e4237-3f76-4673-b891-ee9e9e0acaab",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "eae8f80e-ce1e-4a39-b74f-1215828931da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71d74984-7f56-427d-9afc-9d523bc19151",
        "cursor": {
          "ref": "15da0537-4343-4f22-b22c-e655fe9b530c",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8a4af617-dc75-4577-9a1d-16a5954062f8"
        },
        "item": {
          "id": "71d74984-7f56-427d-9afc-9d523bc19151",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "364e2592-e469-40f0-a59a-f90ef1e1b82e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a378a6b-3d43-4dae-9983-1ffc2b80840e",
        "cursor": {
          "ref": "a8f51f23-f54f-4439-901d-239057d86e99",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "53097964-1091-4dc4-bd7f-8ac4e83f65a4"
        },
        "item": {
          "id": "5a378a6b-3d43-4dae-9983-1ffc2b80840e",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "df2fb637-eb79-4369-9f35-d694eacb4543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98726058-e06b-4c31-b63e-d68a493ee68a",
        "cursor": {
          "ref": "9c6bd19d-c7d2-42d3-8c47-1d2d6a0a96a7",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "91f228cd-a6e5-47fd-aa4d-39cb688dc5e3"
        },
        "item": {
          "id": "98726058-e06b-4c31-b63e-d68a493ee68a",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "7d6cd50b-977a-4737-9e64-32dd95be20eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c558cb57-5c82-4180-80c6-aa5b7a4f0b5b",
        "cursor": {
          "ref": "591e7708-13b0-4aaa-a8ae-bb291dd26e86",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "dce0e84e-7807-4f68-aba5-7346af143dd1"
        },
        "item": {
          "id": "c558cb57-5c82-4180-80c6-aa5b7a4f0b5b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "7c37d56b-6747-41cd-b14f-d49e50c5b6b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62b7a469-d0d7-4638-97ed-ab06f4b0826c",
        "cursor": {
          "ref": "9c395a93-df0d-4707-8704-26444c803f60",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0f2b40c3-9065-4517-a051-894a5d6a7df0"
        },
        "item": {
          "id": "62b7a469-d0d7-4638-97ed-ab06f4b0826c",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "00b40766-d7ab-4a47-a10c-93416cc13170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c6fed6c-debf-4c08-b25c-a9126df48d47",
        "cursor": {
          "ref": "e552fe1d-8b25-4a6b-95ee-71bac0077a4a",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c18e90e2-7082-44de-bfa2-8be23ac07eff"
        },
        "item": {
          "id": "2c6fed6c-debf-4c08-b25c-a9126df48d47",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "1389f884-e113-4f60-8a3f-38eb270ea251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8049a3c5-96a6-4fe7-939e-0a99015ca3cc",
        "cursor": {
          "ref": "7bdffe97-1400-48e6-be9c-304bcc470249",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "95ce33cb-4780-4184-9a53-541dd4da7ce2"
        },
        "item": {
          "id": "8049a3c5-96a6-4fe7-939e-0a99015ca3cc",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "c0fed373-565d-4bd5-bc96-eb42824905c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d95ce1b-d538-456a-ae0d-e61c5c349c0b",
        "cursor": {
          "ref": "2aee960a-6026-4bc4-ab91-7b80a1381f6a",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "fc524e58-4d21-4ea6-9f56-43e633161cd0"
        },
        "item": {
          "id": "7d95ce1b-d538-456a-ae0d-e61c5c349c0b",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f4643fb7-9efa-4b28-a594-dc1f422bfd4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e971fd0-4ef7-497b-8e46-73ff7c289bdb",
        "cursor": {
          "ref": "338b89b5-7ae8-4e7a-b227-c1ade043df15",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "0e75a111-5b38-48f2-973e-b7eb7d484264"
        },
        "item": {
          "id": "4e971fd0-4ef7-497b-8e46-73ff7c289bdb",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "ffd35a16-c50d-4559-b775-61e131c04f16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bb63eda-7814-46a0-a599-65b71741cace",
        "cursor": {
          "ref": "d26a9029-8085-428c-91ea-bc71b9f0dda3",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6aadceb9-c195-462f-ac33-b31ca16e31b7"
        },
        "item": {
          "id": "1bb63eda-7814-46a0-a599-65b71741cace",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "0932ddaa-7d66-490e-be10-9e32a850e8ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68eae28b-c20b-49d5-b1ac-2cf2e8e849e8",
        "cursor": {
          "ref": "18e3d0da-b1d2-4639-8bd6-6c1db936e25d",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "06194f1e-4c00-4fe2-bcf0-124998857e85"
        },
        "item": {
          "id": "68eae28b-c20b-49d5-b1ac-2cf2e8e849e8",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "bb7af39f-c93d-4396-8a17-78334d555a37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c68b691-9187-4b5a-821f-40356df465b1",
        "cursor": {
          "ref": "bde51a9b-04f5-42e8-91f1-9c79ca790c05",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "53d2f036-f3d6-4941-be60-1e4fa9d5ce8b"
        },
        "item": {
          "id": "0c68b691-9187-4b5a-821f-40356df465b1",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c3afc223-a2c1-40b6-aa80-c90e1750010d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f87edb4d-aa02-4b71-85fe-26bf3a744f26",
        "cursor": {
          "ref": "d784ba62-b628-45e4-b2f2-a5ffe2495013",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2f5ae8a5-d042-428c-97b0-b4c1b3ee0ff3"
        },
        "item": {
          "id": "f87edb4d-aa02-4b71-85fe-26bf3a744f26",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "0b389349-5a49-4e03-85bc-b371ec2b28fe",
          "status": "Created",
          "code": 201,
          "responseTime": 2558,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "79a113e5-aa4d-4f06-8b87-8734aee1e638",
        "cursor": {
          "ref": "2256f079-4170-4809-8e67-f3cff1db6407",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2c22237b-424e-4664-a81f-2b3a42bcb8dd"
        },
        "item": {
          "id": "79a113e5-aa4d-4f06-8b87-8734aee1e638",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "16f8b41f-7db9-468a-b142-53631dc322e9",
          "status": "Created",
          "code": 201,
          "responseTime": 2825,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "ed56bbd8-ca51-4a94-a4ff-fae0c895ffbb",
        "cursor": {
          "ref": "1278491f-3d74-4bba-91ec-f5d3fba2f78e",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "7bb9e75e-bb4b-4c49-b9a6-5846a3c28478"
        },
        "item": {
          "id": "ed56bbd8-ca51-4a94-a4ff-fae0c895ffbb",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "52c80733-b2c6-42ca-b6f9-ad6879e0cc38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61e04d40-95e4-4d33-8b93-2d0bb5a7545e",
        "cursor": {
          "ref": "6e114eec-d5f2-4bc5-ab66-7bc654fe3d63",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "9209dc2e-a353-464a-b967-fd8b5b68d240"
        },
        "item": {
          "id": "61e04d40-95e4-4d33-8b93-2d0bb5a7545e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "4794640e-f991-4862-ae19-15b7afa5c010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c49acdb-e82b-41a7-bc17-09d2453e75f1",
        "cursor": {
          "ref": "4984dbec-0f19-4424-8737-e5f6749793ea",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c146f196-6a6d-4802-b819-24575c4dbfd6"
        },
        "item": {
          "id": "2c49acdb-e82b-41a7-bc17-09d2453e75f1",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a744ee4b-9dc4-47c4-ad3e-43fb06d4972b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43d62677-45dd-4de6-82a9-b1eab3c65309",
        "cursor": {
          "ref": "c792658c-bee0-4c50-88e6-dce523628db2",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "af2904a7-45c8-4841-8d9e-7607973749ba"
        },
        "item": {
          "id": "43d62677-45dd-4de6-82a9-b1eab3c65309",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "eb711458-0154-464e-aa6e-b64d559f5932",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c565533c-5b4b-4d7b-9714-0391cf09ffb2",
        "cursor": {
          "ref": "edbba2ea-dcba-4234-922f-e3111314adee",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "03ae6ac8-f496-4e15-8569-58b0b579ecc4"
        },
        "item": {
          "id": "c565533c-5b4b-4d7b-9714-0391cf09ffb2",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "2ccfde79-7073-4067-ad91-8825a48df26c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832458a2-0104-4dc7-ac12-1248950971f6",
        "cursor": {
          "ref": "87b20587-06a8-42cd-8c61-574a99561726",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "3da7f25c-b730-4e90-93e9-47599f833462"
        },
        "item": {
          "id": "832458a2-0104-4dc7-ac12-1248950971f6",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "7b450921-8b12-4d58-ba22-5865a100c22e",
          "status": "Created",
          "code": 201,
          "responseTime": 2639,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "73e98db2-6644-4420-819d-bdb3c343478f",
        "cursor": {
          "ref": "1c00e7d4-2b91-4664-8929-714f36d132aa",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "c5906f05-221b-4c67-8b87-cbe539b1e424"
        },
        "item": {
          "id": "73e98db2-6644-4420-819d-bdb3c343478f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9569b1e5-8696-4a2b-88c3-1eb78ff0a873",
          "status": "Created",
          "code": 201,
          "responseTime": 2744,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "c8fa4f55-c16f-48db-bb5a-f2ce196c2159",
        "cursor": {
          "ref": "50acc95c-4ac9-444e-b7c8-62c51049124b",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "67ff83f7-b62d-4b65-99af-92a5500eea7b"
        },
        "item": {
          "id": "c8fa4f55-c16f-48db-bb5a-f2ce196c2159",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e9f98f5e-45fe-43cc-9e29-fbbbef214936",
          "status": "Created",
          "code": 201,
          "responseTime": 2187,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "e7e6f104-6a39-4795-b5cf-ba84e1d92aa8",
        "cursor": {
          "ref": "6a83b3e5-4c4f-4da0-8711-23896929c039",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d70bacae-6a9a-4571-9a20-b164d30d252b"
        },
        "item": {
          "id": "e7e6f104-6a39-4795-b5cf-ba84e1d92aa8",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b8a7d330-740e-4e78-b16b-45c407523a4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d00ce52d-333f-49d1-8b8a-bbc308f01bca",
        "cursor": {
          "ref": "94555b31-50ca-49da-95de-74d5531d50cb",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "426ef8dd-9e3d-4c6b-b401-732154754c39"
        },
        "item": {
          "id": "d00ce52d-333f-49d1-8b8a-bbc308f01bca",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "8cf7a0c8-7e2a-45f1-8817-480e99be1872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e72304ed-df8e-4c8a-b342-4d7fafa1a3ee",
        "cursor": {
          "ref": "fdb929ce-e189-4a67-a2b6-faafe4b7e189",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a3477d9a-3868-407c-9e37-c5a396eb86d1"
        },
        "item": {
          "id": "e72304ed-df8e-4c8a-b342-4d7fafa1a3ee",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "70cfef50-04cb-49bc-bce0-ca16cf2365cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3d754cf-6e58-40f4-8e07-ef63edb19549",
        "cursor": {
          "ref": "d8a26910-a7fa-4cca-bada-ca059bd9c2ac",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "7b4cb111-c55d-4f66-b097-489947d2e96b"
        },
        "item": {
          "id": "e3d754cf-6e58-40f4-8e07-ef63edb19549",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "4840f6a0-f59b-4dd8-b2a3-5c30150c5433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcd683b8-cf7b-43e2-b857-73d85a4bbe1f",
        "cursor": {
          "ref": "31e869fe-33a0-46ba-b353-498fa73fa160",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "af769537-a1f0-4fb3-bf5e-7145e1301cc1"
        },
        "item": {
          "id": "fcd683b8-cf7b-43e2-b857-73d85a4bbe1f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c2073c9f-1f4f-48e8-91c5-0f9b35072945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3444cca-a44e-46c8-a112-2abef62e87f9",
        "cursor": {
          "ref": "44a9e855-c88e-4a61-b79b-cfade942b02b",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "07bccdc3-c803-43dd-9115-8af29f9d1271"
        },
        "item": {
          "id": "c3444cca-a44e-46c8-a112-2abef62e87f9",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "81cade4b-6c3c-4c51-bfb9-4789be86f7a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bedc28d-54c0-41c0-a62e-5440adfa14f8",
        "cursor": {
          "ref": "ea603836-f23f-4844-8aa6-206375bbe29c",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "80d802c8-b38f-45e9-be86-8cabf5392fd3"
        },
        "item": {
          "id": "0bedc28d-54c0-41c0-a62e-5440adfa14f8",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "38de5fea-1d42-4b88-8425-c7bde43f43a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e38facd1-b8ae-4c5b-92d2-99da375e4a54",
        "cursor": {
          "ref": "ff285bd0-f808-4ea1-abbc-f3b77529b8b9",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "125373a9-317f-48e4-80b0-6075f19209e0"
        },
        "item": {
          "id": "e38facd1-b8ae-4c5b-92d2-99da375e4a54",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "5963a40d-c8fa-4c8d-9012-93caf8970e06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d18dc8df-882b-4eba-9aad-6a9fbf188666",
        "cursor": {
          "ref": "991a6737-ed6e-4335-9869-dad15c805426",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ecc71993-857d-4915-b95f-b782b78e5643"
        },
        "item": {
          "id": "d18dc8df-882b-4eba-9aad-6a9fbf188666",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "0b01765c-fd73-4010-a2fa-e5580ced832a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "962b9ff5-646d-4a6d-be07-c83bd08f2105",
        "cursor": {
          "ref": "1364e21e-74e9-49f3-b573-b5c775f1924a",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f2e1adf3-b551-4041-85e0-eb23dded1475"
        },
        "item": {
          "id": "962b9ff5-646d-4a6d-be07-c83bd08f2105",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "f26f096b-fb44-40c2-bed9-0c472441322f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "024d5e44-c930-44b4-b331-7c64ec66b1d8",
        "cursor": {
          "ref": "506539d9-45ee-47df-be4e-a9c60d57a148",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "6ee060c4-2f34-4906-9c48-c809a21c541d"
        },
        "item": {
          "id": "024d5e44-c930-44b4-b331-7c64ec66b1d8",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "02ecb4a1-6a7e-45d2-91ce-8521803edc81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "455e1b98-7c96-4cfc-864e-a43f760df1ee",
        "cursor": {
          "ref": "a7eaf3fe-336b-43c5-936d-30c5efb93aaa",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "70f37f42-7923-4b23-9434-36dc6223db39"
        },
        "item": {
          "id": "455e1b98-7c96-4cfc-864e-a43f760df1ee",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "66e1bece-e73f-437f-8e87-84922ea98f3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca9a430-deb4-42e5-8c9a-1cd5d4d523a8",
        "cursor": {
          "ref": "b4cb5c53-226b-4de0-a056-b508b18008b6",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b38e14d3-84fc-44fc-bc0d-1fe0c5b29520"
        },
        "item": {
          "id": "3ca9a430-deb4-42e5-8c9a-1cd5d4d523a8",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "eaf4a3a3-7f2c-479c-817e-928dd1a74809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a56717-1046-47f5-9319-66babfbbb1cb",
        "cursor": {
          "ref": "6940abc1-7c51-46d2-880e-7c4300f0e5ff",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2ff821e2-868b-4596-878e-0f24bf980d1e"
        },
        "item": {
          "id": "f9a56717-1046-47f5-9319-66babfbbb1cb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b5fcc713-4720-49fb-a4e5-2d1a1c8c301c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "651d3dcd-b247-49ba-8cac-04a5f0faa521",
        "cursor": {
          "ref": "e2e9cc8d-207c-4d8d-ab31-c712ee0d984d",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6f132c50-db96-4897-b6db-05ec4c1cc6c0"
        },
        "item": {
          "id": "651d3dcd-b247-49ba-8cac-04a5f0faa521",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d96214bb-34c7-405e-9512-a6b5c694ef10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b38c5cf6-8b08-4623-9945-7f75e1a137a5",
        "cursor": {
          "ref": "4c24d07a-a97f-4163-9c17-fda64d78cc00",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "4d89cdd0-4826-4b9b-a547-01b2a5bb1945"
        },
        "item": {
          "id": "b38c5cf6-8b08-4623-9945-7f75e1a137a5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "5923908e-e6f6-4f4e-acb0-00d71a24b864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f828bf89-38c6-4b5d-97c1-d5bcf96be154",
        "cursor": {
          "ref": "c587a9af-d7ef-41b4-9a21-fcf734384049",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "1ac30fab-edeb-4a16-a63b-bddcc7e36793"
        },
        "item": {
          "id": "f828bf89-38c6-4b5d-97c1-d5bcf96be154",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "52bf993f-3c29-4e64-a4a9-15422a54a123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dda1e133-ac9d-4251-b5af-62faa878fa5f",
        "cursor": {
          "ref": "b13c36fb-4bed-438a-9cf1-7c7c6673d26c",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "8fa9ad63-25b1-4b43-a453-0bb56107960d"
        },
        "item": {
          "id": "dda1e133-ac9d-4251-b5af-62faa878fa5f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "44e01436-4445-459f-a618-c158dd660b39",
          "status": "Created",
          "code": 201,
          "responseTime": 4468,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "58c4cea1-483d-4e3a-8805-f492757b1a16",
        "cursor": {
          "ref": "62d35a34-c949-4bff-b796-d176b3adc6cf",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "7d30fcb5-59b4-4625-91d7-dda58145428b"
        },
        "item": {
          "id": "58c4cea1-483d-4e3a-8805-f492757b1a16",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "89676979-43dc-4307-80f4-def878ab0cf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d00ed21-ee22-4fbf-b991-9f896084a422",
        "cursor": {
          "ref": "d48b0d2f-279d-454c-bea3-4ef44c2df55a",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "0aa096ae-6070-472a-ac0c-dc31aee836bc"
        },
        "item": {
          "id": "1d00ed21-ee22-4fbf-b991-9f896084a422",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "35aa6467-8b47-4fed-8029-750f4501bc58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ccaf614-171a-4afd-a6bf-fd4bec89251c",
        "cursor": {
          "ref": "023b5a4f-e3c2-4518-bc1a-0fd392b52aad",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "8f93004a-262d-4f46-ad2a-2a6682710740"
        },
        "item": {
          "id": "4ccaf614-171a-4afd-a6bf-fd4bec89251c",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "27c89438-54a9-4571-94bc-7184d750a0b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad1331b-39be-4f41-b629-975b6c5658f8",
        "cursor": {
          "ref": "fa5f4c10-c354-470a-bb6b-381c218c255d",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "e9d1b3ca-c600-4e61-a0f4-211c37c490ac"
        },
        "item": {
          "id": "fad1331b-39be-4f41-b629-975b6c5658f8",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "4aa1256b-6084-4400-bc98-7767b4ca70c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d71e09f-f7d8-4346-9f12-059e0c546045",
        "cursor": {
          "ref": "857d8a17-486d-495b-a2e0-b9ca0f55dd88",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "86393415-ec4c-47c9-a9aa-2f3136861554"
        },
        "item": {
          "id": "0d71e09f-f7d8-4346-9f12-059e0c546045",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7586a631-ea88-4a65-8e83-fbaa05139581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a85d4c92-aa53-400c-af6d-050f3ae87757",
        "cursor": {
          "ref": "7f2f5a01-2d01-491e-957a-f6ff038f65ae",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "0ceec821-061d-4735-b569-af6781bc76c8"
        },
        "item": {
          "id": "a85d4c92-aa53-400c-af6d-050f3ae87757",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "4d586eb0-8208-4f86-bca1-e53a1362d237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd81821-3468-43a2-854d-aae9da767623",
        "cursor": {
          "ref": "b468d481-7db6-4ec9-8b8b-65412f3cad9b",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "817d7fea-9c99-49d2-8c53-5faaa082a773"
        },
        "item": {
          "id": "9dd81821-3468-43a2-854d-aae9da767623",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "dacbf6bc-16f1-4d6f-9b08-ace7a156353f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af4a2bfa-c792-4eaa-9d87-c6b7e6e8203e",
        "cursor": {
          "ref": "307a7441-2b78-4edb-ac13-a32da3d85436",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "8c4c41fa-37d5-4ddc-a4fe-41ecbfbb9837"
        },
        "item": {
          "id": "af4a2bfa-c792-4eaa-9d87-c6b7e6e8203e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "633ddd56-175e-4d87-8e9b-21c4f7451112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "455972b2-a6d5-4458-98e5-60ce9ecefd80",
        "cursor": {
          "ref": "f423139a-fced-475b-931f-2177fdef0a3b",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "cbcd59af-c454-485a-9ccd-f756295cc624"
        },
        "item": {
          "id": "455972b2-a6d5-4458-98e5-60ce9ecefd80",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ed03f7fd-b44b-4083-9e8f-6abd4d535d58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9345b1aa-dba6-4fab-8859-154ee14e81ca",
        "cursor": {
          "ref": "b44144f7-9374-4dba-879b-b54c5e44b773",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c925dbe5-a09c-499f-a561-b224f21de000"
        },
        "item": {
          "id": "9345b1aa-dba6-4fab-8859-154ee14e81ca",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "d6d1a9c9-1632-4c31-8327-1f64331cff81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b24d072-5acf-4e41-b9aa-3a20d2d9d290",
        "cursor": {
          "ref": "bcf3441e-6c55-4c23-b1ea-e40b993295b9",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "188cb5b3-871c-4098-8c3d-11b4d5653293"
        },
        "item": {
          "id": "7b24d072-5acf-4e41-b9aa-3a20d2d9d290",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "6d33a114-ae6b-4820-86de-32e239ff532b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99166596-6397-46a8-acd1-e3ba718182ea",
        "cursor": {
          "ref": "b8726114-b596-4975-bd4a-abdfffbab016",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "6b66443b-3d06-4afd-88b4-3c1e62141dfe"
        },
        "item": {
          "id": "99166596-6397-46a8-acd1-e3ba718182ea",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d0c79dea-f7df-4437-9b1d-8905d3b2fdad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edeedafd-77f5-48b4-94ae-e2a9aa326ca6",
        "cursor": {
          "ref": "3ddf4c77-d264-4a01-9963-e4e781264b1d",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "50a94403-7272-4112-a699-2f5b9d0e8a11"
        },
        "item": {
          "id": "edeedafd-77f5-48b4-94ae-e2a9aa326ca6",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "3652eafc-5ec6-41d4-a47d-ca2c9a748448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9acd4cdb-7107-482d-bd9f-0b87bd92a336",
        "cursor": {
          "ref": "5ef9c4f2-65c0-4fbd-93f5-01f1ec8dfc64",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "7f32760b-b2d9-4277-87c3-7047cd1e5c8f"
        },
        "item": {
          "id": "9acd4cdb-7107-482d-bd9f-0b87bd92a336",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "4bfc7d0b-8bf3-4152-a493-a4f55e1b5080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6dd6062-1cdf-40ea-9e17-6c2df2a28213",
        "cursor": {
          "ref": "394ec1fe-0d9a-44f7-a71c-715f6b3583bd",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b5d754ab-965d-464a-a810-4c34bb731248"
        },
        "item": {
          "id": "a6dd6062-1cdf-40ea-9e17-6c2df2a28213",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "92f52ce9-b23f-4f5e-ae86-021226317de5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df5de038-ce19-4611-a58c-5b9eda8ea1ce",
        "cursor": {
          "ref": "f0ed3e56-7673-4121-9c6a-41fb851c8787",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c543b6d8-6b10-4e5e-b303-0064abf50cf1"
        },
        "item": {
          "id": "df5de038-ce19-4611-a58c-5b9eda8ea1ce",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a56a73cf-e0b6-4c28-8607-538e267164ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bec2360f-284c-40fb-b74e-597723e346cb",
        "cursor": {
          "ref": "8171a798-e376-4e30-bcea-5bce4e50727e",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "5682d4ee-fc46-481c-b9dc-55805de467a1"
        },
        "item": {
          "id": "bec2360f-284c-40fb-b74e-597723e346cb",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "532a7811-aea7-4366-aa84-5d13c3c2be65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce73732f-9e76-4acd-af80-80b3722736d1",
        "cursor": {
          "ref": "676b3318-cbbd-4f3a-a3c7-ae969594e6d3",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "1d772afe-4c3e-4d7e-9809-cefb269f00be"
        },
        "item": {
          "id": "ce73732f-9e76-4acd-af80-80b3722736d1",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "94f4d138-75f7-47ac-b705-875afb764c95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4989faf6-d38e-481a-a2c6-89f9d016009e",
        "cursor": {
          "ref": "44d946d8-08c8-42c7-b4ad-be3d2fa8f1e4",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "604787ae-b984-43fd-af4a-9284c8cd4cf3"
        },
        "item": {
          "id": "4989faf6-d38e-481a-a2c6-89f9d016009e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "4013cca7-2370-4e89-9694-df4790e877be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d89f71d2-045f-413a-aff6-449efb9ff4ae",
        "cursor": {
          "ref": "54870253-0c60-4be2-9899-399d3a359b85",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "71917924-b76c-4b0b-917c-1e5090aaf523"
        },
        "item": {
          "id": "d89f71d2-045f-413a-aff6-449efb9ff4ae",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "bebe2584-dca6-4e5d-8c25-d083aae3bd9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cfd9b50-cf21-4478-b0b4-332cb4161291",
        "cursor": {
          "ref": "42d55174-1450-4bd7-b360-1b86e999cd87",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ed661b48-26c9-42e3-aac6-4b61de07aec0"
        },
        "item": {
          "id": "1cfd9b50-cf21-4478-b0b4-332cb4161291",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "5b126361-4493-409e-96cd-cfde44afb202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba8d68f0-b2fb-4250-a0e9-a05dd491a547",
        "cursor": {
          "ref": "94035726-2c3f-4147-9746-a79d8f3dd759",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "3f0ad335-089f-4aad-9121-7fca83b9835b"
        },
        "item": {
          "id": "ba8d68f0-b2fb-4250-a0e9-a05dd491a547",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "33d14f0c-bcbf-424c-8005-186260e6647e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfbebe11-9e74-40be-a390-24bda6c3486a",
        "cursor": {
          "ref": "0c313aca-98d4-4264-95fb-eab36c3ed65d",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "254d54bb-c05f-4fec-aafe-0fda1d9a361a"
        },
        "item": {
          "id": "cfbebe11-9e74-40be-a390-24bda6c3486a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8b23c4ac-ec9c-4af0-bd2b-8adc39e0da3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38ce023d-3965-4f9f-94ee-9d7348e12908",
        "cursor": {
          "ref": "261cb39b-8a5b-4cd6-8886-4a320325c6a7",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3472d8b8-c1d8-4d82-9f13-f9df91cd8a74"
        },
        "item": {
          "id": "38ce023d-3965-4f9f-94ee-9d7348e12908",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "bfd32c33-93ee-44d1-8499-c74ad3e26551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3accffba-3463-4c94-8cd5-7f9ba8964deb",
        "cursor": {
          "ref": "24b2b23c-7708-45c4-a81d-c323185929d0",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "20061070-24e3-4a52-83a1-eada44500829"
        },
        "item": {
          "id": "3accffba-3463-4c94-8cd5-7f9ba8964deb",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "eed2b999-66c1-4ec1-b544-a46ce12de7c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6ff2d9c-4fd8-418e-8d5e-82fa4e004099",
        "cursor": {
          "ref": "18c1dee0-e709-461f-aa49-d405400a0a8d",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "61180150-9b87-46b8-9391-9a3b444486e2"
        },
        "item": {
          "id": "e6ff2d9c-4fd8-418e-8d5e-82fa4e004099",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a2125dd3-9c7b-4662-88e3-f5b4771924fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d425a6b-e973-4734-87ad-b62c3952ec27",
        "cursor": {
          "ref": "515fd820-a498-44f4-98bd-138e00c2d386",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "b6fdee10-b763-4320-a54e-54be9f31eab0"
        },
        "item": {
          "id": "2d425a6b-e973-4734-87ad-b62c3952ec27",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "82489d29-e145-4423-8f3d-40cdca07e9b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3398c48-8e89-4afa-8906-168892ee0102",
        "cursor": {
          "ref": "3df00924-b8fa-404c-b567-f82b964e3f8c",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a6081805-c60f-4b8f-8f64-eec3d13e1197"
        },
        "item": {
          "id": "b3398c48-8e89-4afa-8906-168892ee0102",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f071398c-44c4-455a-a6f9-705ad3ad4ca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35882b9a-cf29-45a6-8e9d-89aad7ce0883",
        "cursor": {
          "ref": "247d648b-fb0b-4a82-99f6-fb019c6d2ea3",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "eac5ec26-108c-40f9-a97a-01591113d3a5"
        },
        "item": {
          "id": "35882b9a-cf29-45a6-8e9d-89aad7ce0883",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "da0a6c18-51cc-434f-a600-83e4c6c2dbb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "886b47b8-ebf4-46ba-8525-476ca95f017e",
        "cursor": {
          "ref": "e3cf28f5-cbc7-41aa-9287-b74cfccd82a8",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0b4338b1-e6c8-495f-8212-4640db0f35fe"
        },
        "item": {
          "id": "886b47b8-ebf4-46ba-8525-476ca95f017e",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a9c87238-91fd-47a0-b584-9dbc18e9d83d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14549334-e6a6-4f10-8644-1513d3cc6cf6",
        "cursor": {
          "ref": "723e68e8-c389-41c4-9c8c-56e88f28f53a",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "18c165ec-4119-4b03-bd0c-c84ec55b5603"
        },
        "item": {
          "id": "14549334-e6a6-4f10-8644-1513d3cc6cf6",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1b45cee0-e40a-411b-9cf4-3a413715a34d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "8bed1e75-7bf2-4687-badf-367584132ca7",
        "cursor": {
          "ref": "f6f7fb6c-f1e7-49e8-9fd9-b5b7ef881b16",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d0a0a5dc-8fa8-4d7e-9817-0177d042245c"
        },
        "item": {
          "id": "8bed1e75-7bf2-4687-badf-367584132ca7",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "31d4c6b7-89d3-4095-a9d9-6b95bb6ebb1a",
          "status": "Created",
          "code": 201,
          "responseTime": 2596,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "2b9b1031-4d2a-49ff-ab68-f68345ebb5ff",
        "cursor": {
          "ref": "ed71f607-ff45-43c4-b5ef-637feb8480a8",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f202056f-7496-4195-87a2-f07010859e40"
        },
        "item": {
          "id": "2b9b1031-4d2a-49ff-ab68-f68345ebb5ff",
          "name": "credentials_issue"
        },
        "response": {
          "id": "12b0e7bc-5d4c-4758-b185-7afd3e2744c4",
          "status": "Created",
          "code": 201,
          "responseTime": 2649,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6453b59-2e01-4bf8-be78-a0d883d08d29",
        "cursor": {
          "ref": "8050f74a-73f6-4849-b9d6-bb56861541ae",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "1e03009a-6e70-4526-8e86-9f248aef073b"
        },
        "item": {
          "id": "d6453b59-2e01-4bf8-be78-a0d883d08d29",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "62b75d48-464d-4611-bf3a-10a7268324c3",
          "status": "Created",
          "code": 201,
          "responseTime": 3016,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e01f287-9fc5-4b35-8542-5fcf1c7cf8b4",
        "cursor": {
          "ref": "733994a5-8aaf-408a-9fcb-0bb0d9176be6",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "a15ca051-4e6f-4083-a473-56de0b986df1"
        },
        "item": {
          "id": "9e01f287-9fc5-4b35-8542-5fcf1c7cf8b4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "17cc5930-6417-4755-aae6-ceed53d333c6",
          "status": "Created",
          "code": 201,
          "responseTime": 2194,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ab6e7a-a2b7-40c2-8abf-90fc81d4e49e",
        "cursor": {
          "ref": "1491a455-65be-4ff1-b0f5-ebabfb525ea4",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "b1f393dd-2473-436f-bedc-4f4f5fa00a81"
        },
        "item": {
          "id": "f8ab6e7a-a2b7-40c2-8abf-90fc81d4e49e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4c67b6f4-2226-4d9c-a23d-34c2ee97253d",
          "status": "Created",
          "code": 201,
          "responseTime": 2355,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f7f48c-cce4-4f4b-a69f-7b63d75ad9a7",
        "cursor": {
          "ref": "e90851e0-428d-434c-8f14-6a4c68cccf63",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "86784c0c-a152-482e-88fb-f61b1a54e069"
        },
        "item": {
          "id": "01f7f48c-cce4-4f4b-a69f-7b63d75ad9a7",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "8a0b5ff8-212a-4f6c-8d6f-a74c307f7eb2",
          "status": "Created",
          "code": 201,
          "responseTime": 2371,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-13T00:35:49Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-13T00:35:49Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "ef953fd4-c500-4ee4-a10d-10e5d914cb4c",
        "cursor": {
          "ref": "86ce24fd-8cfc-4eae-92de-24e7e99be36f",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "1913105c-6cd3-465c-b5aa-20bf17ab0cfe"
        },
        "item": {
          "id": "ef953fd4-c500-4ee4-a10d-10e5d914cb4c",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "71c0219b-7e71-405c-b1c5-86dd50c01e7f",
          "status": "Created",
          "code": 201,
          "responseTime": 2504,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d4839cf-8831-4788-ac13-d1c91684a820",
        "cursor": {
          "ref": "be480535-4bc4-40b4-9204-ed45d3aff6cc",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "fbbc5ad7-4210-4715-85f9-ae36b68dd559"
        },
        "item": {
          "id": "1d4839cf-8831-4788-ac13-d1c91684a820",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a67ec347-5ce5-448d-9d13-30b1bd59b9bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d4839cf-8831-4788-ac13-d1c91684a820",
        "cursor": {
          "ref": "be480535-4bc4-40b4-9204-ed45d3aff6cc",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "fbbc5ad7-4210-4715-85f9-ae36b68dd559"
        },
        "item": {
          "id": "1d4839cf-8831-4788-ac13-d1c91684a820",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a67ec347-5ce5-448d-9d13-30b1bd59b9bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8801d2b9-ce01-47c8-85ea-1a0f0ad1fd56",
        "cursor": {
          "ref": "b26c6d93-b664-4c66-8a06-bf98532b421e",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "00df406d-247d-4a38-98eb-b55ef47c19b2"
        },
        "item": {
          "id": "8801d2b9-ce01-47c8-85ea-1a0f0ad1fd56",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "020f6f55-0430-4a4a-bc69-f4177cfc542a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3297005e-550a-4a71-9e8e-3675066d84d8",
        "cursor": {
          "ref": "4ce74e2a-fb68-4426-88bb-60d58ce3cf89",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "cbbbf8eb-4c97-4dc7-bef2-90d8bc137e1c"
        },
        "item": {
          "id": "3297005e-550a-4a71-9e8e-3675066d84d8",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "91fcef3e-c607-4383-b55c-687a70ecacce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5db5834-7043-48f4-b96b-565f918a982c",
        "cursor": {
          "ref": "d6cc6684-4bda-4777-b4d9-77db2f3a374a",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "9b86ff51-ae6e-4712-bccc-7d7b68d6588d"
        },
        "item": {
          "id": "d5db5834-7043-48f4-b96b-565f918a982c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "92f7e760-2c5c-4361-b1aa-ebe75a29358c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f074408b-b8b3-4f08-8a71-0690df95a9f9",
        "cursor": {
          "ref": "1dfb68b4-d2c3-453e-8419-3fbf4f56d62b",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "34319832-9bc9-4fc0-b0f3-4649490ff8fe"
        },
        "item": {
          "id": "f074408b-b8b3-4f08-8a71-0690df95a9f9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5a0d8053-8623-4096-aca5-c7eb1185b6fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac6cdaf-8b91-4d08-aae5-28218b0e7b64",
        "cursor": {
          "ref": "8cc66d1c-497e-4374-9873-bd89aee77833",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "0ac764b0-f7b2-4153-a658-d5aaa905e7e4"
        },
        "item": {
          "id": "4ac6cdaf-8b91-4d08-aae5-28218b0e7b64",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "1542a3ca-7650-4018-929b-9a47c60ebfba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83185746-0cc9-48ef-82a5-f5e8356453a0",
        "cursor": {
          "ref": "9af30a0c-184f-4bd9-a9b1-bb556895a94c",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "8fcccea1-d8c9-4881-a23d-050999873db2"
        },
        "item": {
          "id": "83185746-0cc9-48ef-82a5-f5e8356453a0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "86933bd6-1402-477b-a81d-66814048428d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c49b9cb6-3b56-41c1-8bbe-45d8a9c65380",
        "cursor": {
          "ref": "e75722ea-fdcc-4c9b-aee6-6377e8a0f64e",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "03c65b5d-f0d3-460f-8a78-8d4e3e267ffb"
        },
        "item": {
          "id": "c49b9cb6-3b56-41c1-8bbe-45d8a9c65380",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "21055530-33e3-4c05-9c02-fbf31b401856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89070200-4343-46e8-b0f8-07e4ca478113",
        "cursor": {
          "ref": "e74fd5cc-46f8-429f-ba93-a8b5de35863a",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "11a19e10-3884-4583-be2b-e30ea5600e20"
        },
        "item": {
          "id": "89070200-4343-46e8-b0f8-07e4ca478113",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9b4b74ee-e248-4591-8670-2ad5678debae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "780e75bf-c3f3-4813-91c8-6a0189494b75",
        "cursor": {
          "ref": "0c698637-46a6-4232-92bb-c358bdcbe96b",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ecbf679c-a8b6-44cf-a450-ed016e0a285d"
        },
        "item": {
          "id": "780e75bf-c3f3-4813-91c8-6a0189494b75",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0535379f-f6d6-447c-bc48-26f0d6407062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16633f6b-b4b0-4a58-a481-0fcf16a2b1fc",
        "cursor": {
          "ref": "85b35342-43d6-4195-a991-91a5c069a2a3",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "fcc1eb86-a74c-43eb-826d-36e8346d4b7d"
        },
        "item": {
          "id": "16633f6b-b4b0-4a58-a481-0fcf16a2b1fc",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e3106cd6-e121-4d9a-8734-515dbc2084af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c18358d8-1ecf-4e9b-8214-59f6ed6c54ad",
        "cursor": {
          "ref": "1708011f-cd24-4d26-9fff-4a2be656e498",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "6b565caa-e340-4519-90a2-cfe73a41a74d"
        },
        "item": {
          "id": "c18358d8-1ecf-4e9b-8214-59f6ed6c54ad",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ae22e09b-82dc-47bc-bc95-0a3fab152762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e3d1d7b-4f11-4988-bc49-c0f4bdd18c2a",
        "cursor": {
          "ref": "f0dddf2f-7649-4eb0-aa85-1f812e692df4",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "bfff95e4-af81-4109-86f5-0a26dab067a9"
        },
        "item": {
          "id": "8e3d1d7b-4f11-4988-bc49-c0f4bdd18c2a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4ed4d43a-b318-4d41-b8a2-8111e2c3768a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7477ddf-8b61-425e-ad7e-236baf57581e",
        "cursor": {
          "ref": "775a0452-4490-4dac-8361-42cc4e7b9d26",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "fc8f8f68-2298-4dec-8912-2fc10077d007"
        },
        "item": {
          "id": "d7477ddf-8b61-425e-ad7e-236baf57581e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d4ecf9e7-d87d-4ab1-aef4-08174799fa6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "722064bb-b3b5-4b54-98ef-9490e6647e6d",
        "cursor": {
          "ref": "d8bcbb81-338f-4232-8be2-ef756bc468a8",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5e5c8321-1db1-4c1f-a4cb-943b9ed30f45"
        },
        "item": {
          "id": "722064bb-b3b5-4b54-98ef-9490e6647e6d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "eb6ae629-460d-4d0b-b810-d3ee954a1f9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9156e0b2-6176-4ee2-814d-7c4616b38358",
        "cursor": {
          "ref": "99baebd4-d183-4ebc-87e1-3c99286bfdce",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "8a2f187e-20d0-4355-bf61-9c07a5db2fc3"
        },
        "item": {
          "id": "9156e0b2-6176-4ee2-814d-7c4616b38358",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ba18b993-c5f4-4fc9-b1f2-9c056503f04e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb62e480-8cf0-4b74-8eea-fd1292aa85be",
        "cursor": {
          "ref": "74cca3f6-afdf-4db7-b903-9e8cbad5ba8a",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "7178e362-2d08-4b1e-8886-2646d5d0ca50"
        },
        "item": {
          "id": "bb62e480-8cf0-4b74-8eea-fd1292aa85be",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b31af7f9-d9c2-4b7a-affe-bad0ba76980c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a291c10f-f830-48ae-94f7-e863279b0a46",
        "cursor": {
          "ref": "55fe3d68-699a-4354-ba31-87eb28cab6f1",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "57191bbd-cf11-44cb-9bb7-93bb14dccd61"
        },
        "item": {
          "id": "a291c10f-f830-48ae-94f7-e863279b0a46",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "28983fe9-dfa9-437f-8cf8-b16fa2cca86b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d823227f-4f3d-4cec-95ba-565961f7bbf9",
        "cursor": {
          "ref": "06368409-c922-4267-860e-022deb49aeac",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "0cc1db5c-5305-4e7d-a42e-2755a9d00ada"
        },
        "item": {
          "id": "d823227f-4f3d-4cec-95ba-565961f7bbf9",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "595c2af9-0d3c-49ac-afd2-73da4f3049d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fff2156-699f-4615-a098-ddbaf3b6d95f",
        "cursor": {
          "ref": "9d2bbc67-b3d6-4abd-b64c-c401411514d5",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "4670f246-010b-48c5-89a2-84438ed81181"
        },
        "item": {
          "id": "6fff2156-699f-4615-a098-ddbaf3b6d95f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a7b76695-66db-4025-878c-b92d9646250d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fa5ce11-9bfe-4c9b-b215-e153075647b4",
        "cursor": {
          "ref": "6ee4d598-9b3c-4b0a-96d5-cf448ff91ff1",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "191b9df6-7550-44db-848e-1b4b98eba86d"
        },
        "item": {
          "id": "7fa5ce11-9bfe-4c9b-b215-e153075647b4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "10473fe9-4290-4ab0-a5ba-5f67f366538a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfe70315-94ab-4939-a1a0-3e0ece1dcc64",
        "cursor": {
          "ref": "f82c82b0-5e66-4e34-b4ba-c79c446e39ee",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "ce041c7f-bfa7-4fac-873e-13dcbc7016f4"
        },
        "item": {
          "id": "cfe70315-94ab-4939-a1a0-3e0ece1dcc64",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "781308b5-2b78-4964-b1cf-2f0c3494f747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0e091b3-d0b3-4424-a0f4-8faf589a177f",
        "cursor": {
          "ref": "70f6f588-b893-49ab-a23b-91637e7c8b2a",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7d41454a-cc04-4101-bf7f-f94d38d91630"
        },
        "item": {
          "id": "b0e091b3-d0b3-4424-a0f4-8faf589a177f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "afe2c140-6e73-457a-bea0-3f55d11663f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feed1af7-64ed-4b0e-abc1-6a7691b4438e",
        "cursor": {
          "ref": "551003cd-52b1-460d-9804-23eab4aa68d1",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "834029e6-1c69-45ec-9f8e-5fbdf2cdba9d"
        },
        "item": {
          "id": "feed1af7-64ed-4b0e-abc1-6a7691b4438e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9a3f2253-46ba-4edc-972f-c0154c1d99ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04d7bb8d-146c-42fb-967f-c168ba9af805",
        "cursor": {
          "ref": "b549fc05-18a6-475a-b219-7d1f8d9c0555",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "2540ae7b-6c97-434b-a451-1b418bd271f2"
        },
        "item": {
          "id": "04d7bb8d-146c-42fb-967f-c168ba9af805",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b09291d9-12e4-4018-9f92-2cc0c6fdaf16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f3e431d-0052-4507-b003-b94f50a46472",
        "cursor": {
          "ref": "797c8a99-5f2f-4013-aecf-e27b6c828da3",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "79fafa06-cbd1-4e9d-9dff-4eb4879d5663"
        },
        "item": {
          "id": "6f3e431d-0052-4507-b003-b94f50a46472",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1379385f-ed80-4ef7-be24-d71478cef3ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1048dffd-5b07-4b76-bcf0-7ab660e4f4ba",
        "cursor": {
          "ref": "cf45178a-b3b9-4c98-943a-4aef6993b682",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e308d444-7fbb-4892-b590-592808f33dda"
        },
        "item": {
          "id": "1048dffd-5b07-4b76-bcf0-7ab660e4f4ba",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "47c7f764-5d3d-439e-ae7c-22548cc33fcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c43b6dbe-697e-4708-afda-0145747491b7",
        "cursor": {
          "ref": "97c4dc9c-bd63-46ad-b3a8-72ec63dfeae3",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c0bc5845-fe94-42a2-a779-ee8a267633f3"
        },
        "item": {
          "id": "c43b6dbe-697e-4708-afda-0145747491b7",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2b679117-cea7-490d-807a-8a93560ca375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0e192a6-43b7-4b6c-aea5-fcb95429a467",
        "cursor": {
          "ref": "b11ac927-5205-4768-83ff-5baaa4109c9d",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "612ee74c-cb5c-4f73-802a-0775d28cbe2f"
        },
        "item": {
          "id": "c0e192a6-43b7-4b6c-aea5-fcb95429a467",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "d35d6066-885f-418f-8ba4-038fbb4cdd23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b1511a-1441-4e64-887d-7fe01d392c95",
        "cursor": {
          "ref": "5f9b1d41-838e-438b-98da-eb632215fe28",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "4e8c35f9-5d04-45e6-a5a9-07e4c10fa50f"
        },
        "item": {
          "id": "25b1511a-1441-4e64-887d-7fe01d392c95",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "82709d04-2ed4-4ac8-8c21-546854c36337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dfa998f-c088-42f8-adce-e7d7feea1d41",
        "cursor": {
          "ref": "d0296d2a-8904-4680-ab8e-3014e74382ee",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "538aeb9d-1be7-4c2c-97e4-b4aed105f233"
        },
        "item": {
          "id": "9dfa998f-c088-42f8-adce-e7d7feea1d41",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ca3dc151-b24a-426d-8ce7-2c381836a656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e5cffd7-54a6-4193-a126-26da8150e6a0",
        "cursor": {
          "ref": "c34960b4-8238-4e9a-bad4-646f4262c0d2",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "99db5450-da63-4f1c-b58b-7491d1e4d712"
        },
        "item": {
          "id": "7e5cffd7-54a6-4193-a126-26da8150e6a0",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "75971f15-3368-4c05-8aee-1883cfc26e62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7785a8f9-8829-4aca-b50c-01fd192e71fe",
        "cursor": {
          "ref": "497f2c37-ab77-4a04-b98f-b890a4ef4a4b",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "9b7a63ed-ed3e-4814-be83-e8424dfb9839"
        },
        "item": {
          "id": "7785a8f9-8829-4aca-b50c-01fd192e71fe",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9ed3d134-adc9-4ac4-8527-1c107a238c99",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "7df8a7fe-6659-450c-b6c5-151443f4151c",
        "cursor": {
          "ref": "6cf1786c-b10b-4939-b000-18468a8e144d",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6b82d5e5-dfd9-479d-acd7-0291723cd9d0"
        },
        "item": {
          "id": "7df8a7fe-6659-450c-b6c5-151443f4151c",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "69828b0a-088c-4ab6-9ee9-2aa699020c10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "9f4e67a9-e5f2-4c38-b4c2-1adf12bd249b",
        "cursor": {
          "ref": "0b134d91-bbe0-4d7d-a31f-f6da40ec3f09",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a7b892d8-959e-4ddf-bb52-e031d533d603"
        },
        "item": {
          "id": "9f4e67a9-e5f2-4c38-b4c2-1adf12bd249b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "bc886c41-8c4a-445a-ab7f-7c283069bb72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4e67a9-e5f2-4c38-b4c2-1adf12bd249b",
        "cursor": {
          "ref": "0b134d91-bbe0-4d7d-a31f-f6da40ec3f09",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a7b892d8-959e-4ddf-bb52-e031d533d603"
        },
        "item": {
          "id": "9f4e67a9-e5f2-4c38-b4c2-1adf12bd249b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "bc886c41-8c4a-445a-ab7f-7c283069bb72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f497e69b-29c3-4ec3-8e99-4700228e3450",
        "cursor": {
          "ref": "fca4661f-d9be-4ab8-b97b-d30b2874c3d6",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "223200a3-2447-41b4-ba22-0c9d6dc00b2c"
        },
        "item": {
          "id": "f497e69b-29c3-4ec3-8e99-4700228e3450",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b0e112f2-bb37-4e0a-8c17-80a5662c1e97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "986e735d-c35a-49f2-a021-4439a36b15ee",
        "cursor": {
          "ref": "6a9ca891-d54b-4e1d-9fe4-7df5eb6876b1",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8f0c4b4a-f103-4ee3-9433-ecbd4e9aab85"
        },
        "item": {
          "id": "986e735d-c35a-49f2-a021-4439a36b15ee",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "16097fd1-4cb7-42b3-a08f-eb3e29bba382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b5d05fa-9ec3-44a5-a293-7eed80aedf5b",
        "cursor": {
          "ref": "20c6fe39-51ff-409b-b472-33413b41c5b2",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ebe0dbf6-0b64-497e-bcbf-1da8286cae5b"
        },
        "item": {
          "id": "2b5d05fa-9ec3-44a5-a293-7eed80aedf5b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5f717458-68b6-4100-beef-d312646cf253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb1c588f-ec88-40cf-a7fa-56b4909c2dcd",
        "cursor": {
          "ref": "c09203b0-9d4b-40d1-8ca0-49863bc4ca3d",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "48c2165e-7e3e-4838-89ae-0e7972dd24b1"
        },
        "item": {
          "id": "fb1c588f-ec88-40cf-a7fa-56b4909c2dcd",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6f1f0a5b-ed32-4b03-9e15-fc40bb1ab1ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b20b5cba-9c53-44bf-b365-d12476ef1b37",
        "cursor": {
          "ref": "394f25d0-b218-4b79-a44d-95bf431298e5",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a7bbfb6f-e07d-4003-90c0-7a11c1822bce"
        },
        "item": {
          "id": "b20b5cba-9c53-44bf-b365-d12476ef1b37",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "10ad0efb-39a1-4f9d-89ed-8455bfbf4029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "089e4208-d5b6-4ea9-8ef7-1948aa7c9c7d",
        "cursor": {
          "ref": "ac202783-dfec-4463-9a3b-e5896937196b",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "f3529700-4233-4642-9df5-2655dc66cfdb"
        },
        "item": {
          "id": "089e4208-d5b6-4ea9-8ef7-1948aa7c9c7d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "de0977a0-80f8-440f-8232-887c32c650b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74f6b43-91f2-4c1e-b078-d4fac3ee4e6f",
        "cursor": {
          "ref": "8c18cf20-660c-408b-84eb-5d269141b3a3",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "aa46a3bc-aef9-43c9-86b1-3627684a32fd"
        },
        "item": {
          "id": "d74f6b43-91f2-4c1e-b078-d4fac3ee4e6f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ca7214d2-17d0-40ab-91d6-b318a60bdf62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1956c0c-468e-46ff-956e-b43d8e408956",
        "cursor": {
          "ref": "cd42bfc6-3be9-4d5e-8688-97bb843101bd",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "c0c0904f-566d-4306-bd52-c30e525c3cc6"
        },
        "item": {
          "id": "f1956c0c-468e-46ff-956e-b43d8e408956",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "6f1046ba-86bd-4458-9e32-b07318e523a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b2567a8-b3be-4fb2-bafc-ac37f045830d",
        "cursor": {
          "ref": "18fa875c-f33b-496e-873d-abe641adabb9",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0cf90eb8-e63b-4179-bef4-902441794272"
        },
        "item": {
          "id": "9b2567a8-b3be-4fb2-bafc-ac37f045830d",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f04186bb-ba05-4aaa-92e0-bc703b978504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a1abea0-74eb-44fe-a47f-8b09acd4a77a",
        "cursor": {
          "ref": "877135b8-1911-4e1a-94f5-439e6583679b",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "b2556de3-5531-4525-8fc1-e2d99e2e6a7e"
        },
        "item": {
          "id": "6a1abea0-74eb-44fe-a47f-8b09acd4a77a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "0e36a7d2-5518-4602-81bc-64cbc583ab20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fef39537-8ed7-4363-80c3-e451c04fb684",
        "cursor": {
          "ref": "75a42c63-f99a-4979-bf0a-6a7540a392a5",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "fb777f1c-131b-4a96-8b49-5de1b65041ae"
        },
        "item": {
          "id": "fef39537-8ed7-4363-80c3-e451c04fb684",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "db67342f-8e78-4e1b-9873-86c33c6e3c3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df818dd9-0224-490d-9d60-345af043d13c",
        "cursor": {
          "ref": "5f4d0add-2920-40fd-b1bd-954cd4ee8e1b",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ba980bd5-d85a-4c7a-b018-9709b6cd1bb0"
        },
        "item": {
          "id": "df818dd9-0224-490d-9d60-345af043d13c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "61bb6ff1-504e-490f-833e-34707964b091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90696a79-923b-4d0e-9d51-ac5bbc226446",
        "cursor": {
          "ref": "e67ed9e9-9f1c-4994-9986-72f9768f4ba9",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "2daf0258-9e93-465f-aa00-a7293e16daca"
        },
        "item": {
          "id": "90696a79-923b-4d0e-9d51-ac5bbc226446",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "6a9199c7-4375-4f95-b22c-990788bd2c3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c4277d-ffcf-4c7b-a92a-5c79de3ba38a",
        "cursor": {
          "ref": "3b23de27-c138-4bb3-a3c5-f80c3989bc48",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "7cff5db6-ccaf-41b8-a94e-437434519f5d"
        },
        "item": {
          "id": "27c4277d-ffcf-4c7b-a92a-5c79de3ba38a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "3e387d8c-0d7c-41e2-a2bb-fc12c1f9a45c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "224abeb1-8720-4e68-a1d2-5609f13fc550",
        "cursor": {
          "ref": "95a9f9af-a06f-4f8a-b51c-58dd86ae44db",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e4e9e8b9-4f28-42ac-a7ea-e0f7fa77d78b"
        },
        "item": {
          "id": "224abeb1-8720-4e68-a1d2-5609f13fc550",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "5c956acd-dfac-4f5a-a3d0-9358ded5e61c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c8241c3-1b81-4b6b-8699-9cdaf895f5a9",
        "cursor": {
          "ref": "1dbdcaa5-6585-4ae4-b221-418fa3bd2479",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "0b486f48-67dc-431a-9950-d163e7387a35"
        },
        "item": {
          "id": "4c8241c3-1b81-4b6b-8699-9cdaf895f5a9",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "8917ca0d-6acf-4d2e-888c-b387a96a1924",
          "status": "OK",
          "code": 200,
          "responseTime": 214,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "109b5a8a-ebbc-4c3a-8919-4c3ef22dbf1d",
        "cursor": {
          "ref": "faecb728-fa6a-416c-92e7-8559ea8964ee",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "bcb9e2a9-43b9-40b7-8c6a-15a0384c2a19"
        },
        "item": {
          "id": "109b5a8a-ebbc-4c3a-8919-4c3ef22dbf1d",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "6b605a1e-450c-42d3-81fc-440db20ef825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dee9615-2517-4ff4-9012-856c308f4467",
        "cursor": {
          "ref": "e35ccb4c-c671-446d-888c-5d510a76f0fa",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f09ac224-1a2d-4509-a8d0-ddee13fce270"
        },
        "item": {
          "id": "6dee9615-2517-4ff4-9012-856c308f4467",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e1b61785-f59a-4a55-8699-978952c6dc4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ef7ca5-b726-4d2b-8cff-1ec8669c8f2f",
        "cursor": {
          "ref": "1442b74d-99a0-4cb5-9e24-6a71a8671155",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "c2d955c1-530a-4197-86bc-9cf44bc6a635"
        },
        "item": {
          "id": "41ef7ca5-b726-4d2b-8cff-1ec8669c8f2f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "0e382d05-035c-44bf-9fb1-0cdc92c76349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a69fbfa-e7ef-4451-8834-54fb38be6f17",
        "cursor": {
          "ref": "95f36339-cae3-43c8-a4f0-8f9d35e2f835",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "3f0e001e-bdcb-4e44-8f3a-48df639ef835"
        },
        "item": {
          "id": "3a69fbfa-e7ef-4451-8834-54fb38be6f17",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0430e3b7-47c9-437b-96c2-dc90d44f039d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b9061d9-0d3b-431a-8fb6-f78b5384d441",
        "cursor": {
          "ref": "95e72a3b-b37b-4eff-bf39-888ef3bea3c0",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "74bcf01a-568f-4b9d-be51-e777fad30b94"
        },
        "item": {
          "id": "7b9061d9-0d3b-431a-8fb6-f78b5384d441",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "586d3dc1-0964-4a30-b796-e2ecea5b8dac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61c704aa-1aa8-4625-8be8-de3597012189",
        "cursor": {
          "ref": "6c762762-c579-4f32-bbdc-db36f8fde0ab",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "3dccabe0-6cc2-4326-978c-7bd328b21a28"
        },
        "item": {
          "id": "61c704aa-1aa8-4625-8be8-de3597012189",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "4cffd78f-a462-403e-9338-d189590256d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9a85fb6-5374-4b14-84bc-879e70755306",
        "cursor": {
          "ref": "7a244ae8-5af2-470d-a233-be65bc8f054b",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "eb142c8c-7492-4ffc-aecc-aa875be726e0"
        },
        "item": {
          "id": "a9a85fb6-5374-4b14-84bc-879e70755306",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "59980db6-e63d-4dd7-8a6f-0c19919b5aa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "599258a2-7303-484b-90aa-559027f9d1fe",
        "cursor": {
          "ref": "0167d2ca-aaa6-48de-af3d-d704f73a706d",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c5f7a7a9-e4d5-4855-9d05-b901a2f814f0"
        },
        "item": {
          "id": "599258a2-7303-484b-90aa-559027f9d1fe",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "5ab3c1d0-47b5-48ea-a3b3-636d9373d5b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2eb9ab-b30c-4d92-b82d-4079ec3f371e",
        "cursor": {
          "ref": "8ec37a03-bf45-42e1-ac13-1659304896ce",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a16e018c-1f48-4237-b1c7-e987ad121984"
        },
        "item": {
          "id": "ca2eb9ab-b30c-4d92-b82d-4079ec3f371e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "1c1c713e-136e-4035-b200-83dda0f14636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd02be58-f680-4075-9399-de8ba6612b92",
        "cursor": {
          "ref": "074afcaf-2285-4ba9-a55d-81330ba146fe",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "7f14f9ab-77df-4852-9655-af63a0948ad6"
        },
        "item": {
          "id": "bd02be58-f680-4075-9399-de8ba6612b92",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e6d33a0e-8235-49cf-96be-8794c27b2178",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bff7885-18cc-4e7e-8b50-747235b352aa",
        "cursor": {
          "ref": "53a8c2ca-e3c1-4b09-a98a-e39c69f8e095",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e39d0bfe-0c40-4d22-8f8d-8346a8e4b8ee"
        },
        "item": {
          "id": "5bff7885-18cc-4e7e-8b50-747235b352aa",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "d1dbc8cf-17be-4bf9-98ca-9cef7815de43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d16cda89-c519-4214-b6bc-900b9622f6c2",
        "cursor": {
          "ref": "25e42c19-eaf8-4598-aa48-23c201977825",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "1dcaf211-4e1a-4613-b5a2-ce1a53bc9338"
        },
        "item": {
          "id": "d16cda89-c519-4214-b6bc-900b9622f6c2",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "b1ea9ef4-efe8-47e3-9049-09df00929edb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c33fd73-8450-4072-9c85-7b3b92e0e863",
        "cursor": {
          "ref": "26acaca4-64d6-4d2a-af6e-9eb5789201d0",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "45b873b1-4a4d-4edd-80e6-f47567532456"
        },
        "item": {
          "id": "8c33fd73-8450-4072-9c85-7b3b92e0e863",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "8c58a27f-506d-42ab-ba43-ca6b96c590f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b717862f-bcdb-4524-b294-424781b72cc6",
        "cursor": {
          "ref": "e6634641-1c39-4893-9c3c-0a663e1f8457",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "bfdd403b-cee5-4cb3-874b-272688476643"
        },
        "item": {
          "id": "b717862f-bcdb-4524-b294-424781b72cc6",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a0b24b82-5d98-4394-a954-d529730aacef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb7e2a18-1f84-4353-8125-50a80a32136d",
        "cursor": {
          "ref": "24240ed5-189f-4ee4-bdc0-f3d6000c453a",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "00649df2-f917-4dc1-a8a8-24d734bf3143"
        },
        "item": {
          "id": "cb7e2a18-1f84-4353-8125-50a80a32136d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "9ad5fcc3-0a71-4960-bcdf-e898cb7599ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c25befb-2250-4c30-8315-f3c161ff7e3e",
        "cursor": {
          "ref": "f7c20e74-b1fc-49c7-a5af-924245d16fd8",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "857f5558-1248-48ad-8156-15c9ab262e61"
        },
        "item": {
          "id": "7c25befb-2250-4c30-8315-f3c161ff7e3e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "cfe0ad71-edfe-4106-93f0-b83b7a58c8bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce6d4f52-e66d-474d-a43c-c02e4fcc0242",
        "cursor": {
          "ref": "9776066c-a050-4cd2-982d-a613e5e59a2b",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "5c71b574-964b-4b46-b10d-4af664d6b532"
        },
        "item": {
          "id": "ce6d4f52-e66d-474d-a43c-c02e4fcc0242",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "15cebd93-6c55-4a4d-9a6f-bd3d159b83e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4dd059a-8472-4467-8828-3b136744fb67",
        "cursor": {
          "ref": "366536f3-8434-41c2-8779-bdc2ad98261c",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4f0709a9-6a09-4cfa-8b72-dac97e458e89"
        },
        "item": {
          "id": "f4dd059a-8472-4467-8828-3b136744fb67",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "57fc1d36-34ab-4632-bd6e-6ce856f77288",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b16dd8d7-b1c7-4545-9f23-fe38a575dd2b",
        "cursor": {
          "ref": "47e00c86-229d-46c7-80f8-e29de9fc618f",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "686c695c-be89-4890-bb09-00b079f20780"
        },
        "item": {
          "id": "b16dd8d7-b1c7-4545-9f23-fe38a575dd2b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "250848e1-063a-440e-b94a-cc894a16a485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9553d0d5-2ff8-4946-8c55-1b8daed8fc83",
        "cursor": {
          "ref": "f64b157e-414f-4bca-be88-cdafac9570ab",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b8cd8fae-d1b6-4fc0-a2b6-2a0fd1c6e68f"
        },
        "item": {
          "id": "9553d0d5-2ff8-4946-8c55-1b8daed8fc83",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "f32b15d4-84af-4129-b2ac-e8b89b3a320f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80df5ad3-b9a4-4c9e-ba21-57cf324832b8",
        "cursor": {
          "ref": "1c7f9e47-1e20-4faa-b3e0-4368617a619f",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "fb759b6f-a4cd-4241-bbbf-2face8054b07"
        },
        "item": {
          "id": "80df5ad3-b9a4-4c9e-ba21-57cf324832b8",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d29b908d-761a-4caf-9a58-56022b7765ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f06ae129-a5aa-4802-9180-57c96f943ce6",
        "cursor": {
          "ref": "d9218778-c974-4adc-b69b-2643fc0f7f00",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "034521d6-768f-4fa6-847b-7a8a8f6846d0"
        },
        "item": {
          "id": "f06ae129-a5aa-4802-9180-57c96f943ce6",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c4a0998b-69e4-4cdf-acce-7b19b70760d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63296d13-36be-4fa8-9ba6-5d4fdc0c2bd8",
        "cursor": {
          "ref": "dd42bab2-f65b-45fb-906e-46e22658703e",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2cae73ba-6f3c-4995-bbc7-00020da20c9d"
        },
        "item": {
          "id": "63296d13-36be-4fa8-9ba6-5d4fdc0c2bd8",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "cf988e12-7493-495b-a7e7-281322360933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0d74262-d1f3-45e4-9b86-a6727d5206c9",
        "cursor": {
          "ref": "f7c6fa93-7dd0-4a5e-a083-efe1e7c42d58",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "90596b87-865e-4e88-a6f6-e140f53be448"
        },
        "item": {
          "id": "d0d74262-d1f3-45e4-9b86-a6727d5206c9",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b7b3e7af-e018-4a92-9da5-d33d96c4f1ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9893fd07-bc85-4946-af4f-6ee5319602df",
        "cursor": {
          "ref": "4f47a657-3615-4e63-b5bb-f671feb3a6af",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "47e68979-944b-4ab6-8dea-24f108d36d0e"
        },
        "item": {
          "id": "9893fd07-bc85-4946-af4f-6ee5319602df",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "48f31bca-73ab-43e9-9f3d-f25beb85a2ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9487df0f-93af-408e-afe7-612f2131c179",
        "cursor": {
          "ref": "0437f71d-14f9-47a4-b052-30fa32a1a1c0",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "606f67cd-97f4-4c3a-89b2-427a868ac04d"
        },
        "item": {
          "id": "9487df0f-93af-408e-afe7-612f2131c179",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "63cb8d8b-74b0-4770-b3f4-f1164e54eebd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a139a4ba-081c-464b-9191-6ac59289bb78",
        "cursor": {
          "ref": "140e8cbb-9f4c-40b2-9c96-bb6e203c224e",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e466c048-9087-4bce-975c-cf2a993b2194"
        },
        "item": {
          "id": "a139a4ba-081c-464b-9191-6ac59289bb78",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "054163fd-e688-4eba-9129-d0f0a560496f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf286bce-f94a-4b20-ac5c-46b09d1d341f",
        "cursor": {
          "ref": "67feaa74-4130-453f-b5f5-74783ca2d045",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e20fe405-2ff0-452e-bb70-e14d320455f8"
        },
        "item": {
          "id": "bf286bce-f94a-4b20-ac5c-46b09d1d341f",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "047af066-4627-46c8-875b-97383682bbe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d52cadc-d15a-44c3-b651-4db7d6b9d84e",
        "cursor": {
          "ref": "64ac40a3-2ca0-42ae-a846-cc29e30f736f",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "613ba78d-3a73-48b6-8a53-489ba452a27f"
        },
        "item": {
          "id": "9d52cadc-d15a-44c3-b651-4db7d6b9d84e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "0ced65cc-b1e9-40d8-8edb-127186e88375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f74b3ad-3529-4a3a-962a-2776195ffe5c",
        "cursor": {
          "ref": "7ae052e6-bf6a-46e0-b3d4-0b0d8b8a0165",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "963562e3-b1fd-4cc5-a6ca-a7ff49855ac6"
        },
        "item": {
          "id": "3f74b3ad-3529-4a3a-962a-2776195ffe5c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "2081d92b-4897-42f1-80fa-3f8ea381bcfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "590e2663-f228-4600-b668-876ab2e5115f",
        "cursor": {
          "ref": "9311667f-8258-4bb1-a5bd-537e36b6e1fb",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "3e45d651-082f-4133-91c8-0ae8c3f53cf7"
        },
        "item": {
          "id": "590e2663-f228-4600-b668-876ab2e5115f",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "3dd4caa2-aa25-48a9-b786-6a05ccddf2fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d59fb87-0216-4e17-b266-d89e0496886c",
        "cursor": {
          "ref": "7ce1d8d5-83c8-49c1-87bf-d6330f41da4f",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "fd954c13-68eb-4987-90bb-f1b48dd6bcba"
        },
        "item": {
          "id": "5d59fb87-0216-4e17-b266-d89e0496886c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "834c3762-47e5-4f39-97da-87b75a6ad320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92db8f23-6a99-43cd-8d20-e1681039cbc5",
        "cursor": {
          "ref": "b93321b0-6d69-48be-b8f2-761c1040f2a2",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8b9467dd-3a96-4b81-9407-71620cf6252e"
        },
        "item": {
          "id": "92db8f23-6a99-43cd-8d20-e1681039cbc5",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "cae9715a-c7cc-424a-9509-bfa3659e7ae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40cba406-141c-4d95-99f5-9802dd8c227d",
        "cursor": {
          "ref": "2d7776e6-2f6c-48cc-b989-37cbb030711b",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c87c05b1-35f3-47c3-9dd7-57e6270f7061"
        },
        "item": {
          "id": "40cba406-141c-4d95-99f5-9802dd8c227d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d0494524-1bf7-46dc-b64f-bb498702a1d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e8e6938-932d-4992-a147-e4965d89c7ea",
        "cursor": {
          "ref": "e6e167d7-371d-436a-a3d9-a7211d562721",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "7dcf52b1-fe46-4741-aa21-8c968b8f7fe8"
        },
        "item": {
          "id": "6e8e6938-932d-4992-a147-e4965d89c7ea",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b10d125f-e9c0-486a-a13f-c667174e26e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "933821d6-9c32-4fc8-83ab-5fe62649f345",
        "cursor": {
          "ref": "859ba1f2-c203-4485-afb7-a6f89909288c",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "21e1203d-7780-4db3-99a2-c93ad6e870c5"
        },
        "item": {
          "id": "933821d6-9c32-4fc8-83ab-5fe62649f345",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a79d2a8b-6139-4336-ac38-79d746d975ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "952047dd-351f-46ee-a159-4d37554009f8",
        "cursor": {
          "ref": "f20654e9-ec40-4d71-990e-964e10d22eb6",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "6aec6f72-7d39-42dc-bb7e-4d9d760b897d"
        },
        "item": {
          "id": "952047dd-351f-46ee-a159-4d37554009f8",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "650878ea-d681-4440-8a98-19d74ab420a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e5177dc-402b-41bf-9e3c-bbfc22d84af4",
        "cursor": {
          "ref": "2f9197d9-b366-4607-b7e9-7837303b0124",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "f2c39072-01f1-4bde-940e-218588940789"
        },
        "item": {
          "id": "8e5177dc-402b-41bf-9e3c-bbfc22d84af4",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "48e591d5-01c2-43e9-b614-15f13ac1bcdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca99af60-4366-41f7-828f-b526e1cd37fb",
        "cursor": {
          "ref": "366a6525-555b-47e9-b7db-05cd58a0dc65",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "32babd0b-2eda-42c9-9b13-97a679197640"
        },
        "item": {
          "id": "ca99af60-4366-41f7-828f-b526e1cd37fb",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "fdc934d9-0765-4b12-b153-406c088cc25c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69ccb791-fefa-4f1e-9005-6ff411d9eef0",
        "cursor": {
          "ref": "c1fc1ed7-7be8-4318-93d0-878c6f5bcaa8",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "7f574233-3e9f-4735-aaed-b4a421cc322b"
        },
        "item": {
          "id": "69ccb791-fefa-4f1e-9005-6ff411d9eef0",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "969ec028-79dc-4f40-9397-cd078369cbe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "103f0bf5-c43d-41e0-9337-80723ddfacf4",
        "cursor": {
          "ref": "f61c4c66-6f63-42e0-933a-3f53bd407acc",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c4d90f09-5474-4c02-ada6-5caad539cfe8"
        },
        "item": {
          "id": "103f0bf5-c43d-41e0-9337-80723ddfacf4",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "c6ae4621-581f-41b0-bcb8-c2ab8b8f9110",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8823bf7-c0cb-4a07-a6f7-800ddcf24822",
        "cursor": {
          "ref": "7e872423-e558-493a-b9fd-31fb7ba5e51d",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "8e058716-5ae0-4f7d-8cb5-2e53e9a40726"
        },
        "item": {
          "id": "f8823bf7-c0cb-4a07-a6f7-800ddcf24822",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "995e4da7-abaf-4a74-b9ee-0ee38cdb092a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "576e78aa-e3cc-49d2-b47a-3748a0548172",
        "cursor": {
          "ref": "2535a0c8-e377-470d-99b5-e897a90c45a9",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "6a87226f-3d20-4816-977e-026e81a5f6d7"
        },
        "item": {
          "id": "576e78aa-e3cc-49d2-b47a-3748a0548172",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "37afd319-11af-425c-9d85-13debe346b0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af077103-0c31-481a-b4dd-a32780780cf3",
        "cursor": {
          "ref": "788c6824-b4cf-4421-b493-a5222ebf1ae5",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "01f63be6-7e47-47c0-8080-7a46cf46d495"
        },
        "item": {
          "id": "af077103-0c31-481a-b4dd-a32780780cf3",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "fca8d617-ea3a-47fc-97ef-6c8da04dcc2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a0aa7f0-9e5a-4b5a-afcf-7c12a5bee558",
        "cursor": {
          "ref": "bf1a85dc-7146-416d-a009-21d90e6d0fe2",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2333f16b-0d35-4dbc-a9e9-f3b71552244c"
        },
        "item": {
          "id": "2a0aa7f0-9e5a-4b5a-afcf-7c12a5bee558",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "1f4d886e-df5f-41f1-8094-b27be7e4beeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df39adcc-b157-49fe-9071-bb7788cf81fc",
        "cursor": {
          "ref": "0a06096d-9ad3-444d-899c-30ba7445d920",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "90ba6e9a-2ac4-48a4-ad20-03fa913b624b"
        },
        "item": {
          "id": "df39adcc-b157-49fe-9071-bb7788cf81fc",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "bdc75624-a04f-4135-af7e-0da6a1396c5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1777f589-a72a-4d88-b71b-9d1c86b139a9",
        "cursor": {
          "ref": "0e9c689b-dfa8-4040-bedd-dfa17f96c55b",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "d9492ae4-227d-4d44-aba3-16b3a6f4faf1"
        },
        "item": {
          "id": "1777f589-a72a-4d88-b71b-9d1c86b139a9",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2732652d-293c-48ef-b7ea-5237520b75a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d578fb26-9c07-4977-a9be-d5c4699fa54f",
        "cursor": {
          "ref": "361c4db1-74d8-4374-9cdc-a22e65d8dc79",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c08bb85a-537b-422a-96b2-477048c7244c"
        },
        "item": {
          "id": "d578fb26-9c07-4977-a9be-d5c4699fa54f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "3f4e51fa-0dd0-4be0-946f-920f45fb80d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d1df054-44fd-4977-8e08-086b5172be2c",
        "cursor": {
          "ref": "a49acd4d-ea27-45d1-a5db-8bdd1ea6976c",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d4a66e1f-dc91-4fcb-910d-3a3a0d8b191d"
        },
        "item": {
          "id": "4d1df054-44fd-4977-8e08-086b5172be2c",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "6e5bd150-60b4-4175-ba53-aa27a64fb98a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7c6c420-1655-4ecb-b030-629e5244f899",
        "cursor": {
          "ref": "3da5f967-e155-41c0-99e3-631d8cd9d288",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "3fb9d5d9-1084-4db1-a2de-f3bd05fbd969"
        },
        "item": {
          "id": "c7c6c420-1655-4ecb-b030-629e5244f899",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "2a649088-d36b-4119-b74f-6d356aa6cd34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2a18b0d-55a2-469c-a118-ab71616be025",
        "cursor": {
          "ref": "4e15d0a8-2a07-43f9-b903-12aa64b6fdca",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "29c59f7c-b266-4af6-a826-4958b238bba3"
        },
        "item": {
          "id": "f2a18b0d-55a2-469c-a118-ab71616be025",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "976d5257-6f2d-431d-9eec-fadf19324cf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ddb1f5-4ffc-43a0-8d9d-1506910e8b74",
        "cursor": {
          "ref": "1282f1bb-7c5a-4f4e-802c-b375d70aa188",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "4ede97f8-d779-4781-921f-90f2c8a447a1"
        },
        "item": {
          "id": "33ddb1f5-4ffc-43a0-8d9d-1506910e8b74",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "51add087-9275-491e-9c7f-1f4a4250b532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cb973c4-3f05-4799-ab1d-c5b45517ffa6",
        "cursor": {
          "ref": "ed6fe1ea-40e2-4705-a2e2-a91d46515811",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "7cf6d90d-c9c8-4e6b-b6f6-4946bb8cff53"
        },
        "item": {
          "id": "1cb973c4-3f05-4799-ab1d-c5b45517ffa6",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "aa7f7745-f682-4b1e-8948-e15394b6f209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecf95396-cd84-42e7-a292-031d41224341",
        "cursor": {
          "ref": "a9bd420c-8b94-49b6-855b-9da19e514391",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "670efa5e-9768-406e-94dd-122b50595fca"
        },
        "item": {
          "id": "ecf95396-cd84-42e7-a292-031d41224341",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6047ec07-3e97-4b7a-8ab1-d168bca2ac7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57b8e129-64f9-4467-9ed2-d2ffb897cfb5",
        "cursor": {
          "ref": "829e5002-03d9-4110-be7a-0bb0c5f64688",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "99a1da71-fa26-4194-a025-c7b95fcdc37c"
        },
        "item": {
          "id": "57b8e129-64f9-4467-9ed2-d2ffb897cfb5",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "3c74263d-3835-4d44-afa5-9d70ebc6d361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "064ea09e-a4ae-4a32-b91f-32b32c3217ab",
        "cursor": {
          "ref": "378448f4-e6dc-409c-9a6e-08748370aafc",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "996ac0a1-de9d-455b-b111-7dc09f5392c8"
        },
        "item": {
          "id": "064ea09e-a4ae-4a32-b91f-32b32c3217ab",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "4b6ef971-020f-4c5f-a8d4-ff80d21bd7a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f49943d7-b40d-40a8-9a0b-20c0093f5d32",
        "cursor": {
          "ref": "9a064dca-3c0c-45f6-ab8a-a5109036c916",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "ba64b3be-90f0-45c1-bc6e-9887ec3b23a1"
        },
        "item": {
          "id": "f49943d7-b40d-40a8-9a0b-20c0093f5d32",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "34ba8f12-7b7c-4d95-a7e2-e34ee4a40400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23278396-6603-46af-871b-f5dd6a4c8e46",
        "cursor": {
          "ref": "d2089593-52f3-4314-a7d2-04a96059a318",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "df24f973-f8f2-4f8c-9d45-d92f6173b936"
        },
        "item": {
          "id": "23278396-6603-46af-871b-f5dd6a4c8e46",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d1d00196-c063-475f-97f7-1223b0298582",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac31194e-71cb-42c0-89db-c0944fc2108c",
        "cursor": {
          "ref": "e20792cd-df4c-4c42-8285-a7dd04b15358",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "7c36dedb-82ea-4462-98c0-89419afda30e"
        },
        "item": {
          "id": "ac31194e-71cb-42c0-89db-c0944fc2108c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "6a2270c4-6e58-4781-92d0-41f87594ccd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f638fe-24e5-4647-88fb-2c3f57d447bb",
        "cursor": {
          "ref": "16bb574a-59f6-4a5b-a6e9-fc4c60f49748",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c580f14b-847c-45dd-93e7-95826357fa1d"
        },
        "item": {
          "id": "66f638fe-24e5-4647-88fb-2c3f57d447bb",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "20e5bb6c-0148-438b-886d-190ef363f659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "895ab87a-b502-4628-907b-ce97df7fb340",
        "cursor": {
          "ref": "f34a6c8c-c2a8-4584-8dda-a2bf0eb19866",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "260020cb-2384-44d3-b0c3-ea689cebc8ee"
        },
        "item": {
          "id": "895ab87a-b502-4628-907b-ce97df7fb340",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e47c15ff-051f-45be-b62f-d4ee48c3dd41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab86940-0987-4529-a482-1b32aa790b0c",
        "cursor": {
          "ref": "6777e10b-cdb2-42b9-89f5-fbb939275d72",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "9d641afa-de5a-4816-9542-79936d66e882"
        },
        "item": {
          "id": "2ab86940-0987-4529-a482-1b32aa790b0c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "aee879c1-e83e-4f27-b9de-829def151115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6602dcfc-6532-4055-a3cc-41a917a43c21",
        "cursor": {
          "ref": "1a0b14fd-fbe2-4e95-90a5-4abdbe35113d",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "2bda10ca-f528-4afb-93a0-c8d83d708336"
        },
        "item": {
          "id": "6602dcfc-6532-4055-a3cc-41a917a43c21",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "d409cea2-eace-4565-b19b-9ec505f9abf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "160c7383-b160-4c32-abb6-e711de4b29b3",
        "cursor": {
          "ref": "911f73c2-a7cc-4349-9eb3-dc7d1ad72b84",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "6e08374d-d780-4795-a1ba-2ee2cc1d456c"
        },
        "item": {
          "id": "160c7383-b160-4c32-abb6-e711de4b29b3",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "dbc44af0-cf32-423e-96f0-97084f412e09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c192323b-8cff-434b-9893-0feec5afbb15",
        "cursor": {
          "ref": "91001c37-4ad1-4b90-8084-3393a6d0069f",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "b12aecec-f9e3-4899-a6f0-aa00ddada79c"
        },
        "item": {
          "id": "c192323b-8cff-434b-9893-0feec5afbb15",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "4014c1bd-bf8f-474a-b264-da88eea2110b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31b6cf42-c0a0-420c-86d6-2d84a44b793d",
        "cursor": {
          "ref": "79a10a1d-8a37-4720-b092-678781068c45",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "6df104ab-f5da-4b89-9c3a-59a802144680"
        },
        "item": {
          "id": "31b6cf42-c0a0-420c-86d6-2d84a44b793d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "77a4c67b-0eb9-495a-ab53-9ac027c2f19e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2740bd6-cad6-4091-bca4-d98504e29473",
        "cursor": {
          "ref": "f1a34498-4f97-436e-9e18-0609554e3b2f",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e3e8431c-dd34-4cd2-a19d-44db21765896"
        },
        "item": {
          "id": "d2740bd6-cad6-4091-bca4-d98504e29473",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e7c96b32-c822-4fae-998f-9937ffaf5506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa0c389-f959-43c1-9124-89f285bd306d",
        "cursor": {
          "ref": "1212cde8-cad9-4060-877d-4a760b7c8754",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "d4d47dc1-8535-4bb5-bb71-11cc76e87482"
        },
        "item": {
          "id": "2fa0c389-f959-43c1-9124-89f285bd306d",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "563b4aa2-5836-4b16-a27b-058d8fd7e8df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "454f0077-294d-4ed3-bb41-59fe6fd5ae93",
        "cursor": {
          "ref": "86cc36e2-be90-47f4-92a3-79091cb9d6c1",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "530d8f43-f630-42ed-9482-d2d3f6d4f6a8"
        },
        "item": {
          "id": "454f0077-294d-4ed3-bb41-59fe6fd5ae93",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "c32a4e4d-1d77-44e8-8198-322913594d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9431e590-b360-40b9-b757-e6a9f1e07f82",
        "cursor": {
          "ref": "58906132-ab42-4084-9da8-3fdf7d671098",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "92b5b011-397e-47f9-873d-760644e36aa8"
        },
        "item": {
          "id": "9431e590-b360-40b9-b757-e6a9f1e07f82",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "147f756e-5261-47b5-9086-b2671d04188b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf81b801-111f-4ed0-8e23-d11a2609421c",
        "cursor": {
          "ref": "3ccd9efc-87eb-4555-9055-c2a1b269ba35",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "f6dc93e1-ba36-4bbb-ac12-60c6d7af862f"
        },
        "item": {
          "id": "bf81b801-111f-4ed0-8e23-d11a2609421c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "bdc360b3-b097-4129-a0e9-a1a520b2cc03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf2e5ab0-c0f7-4cbc-b8f0-de939af5a11d",
        "cursor": {
          "ref": "e6ff3f4f-e8e1-48bc-8879-95aca29b8700",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "21f05c86-dfa0-4673-a311-47d5daa016c2"
        },
        "item": {
          "id": "bf2e5ab0-c0f7-4cbc-b8f0-de939af5a11d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d9396800-66b7-4404-bec9-8cc575a172e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34012678-8561-45d4-b425-10694c289700",
        "cursor": {
          "ref": "dab1cf8b-1286-4b8a-9501-27b28a48c226",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "8081f413-ba81-4e02-b8c9-6f4397bb9574"
        },
        "item": {
          "id": "34012678-8561-45d4-b425-10694c289700",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "349252ae-49ce-4d1a-b26d-0c49e3ff401a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "640359a4-83b0-4176-aafb-8318726a61b9",
        "cursor": {
          "ref": "4afef0eb-492e-4879-bf17-81b0eb8857fd",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "38a9fee2-9e1c-40c3-acd6-029c7f47e411"
        },
        "item": {
          "id": "640359a4-83b0-4176-aafb-8318726a61b9",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "ed38f987-2ab5-4b83-9fc6-1c544caf0c60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "603ea4e8-7db6-43d9-811f-a076d90b1518",
        "cursor": {
          "ref": "69614575-a9d6-4be0-af6a-1d18f4c740b8",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e6e784ce-6dc6-4f54-82f8-90cd2eb67f4b"
        },
        "item": {
          "id": "603ea4e8-7db6-43d9-811f-a076d90b1518",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "7db65a2f-61cb-460e-b02d-c062f0431898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d03f7ac-f731-4b57-87b0-719560a53889",
        "cursor": {
          "ref": "f9dcd35b-8d83-4cdb-b642-e0ac1ac43d55",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "373d1906-27df-41ca-bca2-3e81f7cffeeb"
        },
        "item": {
          "id": "1d03f7ac-f731-4b57-87b0-719560a53889",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "332ebbe6-13eb-4d01-9b24-e54652d2e5e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a7cdba9-8f01-4b3e-8099-cda43f7b687d",
        "cursor": {
          "ref": "778eb6e2-5adf-497c-a85f-2610c664663c",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "543831f5-89da-4b5f-843a-cf0ac707787c"
        },
        "item": {
          "id": "2a7cdba9-8f01-4b3e-8099-cda43f7b687d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "7d6ef50f-c177-41e3-afc2-46d917ff5667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73d70aaa-05cb-4e04-a7f1-231904b9a467",
        "cursor": {
          "ref": "732a0358-0fdb-4b67-9f99-941a249be11e",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "47a59ea9-d9ba-436d-8752-e6cea1c70e1e"
        },
        "item": {
          "id": "73d70aaa-05cb-4e04-a7f1-231904b9a467",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "4fb55136-8f0a-4499-afd2-4cfcdcc32a9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf9d1e46-94f4-4207-aa59-c1a9531ab25f",
        "cursor": {
          "ref": "253023b5-298d-4f0a-aea2-c2a359941f3f",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e2620dd7-1de5-4910-96c6-5437d7a99a33"
        },
        "item": {
          "id": "bf9d1e46-94f4-4207-aa59-c1a9531ab25f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "bf5c5c41-463f-48e7-8d11-e47bf61d1a29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbcbedbf-e5d8-4ed0-a429-1c30bb6a0ada",
        "cursor": {
          "ref": "f3d30aef-196f-43a9-87e4-ef2853c59a42",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f434e574-d75d-4957-b9fa-0c6a66a99933"
        },
        "item": {
          "id": "bbcbedbf-e5d8-4ed0-a429-1c30bb6a0ada",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d0c27e27-1720-42b4-8ca1-7b347c9a21c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "541b2910-0f09-49c2-b068-812e308fa004",
        "cursor": {
          "ref": "72b95f8e-d86e-4468-9723-cf5d9d89f53c",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f4737834-97f9-4cce-a368-9c6809e98cec"
        },
        "item": {
          "id": "541b2910-0f09-49c2-b068-812e308fa004",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "390a1eb1-b058-4ca4-8ba2-dffdf1576e73",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "94792b86-0420-42f0-b0c1-2b7e8a498e6b",
        "cursor": {
          "ref": "dcca08fb-db69-484c-89de-56ab8d384830",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "982343b8-4dcb-4731-9af6-5e8b7f183324"
        },
        "item": {
          "id": "94792b86-0420-42f0-b0c1-2b7e8a498e6b",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "2fc53543-2d0f-4d67-b591-d1bd34781f9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "f78a518e-7735-4e5a-a86e-75d3ced232e6",
        "cursor": {
          "ref": "8c471886-51ac-434a-bc3e-0b0d8a95a477",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "513c4f77-cdeb-440a-b0a2-6e6bced6ff51"
        },
        "item": {
          "id": "f78a518e-7735-4e5a-a86e-75d3ced232e6",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a309d63b-1f2e-4b39-b11b-5eedd3ae610b",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b9da92-06c2-46a5-b67a-bde046534222",
        "cursor": {
          "ref": "7300f6a7-fe8b-469c-a10b-b5c8428f0454",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "fcc8ba08-5b19-48e4-8ff5-38b117268c06"
        },
        "item": {
          "id": "d9b9da92-06c2-46a5-b67a-bde046534222",
          "name": "credentials_verify"
        },
        "response": {
          "id": "f7f3b216-8f50-4597-b394-c8cc44cd50d6",
          "status": "OK",
          "code": 200,
          "responseTime": 1869,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0b6def1-c9a5-4684-bd47-268b260661d2",
        "cursor": {
          "ref": "bee12da1-a33f-43f9-ba60-db43ba4df0b6",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "dd2b4932-2bf6-4259-9336-ad553cd851a1"
        },
        "item": {
          "id": "c0b6def1-c9a5-4684-bd47-268b260661d2",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "2b1c462a-690b-4267-95aa-bbbb4d1e4f56",
          "status": "OK",
          "code": 200,
          "responseTime": 2133,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "034a9437-d3d1-4043-8d67-cad344b17ee8",
        "cursor": {
          "ref": "7960fed1-5402-406f-bf09-5fe1ab51ede9",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "fc89e269-4a3a-42e1-9d94-b3a77b4d711c"
        },
        "item": {
          "id": "034a9437-d3d1-4043-8d67-cad344b17ee8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a02844db-79a7-4218-967a-528d0831ef21",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "034a9437-d3d1-4043-8d67-cad344b17ee8",
        "cursor": {
          "ref": "7960fed1-5402-406f-bf09-5fe1ab51ede9",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "fc89e269-4a3a-42e1-9d94-b3a77b4d711c"
        },
        "item": {
          "id": "034a9437-d3d1-4043-8d67-cad344b17ee8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a02844db-79a7-4218-967a-528d0831ef21",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "034a9437-d3d1-4043-8d67-cad344b17ee8",
        "cursor": {
          "ref": "7960fed1-5402-406f-bf09-5fe1ab51ede9",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "fc89e269-4a3a-42e1-9d94-b3a77b4d711c"
        },
        "item": {
          "id": "034a9437-d3d1-4043-8d67-cad344b17ee8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a02844db-79a7-4218-967a-528d0831ef21",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "14e6d093-52c6-4f71-a898-90aed32489cd",
        "cursor": {
          "ref": "5f72f7d1-9b3d-49f2-a9a2-fdf00d42dc52",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "52d2582a-ceba-436d-a124-b7c7f79116c4"
        },
        "item": {
          "id": "14e6d093-52c6-4f71-a898-90aed32489cd",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "97a20def-ad20-418a-a094-1fc0dfdb1fb5",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "19dd4ee9-a3bc-446e-9457-d0dde1ad218a",
        "cursor": {
          "ref": "8e2a4ac8-994e-4c86-be92-32bae1ca3702",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "daa79aef-d04d-449f-a4d3-cc79162b5309"
        },
        "item": {
          "id": "19dd4ee9-a3bc-446e-9457-d0dde1ad218a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "05aa02d9-1644-45b7-ba2c-c112c3f9f166",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "19dd4ee9-a3bc-446e-9457-d0dde1ad218a",
        "cursor": {
          "ref": "8e2a4ac8-994e-4c86-be92-32bae1ca3702",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "daa79aef-d04d-449f-a4d3-cc79162b5309"
        },
        "item": {
          "id": "19dd4ee9-a3bc-446e-9457-d0dde1ad218a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "05aa02d9-1644-45b7-ba2c-c112c3f9f166",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "aebbd5a1-ef65-4d1b-88dd-0df093f8b1ce",
        "cursor": {
          "ref": "7286ba1f-031d-4ccf-8de6-233aba9087ea",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "eca1b93d-4d2b-4b8d-9288-2532963128c6"
        },
        "item": {
          "id": "aebbd5a1-ef65-4d1b-88dd-0df093f8b1ce",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "d65b168c-4a83-4771-a44b-d714817e445c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 223,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "155d2d7c-509c-48f2-a391-5f95bb7a4258",
        "cursor": {
          "ref": "c34fdbe1-fa9a-434c-b460-55b99b27cb45",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "88c24cb3-7312-48c1-9383-b7d9c7922b6a"
        },
        "item": {
          "id": "155d2d7c-509c-48f2-a391-5f95bb7a4258",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c3cc2d82-a338-4a9d-8be5-357a04d28490",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "155d2d7c-509c-48f2-a391-5f95bb7a4258",
        "cursor": {
          "ref": "c34fdbe1-fa9a-434c-b460-55b99b27cb45",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "88c24cb3-7312-48c1-9383-b7d9c7922b6a"
        },
        "item": {
          "id": "155d2d7c-509c-48f2-a391-5f95bb7a4258",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c3cc2d82-a338-4a9d-8be5-357a04d28490",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "2516596f-5c2e-4d78-93d0-2533a8e2be5b",
        "cursor": {
          "ref": "05018b41-1912-4256-b412-a4db1a57ecbb",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "ebebae02-8d3f-4835-805a-9a0e558bb189"
        },
        "item": {
          "id": "2516596f-5c2e-4d78-93d0-2533a8e2be5b",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "0935edd0-35f7-4c52-bbbf-205ff39f1bfa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}