{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "4023cb8e-c738-4ca9-bbb3-6be7eb440de5",
        "name": "Clear Cache",
        "item": [
          {
            "id": "e1a52297-50ea-40f3-a602-b5638e1ae80e",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "80a34365-1e03-42e0-863e-8747fa8327d3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "45840d30-2e26-43cb-aeea-abccb2d0a0fd"
                }
              }
            ]
          },
          {
            "id": "d595662c-09c0-4a4e-bf42-63c4f0a3e53e",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "676c2241-8645-444c-8c69-97c0a4e7c9c5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "14b8c541-ddc5-4e7b-9717-b5d2674d3e6d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "7285af7f-6f64-4498-b460-e1461128238c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a8f733a7-2b3f-481d-ad2c-0156343b66f4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ddd1e841-ab08-45e0-ae6f-eb808b54128b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d1f5b134-6cc5-4268-9b44-4bc2f70ab234",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e32b2c09-807e-4af8-bca3-df0c4dcc78d4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5180592d-812c-488e-883e-cfafe4cae681",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "07effb72-2778-437e-a3e5-9ae34ed7d1cd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "aa0187aa-c8d3-4355-adaf-aec488c51975",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "18bf2cc0-d93b-4650-b0da-7e658af2eb5e"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c278b369-61bd-464e-abd9-6e2ae19cfc08",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "70e2848f-5373-403c-b251-a8bb97d257e8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e339f4d9-069b-4c7a-bbc2-de8e362cc6ef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "16689895-519f-4c9a-a7f7-615b05ac3bed"
            }
          }
        ]
      },
      {
        "id": "ac068942-1f29-4ec6-92e6-787cf3195ca9",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "f53aa9d6-1dcf-486b-9759-a84e537f0df3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5dd678ed-3ee3-4d9e-ba5b-4a8139afb30b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cff599a8-867b-4a34-b2a9-d7a70375af3e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "373b0098-5077-4a0e-ad4f-922091a99fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "040bc5e1-4844-4d11-a798-b264535c5664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a2589fc-7a99-44fb-b4da-e2793b2feadb",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d26b5bdd-7a9d-4442-8699-2fa98ef73f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ada706d5-7098-44bc-ba92-5e8851e3ecfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f75dca05-df9a-4cdf-8bb3-1d1cb8d22ae4",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da7f96aa-a38b-45e4-838c-6aac68c151b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6664a828-cee1-47b5-9f37-a4fec6dd8625"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4f69b0af-b3ac-4c2a-b0f7-5bbbbcdb784e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cd5dabc4-0eaa-452a-8528-8b4463e4aa48",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8023b924-8a94-4883-9bee-93ce9d59411f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ed74c52c-7a4f-46de-9e26-5240f84111dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74ce3deb-f2af-42b5-9d42-c296ebadbf8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37df3c8a-be54-4326-9313-0554c1ee8e80"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "960da2e4-f78a-4bd6-9173-58a4f67f140c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ccf2f029-a3f5-4962-869b-5f514bf2ab37",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6077854e-3c53-4c47-a4f1-03f9d42af9cd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6bd80038-e93b-47ed-aef0-a4d79dc3559d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2db715a0-1fb1-47ac-992e-c142d67ff741",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "4dfa2014-198a-4942-a5d2-1a6de7a9f54b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "56d84a50-93cf-4876-9ad8-e4cfb413bea3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "82d3887e-5e74-410c-918e-e09e71c3ae22"
            }
          }
        ]
      },
      {
        "id": "3796c175-9288-423c-a53e-55faa4717b4e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a7b365ec-3754-49c7-9a1e-be9ddfd69727",
            "name": "Negative Testing",
            "item": [
              {
                "id": "50edf970-fde5-498a-a4c2-d14f572e2f65",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "1e84ad83-ba0c-4729-a639-c9773b4f9957",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb7b3ac-21a1-4bd5-81c4-1fdd4324ca2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "399ed52b-25e2-4a4d-b736-e08cede7a6f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed5c7dc8-139d-4a60-a7c6-5b00aef98711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "811c940b-7ece-4232-a3c0-cf6a8d9cf967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef60eed2-1546-4449-bb45-fb3c6bfcafb5",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a88ce54c-7b4a-44bf-a578-84c3fb0d6d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4719ad06-f09e-4938-9544-e4f07727e4c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df7d846b-371c-4d78-85fb-5da3b1562e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37c7a388-deef-47d6-83d4-592923eaa6f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54d19314-0b89-498c-9cfc-8231c3adbea4",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc741d4-0d1a-4a81-9103-9864f0b4437f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e13786c4-b861-43fd-8463-c43e854b3cdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30aaf5b6-fbab-43d1-905c-1f865d097d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "69375707-13cf-4db2-9545-f7138806f1e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad4b4c7-e309-4008-ba86-6b2168f35c13",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "433cafbd-b411-4b2f-8a05-2c9b81dfa586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "325f8b80-dd25-4310-b83d-e35b695ce585"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09fb7c13-66d6-4496-81db-0b257fb6364e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e8f860a-79eb-4701-91f1-9de8fae35daf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86cad875-1d6e-4e51-bb7a-b650825a7ad0",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f8915c-de09-4617-92d0-62d088cb31d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d91505f5-2b2d-43ff-b579-8f8d3a9ce5e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eaff2ab-e823-45ad-beeb-e36bd15b8932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e26f59b-1d55-483d-a4f9-d9f9fcb3a188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63dfbb54-1a69-46ee-b6f5-39c7323d00c8",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79d22d8c-6ba2-4006-86fb-575fd761bdc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a40f6269-9fd4-42bb-8f2d-2572ad167d2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c57eac46-ae03-407f-baa1-ac1406f1d25c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d16c7d2-0cad-42d8-8d3b-58d763871891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "644876f5-203a-461d-9c44-b298d2ad9b73",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f52f7bff-3a6d-49f1-a5de-72da59854e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "129d6d71-ac78-45ae-b95a-c4d763f46265"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efd02ac8-890d-43ca-a80c-49bb9b26b00f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54ab3ee1-28f6-4592-adc6-e0bcb03734ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "254ba024-6517-497e-9451-5346feacc03b",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26c0ee49-9bac-47f3-b001-4156e26d90ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cea0581-395f-4666-90b3-d03b1607004d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f5192c0-ee54-4dff-b33e-772cdadbc745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da01e8b2-cc1d-45ed-b97e-10c5a7658d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e1a5b52-d4a4-4809-8b2d-bb42010d625b",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab62b605-08de-4642-8e71-a05466006cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "464295d2-26ae-4e1e-8035-c2edfdf440a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34f31259-d16e-45c9-b898-5163be520f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a82d5289-687b-4f60-8108-2363417052c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05e7c4db-51ad-40b5-8a9b-017ca38fc8e8",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93096add-2fa2-46fd-bf3f-fb0ced6340bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "879639ce-b13c-4c65-86d7-a10d8dbba70e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a6ab6b-0a10-4193-a952-37323fe836eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4fe907d3-d4cd-450a-aa8d-3bf190a9e97a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b81465-db7e-4336-a0e0-d3b4dcd0a1d8",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b612117f-34c8-4d88-a53b-34549149d980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a77d07a3-8b5c-42e6-8f96-37c0de170d85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d222780-bcc5-4a9c-ba1b-0a8425069cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "968e9874-086d-4e76-8efd-df31bcb90af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d521872b-d342-472b-8de8-827ee1e45939",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd080c8-9b43-40dc-ba04-7603aa24289b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "482b8c39-6ba0-4985-8e57-48da99894d85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e470c529-9e26-46ea-99dd-163757d403ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "01bbc9df-21ee-4307-9f02-8ffbe9207d37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2854ef67-4f4f-4066-b7d8-8815943f3eb1",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47f3e503-0432-45a3-9dde-0de6e9aaf014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8377fec0-b45b-4b07-9a1b-643d2043749c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c23da7d5-04b1-4e09-b55e-5c73f608c6f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3bd9768-15c0-4bc2-b4f0-3743ae37e659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "659f387e-a87a-464b-840b-a0135941c999",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "459a07d1-3fb6-41df-b834-683317f39463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3019c85-fdfb-4520-a6e6-324f81a1c3a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f723528-253b-4040-aea8-6be5ba5d9e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b22097a7-ea8a-4f46-8dda-173269bf6f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4015a3fb-a604-4b18-84de-66faaae7608d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e2c54c0-91df-478d-bf72-91dffdcf2ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48e50c0d-4bed-4dd1-a288-f4f72b59ad31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d048f1c-51a7-4c7b-8dd5-8543cbce485d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9762f3a5-c8e5-4f72-8b02-23902e7b23a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13047309-14f8-4f39-b5f2-357b5925122c",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e22ea5-33d3-4ba9-9cdd-abc3d38dc792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6094210d-7a97-4d21-84b0-75755bf33dec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "038c43e0-01c0-4141-bbf3-d417e23d087c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e01e9a2-a2dd-47f3-ae66-558770235612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9774296-efe4-4326-a751-e7aca2ae273d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "537f7565-996d-4feb-aa13-a1207374e1de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "545c7a95-cb2c-4012-b605-65bcd6bd3431"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "025edf36-1d0f-44af-b0c4-b84797c37e26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb157b11-0269-48b1-aae7-ab282640c464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82ab5a80-eb8b-49e3-b3a6-8b29cfe0d098",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd1d1a0-a4f6-4e99-94af-a3cfd43ae398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aebc2e9-2dc7-4e2a-ad24-f4471ecf1bde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d8b42e-4efd-4413-895f-3aea0efc89a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fe05bad-094a-42a5-aea9-a22761e69a52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4286f17-bddf-46cb-a103-133d6e5c963a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1ac123-33bd-4056-8fea-5bd44b9a73d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d0fa9ff-1050-42b6-bd32-207372269d93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "725eccdc-a941-47b7-8afa-c23916abe20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "85f49712-6aa4-43f1-a886-4003254f5df3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca01e44-55cb-4923-8084-6b06a6d685f8",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daa69021-f3c9-458f-a916-2a5c250407f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "557b38ca-fbf8-4ea0-9e17-7a75e31b940d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf6710c1-b79a-4881-ae6d-b8e4a23d1098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "28cf9076-2ced-4061-a5c9-66f3de318d0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "283b778d-6928-4476-9eef-a4cdeb1034af",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "569afe48-413c-4175-b69f-60e00e49127a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2c821e4-ac1e-41e0-9f12-c2578d6c679b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25bbb5e-9c3d-4f84-a904-1dd0e89537c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "accbadc0-74b3-4263-92e6-5f8df5ab83e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9af29a3e-cda0-4899-a671-6ab1934c15f5",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3c64de0-95e6-4e48-abad-3907bd49326d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e780c430-4919-4031-bace-3d736d7a2fdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f41dda5-f34f-4630-bfa6-9b6191b224cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f915ef2-417d-48a9-96a9-4affebdc8d14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed0fcff-539d-4d17-99aa-97b062f15ed2",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a3ca549-2ba8-435d-bcc4-8eb7a025dd4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be6fe708-8760-4b9b-ab79-944498cfb8cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "132f157a-649c-44ae-ab27-6f9ead875773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2ea26029-ffc0-4f93-8404-3b57f4cfd94a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5498c56-f6b9-48ac-9a0c-390c43687990",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad8d1415-7543-4ad4-af68-69fcb31f99fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03301b0e-dc3b-43b2-abdf-3620a1559e64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4dc4060-b4c3-4dd3-b856-887c08104f31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7601c971-aa4f-425a-8b03-22751f9eec0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1be09b34-cd92-405a-b54b-9dbc1d03b091",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d98b6f9f-a49c-43cc-aabe-27448cd054f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8e3dbba-ffa3-46cf-aade-61e5f027e5ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7caa3254-c2da-4a94-8403-88fab096de47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "490aff62-967a-4c00-ba92-dd417e54a78a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34504602-c058-4956-9fa6-3b7f5ccecb9d",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8926d085-9faf-4691-92dd-4007a98fd338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3c4c16e-8fad-4fcb-a64b-bb035b7e04be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31f09aa0-1f31-4fef-a93e-03dc88d02a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b058c6f-e96a-44ac-abe9-d34b92cd2f6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bed56d1-5d4e-4901-a031-ad7e2356a55f",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24ecd61f-71c7-4577-9683-95adeb69fc58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a62bdc2c-52dc-49fc-8ce4-1e9d143853e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a28e8b86-c343-4010-aecd-aafa0f50be4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a491686-cfb0-4d3e-8815-292487769871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfbf0f27-0ec4-49e3-8583-1fc13acd1187",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f3834d-94af-4a3c-a995-35634f57b76c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f79706d1-a203-4063-a7c8-00332a9d89ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da0a59f-d8c0-4676-ac3f-22385f06136e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d78458f-2752-48d2-bb3b-6882001687b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37b6a337-acb3-4cfa-b912-c796a48a10bb",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07101372-e90c-4884-9855-74bf252465ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b4b776f-af7b-4e41-acf2-044e6e0caf01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4a77c72-f7b8-4b0d-a8a5-34fa343f6cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d45124c-f4b6-4d90-b665-ddfb2bbe3bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3be801f4-7815-4158-b3fe-05693a74821d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf00349e-d734-4458-896a-a60b7fc6301c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "420806d2-1d99-43ae-9a5b-342577d566fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "843ae397-3312-431e-92ac-ddbbca99d0a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c68565a-c062-48d1-a28c-2dce1470c0aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "064b8d67-7529-4e89-a8c8-ad01c51d231b",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d807f12c-f46a-45d9-8ce9-30149b400025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1187d2b9-2b74-485c-b93a-42bd307be90f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3347b12a-edfa-4e94-9a5d-a108ff10d045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "79780407-05e4-47ed-8adf-07d159fa27f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c6f81a-ff19-42cc-8578-e4c8022ded5f",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e661b0dd-c68f-4600-98cc-74d8a762cec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "612a157a-5aa5-4755-9895-95f28a8cad1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62311df5-9f47-40e0-a730-5dae0a6f8a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "669d8c98-50c7-4b97-878e-b30c9ac71adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1beb10dc-4b85-4bb7-b753-bfee04196268",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b626effb-4338-44cc-9025-c7a3c6128b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc54adf5-af04-49ed-b9ff-68ab096b5b2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "166dc869-550c-4217-815c-6b171655e5ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7619641d-5b44-48a1-8403-a875de20bd42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31637590-0d6b-488d-bafe-9a41b8d900db",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa23673a-a8ea-4df0-9643-2883dffe4f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1f22a9e-1481-4fc2-97c6-965e1f2f42c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ea4b54-7868-45bd-b075-c4efbbccab3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5c2d118-3c99-4419-ad72-4d56d4bb8a97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c6efb72-3ec6-4202-bf7d-407875c3085c",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b90b84-0102-42e8-8e35-84134cbe5cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e86c0e4-249f-46a2-86eb-428cbc8c4ed7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c74189-4f31-40a1-97a7-c7abb250aa86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0ee4351b-9289-4d93-843b-49e9075cbd4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7487b3c-55bc-43f4-9b0e-7663cd9beba4",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db258e1-10f7-4d5c-9022-77158b7aa039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "160ffed2-74b4-423b-a204-afcfa253cc9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8092743-e9a9-4508-9283-a8e7f1b05fef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "01c5272e-7739-4fd0-ac1f-b0be7ed6d6a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3897958-d44d-4d21-aeca-b806c854b195",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb738b1f-3992-41a5-b3ac-cb362bb94c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2331aef8-304f-4169-a0d7-c21aafb50dbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e541a3b-6de1-4c45-85f2-0f5325f54689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "00ee66f3-ced9-448c-85c3-f5ed5cb03e9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "050ab2d6-fdd6-4557-85cd-a1e2b20e3324",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48fd3843-bb32-4fe4-a947-55d5852a44be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d32ee56b-658e-4851-affb-96bc3328eeb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9c44f4c-0305-4e5d-a340-ef4c94b8cee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4af8689c-26fc-4f6e-940e-007723c3ef42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "731c6055-8bed-46c8-ab7f-76d13e7ef5c6",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34df04a1-598e-45c1-848c-c5d66ee07de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "826caa7c-3158-4cfe-959b-2f5d4af803b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f77120e-5337-4cca-bb09-44063c4d2ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "88ec954e-32cd-4bec-8ec9-c70decfb4a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75ed55f5-e056-4782-a730-768840fd4b92",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eafcde6-2cd0-4582-b8b2-5517c6f1a45b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9320f376-3e73-442d-8016-61714020e8af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "768cd027-9ea2-4a1d-b571-36e01f51e2c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5979135d-d6b1-469b-9b1a-8bfef70efe45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfd29c4d-e03c-4abd-a848-34f1c75d7f82",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa08a621-70a7-49d1-aac4-569487493464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37f1fea9-4a1e-403b-8f31-fa4be8e6c1d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc37cca0-9ecd-4272-b1cd-83a8bf4c6c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "402fc386-30ef-4115-b84a-f26e9dd9aee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "602ef0e3-2ce2-4db4-a0ec-77a994e0e8b8",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eae07553-e472-463e-a55a-edd525e46c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a12554b-2e9e-40da-a837-6f6b872bc6c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b1399d9-eeb5-4f0b-875d-bce9732c64b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "a511150e-0a2f-435b-905a-1d4e34250ce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f4ccc57-10c0-44ce-91ff-c131f9919396",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "649d9a93-e711-4a27-92ae-350231d87b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac503ca3-166f-472d-83ff-5740face0ced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc34a19c-9e93-4fce-84c8-fe5ee3d09241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9737ee7a-a172-4b0c-8891-288e823dbd6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64df222e-ea7f-4856-8c1c-99ce99f3d79b",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8250bdeb-5f65-49d9-a686-b4413f110b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db74e72b-bcb3-46ae-8f3e-98b1ad1fe984"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59affa5c-4978-44e7-92a5-33731d4f1468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "28bedb73-3369-4231-a676-0745b535e6a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25ba269b-a771-4ff9-a23d-385ee933d2fc",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "613a4f0a-202b-47c3-8e78-4adc82394fd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5232fec8-b3c3-4bd7-9435-b7bf4a7cd637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77eb6f71-b515-4819-ac52-c932591a87a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9e99616-a96b-47aa-9fe2-5036e37b73a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cb48cee-bcc6-484c-924f-32141b0e53dc",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25419dd9-babb-4a42-8e53-0817dae38602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c59155f6-1721-4ade-b26e-af912925f2ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e72e2c77-7a91-41a6-adf5-0b4a73ab1ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "03b8d426-36c5-4c6f-952b-5022de7565f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05a56903-5661-4c47-a675-5c2059b761fd",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f04a9835-71d0-4cfe-8026-ba50d13e4721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "595ade87-272c-4a38-8fd1-0aadf4973b3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a55d63c9-adc6-46f3-a754-b2666fb2d0b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "473e14c8-d600-4d02-af09-a6d516504a3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a57e342-57f3-405b-be21-b8475b998954",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc8e931-d081-4c25-bc3c-d0fea6a41c50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b6b1c08-6ac0-4f93-86d9-ed103b9da7f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37998bcb-540d-4a25-ab8f-ac14cf05537d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "10414711-713a-4080-b77e-fd955afc88dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7377da5-600f-4592-b624-486ae28128a3",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "298b6475-611c-41db-bec4-49bd6be40592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68333399-f795-4f1b-a71f-68ce5e39124d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c308e96b-f780-418f-9c7a-2c1c3394ef31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed172dc2-10e3-4657-8d06-f985d11ab16f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0f54785-7bc6-47a4-90c2-0c8534517d78",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed071d4a-129f-4f47-8b1d-1d13546bd932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06e4a940-e559-45dd-8479-2896488bd84a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cde29f53-eec9-4a9d-adc3-7f260828aee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c74af05b-e3f5-40fb-b077-05b8547c4ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aceb3e9-0f70-4f60-b605-df17ae237a17",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85947ef1-b878-471b-8f83-c12f8fa1cbb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbaa43d5-7e1b-4a2f-8835-a9319abb0db6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5920f8a-07b4-4c07-ace0-089d4a64bab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "031f6077-be34-48cc-963e-1aaa6c029ba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "295e3f74-8b6c-4372-bf64-0606d1e6c567",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfaa070b-88ff-4745-8068-2cdde861ab97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3a84220-71aa-47f9-9b61-b9cece334e42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe8dc5f-39cd-426e-93ba-890b8b45c2d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b10daf6-698e-4f34-b7be-2816aeb31092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc3ac73-bed7-4a1a-822c-cbd565dcf9de",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "084ff915-0bea-4325-9160-c0e9de7f0650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e3016e6-cf29-4a91-ad57-8a7715dce937"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2910a4ea-4475-4661-9890-d23392a4fe62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "82f1da8c-a292-4f07-b6e9-6970244cad1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "603144e2-8fd3-47c5-8c96-dca1daf18608",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc3a25bf-4703-4bbb-b4c4-7b77a47b1579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbe366bd-2825-4a8e-94aa-7ca507b45dc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "456229a8-701d-4612-bc99-c25d5f5fdd3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "81941747-055e-495b-bebd-710d028cc9e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8defb025-474f-4687-95e5-7533afc7a73f",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f19c4931-d155-4430-9d16-3fadcf3b46bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "340c6745-bd14-4689-a4f4-e9d0c9cbbfac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "540ee5da-3de9-4518-b447-3048d6f3c7d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "63ef1bc1-cea0-43c9-9445-76cce658fda1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb1d45ec-28a0-4f51-ad73-93978024d597",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1434b193-a141-4f90-9f40-6b6dc70d2028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daf395df-5a8f-4e8c-8568-c0e252e1d0b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f569a76-128e-4000-a013-dcf0590eab1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5f6a6933-5aa6-42d4-8a9c-8928660b94a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d076d10-bbaf-454d-b880-7c955f4ade4d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dccb2ad-57c3-4677-a3cc-5fb7090e5d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea54ca72-b8e7-45e7-a2f9-4a2994458d8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c08f26a-6967-4411-b2a7-bd0ef97a2e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b61a000-b6fe-476e-a109-42cb2eeeac8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97723006-1e99-4e7a-80bd-86199c4d9324",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbdfab80-a4d3-4d9d-b175-fa7f91784d75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22157a46-bf4b-4785-8d9c-417be104189f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf604cba-cacd-48ba-9773-166011ddf56c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3c6ff20-7c77-429c-aaef-7ebff9df2a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a28819b9-2fb1-458a-8fa0-ea9cc7333752",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d87b20-ba7c-4748-b2d0-6a648e32c451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac083c84-ae18-4a1b-91fc-edf1bcf8d978"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa9317a-de8b-474c-a3c3-2696c4de467e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "761f9036-e6c8-4edd-a44b-65c727639040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "556390ee-0849-4091-95dd-6d552f532b24",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15bb12a8-8e00-44a1-a45b-db64e67209af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0e99870-c5df-4dfa-9efb-ba4999146f07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d7ba99-35e6-448c-bfb2-f4eb79640465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "001ec00b-663b-4445-af5f-1688978be621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49f15541-132f-4c02-81d4-c209d9e2ef16",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f74b16c-e9db-4ae4-b075-a2b96e21445f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bfbd422-71de-4154-b848-9ae28ffe4a18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e961bb-6cdc-48c0-ac33-d95a543265f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7bee2a2b-1f6a-4df2-8ed9-07e24fbe8c28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02b6b27e-bdcd-43a2-af4c-4c14de03ba54",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b10c4c29-40af-4c43-99ea-f3136be22929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4dda16d-cc26-4a42-8c60-2dff62873b05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7aa0fc8-5122-4553-a601-302676ffa5af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "88c2774b-c10d-4225-9e82-cbde78c003bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f633e3-3618-41e5-ad19-1a96b0fd36fd",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "785695a4-1472-4c18-beda-0e2249ffaeda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41f41c98-afc3-4836-a67f-0baf86b8540b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3298ad8-b0b7-4656-8047-182d79fe78bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "91fe7f71-1058-4bf9-9860-fa9899133ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcd9977e-c3ad-4509-8d0f-54433da1df04",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "891238e8-b806-4c82-b3ea-7cd14ee3d472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c3e510c-dbe4-4798-b8da-e0c0bdc21d80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b06845-2107-4896-8260-048aaa3bb822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0679aac-d9a2-47ea-b3a2-8212068d4ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca93b550-649b-4bc6-91b2-09958bd28b38",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6507e1fe-10a5-4a48-9480-27bb9f3c2f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba504c93-b391-483c-b97e-b4824e5653c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b32f863-5012-41ec-9be5-65f4e4508650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dee02543-24b3-4abc-b381-17e5854ed3a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79508ef3-47fc-42f2-b520-2ce57aaf1b4a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a218c4e3-1271-4a78-b8c9-baf6b2f9a678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23540e7b-f93d-44f1-b660-8acff5a88e21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c172b21-219f-4ce8-9031-fea000d463d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "29aeef07-d9ec-4822-808e-c0a087cca232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "561716ef-0120-472b-aaa8-5266595dbd37",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "281c74cb-c1ad-45f9-aa76-f6ef8cf9362b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "040ae817-73de-4e58-8285-3185166a15f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "703f2f6b-cff6-4ae7-8537-be44f9492701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "28544c35-96d3-4461-8c35-0605f06f2b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe3945b5-5f56-4930-909a-498122c073c7",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7435346-5277-4e87-8623-87ef5d8d5eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cedcfd4-b63e-45c4-916f-aa6282828108"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1b80471-97e8-4635-a4ba-9122b7bc4040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5dbaa21-df17-4855-82f8-cea924e3a7e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c41f4d81-f813-42cf-aa3a-34349eca61e5",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee71695-7a63-4fd4-b6b7-2e1fb7a5ae58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f285dc0b-277f-4895-84bc-af945c5ab4aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea528b4-c60c-4b76-93d0-ceec2e1aa9e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a4fff27-8e06-4993-8ef8-9be35884f0ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56559e24-3227-4321-8d8f-2084fa58ac8e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c42b9ab0-f8e2-4741-8781-85864755ed56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f649bb8-7eea-4cca-b283-048c372aac7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fdf284b-5ff6-4319-b522-50fd5e129572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "719bf6f2-888a-4861-abad-d1318ee677d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9acfd59-5a23-4f18-8813-1c048fe97d85",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23f6c0af-44ee-4afb-84cb-1c86d07fa8fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f36bda3-eafe-4f47-85a5-eba610afca08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f9f679-4e4f-4f77-afed-746816f0f1a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "68ec5041-7cd3-4937-af2f-32239f82b9a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f050a83-ded5-4269-b747-256ce6227c72",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5f2f32-4f4d-439a-95ec-a2f264903bb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c960c24e-062c-4769-9a4c-55c9d4cba5ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e31d915-8b00-4d21-998c-ef732fa8344f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "800a4eb5-3278-458b-b37e-45bd7f988ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d34c31-0331-4c00-9bc5-738532e796f3",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a370fb0a-2d9f-49e2-af30-83fdcea1784f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eabda07-b7ed-4ce5-8e8b-02676b9bd409"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba6bf00b-eeaf-43da-8ce6-19efad963429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1ebbd80-b62b-446d-8a16-8507f1feb5f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7073429e-72c4-4bd4-bb91-036aadc0955b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "636e4433-a1bf-4b64-99ae-9cf2fec71a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf71ccdd-fb92-4257-83c4-6d83745107e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "591e420d-6896-4d77-afbe-2c606f9a73bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f14860be-c394-4725-afff-67b3c06c3edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "968e323e-f6f5-4865-803f-b558c7174ea5",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c15de6f-1183-414d-b89e-e6561b20efea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cb947de-0a60-4c21-ae6b-b122eeccc6f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad07ecb-b7f2-4fba-ba38-b4d3e5c77faa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "650d92f4-1b1e-45a9-8e6c-8de6282848de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ad7d89a-29b6-4cc3-9b84-cb1483cd9ff4",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43672962-06c6-4186-a6a6-ac34644be271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6ab238e-40f6-471c-8a75-74156fb222ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c98bc573-cc9a-456d-91de-896d6918f7c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5117415-4689-4e64-8215-ad4adf0dc1e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "430f39e5-0202-491b-b1af-cbc95841ada1",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94bc6e60-b20f-4b83-b75d-4ae257b4bc44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b7499dd-6326-4faa-8f38-0d32a028fc46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc0fe9f1-df9a-406c-9e63-d8c1f746dfce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "82f76633-190a-4df1-91a8-ef3542f3afa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27630a19-8e99-4bf8-a075-617416d5ddaf",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e882dbb9-7aaa-4655-bd7e-7640d3ec1440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdf78487-3a38-487f-ab95-b384317f03c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66643f38-cb51-46ea-9ba8-a0bede4494e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3e5ac3c-3e5a-4967-8ca9-294e9d61fc2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e8ac55b-984f-4e13-bec1-ab888251bc19",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "502fbf0b-b9d7-4455-8a73-3ee1945d7e83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "709ce6a7-402b-4e4f-bc14-5adba845cda1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1e423e1-78f5-48cb-bb8f-2a534f02c18f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f23355e-2ce0-4f00-b7ac-58f36d24024b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08dd1359-5a34-456b-9252-fbb7bea50fe2",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83af97dc-1cbb-4611-aa98-1f117836db78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79ffd4d7-1fe8-4076-a8bf-518f681430ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25408e2b-bf84-4ccf-a5da-cbe557cf4d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a708c808-6f2f-460b-89db-2a32c1e1eb7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34965f68-3cd8-4cdd-9ff7-c45ec9f74013",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20265687-3954-4dfc-9167-1f05a41e72c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8e4a904-607c-4fef-8722-730372f57b56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1181edf7-bf70-4474-a4e9-1ae660203880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "637c607b-3ea8-4afd-b243-3e990feda7d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72261a46-3bc9-4019-808f-f45110bd3cbb",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb73f54-acdd-4a36-9e3e-a0f72489674b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efd89136-22dc-442d-9ab0-1e945c3143f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ca3d8f-e2e7-4118-b4db-a932c3bcbaa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee93d92c-e5a4-4fad-8278-43d76e8ad9e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7fbf81f-09f5-4a74-97c3-52d70ecb1e2c",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "193a113a-6235-4f88-8001-7707327932b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef64395a-ecd2-44e1-8844-1b53b8719277"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d43ff76-cee3-4bbe-ae98-2e1649c41062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "85cbe68a-2bff-4f78-a1fb-a47a78321f2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7dc7e4d-83b4-49bc-81df-b90555e47765",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a5dc6df-baf9-4eaf-aadc-bf9d08ebfa61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba8733db-8d1b-4b7d-9b01-ef07ae46b988"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e27c669a-ed28-458e-96e2-f44ba39624c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "91467d11-74a6-4732-8f4e-241f3f591f32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99239dd0-0705-443f-9f8b-b52bc7355577",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc051d5-853f-4490-9d71-35a57f1b1903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33ec8a39-8630-41be-b58c-806e83940104"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf3e6175-35d3-48a4-ad94-fa1fa0604b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "239140ab-1fba-49ee-ac3a-cf7beee6ca5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0821c84-3d8a-465f-825d-fcc3d93b5bbe",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "767d11f1-861d-477a-a669-c7177cb356e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a071a37a-97dd-4ba4-ace5-49116d60fcb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11fff59-9c16-4bac-83df-6f9f31eea817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0cfe36ab-e2a9-448a-b47e-630b3715069b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21fdfa79-692b-4b1f-8874-16ac74e5b0bb",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df913313-962b-4bde-98f2-333de6d3367b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54749f52-270b-40b0-9278-de910380197b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85c384a8-6e85-44cd-a0ba-4c6e2b2d8bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "de47a0ac-9ceb-459f-b86c-c7d12e1e991f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f7eea1-a551-4b45-aa03-f59955cbbb5b",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89f25976-838d-401e-a3e7-6a403742a51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f4e77cc-79d3-4062-899b-88d6a7ee6fca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd397a79-7584-46b4-8bed-742b7fbfbcf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b62d865-b490-4f64-ac64-7f8691ad69d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "693fee37-0467-4ee2-ae58-9cd51c61db54",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4c28972-b914-4d98-be58-6b3b19b0231f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b00d66c1-ec1b-4b67-ab5b-12dba62aa135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98272a81-9ea2-4a27-b315-2f4f79878cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3faabfd-0c64-4439-a889-1bf0855b4274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6d149a7-f66e-42ab-92f7-85fbe3d46028",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f1bd743-3c8f-48c4-8dec-087c3bc690f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87a9a4c7-56f4-4958-a7a1-0ee4ffb63bdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6deac57c-bc6a-4e5e-b704-63e6abec134f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "384b77c6-d7a0-4959-b642-464307059441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd37bd1e-a002-43c9-bbc1-c5326c012a40",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e310afa6-7295-4cec-b1eb-cf7a44a9f71e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f05be08e-3509-4d92-9547-305f9b1d8ef6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "898675c9-9a7a-4e31-bc9d-e328fde0bebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b91a100f-0873-442d-aec1-d43a05e77921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "084c1c09-1086-4d9f-93fe-ac0bc0d6361c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ac07ca7-dd12-48a6-b4b9-50c3ac3c6511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "525196b2-ec49-4681-a757-bbfb61e11554"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97fe59e7-742e-4ae0-8109-fecd85f76daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "58fa5843-2dc9-4ff3-8d67-ac875d466094"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5a8b608a-a26d-4802-9202-5e0e16c45d8c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ba9399ea-1461-4e40-93d2-2e56c80dc760",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb316d3-76b2-4155-b5dc-55dfe5213d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a5cc4cc0-ef16-4018-9618-01c2e5548d65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5b2f89c-fc5e-4360-a9ad-d9b12c60332d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e54febc0-661b-43c8-9fc1-daabb81b6c6a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b5b9b9f-3256-4e30-b3c2-069d37c5100f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a9ff78e5-dd92-457e-93c3-054c773d1da9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c4f8bff-ff3f-4ffa-bc8c-c00c9e9197e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eea5cbcf-a5db-4524-a028-a86f73253015"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8fff75d2-d7b7-4cd6-acab-5e77e74513ba",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ac581124-ec42-40a5-99e2-5ac614683d85"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c1533643-e433-4dbb-97b4-b93d51665201",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "70eff592-492e-4f86-93e8-e0ab1af3bf70"
                }
              }
            ]
          },
          {
            "id": "a96e14fb-10a4-4d3e-be84-29a9ff080cb6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c235a96c-d339-44a7-bb00-61d4f5b4d204",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "07ab9965-2d88-4e22-b55b-699a919d0013",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "751e9135-d224-4db9-aa92-a5ec634b9a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ed052d84-ca4c-4c15-a5e9-7fa6fbeac405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acf20ca2-1fb9-4760-b831-dfa5f499e581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c40677c-c8f5-4149-bb2a-4152c6ce5a9a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1c5e177d-0034-4ce1-b445-dc67c5dc54cb",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e86b8b3c-d9fe-4824-a753-f028e64b34ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "596d797f-b367-4c46-83a9-61c297ecaaf8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb1a61f2-0d7d-453c-81c0-7b9ace63ddde",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8fa2880c-6b0b-4f67-a7a9-ec918c9640bc"
                    }
                  }
                ]
              },
              {
                "id": "ddf86a0c-ba30-495b-939e-f0877b0a8953",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ffbb9d33-1072-4a60-8987-bd0dac266eaa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6d60e044-0854-4f98-ad3c-11262234bcea"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4b62fd7f-f257-4512-b152-238244d2a228",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b988660a-dae9-4a6d-b38f-6e83526e1bd4"
                    }
                  }
                ]
              },
              {
                "id": "d3f305cc-4f06-4893-ae7f-c796c09ee969",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c02dcdcf-796e-4046-9fe2-e7fd7aaf48b7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "db0e425e-a650-4e7a-969d-2194f42cc0fe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3007f4b8-693e-4a2c-a662-7c966cc4195f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ef7046d3-49a1-4617-92be-3dbe541a5cb2"
                    }
                  }
                ]
              },
              {
                "id": "8a6c4a49-2624-4a10-b4e2-392c1a71a102",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "33e981ba-cd95-4ce3-a858-6e177eca0cf0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a517e664-09db-45b2-b15e-0c5de630c41a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd739ae0-08d1-45bf-acbd-2a33d7f80678",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "fe603eaa-3632-49d4-b43c-1583a409c388"
                    }
                  }
                ]
              },
              {
                "id": "cb4129c8-6bf0-4ae8-ace7-0bb5df371c3a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef779aa8-41b5-4abc-af72-901c25c82bc3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3af8f263-d428-42a7-9ec0-11664b3a43ed"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "03979774-4902-46b0-b871-8f4a2a69dcce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "f12b29b5-dad7-47dc-a963-e7f2fab07e58"
                    }
                  }
                ]
              },
              {
                "id": "d9574701-7abe-427f-8b37-214228499274",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "99d3f2f5-9d6a-4969-8261-a0cdfca68b13",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c649d096-bd1e-44fe-8905-64d94c59d4a9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d51ceb24-042c-4dc1-ae49-e83994eecc36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9009d8cb-151e-457f-9e67-cce9211b43ed"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6dfb40ec-49b6-44e0-a4af-8a243f50369f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a759c38e-7d92-4bcb-bcf8-38d21cc1fdae"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "16683afd-4f98-4857-80ef-681ff08b8321",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "78a43c2a-4e53-4291-8a9a-2bbcbb8c367b"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1f36090a-3091-4aeb-ae23-109b299a18e7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b2a0d402-7ffe-4afa-9d23-657b31d61190"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6f5a7087-6686-4e35-958f-facc57d03c81",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8ed97721-48f2-4bff-8026-bcb9a7cb233e"
            }
          }
        ]
      },
      {
        "id": "922a3ae8-2c68-4b31-a731-122b3551ab09",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e4ed2ceb-6b2a-48e4-ba95-687ba180c1bd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "857af425-329d-468d-a76a-dea25078a1ad",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "42b8bbb9-ff06-47e0-8fb4-e3b86ce2e2b2",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82876f25-f8c2-4e42-a1e5-254d67d02b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8c81653-678f-4168-afea-b401278ca4c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f980a12-7ed1-4b34-88bb-4fac244d4919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "573a12b8-f404-406b-a2da-bcc2a6add13d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a257d6-0b52-4ead-a98d-acbf69b5a8fb",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d56577-fc70-468e-85c2-f286bb52c11f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2014bf0d-7265-49e6-adf4-96d71e324bcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0640d0a4-6348-4e26-aec0-175927d8078e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4838be7-181d-4be4-aa22-a580758948d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1155a678-227c-4cfe-a267-c7790fcc670a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aaf98e5-4564-4882-8e8e-6d8b3073e4af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f1599f6-8411-43d5-aa61-5e252d228571"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ed92538-a9ce-45cd-83b4-473bf7322f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8256a20-1bc0-4b65-9908-a32308cbff74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca9cd14f-9684-45c6-87c6-17850dad254e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a563b2c-4159-4a66-beda-47556220337e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6af03fb-1558-455d-8e5c-351650515e2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b64092-d23d-4e4a-84a0-7bb8e3d383a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "02a88f71-e5b3-447a-8f8c-febc3a5f5eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ee52b5-8510-4ade-958a-95d3dcc66e3c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b77c74-280c-4e29-b3fb-41e053cc59b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "004bfec6-0675-42ea-a324-85509eb9420c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c47599b-7d3a-464d-9045-2a217e527219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "35be11ac-3130-4804-a62f-178d500773b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f5e980a-9a22-48d2-aca7-4cbd5893aa9c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de6c8342-bcb5-41fe-baa8-f7c90439825d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eb8bc8b-9676-42f8-84e0-35b86cc29c24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb5afa8e-6ef5-499f-aaf1-208161ea10ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a32a6ffe-7cb3-4663-9433-94226a94f2da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a81fa4-e985-4b27-abf1-9c59a7a6e261",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd844c2-9799-4ff8-a5b9-de87530ff40a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfa1516f-ae93-43f0-8f3d-26d755700cab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "967b0159-f545-406e-8f39-2a50dd7715a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "38c51f56-a55f-4d26-91b0-9367f85f44ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68a417bf-d7a7-490e-97fc-5c1b1bf068f6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a87b7a0-8c2a-4fa0-8774-e97bdce94924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aeb61a7-3867-42d3-b66a-0a4cb62c868f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ffef23f-663c-4839-871b-b7d0a732c52c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "90512a52-2802-45bb-8626-3960c23e297b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0372a50f-bf7b-48f5-abdb-c9e6b881c73c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fdb9b20-7c25-4303-94e3-bb89d98a704a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9771ecea-3dca-4fb8-92e3-71b9782dd787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab55a6e-530b-423d-bfac-2e50950d4b1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "44957257-19ee-4a57-8c0b-00f5461c70f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df7a282-94dd-47db-b93a-2990c3eb7976",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e6586e-bb78-4e6a-b3b4-af9c4aefcf52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7514639c-4154-4640-b8c4-32376fd233a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1557be1-4523-4d62-9395-63c9fd7bcfec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e92d2c8-f8bb-4832-8dce-ee3c0720f26d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "633a20ec-eefc-47c3-b787-32f59b7a8984",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab704cab-8f67-4a6a-b279-dbdd2ac747c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c5e4850-6013-4460-9bfa-cf9eea8699b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e0f038-ca97-4f54-80ae-dad3c9f37124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "43667f0b-1a58-4d1e-a63e-6077d1a78183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3bfaa8f-9c95-49dc-b1b9-1159635bce54",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "041f015e-0d17-47fa-977d-9af36abd8937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34bee76e-6c24-4c2c-8e2d-6c9714eb3fe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ded02b-0a2b-45e7-ae8a-4eea8b64cea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "81cd4852-0509-42dc-8af4-becc69dbe350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebd7ff19-f386-41ca-b417-943e3cd73a41",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e999b89e-a037-423d-b33e-1173fa1fb4ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c6cdf45-b4a8-4b16-b39b-077d57309a3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44c2ae0-f5b8-404e-81cd-07fecd2a15b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc8ebe04-b2e3-40fa-9a54-a5c7fe942e47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d2796d6-4145-479e-a21c-bc6a036a2b15",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e33845-fffb-4b1e-afb6-c07507cba55e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46c27aa6-9855-46c6-b8b7-67ca75076dc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f64ea059-b956-4ee3-a28f-e83a1aa6b38c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fc0311e-2a90-4b8e-9b1d-5588d2213568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ab0262-ab17-4253-a3ca-bbf9ad43a3e1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa9acd5c-b275-41df-884e-6e2870a6e855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df11addb-e627-4953-b712-1117e857e274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deabbd03-519f-4dec-8beb-924ea107eadd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce9da483-889b-45f7-9177-f07ff07603f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ade081c-5bd2-4ec0-b7c6-5ef68d5a8d14",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8bbca28-d082-481b-893e-b96107744a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d01a88d3-409c-4a53-ad22-9cf7c0998737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec90dcd0-3241-4154-83ba-df13c22d9588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5f35c67-29a2-4a4e-9ff8-cede772c3b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51536eeb-1874-4d52-a700-a6b3637309ef",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72b8aaf5-0604-4605-97c6-b96931e96556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0f5d7d9-2805-4682-8855-15589092a378"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "110ff801-8735-4e9e-81c0-97781f3c19ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "79b30dbd-1f2d-4c03-9afb-894b37067940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d164ec66-9d74-4435-a6f1-0208ea148813",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3337f37-4d41-4230-9b69-7d39d039d5af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15c23ed8-8ec4-4671-a4bc-6548a51eb81f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef7505c2-808a-4b2f-8ff2-2c507fa1586c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f657b25e-2b5c-44c1-902b-c381862f8bff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1fc7a8-98af-4c6e-ba5c-7a4c0d66f5cc",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e635c2b0-6bc1-4894-9fad-2c64de820a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff482f5d-68a4-4528-8d4b-a26baaed0b6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f08b0312-9c9d-4b88-8286-bd8f3a9e3c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1807959d-b8ae-4ffb-b130-3ba101761a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c1e9cd7-f5fc-4b8a-abe7-10a7dce20c6b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9fb9dae-1ece-47d5-a879-f2f0c6912622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1072e00-f097-4d49-80d3-e040bf354b3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eabcce58-8b4e-46b9-8905-b5ed0b8feb40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62ec7d8a-fa7d-4196-aea2-16f498cd8cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd2125c-5cce-4c4d-b7fd-f44153748499",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c12b1c6a-5a70-439a-88e5-0b9653463622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b33e714-7738-41f7-98fd-6d247c551cb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3d7eef2-4246-4999-ad34-399209120224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cb1c357-4043-48f7-9dc9-f23753136fda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b338b747-374b-438a-b069-26f63d0c332c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fcf72d1-10c7-4971-a172-566185af2d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8699ab7-fb85-4520-9c4f-adcbdbbdb0c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb6ee08-c515-4e72-85f2-54552de7e2a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66b0ffdb-5fa3-4356-84a5-4f8c17e847af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15b287c3-d9b4-4fb0-95fd-1b7141af1e19",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "179c2fd0-b55b-4344-af16-a62e66cb07d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2feef43-53f4-4423-9f6a-80483acdf0d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "156d2a69-fad8-4494-a25c-2fd007922812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3d47491-c258-453e-9dfc-7815631ca1ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "980c6539-9e33-4b7b-9e6c-0a8bb2270c62",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3196f37c-9f8a-4506-a58c-d4147802d83b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11f219f4-7d4d-4087-b423-6268f0b2d6a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda3cb18-3baa-481c-b4ee-8ff1722a5efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bc9f78b-446d-4b39-8302-8561cae49f05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcc0e5fa-4201-4eab-a50c-621e8152b572",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "177fb63e-cd5e-4678-8f2d-e8b4ff3b807f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50ae1840-55cc-4cd4-9f04-b2e0ceab9ed2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa8d1d7a-a39b-45e0-97ee-8ab510b8e827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eda8e822-5d3b-4368-90cf-149a2ef0910d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e213d923-02ea-439b-b828-673e6f43fc3f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c687df55-3c97-4b5f-850a-51b3348ba362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37d4764e-1bd2-4438-a528-032510e2b79a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "977f576f-a313-4fe2-9a00-85a740e763cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4217474a-7d68-4862-94e0-0c8910daa0f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e594aee-e250-4e24-902c-b5041a9a2135",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eed0dc7-8f11-4084-876f-80687dd1c6a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aa39f46-8ff7-4ce1-93f5-6aeb4d046c89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714f76e8-08fd-4da3-a693-10a9686865af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f65ee1e-2251-4832-8166-c1c3e8a1e30d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be40fce1-f6de-4e59-9b45-5c042eda014f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa1593e-492d-40ae-9c4e-5e33a96ebc40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3efa70c-c52b-4424-8eb5-b099dfe2ae89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bed89b3d-2338-4bc2-8659-04bbeae4fa98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3538900-f50e-4727-b5ef-d051d929aae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41300251-2d4b-4e53-a911-04d5fbe726ad",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d30588-5d93-4b26-b7df-c72c7e2cee6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02aa8b95-a857-428d-963c-f644dfdd468a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c853ac2c-5e06-4d43-9985-219b06d73692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07b67912-e6ac-4c6e-ab1f-44684b7ef32a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b702374-a481-4180-affa-e5383379667c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "049bbb91-720c-4c49-982c-042c61c36c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86209443-b06b-4c6c-a354-345e01a51d09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f2c54a-4121-4b9d-b137-edfac3dea39d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68c8cd9f-f9af-4e62-be44-51b5ec610038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ba42e1-e953-4851-9ead-d9743c50a4a8",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1cdfb2a-957f-431b-8ee2-087bbfe6de9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d678838a-631a-464d-9f0a-d9b076fd3e5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1159e213-711d-4044-8a31-9f329591a025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "157ff345-19d1-419a-ac36-5b88351509bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca13fa0-7592-4d53-b699-f221b822f035",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ebfa25e-85e3-4c1b-8497-7a9f3c6ad77f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb9c2fc7-e307-4275-8154-c97d4a7abb72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc4f329a-98b3-4ec1-9220-132bcff8211c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b397cf84-9ba9-447f-9956-79ef4e1bf95b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d0ea9185-69c6-4346-aaad-cc4741573d42",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "311df126-ec3d-417f-8b3a-1b3ca1928975",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "759e062d-1eb3-4436-8af0-03c698975858",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9835a7ad-52c2-4662-8437-e599b7986ec1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e9ad8da-f461-4e74-93b6-b3d532136aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f0eb626-b228-4356-9108-801f7a6d101a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "09026fe3-116f-41ab-972a-da3a31c429ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7a4e674-4332-4784-9337-4411c360f6e4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "211d8f7f-3d37-4283-bcfd-3e895c68b164",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94a564b4-0303-4f46-b34d-5c6141c05e6a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2b34cb44-14dc-43a4-85b6-16e31ebf33f9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1601dc4e-87e5-4a51-9a68-51b47fa3485c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ffe72e99-0b6a-43c1-9169-4c2c7ae13da7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0fe14d90-e158-4cc4-a8f0-d149c0704ef9"
            }
          }
        ]
      },
      {
        "id": "5dc22857-1ffe-4d3c-b794-0ca0ecfe8ed4",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "d6117844-f308-4049-ac3c-4d14ffdf9e99",
            "name": "Negative Testing",
            "item": [
              {
                "id": "690a28f5-2fa2-45ba-8de9-e3f278689718",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bef301d3-b0c7-46e3-93a6-b4653c7a935a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1eca7f1-167e-4b97-b931-33e34f5c1fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "389d47b6-50fc-48a9-91d2-b537200ab339"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5922b49d-601a-4a4f-b829-17c753f48429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8c64804-15a4-47da-b767-e9ba137fe699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def90a0f-d650-4cc2-a195-f45214f87fd1",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "844e1fcf-a12f-4905-a039-69a43f6495da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e876f79-db87-4db5-a782-5f72f3b5bab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0ca2164-6bd2-4b90-b9e8-f38e443f5e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "022450c0-0932-4ae8-8639-fc66ec99e32e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef38081e-22a5-4d1d-8d25-5f5d28afcb0b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc99864e-4c78-46b7-8b41-4857a4762fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ffa6146-c2a4-4526-8e6b-afdf1232c445"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2ac3f5e-148a-4ca2-81f6-b75ff00f2be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "086a18d6-1e0a-4312-ba74-5b556021c9c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1fe4f75-bcfe-40d9-8117-29d6f483aaf9",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "619fbcb1-bc9c-432f-bc7a-238ecc2aab99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2287ffe3-4b88-4f4c-82ff-38a7ff000355"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6679c1d0-633e-494e-908a-f4eefd4f61b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "06b65d38-40ad-4293-99f3-8230a558faf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bab921bf-dcf8-4c4d-831e-891e5b264b2c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "650e855a-2e6e-47ed-855b-c7e2b1e7840d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a2adb33-321c-4df9-9416-a65c48192252"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52ca6225-61ad-4619-be15-25affa00148f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d167b550-4d19-4713-9c45-47fd7245b779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f373864d-b82d-443f-b578-3fd07d735c5d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1243eb3-8667-427a-835c-6967d9f43df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11836f63-9bab-4cc6-ba6e-5c1bf0cd46e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "112ad422-ea97-4426-ae0b-74da1e7417ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b3e72bb7-e381-404b-9316-69c88a493e85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f99382-9911-45f5-bc1b-45bd3e2b7ef1",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94edd155-9f8b-47ae-bd16-647600e9d6d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a80a0de1-c860-4293-a1fe-54d508c2bf05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "181bf607-b18c-4dcd-abcf-dc02e196e1ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "386b2ca3-a495-42bb-9e95-0b21a793ef65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "089f6869-1d98-4c97-9bf5-93c58f6d3cd0",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f8370b-b600-4c2a-9b21-b389399e64bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de2822ec-173a-427b-836d-37a44b487577"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cae977f8-bc75-45f7-a903-d3a7cdd0c9cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c180f26-3c1e-4961-9e1d-a5e71d7ba52e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03bcc88b-5a3a-4b71-9a78-73ce3c112697",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e5ba572-015f-48cf-b266-80bbdfaf602b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ec25b44-47b1-4e96-80b6-b5871c5876bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad26c088-66aa-4f17-8be4-4006edafb048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "418a3f38-9604-4c41-a183-6eb9b937f79d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00df7aea-b039-4358-a20e-4236afb46154",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62502e19-702e-4ffe-afe8-7b7fbea7a63c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06d04adc-ee60-4e9e-8e66-486e84fba6b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0910ace3-a538-4f71-bd52-f0b0a6b0ac87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "afa9837d-e3af-4ae3-ad8e-f0655de27398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4402124a-6219-445a-a429-5e5d36b0c8b3",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "571be48a-340b-4e23-8e6a-bfecc0a29fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "102ca761-66b1-4fa3-bfc6-40490f87cd34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c0dd9d5-aafe-4d5c-8cde-033ba55286ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4e1a25cc-4626-41c8-aa51-bb0db8f2b7a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d778532-5b75-43a8-af32-74ee76a2a6f0",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c63fc071-0eb3-4bcf-8e6b-c7ab6e739fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc201c6d-6741-420d-b218-187371fef26c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "668c8a17-cbb7-44ef-a69f-995acb462bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6604b680-a657-48a7-9a07-fbee353d1f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "530ad0b6-e9f1-4278-9e39-edea8fd48669",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59af9b18-5a5f-46f0-b995-39a4f06d1955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2068a118-2e47-4181-b8dd-a2bbe3dc68af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b231cfc8-58da-4ebc-8e53-f912c3581cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa69fde9-6f54-4df9-a4d3-3ddb0bea9843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4586a2da-0071-4f8e-b793-59cbb2d2cba7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b71f0d-971d-47fe-8e74-94755ff5af7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "873487b3-05ba-496f-be53-306e34f72bb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a82e45-d291-4201-8130-33fd3f7dcfbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ecb83c0-f41b-4697-a786-244a6183dd8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ba2fad-30b2-4193-8e11-dcf4bc3274d8",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5231d064-f8cd-439f-86a7-b5e32ebe309c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59d6f9cb-4a26-48a3-aeed-9298df078aaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5f7853-ea78-4d15-b9aa-b541e5ebaf9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa73e4f8-bb07-4726-9595-3664840fc3c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffe4f647-76fd-4bc5-b7c8-da8ed4414e29",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c63623-190d-4cfd-9457-b3c2045dd7b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a3fc01f-a9e9-4fb0-bb9e-82bea9b4a1a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6bbaecd-7284-4569-b914-eb97cd62c57d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bb04013-0aa0-49ae-9d0c-c10f40c4a66f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf13587-bd40-4cb7-8e03-623e001e5cd8",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ec2235-8676-4025-8c91-26e5d294bd78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d943563-160e-4e20-ae5e-c88c24b644c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "347938da-f7e6-4156-8ff5-266dcfefc547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b204135-31ca-4174-8c8a-f7e520ba080a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e65bd97b-ec1b-4c56-837a-10e5798fdafb",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "096ad42f-8279-486f-91e2-d405f4ecdefc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a87cbdf-9a78-459d-b237-ab30dbbb9b2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad3315f5-95de-4b48-b012-55ac706c407a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2238e3d-677e-49ab-b7a9-2d9f5beef036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b0f7310-cb3a-483b-8157-edeac5d76cfa",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d74d3cd-bd2b-4bd1-b571-aef5e9b0e2f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a68b8cde-0431-4f20-a173-b0d7a9eab092"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbbaebec-f1e4-4502-93e6-c2a33936e48b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9f622b9-0123-45c2-b530-3eeee4e68070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aabc70a1-0066-4331-9134-b816d1d07d72",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c8b2c2c-a2e1-4a75-ae0d-f325c9413b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a8145a7-7b69-435e-8197-faf52bb8c8f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b66c8438-159e-47f8-b177-51f66b88b063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c5d0fee-fc14-482e-b739-1318b67b52cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf89b9f-c96c-4ea3-8d4c-4ab72ce60d67",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "088e4be3-9504-490e-9873-5fcfa9e0135f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2810f1a3-73cb-46df-976e-211c310ea27d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e660f849-8ccf-4696-8e7b-cbfc6519f42a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "addc3ea8-eeb7-4d71-87db-b158b68eee75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9517f25-2163-468a-a23a-de41dd83c227",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb4d10b-1c5e-410a-83b1-6205cab9c44e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed6310ba-1f2b-417e-a6e8-07d4d181ff33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6544e64-6997-49c9-8c92-ab9a67c57bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fc4b26b-7e78-4623-9e65-d7004b80f29e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a365d3f6-73a8-4f9f-9655-d6d9ef095171",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30ec740b-8ecc-4337-8fd7-27b1e5defe57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a188e930-f682-4021-b5ce-bfb30d7261fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5922eef4-c91e-4e1b-acd2-d5e2024cb372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec0794a0-cbea-48fc-93f5-5fbfcbb60c2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c6fe186-411d-48cd-a2fb-8c2f09d39417",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae17115a-30d3-41be-b251-d5fa548d82d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da326253-0c70-4e88-a013-54e02f3af2d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4cf2808-dbd5-4336-95d4-e58ea18825fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c703206-d5dd-4bbf-ab5d-1ab924338084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b032dac-75f0-44e5-bbf1-23e94d7a7d94",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a49523-9a22-414d-902d-d3b86738ca1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2134a93a-7fd3-4ace-ac63-7615d02ff904"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c60c67-e992-4b90-b7cf-472236700658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "441d0c86-ef77-4617-be36-e4cff00bdd46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4cb3cc7-b174-42b7-9690-df05cdb56568",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a68d3036-bf9f-469b-83b1-0ec8726189fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fb93610-b15a-46e8-bb67-5826bbf2438e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "436a350e-ee3f-461c-bf59-1d112aa211a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "30819bc4-4b87-4c98-bdf9-201b5e852f2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66fc1027-963b-4c4d-9829-401b51e1f33f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd25e44-2f66-4958-99a4-579685e22f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e30d1e71-b702-43cc-9559-2fb6bf0d68ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72487656-e448-48df-9620-2c27c6ff569c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20521694-7c70-4157-a11d-28863147e78c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8df948a-5520-4c87-b6ba-240c5382c72c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3be226f-0f48-4670-be81-d8b8e705de70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b16ace80-d2e2-4416-80a9-6c6640532f25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b98f2bf2-0ffd-4af6-8d76-b70c129e83a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "666ac707-b58e-46b6-86a2-08fed6ba6eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19cc082c-4cf0-4eb1-8b5c-bdc7c09e799a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c955f1-7a9e-4504-b9f9-cb7d054a7b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd7ed7c1-704e-4e08-b4a8-33bea4bb9248"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77a8eb50-68a8-4ee8-8137-b29b88c8c262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60f36acc-8205-4da4-8c68-5a6ed3166fe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "730fb9a2-62a8-48ae-9bc6-41f03155b0a6",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b710d0f-2121-4f68-8975-ae0d9666f893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbd1a072-8081-41ac-aa47-124e8716db66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f54e4e0-eb4c-4536-8728-8095f2e54696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f42faef-c232-40fe-8883-756c65066839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a609e507-d1c4-4840-bbb6-06da7b1aa394",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e004e0-400a-41d1-bfef-ca5f286e0d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24446757-73d6-4493-9389-cc80a8cb1378"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d19d8a-c2f6-4e3c-9e31-740e6759c3bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f0dbdb2-717b-4441-ab97-3d9314fcb533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f19240d1-7f1e-4282-816f-707cdb33ea60",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5bd48c4-8fe2-431e-91c4-2b38d1242fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd823086-3b88-4b00-8c60-886e6fb74865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc5fa626-f9a1-48ee-80d8-1639ec60e8d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8304a3df-be05-480b-86c3-bae38898e8d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f97ecea-5e42-4dfb-9046-15f1974c3c86",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da07cc17-c245-4085-9ab8-b6f8d9292c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39d8cc51-999c-4890-8684-315d827dee4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "835fd90b-da23-4daa-af2e-532ea17a32c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7251e82-1bf9-4fed-90e2-ddc695405035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89bdf062-7da7-4d7a-98ed-d398d0618d75",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ca6690-e5d7-4822-96d7-223dc788f814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6490b316-640d-4c5b-ba7c-c6d5093fc2e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b75ea7cf-9f16-41ef-966a-21e7679c3e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c0951fd-9a7b-4a54-b01b-d7957a6a2f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8507c1b8-47a5-4a0d-bb29-acc64dcbc516",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e113f9cf-bc6b-4fb5-a3a6-64d90b8d0eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78521ac4-100a-4be7-ad56-d064e0cc6841"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a1fd70-91df-4af3-be50-d78125541506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9656883a-3df7-4da2-86b9-e8c6dd618731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf2076d1-0ab9-4a9c-a3fb-2f33d59a4ed8",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45adedd7-6302-423e-acc5-ed8a86142481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "786d374c-07cd-4814-a3b1-55fa8f1ab53d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd3fd41f-94f3-427e-89fa-542804d2b34f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c57e4843-d3b8-464a-ab54-3536b6e8f0a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f9bab4-0c8d-4468-b320-b83509f47362",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c9550a-1d09-4184-896b-539c0db5649b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed5575ca-e25d-4bf8-a09d-36aa60218c20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34994ffe-00b8-4e57-9257-eaa282762bb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71514377-5fb4-4409-b5e7-a916425cbd16"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "23053be7-6605-44b5-8331-5b40275eb4d7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "04e8309f-2977-438d-9129-ae407ad4ea2f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa3c9f6b-04eb-4422-b785-02ffaa41ab86",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a32b558a-83e0-4c41-b77c-d8eb61ebf2f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "433236ae-ef21-4d2e-928d-f8495e084517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e7ba093e-671c-4f36-a15a-c2fa2c0bd4c9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d1a52dc8-6c06-42a9-a742-dde111c67660",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "deeda4d3-f91f-4e63-a05b-7b8f450c127a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9bcc16e6-63bb-45c1-a377-276dad66bb14",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b41a89e-af29-47fd-94f0-04b8f3e0718d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "51827cfe-0482-47b5-95b1-adcf2c510164",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "557736eb-26e8-412a-90fc-9fd3dcfe296b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "38fe36ec-d618-4b48-ac45-1c63194d8e35",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "94652d47-630a-4962-beac-5b113235528e"
            }
          }
        ]
      },
      {
        "id": "ed10138d-cee6-4530-bf2c-c24dd1704492",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "e437bde7-e795-4e55-be4b-048e18ff6425",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0e7dc97f-1712-45c2-bbcd-8153e026d97e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3d90f47c-c26d-4dfc-a4d5-eb8359eb55d0",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8acc9007-817a-4356-9644-d61db191f9b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7c67190-1ff2-4151-868e-fff63ab70e75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc960dbb-237e-40dc-8271-918486477b8f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa288b0e-61f9-4bd1-b23d-d5a27942ee5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cac68620-6871-4020-9dff-a64910586add"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01664849-5e51-4be5-b34a-4df3689e68cb",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "961ec44d-d8ff-4474-9632-687a722191e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56215189-348a-412d-b7f3-a5dcd74a1c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8182735-772e-4f6d-9aeb-876c05964fa3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3108d9-06d1-42b7-b3b0-2c3132b0dfeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f3ae8c4-e9e5-4da7-a671-376a63f87269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3307e74-da0a-4ad2-a75d-6da529384729",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c25b0a2-9a24-4854-84f3-90ee6a0a45b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c57bfaef-e777-41c0-990a-f9b6fbc35d87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8bf3e6f-123d-4a40-99b7-4b2952c2e6a2",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac7e11af-87b3-4386-9812-17a676906c7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "471159d4-5683-44c1-ad29-7e338a6631e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d991d2-b4e5-4d84-adc1-e2cbe6a320aa",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cd0a5c8-39c6-4555-af6c-981bdec9d857",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaf2d948-0b60-4be8-bf11-c425f814941f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab86cf6a-c74e-4806-9d73-1ba660525f76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc5d077b-10ea-4bde-a052-60534e3c9856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaef4675-1f49-45c1-b0ef-f306782138a9",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0170223-4ece-4ea6-87d7-5f8533c35d2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4038fbf-0aca-4f19-9ecb-d5208e8878bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34d71128-d60b-4e97-8da4-87c223c1c922",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae63ca28-62ad-4877-86bc-ae7e75478b4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fd45161-50ef-4a76-9b25-34e8ddb0b654",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82634f85-9716-4954-a8bd-a33d1a6ea44b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23dc6e24-18a2-494c-b930-63276ba30dda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e33cbf6f-08dd-47ed-9145-a0cb1b53d5f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7de34e2-5283-460c-97e4-5cad6bf170f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ce050a-10da-4512-b111-e9c35b7997ef",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a41ae6-33a2-467a-8803-c68d65637b7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b9a1046-723f-430b-af8d-fc6d288c29e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de6acb1-cf4f-4e5d-a678-016d06233fd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0829a363-e9a8-4338-b926-98d0fd228627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1cd2c11-25d3-4b3d-9e90-eeb2ae65fb9b",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "329ccfde-e4e9-42a5-868d-bc06f4342156",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ced3c973-a03e-4c53-a8fd-1cc9ef582432"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b451b77c-e989-4856-ba4e-106a3f3e34f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87e79872-f5fc-4173-bbeb-23b999853bb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d86d386-5a7a-4552-83ce-95ec65716ced",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad1b61d-2e34-487d-97dd-b8d30fa3a0ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db8aeb14-be81-4ba6-adfc-9730677ec3c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0631cf67-073c-47e0-86e1-b8606135d61c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c84f2e1-b9c1-42e9-a1f4-2fe2efd073ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ceefa63-4d1f-422b-828e-c83893263e94",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69957d01-9544-4fb3-a80c-d92c075d354e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21312e89-c5fc-4f30-b930-f2678c1ff1a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd6a319d-7bf3-46c1-925e-f202e8df86b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea39e499-1c3b-41c9-8e52-b9887ae9d920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a8e6281-5a86-4b53-b4f9-0793d8ae49af",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "355b0c7e-dca5-4bbb-8ade-629d8eaf0b45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a6fb7b3-9f5a-48fe-830c-0baa57824fe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ba446a2-4112-40b3-8dd2-1a1465402743",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95df5702-4f50-41bd-8abe-1fa3d39e4419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21477cc2-3ed0-46ae-9233-294aafd657c1",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fae192f0-69c4-4ac2-b476-a470439fc93a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60879dac-a40e-4d4a-ab4e-bb4174f4d7d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a9201c4-3313-4a05-bbd7-b451038719cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9c3da10-5627-41ec-923e-b164ccb7c311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52426b45-c7e0-43d1-bdbf-bf4491189d96",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b03ae1a4-3440-4d21-92b4-07595e62391c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db29966a-b695-4550-9691-7eefb1f92be7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff32126d-491c-407c-b6da-b22ca009c9ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd9faf7f-35e6-4be1-bd79-080fa2d32f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1109a848-b3c3-4b71-a733-f9626e05d76a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a653b029-73b9-4b15-9b3e-62a0c139ebe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "394667df-cd01-4994-b427-7cffe79e450d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "341be9de-939b-4b4f-963d-ff4d17838eb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94b569f3-d02b-41e1-b00c-0f054dbcd056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "461ed2d0-e8a4-4e80-827a-866f11ebefc5",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43740edf-fb99-4aef-8ffb-aa6b47a90723",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14cabc36-029d-40c9-ac6b-787e58e36ce2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef42236-36fe-4203-a0d7-151ee327e18e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22b42138-fd75-46ac-aeb1-de884b03a4c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c692b929-f75f-4aeb-943b-4ee1bf9be84a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67411174-3e8e-43be-8126-bfa0a821d8f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f247a419-273a-4dc3-96c0-5dcfe6e4d279"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ecde090-f22a-4c78-b282-6b6b67c626f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa3850f0-002b-4640-90d3-1652e82a6af4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcda6329-ccec-4067-98ad-881be713aa1e",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68173408-5323-4f62-aa97-fb5489dce723",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "775852f1-c3f8-48bc-8a49-d2cf75e41e91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "582e8fc9-ead4-4752-b71d-2fc7bdbea2c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecdf84f3-bfbd-489f-bae8-ada11100d883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec86260-106d-4c46-8bae-601694d3c510",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b74fdfe-4087-4c6a-8445-390bc77962ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f630cce-f4ad-4052-bb9f-7dafac6f8d10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd715d7-471c-47be-abf4-763676bf5180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bd26eef-6c63-43c3-bee2-6db884c6f5ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b09929c-90d6-43b7-a0a6-c154874cb9bb",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a2aa291-cacc-4293-aec0-ec28a0173369",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "961a2897-7162-49d3-9fe7-b57a1675bc2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d588aed-419b-407b-be3b-99cf29037e68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29304049-ec5d-4391-9062-1d531fcb4968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54279b61-e58c-4ae6-8668-98f6e3ebd682",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4859be6-f041-4c04-b3d7-8282c2139122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ea99a8c-d7f3-414e-863b-a31e4d638cc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dabec4e9-60f4-4b9e-8edb-fb0e83d3c805",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f09bcbfc-54c0-42ae-9708-a233d7023145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28b668a8-e4c0-4b8d-8c60-26adc3fffb76",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a91ded1-8ec5-434f-a802-0cc04c350ede",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e92c78b-2e0a-404e-a4b7-d51f3ef5c2bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa008761-0714-4cd3-8de6-c6f02a3e0873",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2138163-5cff-40aa-bbae-fa645d77c10f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e88b8b9-bb46-4ab8-bfa5-f01352daf001",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d9079c-31c9-4fdc-840b-2466cfc2f8d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03489411-c41f-430d-b2a0-66e23098bc66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "779bdd46-7226-4478-b45c-8795a68c1463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba32349b-1368-4796-b675-34a7af8118a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fe05d7e-e2e6-4e6e-b874-823e025faacd",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d0ce72b-5fc7-40be-988a-094c540b454c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72062db4-d779-4815-961f-61f6a2bb3e2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db865074-7316-407a-8b9a-3e3db0245cb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0c4236a-342c-4c06-aa87-9729b95cf241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4f3c504-3f6f-4419-b7f0-aa40ce5fdbe2",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e4de32c-61b2-497a-b31f-43680a3d245c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3d3c0fb-a5bd-4696-8316-4895fc60b18d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74aee4bf-2acd-46e2-89d0-81103efdeb38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6508186-8d43-4683-aa28-79678d221ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bc5de2c-b0d9-484e-a350-7923f5899b8d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3ae11d1-1b6a-4fc0-8d68-150ab1e5ee39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34579444-1b47-4809-8413-69c8cc555175"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "505333a1-1919-4595-b1ce-af4eedbb4a8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e69c627c-dee5-4326-a1bd-e695f294b67a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd949341-9bf2-48b8-b476-7774f2339cd6",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f68b8e-83b7-4f9a-9b85-a6390f1403f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e0dcdc5-9d62-4989-b5fb-6e27c6a94da0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2de23c0a-da78-4040-a961-a7d271973e07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3c24c9a-d8c6-4f82-adaf-974767f1faaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad413199-3593-4419-9e38-386123e9ac68",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60196848-a21c-4ec6-b951-79f179a98e6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c223e3a-acf8-41ea-81e5-9672daee8784"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35224044-3deb-415f-a4a0-198aa5919445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9980676f-4f3b-4d72-a098-7790d73329b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e7d09db-de65-45b4-bc36-d56b92e6e5ef",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70904002-baa3-4bf5-a9a4-16030e081a10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e97d77e0-79c6-47f1-ace7-60905fab9770"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4968fa51-66d4-40c4-ad90-2babe62b7e11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dee02bfb-a3ea-42de-88bd-28e22a2567c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e90e01da-07b2-4621-bbc2-5fad5f70ffe8",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15b5305f-31d7-4b13-9095-36428739bb97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00971861-ed1e-4748-8c64-b3add8df32bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2547f3d-4e1c-4c3f-866a-c0cc1ce93bbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af8b1666-cbb2-4d29-9a71-8340bd9f1ad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d3ecf26-22aa-494c-bf5a-62b59502f2d3",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c35ff6-c0dd-4a33-a495-63e762d6b0c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f30fcd2a-1399-4f72-b62c-22706302b803"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9fc1f8b-0ed2-49d1-b579-df999edf6a6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6af0c785-fda3-4592-84c6-5c303f3b8769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "877eb6a3-a066-4325-9e3d-111eb12c5b6b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8094aad-8207-4623-93a2-0512409c1ec5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58885c7f-433f-4fd7-885f-53e99a21736d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c8719da-d794-4c91-a0aa-bab788217161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fab613f-72f2-437d-9770-dee8e82852d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a42cf208-383b-49a0-9bc6-21e6c66e099e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6abeebe-a5a9-4352-b96f-ef44602d99eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8c89aab-c8c7-49ad-b644-d605354fff94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe8390f-dd38-4f61-b04d-fa30351774ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fe2fd0b-42b1-4d7c-9f7f-d0956d3f09dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26e9a05b-a1a3-45d5-ba58-113ade92803e",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3309808-561c-4900-b883-5add7ff3b8d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67904aa4-568c-4118-9f37-f5996fde2034"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad3f98a0-410c-4105-80de-59c37d6d0408",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88164efe-60f2-4bf1-b4fb-3995d5e9a0c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94418c25-a4e5-4091-93e3-f1aec306d99a",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5dd4e9d-6f66-4e2e-aba3-bd50a79951a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1194a54-68d3-4bf0-8156-49ae56c54c5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac53469-f16a-4c88-9f21-9ce561061ec3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbeb0090-e175-42e6-bc3a-e3bf9fe074bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c29b8131-533b-418a-a53c-8835f982df57",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11fc3f6-656e-45d4-84fd-23b67e0653ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac15a46b-13fa-45c4-a8f1-b2a831466f6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe205c48-d6f6-4538-a4eb-352e0fbca936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbbe8306-6686-4e56-a900-6933770f149d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13f286af-4cb9-4c84-862a-08787f3e8aa1",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4378377b-5d8e-43f6-9992-cdfddbe9baeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db1d515d-14e2-4f9c-9ca6-5eea84a6ea21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d42b97a3-c295-4d3b-a1f5-cf26c637d23f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6eb7246-cea2-44da-a047-f7b41a6a7afc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c51d34a-ac42-4fd1-a8b9-417b80277a17",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1108725a-1233-4f84-9fdb-33f10f365a04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a44a5c6c-a594-460e-b61c-5658b932548b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "791b488e-0afd-41f4-81d5-a9103d55b989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16f91078-bdd2-49b4-a5cb-d8db78918bcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3744f896-17a0-49c0-8c18-2e18a736b9ba",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb42c71c-4992-4d00-94c5-a71a30603946",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5abeadd0-e497-47ac-9cf1-bc9d21793d49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0022b534-be13-48fa-820f-b96f9c68e2fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d19bdeb-4b85-4c22-bf92-27f32ca32b20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ff567a-f453-485a-b020-a0cbf0d801db",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c4dd6b-56bf-429d-93c6-91f37ba0b89d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8cfcff1-79d0-41ae-88b6-a3688e60a2b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c3d236e-4000-448d-88bf-4d6bdb1a9c55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91bfb6be-e677-4227-81f6-d393b12045d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "260b34cc-aac9-47e3-a368-72906b293428",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b82f9f-7207-411b-be8a-56baa8749eef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ab85463-3378-4887-8f89-b3033796bfc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc929e96-9e19-48eb-862e-e745a34687d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d4a7e55-9dfc-4b8d-b3bc-570db3331d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f540103e-0baa-4b77-8508-920bd6c9754e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2159136b-a181-4373-9af1-cf29339ba51b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d47187f7-a346-4397-89c6-18f0c9e373ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "102644fa-2d30-4c69-8f29-cde67bddaa41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c0f8960-9d98-4984-ba97-8373ed1aed72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68901584-4a07-4612-9382-82dda249e35a",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f03ff90f-ef67-40f6-a4df-bfa76cbc6bb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f483a12-0ffd-491d-a63b-484636284483"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d7e9d20-713e-4261-b3ed-bb43a9b88d62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0ab6d2c-e621-4ee3-8498-17dac829fb0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b48ad2-c9c9-47b1-9cbc-8f24f09bb295",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9443277-7c5f-4433-986c-36783d20cdeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ae0e434-8d2b-4c38-872e-e1f183ff8b31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc59fe9a-b29a-46ed-8ff3-c620b91746e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0e34d84-444c-4def-8d01-485fafe0d7f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "532cf30f-be6f-47a0-ab5e-cf2df767cf55",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "090615d5-8f98-4dbc-91ce-e75b871a0e9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66f768e7-1e5f-430d-b27f-bf9eb42d2035"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed10beaf-2236-49ca-99ab-ab014c25f008",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfa070da-e3be-487a-8d73-ca88160b5c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4241056-610e-4619-87ec-adae7a41a09d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fec189e-c389-4213-aa25-274904cc12c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4457ff34-44b1-454c-809e-ac9e9608d8dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a58633c3-27da-4fa0-99bb-1081fae87428",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e367c9d2-2a38-4bda-8d4e-53154aabb0f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90d7d892-40cf-4abe-ac71-631c44587fd3",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3c91539-62fa-487b-b8da-d29a0b1871b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec04f69b-66be-4eae-8fdb-5ed695aef34a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a60e9dca-5c71-4774-a092-6781274da317",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15b7921a-a4f7-4766-a23f-7f16fea89cd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52034b78-a7b1-4270-bf35-f301ccb8cd7f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b8be8c2-b902-410a-b795-08db3b61f3d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c81ef60f-fd50-4766-9d26-ce034f687dab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9734006-5956-4a35-af1d-51fb144ef13a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd90797c-d503-4972-ba55-2e62c5ecd984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "919a1aa7-5995-4516-8f54-b349c1e76bf8",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c950cb8-12b8-4bca-b459-7d085bf10006",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a89dcf7-6879-4b03-b223-fa1918354d08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a7ded03-6e09-4a31-a11d-4ecec48a0735",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6d6d798-fa6c-4919-a4ce-3d6d22b5e9f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d5f2bbc-52bc-4fa9-a56c-cc028a71e5cd",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f7bf7b7-4b57-4e6e-85b8-2d726522d87f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d7b28b7-081c-4641-b084-720f4b4e2f26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57cc2e61-ca17-4800-82dc-fb3c75294634",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08d5ec2a-4634-4d02-8153-8ca3d781a756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c347ea35-9de7-4774-b090-f992740053cc",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c112cb8f-b29e-4b5a-a195-2f864f3d655b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e40a532-0a13-4808-800b-f3d1f71bba4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b7d5684-8ba3-4a36-b967-997999f46a09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e5469e7-5d96-456c-b662-f9e2496ca240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c70d1ec-ce33-4136-b719-0bb9c77fc0c8",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfa0dc81-3cf2-4213-b21a-76ca7c52c79b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60004a4f-ed17-4cfa-b90f-d8748e840800"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ce81505-2b9b-411e-bc26-778d200156f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0dcd074-6d0c-461a-bb42-b54a6d1a4fb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f3c1754-4549-4609-aaa0-550d8a421fa1",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54151560-30d7-4d33-bf4c-3f39bb5291f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d24ba877-290f-4d99-9c83-88d9adc0e61f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dba09099-6277-4e2a-b420-f78e08a257f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b72d9f2-1c90-455e-b805-e275e7b38e90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9a7c66b-5d58-4002-b3dc-8fa59a7a9d34",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15c21a29-fabd-4b44-ab5a-4a5e2a8c0a21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1c5d0a9-a03a-4650-aeaf-047af5d3902f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae89ba35-5081-4c68-9aa5-cf720fc39913",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0381f79-b388-45b7-bc7e-04a921d8c985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a61c6b50-ffa8-4352-be2f-0f63b480000c",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea7ab8c3-c8dd-49db-8f65-6b231cdbc164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d4725a9-534a-48d5-9046-7b1220203a8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf3ee327-1950-4df1-959d-0e3818ac736a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "127f269e-6a24-4a32-b043-b80f2cc3b52b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6160333-fc05-41b6-a8ec-d492076ee9a5",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b681f5d-9a37-44f6-897f-89302a012831",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72f63d14-6f30-40c6-8ef6-89326d09ed44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60866b5c-bf73-4352-ad84-a73afb128bab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af973515-e7b1-44bb-90c7-892110e78b9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62df44dd-3084-40c9-b4a5-6686a6e20b97",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97911c15-8ac1-4b31-abe2-8a66693ce5a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd421a29-5dd1-4a38-ae25-0bb3befd6b02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00599a11-d44c-4f07-8f36-3c787eb0add2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f0fbcde-9bd5-46f5-a4fe-af9aefa9235f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ed76ee-fe01-480a-b9e3-db51daac70c0",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80fa7718-302c-4397-99c0-0f5021b91b2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f535edd0-575f-4e13-9e67-91ed1d231b9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5622ec9f-00d3-4ef8-9b74-e54fe72d72ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c4a0ee7-3d2d-4526-83b3-831b15c7320a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2858a150-2152-44e3-b03e-115b7727f006",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66be7fa7-0040-4261-a073-3bdfa22cb216",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b37d81c1-72a6-4f02-8344-590f7a2129c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de27d29-d865-4745-9b4b-707c6435fb3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb50caf9-9908-46c9-b88c-d4322a38174c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2047be20-40fe-40c1-80a5-448e36ddd401",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42e30776-4938-40e8-9536-f7726c74ce91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1fdadb8-94bb-48a0-8592-9584b9eb0420"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79870eff-667f-44db-aaf7-7a10a235ef14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3da5e692-b8d4-4ce5-b16b-8249cc6507c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9406216c-9c3d-4c1a-93df-045f777f2bf5",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f506e44-f4c0-4d9d-ac3e-4fcbaca6ec62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06d782b4-9fea-44e5-b83f-b66ce1c373bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80234bcf-d1b7-4ef8-8f6a-8051c96ffaa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7e5efdb-ceed-497c-992a-fecb85a9db1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b11bc77e-838a-4968-aa4f-c9fb7da20cb2",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d13988-7c6f-452c-8111-68410b78cafc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2195f11e-6291-47d3-9657-854626ae0a33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4c978a8-ac85-4773-8365-59be00da3076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9cee19d-e4b3-4249-b457-de0ced445a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44dbbcd4-e967-4fa9-a14c-5e327b9d4337",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d16616b9-7bb1-4f9c-a1a4-c316758ebcae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15002892-5f9b-4c25-872d-adcac849692e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e8d62c-d504-4b7e-883c-daaf9a0687c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa11c483-1cb6-47e1-bd2c-e2130007d9d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70b02dac-83e8-4b6d-b493-229d4f84e22c",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9100cf00-3f2a-4e7e-9b4e-79ca934cef88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf84b4ee-4439-462a-8c63-ecc480634856"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "493bb488-a2a0-4da5-9cc0-93efeaa15c7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76f3a73c-a1cc-45e1-8a3d-402909da4f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d112490b-bca0-4b46-8e68-37e8b1069a99",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8fb00d6-c465-43b9-861a-bc4541fe558a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27fb9bac-801c-49a8-bc0d-408ef2d56806"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1bf3067-f7c9-4c96-9df6-47060748c274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8838c2c5-ad5f-4894-af93-d22276e87d9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "644bceaf-25d8-4809-8fc5-8bb0a62a9977",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe3be90-a2bb-4a3f-8567-3756016bfb06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a8866e0-6e79-4983-aa8c-c9b084c46a42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a5d806f-5654-47da-a56d-62bacf9b7ef6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2a49933-87e9-4a5b-9afb-fdc3291471cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8899cc64-40b1-4c91-9f6b-be63a6133d09",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e7753de-f6d3-4508-9033-17004f3ad2dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b1dee11-a6d1-4e6c-a0a1-a50a3ed4a6cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe67b51f-1d8e-4ec2-9ed9-1e731a7ce71b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cfa16f9-17da-4e63-9c85-f23f60797d31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b386e22-5104-4dc1-af67-5766819fec18",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "040bfe70-71b0-4947-b7cc-3943d2e4fe0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0753dde2-9c78-448c-8a5f-7de0d821cc12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "320f67a2-d286-4bea-a5cd-df5b07838ee4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87c32394-f194-48ca-b3a4-dab499da4b25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9c30b6-9d83-4cf5-876d-814ef2814aa4",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ff06fe-ce35-4c89-af55-61626f1dff2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bebaa482-fcd9-4307-b155-c626110d5115"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3310580-3223-4d58-8f96-514a5e046a59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec9ec2d7-4cb0-41c7-a81a-c2d85888cfe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7167b0ae-1976-4f4e-828d-31d03738ec1a",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "899b83b7-fab0-4fe8-b2db-009325eac129",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fa780dc-a695-4b2b-b14c-b645416ac4ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f2dc7c-9478-48fb-91a5-40f5fcdc9b4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a369b68-19d9-4764-84da-9fccbd7592a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eba0881b-4092-45cf-9bf0-6c0de85171c4",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42825d2d-b08a-47fe-9ea8-8bfa9a8ef9df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b273527-a3e5-41af-a06f-abb816f420c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac7a2de2-da28-446a-881f-676b4bf3cdd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25a063ba-2069-4798-a4aa-32ea8f415bf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db54aeec-b611-4b41-a21a-e31c4ab538cd",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2dd4be4-00ad-45a9-8200-39b90a37e3d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "803196da-2e7b-4292-a49a-475a8d9d4da3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4b6c149-c1e2-42d3-95b4-325f9a081a1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "999ed4d4-6485-4afb-9067-6dac62ed7d22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25af5c07-63d7-4d8a-a181-a1d6e6fd8b71",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8284735d-80f9-42a9-ab03-5da1ce6a705f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c3267ad-a849-456f-91f1-cc871a7de5b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63b0157f-5071-4b85-a604-2b7257290079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a55e18ad-7d3d-4d76-9321-633a4834cf58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "709059ef-5969-4acf-bad6-2602637e54ef",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e44c5c1-d94a-40d7-823f-eab3003dccb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29b48fd8-c675-4d52-b108-9894a0518180"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9edb06d7-7492-4a0f-a514-1a5586a8f6fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11c429ea-472b-4059-9dff-c49f96ee7568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46050ee2-529f-49cf-843c-4591d680efb7",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d61623ee-7532-4c6f-92eb-fb2336090f86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8105194-f59e-40a3-af54-1047327b6423"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "247dc955-583b-4ce9-85af-b3bfbdb84f5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70ab2046-977d-4f2f-8d05-c23dd12d234b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a64a56ef-58b2-4027-bfb5-cd91507e6eec",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7506bde-2d65-446d-9411-efd4a6ed5432",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68471332-08cf-4158-b26b-61b1a441918c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38cefad6-da65-424b-b7c2-11be23908cfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2f8e046-d6bf-496d-9fd7-2417e649f89d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68a7c283-0edf-4c9f-bea6-dbfb3c6a5fdc",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d40a31e6-a965-4e10-b94a-221cc10e5b63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa92ebe5-0b61-47b3-bf6f-1055145c564d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d5f21fe-5aec-4b8d-b989-dbb357912762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45736910-de89-4965-921d-68c1149228f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92842860-8d87-4f08-91d4-440f7e1f67ec",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "742fe47f-757b-4a39-b0a7-a6267ddc6ee0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9348cca-2a6b-4ccf-810c-db0209ada27b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20d1c34c-db28-45d1-a8e8-75a9a764d270",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae49e2c1-f2d6-497e-8d67-7a7f56321338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e6ebe1e-4ab3-41d6-bc28-175eeb3ef6dd",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d2d16a3-1e2f-4766-a13f-dac8c87264c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4fb96c0-9a23-4258-b404-d66b944a2257"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f7d230-4681-42d8-8fd2-438b78fee99d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49e9a004-5532-4795-95c2-79623e2adb6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a562dfff-7233-40bc-b63b-30cc02bd68a8",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3fa70d0-caef-4c79-8dd2-f93d3f903759",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11e550ff-5db3-4b2c-8a55-5c83d3afaf17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57199c8f-d07d-4372-b833-0f5b27e5cfa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ede61e5-d5e7-4ae8-937e-daed849ca013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b97861-9cf0-4eb4-ba34-ed6b130cc249",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e3ab154-effe-4d75-8519-aa9e4e2ee40f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab6ca2ef-b063-4275-892d-d122f641e322"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bca3105-0568-4797-a5b4-925d1a5e3dbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2ef2971-04fd-4428-9da4-e8b10fa40f5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83644bca-f298-4538-aaaa-74fa5a008795",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c24af2bf-18b0-4fd4-8d48-a3b64aa3efd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b25a2001-bede-4a49-8c42-63cb6f6ea5f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1437f4bb-4e30-4412-9b94-41cb40389b33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cc33a0a-967c-4757-b5e6-5e41e94bc8fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01998a45-04bb-4905-a8eb-57327fc0a23f",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51cc3e13-d8e4-472d-9d4b-dad4af674879",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f45309c-8951-449c-bc68-11e5ec4a7031"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f93a7f-1bc1-4ca2-a672-a223d69329fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdfb7e9c-51e7-40b2-bb42-66e2dcc9ac95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "873c2ffe-4dc1-49ce-be18-9e8d48c03d0c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e21dafe3-7a83-4a3a-b636-2d238174084e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58933dd7-947b-4d06-a439-dd1ae4f97f09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab10f7ea-08b9-49cc-9aaf-a49236f57594",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccadc9d1-a1d1-4381-bacf-32dc19d8bd6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aa729b2-e9af-4e1b-998a-db8927b8db2b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ee2f3e-5861-4f96-816a-af382e997a1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fd9b1e2-e80c-44fa-8f13-014dc1aa1426"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b46839-19c4-441b-973a-c33324d6902b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dcadefe-14cc-48fd-888c-ee7b728b6e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e649ad-6ae1-493c-bc22-03932ec46fa3",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81808d97-2c5d-4933-a529-4cf113ce6b5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c9ad6aa-3928-4128-83aa-60532082b70e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cabc258-c5d7-491a-afb0-7c6d72438c2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4eed286-183b-42b4-81e2-c8bbc6c9e504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3061ac81-6e97-40a5-b5b8-f9be2d0c12c2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae003049-5016-4b71-8a60-e4662715c6a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37a72446-db8e-44d2-b3b1-2101e9489f6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c436b40-b4ce-4ee4-97d9-aae485ec418f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8f2c79a-7a24-4def-8609-7d3f8b8d43a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a00ae695-70c2-4a2f-b5ee-95dc36ef482c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35bd999e-480c-416d-aa29-cf3d01355c60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "447c0d3c-41ef-489d-83f9-6c2cd046e82c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9206321-a033-4316-ae3e-570411c6bf13",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a359d5e0-d3a4-4ebe-bf28-9c922641df8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8acf160d-f7fa-41a3-b1ec-107c39a43e78",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9459aa2e-9703-41c0-a3b2-7acdd330a2e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2bbe7f4-24b5-41ac-8859-d4c14a6a30d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a2cc2b4-e0ba-47a3-95e7-87f138fc71b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1018655a-58a2-46fb-b9b3-f57d9fb62058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c55fb2cc-a851-40d0-ab86-a494e7dc4f50",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8b77419-f7a9-498e-84b2-14c54896927a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a09c775b-a02e-4fd8-9210-620436c39bb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c9d0a5-374f-4b1e-b473-6027e5109fb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e394eb4d-50c9-46fd-b995-ec3159fe0a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "307012ef-425d-493a-b481-4023dc0cef6c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c7d0e30-09e4-4d65-84af-764299586c8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aad301e6-fff0-4ab8-9a79-e91afc331583"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13266880-b9e5-4ac5-95cd-0b54b76d6f36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3756a820-b355-4f74-8d65-c4ad00b591ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96290af7-e9bf-41e8-bad0-38c1f4ebf325",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ae8ee42-36dc-4ac4-95b3-b5888c721fb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9875a7e9-d9d1-422e-9b4a-2bc70a4de226"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4514f3a9-9b0f-46e4-9135-3d2f3211ba85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d2286ae-708d-4e74-aaa4-e32d3339b404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72741a0c-f150-4d0f-b166-053522529b75",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf59d9c-33b1-4e27-b594-ebc14df7ba88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9d6f866-be97-45d4-abed-721618a85968"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bb55831-d5ed-4f91-887d-be7e84ce3a12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa0f768e-4a32-4d33-b12e-8073c018e2c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2a314a0-bd38-4511-8717-d10eb2cf9129",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d7ce86b-6c36-4851-ad9d-15aaf2f93fec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "624d8986-b4f2-47b0-a985-a106e02f93e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "465d2105-8639-4b67-9ae8-f6d0596931a2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3e1d372-2ba0-4564-b881-107f292d2c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf4668d-9ce5-4d2b-8f45-c42331dc063e",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c03773-bf42-4f75-a8a1-f4eec923c80c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23ee801f-6f19-4463-a744-456c2025e2d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca7c2da8-c8ec-4844-8c9a-c3dcd222360f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10cd3687-16e4-4911-887a-3d10f9a17e79"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a86fb586-3370-444c-9a6d-777748b16884",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "64e99b01-6f72-4379-802b-8f3fe6f3ee1b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "49b95f9e-ac6c-45ef-8578-bcdef997e027",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "97699d8b-6723-47da-9021-e4f6ba810e66"
                    }
                  }
                ]
              },
              {
                "id": "34c922fb-f975-4d7c-a201-69fe8451981d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "42e45fb2-c838-4f61-a0c2-8719bc91c0ed",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "939c892a-e36e-4a6e-844c-d4dc6e5e6ce5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "11e668b6-88d3-4bc7-9725-d4fad58b85a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fff3461-0fb5-43ae-89be-820a3620ddf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "94d4fd75-1738-445c-86ac-fe59b26ae39c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16b45d7f-270a-4f90-a2eb-99b3a803802b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "130a99ad-2067-4d42-ad5c-525a41efde74"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dfb4a5c7-dfcc-47dd-9bab-948cf22f9cca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "17953db0-7fc3-4696-b836-6c200f6029d3"
                    }
                  }
                ]
              },
              {
                "id": "de731f93-8e8e-4920-9a48-47d101d2d209",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "423b1337-4365-41e2-bc90-368223eebaf2",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8069cc52-fedf-4149-a930-48554e0570a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d1385952-6ea1-44c7-a304-3e933c70cc88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "069efc82-19d4-491c-93a9-abb1e7a55440",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a705792-5760-47dc-964d-c4aaf3b8b3b6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c6777e16-dc63-4640-9c9d-ce945276dbbf",
            "name": "Positive Testing",
            "item": [
              {
                "id": "182b2233-8225-4741-aeac-4ab06543e268",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fc4f3a4a-ead3-4335-9b1a-bddbea33da96",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "64567552-d4a4-4b9e-a5cd-662ba03c7b63"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0e2df653-ed95-4b1f-b5cb-fc5a0bd6aee2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "235c5ff1-12fd-4f83-993e-9967e1f10ad5"
                    }
                  }
                ]
              },
              {
                "id": "3d716c3e-c5bb-4e59-acc0-8d7962a0f2fb",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e0818f74-7426-4c30-a247-e9425d5a1dcf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e5c6e30f-8e9d-4fe3-afd4-a906d17765cc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7af5cb6b-ab9c-4372-b678-d675f8875546",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ceba0992-45d5-4404-b79d-665fda955c0e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2e4fb9df-1244-487c-9325-1b13659b64ad",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b73b3e87-34e3-4999-8e57-94d3d6fb9fb8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2f4c8278-1b25-416d-ada3-a42b7797dbfe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "635b6a31-295f-4968-bd94-1e1b4c36797a"
            }
          }
        ]
      },
      {
        "id": "e9348aec-e08d-499e-9832-d880daa1a8b9",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "83e29bf1-5389-470b-8348-7d59471669b9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "05848f5a-e3b0-4bc1-b7db-d0be5c83bcd5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c0ccb0f1-a2db-4c95-be0a-520eca4ef977",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c2fe0f4-b27c-45d0-bcb0-d6e202ce9c92",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "76407d69-260b-4a30-bbd0-742d8ce55489"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "677cbda0-4b38-4bd4-b455-de96e428bef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d7c1fd71-0200-4efc-9242-9c3dffb6de3c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9dae4682-66df-46c5-a210-7bd5e2eb7bec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed5b9ac1-bdd7-4d4c-998b-dcbc7132482d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9f25135c-1962-4449-a2b2-fb7b3df68705",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2559a664-478e-4c58-b4fd-7fa9c4e93529"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fb996476-1fc1-4e73-8d52-22cd2365b38a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "047b7cb0-cafc-4850-a33e-905186d91467"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c2e82d62-7120-443e-a9ae-6dd74320e072",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4fe1f106-5c53-4731-9acd-0fffb449bcff"
            }
          }
        ]
      },
      {
        "id": "b01074b4-c471-4460-98e4-881391c7874b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f2e4b10c-cd4c-4044-acf9-9b06c2c1bcf6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "61b9297e-bab5-45f8-b73e-05728cb704bc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "692a5603-423d-4fe0-86f6-daebde8cf3b1",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d03ef79-7c13-4724-9b36-235cc49bee70",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "edb39f46-3d25-4d9a-bdb8-f0edddf73622"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc50fcb-e951-4db9-8248-86f33bfb37af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d582cf1e-88cc-45e4-b118-a1d493f3078b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "788a5bbc-8bf9-48c7-9bdf-b18ea35de444",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f753b0a3-8fc2-4dd3-a2c0-fe9562500cc7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c39b22bc-459e-48fa-bf3e-97ae110802d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd1b4611-f98e-486d-8fac-cd36beac8a68"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "35b2cb86-d6b5-4df6-a140-a9b3c2cf2efa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9f682e8e-492a-41ca-bcf8-c472af8096cf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2269579f-7e57-4268-a94c-3b8f8fc3f8a0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7ec7679b-622e-46c2-a3f0-287afe1a115f"
            }
          }
        ]
      },
      {
        "id": "1f2a12a2-8a66-4ec1-a9b1-762c92613080",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "251ed7c9-4589-4cf6-a9ea-f643dd2e0a30",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7d3bee36-9a09-4b05-a5d4-4b116acf1546",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "88bba0b6-121b-4bda-a060-a15ed0782ddc",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "987b958d-57c1-4394-b360-8b8374b799a5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e57a84aa-1842-4a85-8f02-db20f5ad2276"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "087bc195-e3e5-4539-a648-a74b0b64c81c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87524311-ca3f-495c-bb99-f7ea76b94d01"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f22d9302-fd88-46dd-914c-51998aa16ac7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc099040-5813-439a-bf47-d722bf0e38e4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "54702521-fc92-4857-8fbc-a80602b7787b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "51514d76-6c4b-4550-b038-1b8516962c5d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ceb6ef45-27fd-48ee-9f5b-5b734efd42bf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "26f00f4b-98b7-4b81-b2f7-0ab518090072"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "76068a84-9a82-471a-b7b8-3c03d046a0ac",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "932a5d73-73ad-4423-88bd-e5a75fbad5b7"
            }
          }
        ]
      },
      {
        "id": "b34a1d53-58df-46ce-aea3-7b909dbf421b",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d4c46821-d754-4f2b-b8f8-a5c530e314d3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1790303c-fdd5-4157-bfc3-eda6724c5003",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ed6e2435-318c-463b-b96a-8c522b302081",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ba32cc41-5bae-44d4-9b62-6c91949bd2ec",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2fb1d711-22c8-4de9-82aa-57caf6cdb4c9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 65.85964912280701,
      "responseMin": 9,
      "responseMax": 638,
      "responseSd": 72.00307951418482,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1703205309455,
      "completed": 1703205337671
    },
    "executions": [
      {
        "id": "e1a52297-50ea-40f3-a602-b5638e1ae80e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "8085c220-713b-4ca6-8dde-87086e42b8d9",
          "httpRequestId": "7d1b9ada-f8a7-4d1c-9f02-2017eb31f676"
        },
        "item": {
          "id": "e1a52297-50ea-40f3-a602-b5638e1ae80e",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "917a2b6e-861c-4e70-a3d2-982a6770d9f6",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 0
        }
      },
      {
        "id": "d595662c-09c0-4a4e-bf42-63c4f0a3e53e",
        "cursor": {
          "ref": "b25ccf64-4192-4f95-b5e7-1184e8f79a55",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c699f113-625c-4436-8c93-81266c720c29"
        },
        "item": {
          "id": "d595662c-09c0-4a4e-bf42-63c4f0a3e53e",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "a0df2aa5-e6c5-4d92-8236-0a497fc96fc8",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "ddd1e841-ab08-45e0-ae6f-eb808b54128b",
        "cursor": {
          "ref": "8c188704-2e59-4490-a081-e97a7943bfa1",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4bcbcb6c-4288-465b-8e27-5763336d534f"
        },
        "item": {
          "id": "ddd1e841-ab08-45e0-ae6f-eb808b54128b",
          "name": "did_json"
        },
        "response": {
          "id": "f8a8a416-5714-4880-aa96-fe1b0fa9fdb7",
          "status": "OK",
          "code": 200,
          "responseTime": 157,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cff599a8-867b-4a34-b2a9-d7a70375af3e",
        "cursor": {
          "ref": "33ae8211-43f8-4479-bca0-c888e9012a89",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6a79a179-d4a7-4bd2-a5c2-64ff8a21d85e"
        },
        "item": {
          "id": "cff599a8-867b-4a34-b2a9-d7a70375af3e",
          "name": "did:invalid"
        },
        "response": {
          "id": "babd8f6b-6171-4719-b2c2-dd23f35bc377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cff599a8-867b-4a34-b2a9-d7a70375af3e",
        "cursor": {
          "ref": "33ae8211-43f8-4479-bca0-c888e9012a89",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6a79a179-d4a7-4bd2-a5c2-64ff8a21d85e"
        },
        "item": {
          "id": "cff599a8-867b-4a34-b2a9-d7a70375af3e",
          "name": "did:invalid"
        },
        "response": {
          "id": "babd8f6b-6171-4719-b2c2-dd23f35bc377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a2589fc-7a99-44fb-b4da-e2793b2feadb",
        "cursor": {
          "ref": "d4a6c34d-7f84-49be-9eda-36d39e30c27c",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "97978bcd-4462-4378-9c55-4df30e483fc8"
        },
        "item": {
          "id": "7a2589fc-7a99-44fb-b4da-e2793b2feadb",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b981cea0-c086-46b8-825b-08913885926c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 97,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f75dca05-df9a-4cdf-8bb3-1d1cb8d22ae4",
        "cursor": {
          "ref": "9fa188a1-9868-46a7-9630-8809d99c215a",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c1fc8921-536a-49ea-bb57-7862b64d3498"
        },
        "item": {
          "id": "f75dca05-df9a-4cdf-8bb3-1d1cb8d22ae4",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8d2def70-ac05-4c70-b943-655e3c44f79d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 55,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd5dabc4-0eaa-452a-8528-8b4463e4aa48",
        "cursor": {
          "ref": "659e7e71-398a-4900-8cf1-4b4a8472fedd",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "08f83f84-54af-4e85-bfd7-c6b7bbdc3ad6"
        },
        "item": {
          "id": "cd5dabc4-0eaa-452a-8528-8b4463e4aa48",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "1037f6fa-dda7-4a38-9695-186c3e857049",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf2f029-a3f5-4962-869b-5f514bf2ab37",
        "cursor": {
          "ref": "4c4d2ba9-ccd0-4849-a677-52a0ba8bfe94",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ff6c5680-60c6-4436-9f8c-644228b3d858"
        },
        "item": {
          "id": "ccf2f029-a3f5-4962-869b-5f514bf2ab37",
          "name": "identifiers"
        },
        "response": {
          "id": "225a2d64-1f50-4b33-9f5c-8759c5820094",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e84ad83-ba0c-4729-a639-c9773b4f9957",
        "cursor": {
          "ref": "6552c678-e785-4b69-8078-5088845d42e5",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6cc79989-26f5-485c-b9b6-0505348d76b8"
        },
        "item": {
          "id": "1e84ad83-ba0c-4729-a639-c9773b4f9957",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1d507e3f-e67f-4f24-8e10-4209ad6a462b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef60eed2-1546-4449-bb45-fb3c6bfcafb5",
        "cursor": {
          "ref": "77c64506-71b8-4c2b-b55a-d96a17cfaac0",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b7266155-12e8-4e4a-adf1-d3d89b71a137"
        },
        "item": {
          "id": "ef60eed2-1546-4449-bb45-fb3c6bfcafb5",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7846a0a1-345d-4fcb-b5ae-77f85a9f9099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54d19314-0b89-498c-9cfc-8231c3adbea4",
        "cursor": {
          "ref": "685882fd-f961-4715-beca-a01f179eb32d",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "623a59ca-5bf3-447b-a2b3-967e756f7d83"
        },
        "item": {
          "id": "54d19314-0b89-498c-9cfc-8231c3adbea4",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "0abc81f7-33c3-4b38-b349-0f57499d7a2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ad4b4c7-e309-4008-ba86-6b2168f35c13",
        "cursor": {
          "ref": "35eb0a40-4f07-4fef-bdd1-fda268c3180f",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "81016d51-eb57-4621-9db0-933b8826e66f"
        },
        "item": {
          "id": "7ad4b4c7-e309-4008-ba86-6b2168f35c13",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d3d46de1-81ef-40e9-bf69-17e6d7566f8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86cad875-1d6e-4e51-bb7a-b650825a7ad0",
        "cursor": {
          "ref": "365b6b5d-42c7-49f7-9b04-5dc8148f2313",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2ff94b73-bbd0-4d20-aeb6-7adc4c18921b"
        },
        "item": {
          "id": "86cad875-1d6e-4e51-bb7a-b650825a7ad0",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "df8706ef-a76d-41a9-982a-e2a3bb196c27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63dfbb54-1a69-46ee-b6f5-39c7323d00c8",
        "cursor": {
          "ref": "83d3c208-1be4-44d4-8526-a402599edf99",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "dedea1f2-463d-4e8d-8d67-1b8672bc9348"
        },
        "item": {
          "id": "63dfbb54-1a69-46ee-b6f5-39c7323d00c8",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "05e88d0b-b408-411d-9c2d-780596754dc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "644876f5-203a-461d-9c44-b298d2ad9b73",
        "cursor": {
          "ref": "3822160c-3794-4949-8aa3-386766a6d3a4",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8723b751-08a0-47a7-992d-f84c43980d73"
        },
        "item": {
          "id": "644876f5-203a-461d-9c44-b298d2ad9b73",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f1980d32-105a-4b5d-9e84-9e02945fe392",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "254ba024-6517-497e-9451-5346feacc03b",
        "cursor": {
          "ref": "f25be40b-2d42-400d-82de-aeebebfcc13d",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d0d69b53-5c0a-4d00-b5ba-2444280388ef"
        },
        "item": {
          "id": "254ba024-6517-497e-9451-5346feacc03b",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "1667b1bf-67e4-48a8-aa95-4cfb05f787a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e1a5b52-d4a4-4809-8b2d-bb42010d625b",
        "cursor": {
          "ref": "de95028c-16a9-4b86-842e-ae7677021030",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "7191d5f5-3142-4916-a0e7-2feaa5d92a0d"
        },
        "item": {
          "id": "5e1a5b52-d4a4-4809-8b2d-bb42010d625b",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "4a552755-8f6f-416c-9df3-8c15cd631761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05e7c4db-51ad-40b5-8a9b-017ca38fc8e8",
        "cursor": {
          "ref": "24246df0-b0db-4539-a3a4-c5cf4fcae0c4",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6187d72d-0ae0-41d5-983f-84713831d9d0"
        },
        "item": {
          "id": "05e7c4db-51ad-40b5-8a9b-017ca38fc8e8",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "06201625-1465-4b5f-a8c4-eebc9efca60f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11b81465-db7e-4336-a0e0-d3b4dcd0a1d8",
        "cursor": {
          "ref": "7b024fdf-493e-461a-a8ce-cc5187bc909f",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "43b68c86-0eb6-4a29-8fad-11ad5bf803e2"
        },
        "item": {
          "id": "11b81465-db7e-4336-a0e0-d3b4dcd0a1d8",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "10a49676-9ec3-4ecc-a314-73444550337c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d521872b-d342-472b-8de8-827ee1e45939",
        "cursor": {
          "ref": "e040f98d-84ee-48ea-9519-4102bda47f5e",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "6197e7bb-27d7-452d-95cf-7cac49eca1d3"
        },
        "item": {
          "id": "d521872b-d342-472b-8de8-827ee1e45939",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d0088fb9-6368-48b8-936c-95e94e449fb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2854ef67-4f4f-4066-b7d8-8815943f3eb1",
        "cursor": {
          "ref": "1d022ac8-14c7-4ab3-a0f5-17696a273e95",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "e698e9c6-b50e-46b2-a45b-c1367f5171c1"
        },
        "item": {
          "id": "2854ef67-4f4f-4066-b7d8-8815943f3eb1",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "580d5093-1295-4de4-b582-d6955889965e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "659f387e-a87a-464b-840b-a0135941c999",
        "cursor": {
          "ref": "8031f807-18ec-4f51-b354-2d6a91b12736",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a920d922-a1fc-495e-9cfc-c51a70b2da6c"
        },
        "item": {
          "id": "659f387e-a87a-464b-840b-a0135941c999",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "a91980ba-abc4-4c20-b891-3a030326f281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4015a3fb-a604-4b18-84de-66faaae7608d",
        "cursor": {
          "ref": "e5af66d3-4537-4e85-8d59-6b5f4796d1f4",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "3543eade-128f-46a7-8f04-0707707ce2e5"
        },
        "item": {
          "id": "4015a3fb-a604-4b18-84de-66faaae7608d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "b7819a20-ae5e-4f44-be63-a322af891988",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13047309-14f8-4f39-b5f2-357b5925122c",
        "cursor": {
          "ref": "ccba4d5b-8a8c-438c-a9d2-3a2d16d50691",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "408127b2-7371-4b49-8908-c781e288a949"
        },
        "item": {
          "id": "13047309-14f8-4f39-b5f2-357b5925122c",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2b1a1fa1-3b01-44b5-bff6-83726313caf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9774296-efe4-4326-a751-e7aca2ae273d",
        "cursor": {
          "ref": "29709776-79ac-4550-ba40-cafadfd9e58b",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "89d9e4bc-10cf-490f-9fb1-32b6e3c7fd73"
        },
        "item": {
          "id": "b9774296-efe4-4326-a751-e7aca2ae273d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c66e6ab4-18e4-42ae-ba8c-0e7ed1726c49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82ab5a80-eb8b-49e3-b3a6-8b29cfe0d098",
        "cursor": {
          "ref": "079b5bef-9cc2-470a-a7eb-0856f3b7bac4",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "daf48169-c849-4800-8309-d6501f435c5b"
        },
        "item": {
          "id": "82ab5a80-eb8b-49e3-b3a6-8b29cfe0d098",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ea4d43ba-999a-4ffb-9048-3e7ce0715b3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4286f17-bddf-46cb-a103-133d6e5c963a",
        "cursor": {
          "ref": "f799c388-8e18-4585-89c7-be2542ee47d4",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7dafd777-9d3f-46a1-8fe0-0bde06d9f2fb"
        },
        "item": {
          "id": "a4286f17-bddf-46cb-a103-133d6e5c963a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "450bfca0-cf31-4514-b8d0-bc50826d9c1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bca01e44-55cb-4923-8084-6b06a6d685f8",
        "cursor": {
          "ref": "4ba49dbe-58fb-42ca-9ce9-fc875b01b8d1",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c884c4c7-5d69-48af-a2ac-b32bec733e67"
        },
        "item": {
          "id": "bca01e44-55cb-4923-8084-6b06a6d685f8",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "acae4fb5-85fe-44f2-828d-dc6cff2c8f2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "283b778d-6928-4476-9eef-a4cdeb1034af",
        "cursor": {
          "ref": "00b6133f-0e71-416b-8f5a-b3225d2e1d27",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "89afafba-4e5b-4ff8-b73b-77d78c36f8f6"
        },
        "item": {
          "id": "283b778d-6928-4476-9eef-a4cdeb1034af",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "20a7df96-16c4-489c-8853-86d14d51e3bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9af29a3e-cda0-4899-a671-6ab1934c15f5",
        "cursor": {
          "ref": "4323d1f0-24cb-4423-a929-00b3fdd87f67",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e61e2eb9-315c-436b-8ac8-4227931c36e9"
        },
        "item": {
          "id": "9af29a3e-cda0-4899-a671-6ab1934c15f5",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "bf224b6c-ba90-4c97-9dac-31b45017e0c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ed0fcff-539d-4d17-99aa-97b062f15ed2",
        "cursor": {
          "ref": "0c167754-6140-45c5-90c0-b1693764ec3c",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a96b3f16-aa8a-454a-9063-611e6b845772"
        },
        "item": {
          "id": "7ed0fcff-539d-4d17-99aa-97b062f15ed2",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "5018fd0b-f9ab-49f9-b735-f784769c1107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5498c56-f6b9-48ac-9a0c-390c43687990",
        "cursor": {
          "ref": "242766fc-dca3-4d43-b046-4d1c996a0d2f",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "de5304ad-4b69-4e2f-9758-e38836f9cbcc"
        },
        "item": {
          "id": "e5498c56-f6b9-48ac-9a0c-390c43687990",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2fae6753-7a9c-4229-b5ae-f07de65f6c70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1be09b34-cd92-405a-b54b-9dbc1d03b091",
        "cursor": {
          "ref": "7543c80a-5dfb-469c-b118-23c427932ae9",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c3cfe2d0-b1e5-4bb2-93dd-598b4c2014de"
        },
        "item": {
          "id": "1be09b34-cd92-405a-b54b-9dbc1d03b091",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "4d1a57b3-25c3-4551-ba88-0c00b21ba1b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34504602-c058-4956-9fa6-3b7f5ccecb9d",
        "cursor": {
          "ref": "1ccdf046-ccd6-48b2-add8-d6ec008cc804",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "3fad5e8e-fbcb-4cc7-bc39-2f77b0a6bbed"
        },
        "item": {
          "id": "34504602-c058-4956-9fa6-3b7f5ccecb9d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "7273e088-e247-4548-965d-64b407982f89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bed56d1-5d4e-4901-a031-ad7e2356a55f",
        "cursor": {
          "ref": "0e059325-a950-448e-9700-d7a8be5b7898",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4b86d6ed-a4f3-4f81-807b-9a2fd5a3665f"
        },
        "item": {
          "id": "2bed56d1-5d4e-4901-a031-ad7e2356a55f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "1d76e5ee-f2ff-4fa1-aee9-f17d6282deec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfbf0f27-0ec4-49e3-8583-1fc13acd1187",
        "cursor": {
          "ref": "03f5669e-6cb7-4823-ace4-8c452f32cd24",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "1eba9a7e-f434-4ef9-8a9f-d70b86514f28"
        },
        "item": {
          "id": "bfbf0f27-0ec4-49e3-8583-1fc13acd1187",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "a7f5bd0f-a925-4499-9a74-857f8cea1188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37b6a337-acb3-4cfa-b912-c796a48a10bb",
        "cursor": {
          "ref": "8855c84f-161d-4594-92ed-7c58fa149a7f",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "23709602-2b32-4280-b68c-b0ab385cfeb0"
        },
        "item": {
          "id": "37b6a337-acb3-4cfa-b912-c796a48a10bb",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b065641c-ae6a-4577-a924-7f88390edabb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3be801f4-7815-4158-b3fe-05693a74821d",
        "cursor": {
          "ref": "bbc9cac5-b429-4170-b679-5aa5b9d9b61e",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "055c1685-2f77-4d1c-8c64-13ea8d9a18bf"
        },
        "item": {
          "id": "3be801f4-7815-4158-b3fe-05693a74821d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b2ac391a-00f1-4b6a-b194-ef71bb7e4d90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "064b8d67-7529-4e89-a8c8-ad01c51d231b",
        "cursor": {
          "ref": "b7b51843-aae2-46af-b709-f4328f2d41c6",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "611df8d0-9868-4874-abc4-2a38f8207d77"
        },
        "item": {
          "id": "064b8d67-7529-4e89-a8c8-ad01c51d231b",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "56392907-47f7-4191-a9e5-39674f00ac28",
          "status": "Created",
          "code": 201,
          "responseTime": 638,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "82c6f81a-ff19-42cc-8578-e4c8022ded5f",
        "cursor": {
          "ref": "fa0edc96-55b3-4ff9-a759-6d31f8ce6dd6",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "05470d71-b1e6-4e40-b47c-932e5fb7492c"
        },
        "item": {
          "id": "82c6f81a-ff19-42cc-8578-e4c8022ded5f",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "8e058298-2d7e-45e9-9ef2-de038447aec7",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "1beb10dc-4b85-4bb7-b753-bfee04196268",
        "cursor": {
          "ref": "10c5c719-c28f-4f71-a430-d61477b3b743",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "8a8ac945-054b-4904-87f9-8e29ff7d842c"
        },
        "item": {
          "id": "1beb10dc-4b85-4bb7-b753-bfee04196268",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "4edc63a0-e8df-46fa-a843-238cafe8a66f",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "31637590-0d6b-488d-bafe-9a41b8d900db",
        "cursor": {
          "ref": "425b5732-1ad8-406b-83a6-357dee97aff8",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "6fc00ac5-82da-4658-aa54-ec8ce7a92515"
        },
        "item": {
          "id": "31637590-0d6b-488d-bafe-9a41b8d900db",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "60b813fe-cf06-43e7-bdfd-1829cc13b3ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c6efb72-3ec6-4202-bf7d-407875c3085c",
        "cursor": {
          "ref": "74eaa640-4eec-4e44-a774-5fab6bb828da",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8c2ccb39-3a26-40fd-8633-3fb41d0592f0"
        },
        "item": {
          "id": "4c6efb72-3ec6-4202-bf7d-407875c3085c",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "de46ae35-7873-4577-8ce8-321e9f55911d",
          "status": "Created",
          "code": 201,
          "responseTime": 321,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "d7487b3c-55bc-43f4-9b0e-7663cd9beba4",
        "cursor": {
          "ref": "a40e3f88-822d-46be-a0c4-b69d48268d36",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "41213500-6466-4080-b117-e15b07f5de0c"
        },
        "item": {
          "id": "d7487b3c-55bc-43f4-9b0e-7663cd9beba4",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "dad7880e-ed86-40a4-8410-1a6f86d59cca",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "b3897958-d44d-4d21-aeca-b806c854b195",
        "cursor": {
          "ref": "422d39d6-f2a7-43d2-a650-da584275ce08",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e1fa33ca-37c4-4e5c-8cb8-d791429aa755"
        },
        "item": {
          "id": "b3897958-d44d-4d21-aeca-b806c854b195",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "5c07c40d-aa76-402d-9a5f-f8e7b68da493",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "050ab2d6-fdd6-4557-85cd-a1e2b20e3324",
        "cursor": {
          "ref": "11fbf727-cb58-4048-849d-0b0a818b81ed",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c39a0167-289c-4001-9467-b2b0c31d93ac"
        },
        "item": {
          "id": "050ab2d6-fdd6-4557-85cd-a1e2b20e3324",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "3b12d3ca-cc83-4b41-bb5b-2a41e130d8bc",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "731c6055-8bed-46c8-ab7f-76d13e7ef5c6",
        "cursor": {
          "ref": "e9a0805a-77ed-4076-9fc2-2a6ae263035f",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "12248a27-5d9b-4e5f-a735-5ea0506b5763"
        },
        "item": {
          "id": "731c6055-8bed-46c8-ab7f-76d13e7ef5c6",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "81e7c7e7-6ad5-4ef7-80de-36742b4a022b",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "75ed55f5-e056-4782-a730-768840fd4b92",
        "cursor": {
          "ref": "5b707073-8fb6-4525-a5d8-67c184d32600",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "932b8c02-e6ad-47e1-bc3c-5860a9f2556d"
        },
        "item": {
          "id": "75ed55f5-e056-4782-a730-768840fd4b92",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "826e1c6e-eb2a-420f-bf1a-e8a7d768f9fc",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "bfd29c4d-e03c-4abd-a848-34f1c75d7f82",
        "cursor": {
          "ref": "48d1bbe3-c82c-43ff-afb0-0b5008a07ac0",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "be828faa-cabf-4c68-b2f4-5ef7a0fa528d"
        },
        "item": {
          "id": "bfd29c4d-e03c-4abd-a848-34f1c75d7f82",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "72e29e90-a145-413d-a9c0-9ae9c8160842",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "602ef0e3-2ce2-4db4-a0ec-77a994e0e8b8",
        "cursor": {
          "ref": "d05960db-1efb-42ef-b816-23c9ad510183",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "5b0acc0c-76fd-4e96-9e37-a56e62e09d88"
        },
        "item": {
          "id": "602ef0e3-2ce2-4db4-a0ec-77a994e0e8b8",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "dba0c7e3-08f2-4e49-8b5d-bb4394b4b4ab",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "5f4ccc57-10c0-44ce-91ff-c131f9919396",
        "cursor": {
          "ref": "3bd67845-f064-43b2-8458-0dbd9c63a04d",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "55275491-659f-4d7d-8862-b267b5e9ac62"
        },
        "item": {
          "id": "5f4ccc57-10c0-44ce-91ff-c131f9919396",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "71c6d26b-372d-4360-b9f8-9ab43fceb285",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "64df222e-ea7f-4856-8c1c-99ce99f3d79b",
        "cursor": {
          "ref": "8602c620-fa15-449b-85da-c3ae1d1c8822",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f337453c-3671-41c4-9499-b67b6331d543"
        },
        "item": {
          "id": "64df222e-ea7f-4856-8c1c-99ce99f3d79b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d7d7809f-a716-4949-adb8-cf8f92cd7530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25ba269b-a771-4ff9-a23d-385ee933d2fc",
        "cursor": {
          "ref": "0eeacdab-a42b-4a04-96a7-10530b8c9a85",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "036b714a-42e0-46a6-ae44-751ddcb8e9f8"
        },
        "item": {
          "id": "25ba269b-a771-4ff9-a23d-385ee933d2fc",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "f41f0b8f-9d19-45b9-8962-6d3c7b5252cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cb48cee-bcc6-484c-924f-32141b0e53dc",
        "cursor": {
          "ref": "d9fd5810-d381-4df2-b349-aae73074b1ca",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "cf47c673-552a-4f48-b11c-cf8998efa7ff"
        },
        "item": {
          "id": "9cb48cee-bcc6-484c-924f-32141b0e53dc",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "5732d00e-76cf-4cfe-8baa-d4945d2769f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05a56903-5661-4c47-a675-5c2059b761fd",
        "cursor": {
          "ref": "a5eeb900-00d7-4b08-994a-aed81df28bde",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "940e4655-7a2d-4ec3-9e43-87261492584d"
        },
        "item": {
          "id": "05a56903-5661-4c47-a675-5c2059b761fd",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ff04ee4f-05b6-4147-8ce9-f2ea16393930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a57e342-57f3-405b-be21-b8475b998954",
        "cursor": {
          "ref": "be733f87-5aac-4e43-a732-3526fcdd59c3",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "857b57f5-b80c-4e47-a49c-9a92feac3698"
        },
        "item": {
          "id": "8a57e342-57f3-405b-be21-b8475b998954",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "037661ae-3713-490a-8e46-58f2bcbc1e90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7377da5-600f-4592-b624-486ae28128a3",
        "cursor": {
          "ref": "3240a102-0b46-44fa-803b-771f1765ea38",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f4ccddd8-2e0e-4b26-8083-51b9d281fefe"
        },
        "item": {
          "id": "d7377da5-600f-4592-b624-486ae28128a3",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "d2151c73-e63b-4d2b-9917-a5d47d2e086c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0f54785-7bc6-47a4-90c2-0c8534517d78",
        "cursor": {
          "ref": "108e16cd-c819-4af6-8486-35c2a70899bc",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d07e9624-4d67-401f-8c93-865f8fd193de"
        },
        "item": {
          "id": "b0f54785-7bc6-47a4-90c2-0c8534517d78",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f08bb521-4b2d-40f6-b99f-5fdd4e68271c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aceb3e9-0f70-4f60-b605-df17ae237a17",
        "cursor": {
          "ref": "1a1c4516-ec1f-46d7-b0d8-0dc1b6a4dd28",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f4886fc6-b419-4676-a3ba-be53c5d3e27d"
        },
        "item": {
          "id": "5aceb3e9-0f70-4f60-b605-df17ae237a17",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "3db632c1-ad76-46aa-81cf-ae9ec92d79b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "295e3f74-8b6c-4372-bf64-0606d1e6c567",
        "cursor": {
          "ref": "b5b3e057-0331-484b-9452-7bb75918e519",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "53900185-9a07-4c21-ab3b-c0dad5cce801"
        },
        "item": {
          "id": "295e3f74-8b6c-4372-bf64-0606d1e6c567",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "b88455cb-fe5e-4b69-98b1-e6850692cb8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc3ac73-bed7-4a1a-822c-cbd565dcf9de",
        "cursor": {
          "ref": "ab15f15d-4dbd-47ca-a790-4723aca57e83",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "39f827bc-bd23-41b6-a016-ef9951b5c47a"
        },
        "item": {
          "id": "bcc3ac73-bed7-4a1a-822c-cbd565dcf9de",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "3c8940f0-eb5b-4989-9582-d4cfd36f2ae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "603144e2-8fd3-47c5-8c96-dca1daf18608",
        "cursor": {
          "ref": "3770c1aa-26df-40ff-a627-b58164a7cfe6",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "59fd0249-cd61-41be-84bb-f0cf65a019dd"
        },
        "item": {
          "id": "603144e2-8fd3-47c5-8c96-dca1daf18608",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1db5b8f4-54b7-4d6c-94af-951ccce3511b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8defb025-474f-4687-95e5-7533afc7a73f",
        "cursor": {
          "ref": "fb6f7f89-600f-4866-bde2-f4a9e7813558",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "33561aff-da2e-45c0-81ca-3b50f927e064"
        },
        "item": {
          "id": "8defb025-474f-4687-95e5-7533afc7a73f",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e6170287-77c8-4ce5-ac2e-bd969d2c98f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb1d45ec-28a0-4f51-ad73-93978024d597",
        "cursor": {
          "ref": "9e6b2a94-7827-4088-9a47-422e4fd731b2",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "610bb542-e42b-4055-8da1-4fdd8da7bd88"
        },
        "item": {
          "id": "fb1d45ec-28a0-4f51-ad73-93978024d597",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "dd6ad36a-6e44-40bf-95d2-f451716d4ba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d076d10-bbaf-454d-b880-7c955f4ade4d",
        "cursor": {
          "ref": "d4795f36-3ff3-45e6-81c7-1380d6c3aa0d",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a583ba40-d5b9-46ec-b036-24ee2b49733f"
        },
        "item": {
          "id": "7d076d10-bbaf-454d-b880-7c955f4ade4d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c66a5ab4-2bd4-44b2-b97a-42293d932b80",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "97723006-1e99-4e7a-80bd-86199c4d9324",
        "cursor": {
          "ref": "2cccf321-2fd4-4ec6-ae60-5c9e5f9d422e",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "36c113be-900f-42f9-84a4-9b34a3bc3208"
        },
        "item": {
          "id": "97723006-1e99-4e7a-80bd-86199c4d9324",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "6deb4189-8aea-4a51-8c2d-a05ea2979b3e",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "a28819b9-2fb1-458a-8fa0-ea9cc7333752",
        "cursor": {
          "ref": "69172ca8-f368-431f-abc5-d4f0ac3aae8d",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "63f41d75-6e44-4d8d-8082-e8dbdab6ab8c"
        },
        "item": {
          "id": "a28819b9-2fb1-458a-8fa0-ea9cc7333752",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "84f6f2d6-2e03-4e83-849f-d5312573c42a",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "556390ee-0849-4091-95dd-6d552f532b24",
        "cursor": {
          "ref": "a9357429-7fb5-460f-af64-166f77480b98",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "c89070ba-248a-411a-bcf4-2b3da76972f2"
        },
        "item": {
          "id": "556390ee-0849-4091-95dd-6d552f532b24",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "5f8e6e61-784b-4c91-b74b-51973bc4249e",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "49f15541-132f-4c02-81d4-c209d9e2ef16",
        "cursor": {
          "ref": "4afd6ff0-8f8d-4529-8161-81e06ca75821",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "52f044df-0927-403f-bc45-088300101a0d"
        },
        "item": {
          "id": "49f15541-132f-4c02-81d4-c209d9e2ef16",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "aaa694d2-0b60-485f-b444-bba0543ee312",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "02b6b27e-bdcd-43a2-af4c-4c14de03ba54",
        "cursor": {
          "ref": "09cfb90f-5397-4970-8d60-e132d94f4062",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "9d8e46d9-01cc-4df3-b518-57cc2fbae5f4"
        },
        "item": {
          "id": "02b6b27e-bdcd-43a2-af4c-4c14de03ba54",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "3b735e31-0c3e-482d-a165-b7cf04fd635a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28f633e3-3618-41e5-ad19-1a96b0fd36fd",
        "cursor": {
          "ref": "ede8d58d-0a1d-4bae-8b81-951070e3c4da",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "aee191f7-ca99-4f56-889f-741d90ddd005"
        },
        "item": {
          "id": "28f633e3-3618-41e5-ad19-1a96b0fd36fd",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "c9d601ee-cbf6-4238-b9d5-c9a578978955",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcd9977e-c3ad-4509-8d0f-54433da1df04",
        "cursor": {
          "ref": "7975198a-d140-42d6-a14d-63564daed0fe",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "d4ae0bfb-615e-4276-b0ce-5c76e364ae2a"
        },
        "item": {
          "id": "bcd9977e-c3ad-4509-8d0f-54433da1df04",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "6630f6fa-5c08-4b71-b82c-695811780ea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca93b550-649b-4bc6-91b2-09958bd28b38",
        "cursor": {
          "ref": "23a51f3f-fb00-4874-bf7d-a9ce57126573",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "27a0e399-272a-4c7b-a5de-a43f23ab1821"
        },
        "item": {
          "id": "ca93b550-649b-4bc6-91b2-09958bd28b38",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "0b2d8ae8-1484-4167-b511-bd60776d758e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79508ef3-47fc-42f2-b520-2ce57aaf1b4a",
        "cursor": {
          "ref": "0a7d6e39-d4ea-42e6-9210-cb8a358dbe81",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d67b7cbf-116f-496b-b1a4-7bf4e7d91007"
        },
        "item": {
          "id": "79508ef3-47fc-42f2-b520-2ce57aaf1b4a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "69444b98-f02d-421e-9ae0-b246965f096e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "561716ef-0120-472b-aaa8-5266595dbd37",
        "cursor": {
          "ref": "c47a442a-7a64-4a1e-a06b-26ae5e65824f",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "95959b58-f2cf-4bd3-963d-e016af23d9d7"
        },
        "item": {
          "id": "561716ef-0120-472b-aaa8-5266595dbd37",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "51b6fe7b-0207-4b5f-b4a2-77a939179834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe3945b5-5f56-4930-909a-498122c073c7",
        "cursor": {
          "ref": "2f207897-e440-4b69-bac3-89ae78f1d84d",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b09d85e7-a4a7-436a-b136-43bb2ebdca19"
        },
        "item": {
          "id": "fe3945b5-5f56-4930-909a-498122c073c7",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "03dba840-0cc2-45c1-89a1-17cc1b64ca83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c41f4d81-f813-42cf-aa3a-34349eca61e5",
        "cursor": {
          "ref": "e36fa479-cbbd-4951-bb4f-d569c71fe8f7",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "da587ec3-a456-4178-b55e-8f857b7eddf5"
        },
        "item": {
          "id": "c41f4d81-f813-42cf-aa3a-34349eca61e5",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "00708c57-ab5a-4723-8ba9-31be34c452a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56559e24-3227-4321-8d8f-2084fa58ac8e",
        "cursor": {
          "ref": "6ddc12c6-50df-495e-a970-e3bcce11e2bd",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f11afbfd-bf36-491e-9ef1-8fa551096c78"
        },
        "item": {
          "id": "56559e24-3227-4321-8d8f-2084fa58ac8e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "58dab0a1-d415-4c32-8377-734d529ec35c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9acfd59-5a23-4f18-8813-1c048fe97d85",
        "cursor": {
          "ref": "d1f1af0c-4136-4444-9b37-8dc05258b735",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "54d2467f-643b-4483-90ee-4c80b59013cc"
        },
        "item": {
          "id": "f9acfd59-5a23-4f18-8813-1c048fe97d85",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ac0e9ccb-3490-4840-8192-51273920b902",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f050a83-ded5-4269-b747-256ce6227c72",
        "cursor": {
          "ref": "9031d48b-0654-4adf-9484-781b10a65a13",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "360e888d-b3dd-494d-b76a-829e611a7358"
        },
        "item": {
          "id": "2f050a83-ded5-4269-b747-256ce6227c72",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "421fcff6-e32c-4db4-bf69-2c533c153607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60d34c31-0331-4c00-9bc5-738532e796f3",
        "cursor": {
          "ref": "7d1f9b19-43fd-415c-8812-1257df0e390c",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "7a58e9d6-c8b1-40e1-9852-57568e17a3c4"
        },
        "item": {
          "id": "60d34c31-0331-4c00-9bc5-738532e796f3",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ebad8333-77f1-4e9b-82b1-95abcec3fc6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7073429e-72c4-4bd4-bb91-036aadc0955b",
        "cursor": {
          "ref": "61ea9c2b-2673-437b-a766-09943576f245",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8a6dbe94-d2cb-497e-8de6-03f3bdd4a925"
        },
        "item": {
          "id": "7073429e-72c4-4bd4-bb91-036aadc0955b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "89397d23-0b26-47bc-8a6e-a0816e3147a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "968e323e-f6f5-4865-803f-b558c7174ea5",
        "cursor": {
          "ref": "52b051d5-067a-4749-88b7-6859e5f40f7c",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "5e7ad709-d5dd-4578-9b9d-4b8f8518acda"
        },
        "item": {
          "id": "968e323e-f6f5-4865-803f-b558c7174ea5",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ae8804d7-e717-47e3-b72d-0d22642381c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ad7d89a-29b6-4cc3-9b84-cb1483cd9ff4",
        "cursor": {
          "ref": "c3d2c5e5-8a56-4d4c-9e14-bdb308338b57",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d2feebfd-1ae6-467d-a1e8-8351dcadc8ab"
        },
        "item": {
          "id": "9ad7d89a-29b6-4cc3-9b84-cb1483cd9ff4",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0c3caf12-8637-4a7a-9501-bb3180f7b2a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "430f39e5-0202-491b-b1af-cbc95841ada1",
        "cursor": {
          "ref": "47c8c1f1-ff5f-4fe7-a087-5000a9988762",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "e5799cae-4dfc-4115-9ec3-405be69c3d75"
        },
        "item": {
          "id": "430f39e5-0202-491b-b1af-cbc95841ada1",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "77911000-f207-4466-8e1c-820e8c8fc6fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27630a19-8e99-4bf8-a075-617416d5ddaf",
        "cursor": {
          "ref": "0da2347a-be74-4bf4-ba86-6ca7b6b32d3d",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "d919ed8d-02bc-465f-a87f-0c92c56cef56"
        },
        "item": {
          "id": "27630a19-8e99-4bf8-a075-617416d5ddaf",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "2a4dbad1-5604-4d1a-ac3b-bb1faca4e2d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e8ac55b-984f-4e13-bec1-ab888251bc19",
        "cursor": {
          "ref": "b402d715-ceaa-4215-837c-ce41e29fa992",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d34bb4d3-17e9-40f4-8aaf-5b0a4b6009c2"
        },
        "item": {
          "id": "8e8ac55b-984f-4e13-bec1-ab888251bc19",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "23dd1909-acd7-42bf-88e6-85e055a57d2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08dd1359-5a34-456b-9252-fbb7bea50fe2",
        "cursor": {
          "ref": "1e655180-d3e8-459b-94dc-49caf6668373",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "4b198d66-2b0c-4061-bb49-3271ca1ab760"
        },
        "item": {
          "id": "08dd1359-5a34-456b-9252-fbb7bea50fe2",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "13a90c45-35be-454e-af55-9ffaa4e4e293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34965f68-3cd8-4cdd-9ff7-c45ec9f74013",
        "cursor": {
          "ref": "4b2cd1e5-3830-4298-a9d8-7168628e9396",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "4b78ae23-f0a2-4384-943d-8913a24af451"
        },
        "item": {
          "id": "34965f68-3cd8-4cdd-9ff7-c45ec9f74013",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b00d5051-0af0-4324-bd69-d225cd151756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72261a46-3bc9-4019-808f-f45110bd3cbb",
        "cursor": {
          "ref": "22602d84-fc7a-4a26-885b-f14909707b31",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "dca5d9bb-8695-4d2c-8af3-aafdd8a4f7bf"
        },
        "item": {
          "id": "72261a46-3bc9-4019-808f-f45110bd3cbb",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "a37f1396-3035-4f01-9466-9f19b96ae806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7fbf81f-09f5-4a74-97c3-52d70ecb1e2c",
        "cursor": {
          "ref": "b6ce93a1-dcb3-4601-bd7b-8334aa69ece8",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "eb87d557-b6e5-4ef9-bbe9-6907e0079633"
        },
        "item": {
          "id": "c7fbf81f-09f5-4a74-97c3-52d70ecb1e2c",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "ebda4e75-4ee4-47bc-9f7f-2333e16aee30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7dc7e4d-83b4-49bc-81df-b90555e47765",
        "cursor": {
          "ref": "050fc32a-7a64-41fd-815c-2772b2b2dfdc",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c67ec9b1-306a-44c1-8e80-d22d014d2034"
        },
        "item": {
          "id": "f7dc7e4d-83b4-49bc-81df-b90555e47765",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "14512429-27b3-4b81-b744-8f43860e2457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99239dd0-0705-443f-9f8b-b52bc7355577",
        "cursor": {
          "ref": "ea559096-2953-49a1-97eb-0666662713b0",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d4286c3b-7c55-4a68-9639-1e074ccf525d"
        },
        "item": {
          "id": "99239dd0-0705-443f-9f8b-b52bc7355577",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "2e823478-1d36-48a1-8278-9c48774c3d81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0821c84-3d8a-465f-825d-fcc3d93b5bbe",
        "cursor": {
          "ref": "b1318d39-a1d9-4342-9637-b6ff757c5357",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f307b579-f2d3-45a3-86ae-032ba610ca18"
        },
        "item": {
          "id": "d0821c84-3d8a-465f-825d-fcc3d93b5bbe",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3233451a-803e-4945-b9c4-89e91d0e3a18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21fdfa79-692b-4b1f-8874-16ac74e5b0bb",
        "cursor": {
          "ref": "65d903cc-c071-4341-bafc-3871b3d81aa9",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "e3222314-3a72-439c-8e5c-2a073f14c702"
        },
        "item": {
          "id": "21fdfa79-692b-4b1f-8874-16ac74e5b0bb",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "0642b6d4-fcca-4b05-bd86-6443ac07b88e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f7eea1-a551-4b45-aa03-f59955cbbb5b",
        "cursor": {
          "ref": "6596f01d-9604-4eba-9416-23a2262ffbdb",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "56187685-c0c8-43c2-ab48-25afd576f50d"
        },
        "item": {
          "id": "77f7eea1-a551-4b45-aa03-f59955cbbb5b",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "6b235935-631a-4139-a3bb-f33b20fb7561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "693fee37-0467-4ee2-ae58-9cd51c61db54",
        "cursor": {
          "ref": "f5e310e2-c433-4a9c-9d83-a92928b38eb0",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "d401678e-98f7-474b-8858-93e6696e9136"
        },
        "item": {
          "id": "693fee37-0467-4ee2-ae58-9cd51c61db54",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "65e909f5-901d-4baf-b0f1-e0dadc7793bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6d149a7-f66e-42ab-92f7-85fbe3d46028",
        "cursor": {
          "ref": "06c7171a-0e72-4ff8-8d32-ea523282acec",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "18da9669-4a0f-49ae-8eb2-6ea826d71b3c"
        },
        "item": {
          "id": "c6d149a7-f66e-42ab-92f7-85fbe3d46028",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "1f6b87fe-0c0a-4cdc-b698-c84534eeca09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd37bd1e-a002-43c9-bbc1-c5326c012a40",
        "cursor": {
          "ref": "486caf3a-86dc-473f-9f19-6d9cfdd178d0",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "6e52feac-7223-4f54-879b-3a05b0f108b0"
        },
        "item": {
          "id": "cd37bd1e-a002-43c9-bbc1-c5326c012a40",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "dc377ead-ee68-4f8e-92c5-1ca87eeade52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "084c1c09-1086-4d9f-93fe-ac0bc0d6361c",
        "cursor": {
          "ref": "a5452edf-20f7-4f24-977b-c6f8cbd151c2",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "6451eeaa-ec9e-48db-97fc-58523ed765a6"
        },
        "item": {
          "id": "084c1c09-1086-4d9f-93fe-ac0bc0d6361c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "dc3af74d-1a28-456e-95b4-f85ea3b6fa03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba9399ea-1461-4e40-93d2-2e56c80dc760",
        "cursor": {
          "ref": "b67b811a-117a-4df4-a1aa-a8c0f173151f",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "170fdc96-5eb4-4962-a6de-a6bdbbbb9e1e"
        },
        "item": {
          "id": "ba9399ea-1461-4e40-93d2-2e56c80dc760",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a1ca6669-a731-4428-94ce-b4fbe13c81b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ab9965-2d88-4e22-b55b-699a919d0013",
        "cursor": {
          "ref": "f8e8df8d-48c5-4b4d-9e82-2032ada2926b",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "10e981d1-ad4a-4a34-8f96-2d6c0c204fc9"
        },
        "item": {
          "id": "07ab9965-2d88-4e22-b55b-699a919d0013",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "54465bc1-7280-4ad1-8108-e47b6ccc1ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "1c5e177d-0034-4ce1-b445-dc67c5dc54cb",
        "cursor": {
          "ref": "059a1df1-d1a6-44db-8d7c-1961aa662743",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "57bc1b94-b9fc-4c23-9fd0-6f6879c64bf3"
        },
        "item": {
          "id": "1c5e177d-0034-4ce1-b445-dc67c5dc54cb",
          "name": "credentials_issue"
        },
        "response": {
          "id": "3b5ad963-8487-4d1f-a3ab-575a473e48ea",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddf86a0c-ba30-495b-939e-f0877b0a8953",
        "cursor": {
          "ref": "d1b27393-7896-427e-804b-bc507d2f828b",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "1b9eb5e3-1dc3-43c2-9558-44015bfdc65a"
        },
        "item": {
          "id": "ddf86a0c-ba30-495b-939e-f0877b0a8953",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "e7282d2d-129c-4530-a746-0e39026fa25d",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3f305cc-4f06-4893-ae7f-c796c09ee969",
        "cursor": {
          "ref": "b9654c16-fb14-4f9b-ac9f-25bbba952280",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "19c10448-2306-4cc3-845a-7c53347d955c"
        },
        "item": {
          "id": "d3f305cc-4f06-4893-ae7f-c796c09ee969",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d2348193-61ed-40ae-b95c-f9322b767afb",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a6c4a49-2624-4a10-b4e2-392c1a71a102",
        "cursor": {
          "ref": "33447f8e-e45c-4727-9194-3a799c752543",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "74f4bc48-70a4-4560-b2b4-a69670cd7c14"
        },
        "item": {
          "id": "8a6c4a49-2624-4a10-b4e2-392c1a71a102",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d361e31b-10c0-4f84-8038-a633f31483d6",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb4129c8-6bf0-4ae8-ace7-0bb5df371c3a",
        "cursor": {
          "ref": "3b2265f4-d54a-4e7f-b4fc-d9c372700ff8",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "14d8e686-d4b5-40c9-90d0-778bf59ff749"
        },
        "item": {
          "id": "cb4129c8-6bf0-4ae8-ace7-0bb5df371c3a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ad48ff19-ea1b-4aaf-805c-2ebfc3c43ddf",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-22T00:35:23.535Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-22T00:35:23.535Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "d9574701-7abe-427f-8b37-214228499274",
        "cursor": {
          "ref": "c2181335-0ac4-4ad7-b01f-dcaaee56ba51",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8e8b65c9-c771-4729-a670-b65b2dec9c36"
        },
        "item": {
          "id": "d9574701-7abe-427f-8b37-214228499274",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d51e5c37-6015-4e54-9236-a8a08e6bc56c",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42b8bbb9-ff06-47e0-8fb4-e3b86ce2e2b2",
        "cursor": {
          "ref": "aa5628ba-3be6-482a-8fa1-67579881c4f1",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "5781302a-afa6-4201-83c9-c57d231958a8"
        },
        "item": {
          "id": "42b8bbb9-ff06-47e0-8fb4-e3b86ce2e2b2",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a20b498a-b4e0-4663-b419-a333db33a8c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37a257d6-0b52-4ead-a98d-acbf69b5a8fb",
        "cursor": {
          "ref": "9c12058d-9dcd-4875-871b-cbc4a7bf9075",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f131f574-8091-4586-bfcf-5c0b7e8ed1d2"
        },
        "item": {
          "id": "37a257d6-0b52-4ead-a98d-acbf69b5a8fb",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "178dc620-f796-43f9-8e3b-29758d698fc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1155a678-227c-4cfe-a267-c7790fcc670a",
        "cursor": {
          "ref": "4a694681-2503-4e5e-bd4f-2677e5db532d",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "6759270c-91ff-40a1-be0d-1dbca7e70ee1"
        },
        "item": {
          "id": "1155a678-227c-4cfe-a267-c7790fcc670a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2dd7cfa1-2f5f-46e9-8b3a-fe7c7d5a7eef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca9cd14f-9684-45c6-87c6-17850dad254e",
        "cursor": {
          "ref": "9db49818-531f-45b8-9288-edca10c13114",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a92aa3f7-9791-4d22-88a8-81e28317232f"
        },
        "item": {
          "id": "ca9cd14f-9684-45c6-87c6-17850dad254e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "fb4c60a8-8995-45f4-8f14-4f2c8bb99d7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ee52b5-8510-4ade-958a-95d3dcc66e3c",
        "cursor": {
          "ref": "bb4c93e5-c543-46f4-96d4-54b99f4a908c",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "82681db1-1623-4c0e-ac6e-29d45c025530"
        },
        "item": {
          "id": "42ee52b5-8510-4ade-958a-95d3dcc66e3c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "af237856-e20e-4618-b039-268147dacf5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f5e980a-9a22-48d2-aca7-4cbd5893aa9c",
        "cursor": {
          "ref": "559adcf1-dcbb-43aa-918c-27b22ade4872",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "2354edda-bdc3-4b89-a06b-c7695a91ac31"
        },
        "item": {
          "id": "0f5e980a-9a22-48d2-aca7-4cbd5893aa9c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7777d65a-f05f-4b58-b0b6-5cdf679b8b70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34a81fa4-e985-4b27-abf1-9c59a7a6e261",
        "cursor": {
          "ref": "a7e9c059-92c1-4437-8103-829a9e32fc47",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "39fca477-b4a8-4335-a098-a1cf905e2ff6"
        },
        "item": {
          "id": "34a81fa4-e985-4b27-abf1-9c59a7a6e261",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "812c7a42-8307-464e-8bb5-77ad8f65e09c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68a417bf-d7a7-490e-97fc-5c1b1bf068f6",
        "cursor": {
          "ref": "4ca205a6-fea2-4ccc-93e4-638961af6f5f",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "531022d1-1119-4c67-9d04-f8eab9eb29ea"
        },
        "item": {
          "id": "68a417bf-d7a7-490e-97fc-5c1b1bf068f6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "129596e7-7064-4c4f-abe2-14cf4b6cfdbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0372a50f-bf7b-48f5-abdb-c9e6b881c73c",
        "cursor": {
          "ref": "4c4471ae-c7f3-4326-af91-0a342d8a9e70",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1560a92b-444a-4b11-be6d-55725428553d"
        },
        "item": {
          "id": "0372a50f-bf7b-48f5-abdb-c9e6b881c73c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "660eaccf-eda9-4f78-88e9-6c85d7a3014b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df7a282-94dd-47db-b93a-2990c3eb7976",
        "cursor": {
          "ref": "49ea18be-c12c-49a4-967e-5d7f9e116f05",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "5d5c4370-5adc-48ca-9bed-d9848fa2a30f"
        },
        "item": {
          "id": "8df7a282-94dd-47db-b93a-2990c3eb7976",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9a468904-3513-48a0-bd4e-9c51eddfaf95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "633a20ec-eefc-47c3-b787-32f59b7a8984",
        "cursor": {
          "ref": "562b0e55-78eb-4418-8a32-de38692b899d",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "4c2dc47d-477b-4b88-b87f-15727970043e"
        },
        "item": {
          "id": "633a20ec-eefc-47c3-b787-32f59b7a8984",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "60537d11-ecac-467e-9a37-9eab119cdb3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3bfaa8f-9c95-49dc-b1b9-1159635bce54",
        "cursor": {
          "ref": "58186bd1-5ec4-4686-a2f4-82940beda639",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "8d777e2f-c85b-48d3-9730-8752505caede"
        },
        "item": {
          "id": "c3bfaa8f-9c95-49dc-b1b9-1159635bce54",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "41ebf1c8-0d11-4456-b01e-57ee86477427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebd7ff19-f386-41ca-b417-943e3cd73a41",
        "cursor": {
          "ref": "7ebc375e-995b-4265-8f4d-21414149587c",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "3d9a20e4-5fec-4c61-91e8-0acf44f0618a"
        },
        "item": {
          "id": "ebd7ff19-f386-41ca-b417-943e3cd73a41",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "865d1f18-934e-41c8-9222-00165e492b4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d2796d6-4145-479e-a21c-bc6a036a2b15",
        "cursor": {
          "ref": "753032d0-b3e6-4bf8-8344-0cdc24fff71a",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "30bdb334-2428-4ecb-988b-be3d968141e3"
        },
        "item": {
          "id": "7d2796d6-4145-479e-a21c-bc6a036a2b15",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7216e240-5d0d-49ee-8f61-681e809dd84b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1ab0262-ab17-4253-a3ca-bbf9ad43a3e1",
        "cursor": {
          "ref": "ea062836-3983-4bf3-b7f3-80c56e2e43c0",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "994395ba-c1fa-4344-acee-7e2e797a4ede"
        },
        "item": {
          "id": "e1ab0262-ab17-4253-a3ca-bbf9ad43a3e1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "86508558-6296-4db1-a8ca-d45b4b8a1628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ade081c-5bd2-4ec0-b7c6-5ef68d5a8d14",
        "cursor": {
          "ref": "ef3627bb-f5d5-45d2-b588-4bdc193fc0a7",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "9f0e787d-265c-4a99-9e4f-0e87dc265f47"
        },
        "item": {
          "id": "0ade081c-5bd2-4ec0-b7c6-5ef68d5a8d14",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4dcd7c19-bb00-4cd0-9e17-86f03ac7f568",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51536eeb-1874-4d52-a700-a6b3637309ef",
        "cursor": {
          "ref": "eed75c91-44f4-4555-af4e-2a0a0f5df896",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "16c2143c-ae2c-4102-a482-4756cca4ab8c"
        },
        "item": {
          "id": "51536eeb-1874-4d52-a700-a6b3637309ef",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "989eccfa-c3d9-4e8d-984e-6a4346b0a444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d164ec66-9d74-4435-a6f1-0208ea148813",
        "cursor": {
          "ref": "5014dbb5-33fd-4447-8baf-ca108e5bee8e",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1b622da2-a04a-44a0-82ac-ec79e1d5bc00"
        },
        "item": {
          "id": "d164ec66-9d74-4435-a6f1-0208ea148813",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1662755d-d125-4e96-af99-bccf39c2a849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1fc7a8-98af-4c6e-ba5c-7a4c0d66f5cc",
        "cursor": {
          "ref": "9d46e315-8dbd-4631-ba1c-f32373d428bb",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7aba386a-6bff-4983-b154-67f9d2c6878f"
        },
        "item": {
          "id": "fc1fc7a8-98af-4c6e-ba5c-7a4c0d66f5cc",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "cbb97832-66ba-489d-b785-f69e8abc0f31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c1e9cd7-f5fc-4b8a-abe7-10a7dce20c6b",
        "cursor": {
          "ref": "8025721d-3eb3-4dd9-b2a5-ac4a03598bd8",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "26b9c352-3b2b-44ba-b972-fe5ff26ea2eb"
        },
        "item": {
          "id": "0c1e9cd7-f5fc-4b8a-abe7-10a7dce20c6b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3661df8b-29c6-4528-82ff-a72e4dcc86cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abd2125c-5cce-4c4d-b7fd-f44153748499",
        "cursor": {
          "ref": "588a5e4c-d06c-420a-8c1d-7026f82e10ab",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f12523cf-49f7-45e2-92a2-a1bc62afd848"
        },
        "item": {
          "id": "abd2125c-5cce-4c4d-b7fd-f44153748499",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "06754de1-c167-40bf-a5ec-b45a2423cb46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b338b747-374b-438a-b069-26f63d0c332c",
        "cursor": {
          "ref": "07569d98-25ac-4255-bf44-9af7178c5a4f",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b2e7057a-703c-4877-8ee3-2a9f1a5db740"
        },
        "item": {
          "id": "b338b747-374b-438a-b069-26f63d0c332c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "55e70448-3f4d-4360-ab68-d802743513d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15b287c3-d9b4-4fb0-95fd-1b7141af1e19",
        "cursor": {
          "ref": "4c4dbd35-b7ad-4b3f-a541-61d0605070e4",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a227a1a9-d038-4812-9ab8-897da3d18eec"
        },
        "item": {
          "id": "15b287c3-d9b4-4fb0-95fd-1b7141af1e19",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "00f1d127-dd7a-4462-975f-9b1103b2a196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "980c6539-9e33-4b7b-9e6c-0a8bb2270c62",
        "cursor": {
          "ref": "59ed181f-9e86-4f30-8a4f-ab80857dff0f",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e4ae41bf-dab4-441d-9268-42d2b84cd0d8"
        },
        "item": {
          "id": "980c6539-9e33-4b7b-9e6c-0a8bb2270c62",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b187e00b-e172-48d1-9893-36ea6ab441b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc0e5fa-4201-4eab-a50c-621e8152b572",
        "cursor": {
          "ref": "c85100e4-bede-4743-bd1b-0bbea949b21f",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "fc2a4815-e67b-4108-be48-83b4a0eba430"
        },
        "item": {
          "id": "dcc0e5fa-4201-4eab-a50c-621e8152b572",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "71ac9136-61af-4e1f-83a9-e0f22843dd09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e213d923-02ea-439b-b828-673e6f43fc3f",
        "cursor": {
          "ref": "7648d1b1-303d-4fa7-88c7-2772deab9e4c",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "45c02331-7552-40f0-9a43-45ea673f7db7"
        },
        "item": {
          "id": "e213d923-02ea-439b-b828-673e6f43fc3f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "30d940cc-4ca1-4ba7-bcac-24afefd883cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e594aee-e250-4e24-902c-b5041a9a2135",
        "cursor": {
          "ref": "12376556-2dff-44f8-b3d9-de6a6a960b47",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b8c06b16-6a39-43ee-a24f-1da1085c2dac"
        },
        "item": {
          "id": "2e594aee-e250-4e24-902c-b5041a9a2135",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "605dc6ac-b356-4ca0-a2c1-f5425d20fb4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be40fce1-f6de-4e59-9b45-5c042eda014f",
        "cursor": {
          "ref": "9e8c6012-e26f-4517-89cc-84c039506d1a",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4479be38-ea2f-4d9d-80f5-d305433fad8f"
        },
        "item": {
          "id": "be40fce1-f6de-4e59-9b45-5c042eda014f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8b111f70-ff16-40c7-9fe8-bead824cbb54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41300251-2d4b-4e53-a911-04d5fbe726ad",
        "cursor": {
          "ref": "987d81ea-a9ab-41c9-96a9-8e0340721cf9",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "83ace939-77c6-4ec1-b83e-576c7be266c9"
        },
        "item": {
          "id": "41300251-2d4b-4e53-a911-04d5fbe726ad",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "8b2d3126-b01a-45c3-9fb9-90751c55b04d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b702374-a481-4180-affa-e5383379667c",
        "cursor": {
          "ref": "89d4069a-eab1-42a1-8cc5-50ee9a0c8fef",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1a50dac4-228b-4b2b-9e5b-6bf19a68717b"
        },
        "item": {
          "id": "3b702374-a481-4180-affa-e5383379667c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9c7d2ab4-e58c-49a0-bb70-d46c00e09665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ba42e1-e953-4851-9ead-d9743c50a4a8",
        "cursor": {
          "ref": "a6672b8a-df0a-4bfc-8306-529e62aa6e31",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "563da279-3b9e-47fd-b228-5582d03f94ae"
        },
        "item": {
          "id": "b9ba42e1-e953-4851-9ead-d9743c50a4a8",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "27d9b722-a46a-4b79-b4c3-8e95036d02fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca13fa0-7592-4d53-b699-f221b822f035",
        "cursor": {
          "ref": "f89f6571-9d28-48c7-a8f0-70d12b3bda54",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "5b1d355a-1341-4ab4-88a1-1df96c89b227"
        },
        "item": {
          "id": "2ca13fa0-7592-4d53-b699-f221b822f035",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "801eb7ed-b2b0-4d42-bb54-24af3feed234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "311df126-ec3d-417f-8b3a-1b3ca1928975",
        "cursor": {
          "ref": "2e442e30-bf52-4819-9b42-69bef46893b9",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a7b24e71-b844-46d5-aa8f-f2e340359663"
        },
        "item": {
          "id": "311df126-ec3d-417f-8b3a-1b3ca1928975",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "66b84653-1796-4eee-a4cb-a4280147c337",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bef301d3-b0c7-46e3-93a6-b4653c7a935a",
        "cursor": {
          "ref": "5debdfbf-f5c6-4cad-be70-e8432061f6e3",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "fa72a70e-febf-4ed0-8aa6-827ecb874204"
        },
        "item": {
          "id": "bef301d3-b0c7-46e3-93a6-b4653c7a935a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8b069b75-276e-47f5-83ca-1c5a00dd78f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def90a0f-d650-4cc2-a195-f45214f87fd1",
        "cursor": {
          "ref": "1fc41550-d3f2-4ffd-8b40-012f7cf11380",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "f16584da-7327-410f-a55e-af4b5c009cea"
        },
        "item": {
          "id": "def90a0f-d650-4cc2-a195-f45214f87fd1",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "209f5464-7133-4639-a782-7e0f5a4bb82c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef38081e-22a5-4d1d-8d25-5f5d28afcb0b",
        "cursor": {
          "ref": "6f285ec1-5b58-4e6c-b389-4d77123a1a19",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "280b809d-b972-471b-889f-64b0d0d6b889"
        },
        "item": {
          "id": "ef38081e-22a5-4d1d-8d25-5f5d28afcb0b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2da0038c-3abf-4d44-9a01-8b3792705419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1fe4f75-bcfe-40d9-8117-29d6f483aaf9",
        "cursor": {
          "ref": "81c1267d-9e65-4935-af31-26d1155a5966",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d143f1e6-bf34-4f56-a738-6c7056dac054"
        },
        "item": {
          "id": "f1fe4f75-bcfe-40d9-8117-29d6f483aaf9",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "31d455e0-bace-43c0-a330-a7bbc17be40f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bab921bf-dcf8-4c4d-831e-891e5b264b2c",
        "cursor": {
          "ref": "2eb59715-3784-42cb-b51a-d303be00b68b",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "6afd4d72-c53d-4386-9561-ed3de1143288"
        },
        "item": {
          "id": "bab921bf-dcf8-4c4d-831e-891e5b264b2c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "046f2cf4-f4a0-4965-8677-4f96e19ed156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f373864d-b82d-443f-b578-3fd07d735c5d",
        "cursor": {
          "ref": "d77ba495-ea80-4b8c-83a6-8f16f5b7d260",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ab28ed94-e890-41c3-b41f-6793d06c53c4"
        },
        "item": {
          "id": "f373864d-b82d-443f-b578-3fd07d735c5d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "30c10a75-b086-4bb1-97cf-408cc1b12b5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11f99382-9911-45f5-bc1b-45bd3e2b7ef1",
        "cursor": {
          "ref": "883a41e5-1f3b-402e-9f85-65875e0bcff2",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "1c9e2eac-eaad-4ab6-9573-30e8d6520c92"
        },
        "item": {
          "id": "11f99382-9911-45f5-bc1b-45bd3e2b7ef1",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "10d41db2-b7a8-4247-8565-386ca6d3e35e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "089f6869-1d98-4c97-9bf5-93c58f6d3cd0",
        "cursor": {
          "ref": "c4ab82c9-2a33-4144-b613-63a6cf1a0b5f",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "6013a8b7-6b80-4d3e-ba99-914ea523fc6c"
        },
        "item": {
          "id": "089f6869-1d98-4c97-9bf5-93c58f6d3cd0",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2ef3b7e0-a5f3-42b9-8118-5e069b2b8f8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03bcc88b-5a3a-4b71-9a78-73ce3c112697",
        "cursor": {
          "ref": "d87130b2-2a82-4fed-9f8b-ad5a44e37de0",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7d63046a-303c-4bae-824f-bf101e6fc8fc"
        },
        "item": {
          "id": "03bcc88b-5a3a-4b71-9a78-73ce3c112697",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f2493fad-5ea6-47d3-bb9b-e81c46a28af0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00df7aea-b039-4358-a20e-4236afb46154",
        "cursor": {
          "ref": "55245781-c85a-48a1-924d-cbc0314e98b9",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "647138e7-73b1-4481-8c62-d57620a1a6ef"
        },
        "item": {
          "id": "00df7aea-b039-4358-a20e-4236afb46154",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ba5ff607-10de-4304-9040-62b3152eb9ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4402124a-6219-445a-a429-5e5d36b0c8b3",
        "cursor": {
          "ref": "94979029-5efe-4c42-bab1-d985b8c5cad9",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "ba623bb5-6344-4aa3-b372-dd3d857e0ce6"
        },
        "item": {
          "id": "4402124a-6219-445a-a429-5e5d36b0c8b3",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "120c8409-928a-4656-bf2a-fffbc676763e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d778532-5b75-43a8-af32-74ee76a2a6f0",
        "cursor": {
          "ref": "508e8f82-10ad-464b-a4ea-34ed6e64167a",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ff792683-04f5-4955-83ad-fe1f393400db"
        },
        "item": {
          "id": "4d778532-5b75-43a8-af32-74ee76a2a6f0",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "601c2476-a9a0-4f81-b4f3-adda684e3829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "530ad0b6-e9f1-4278-9e39-edea8fd48669",
        "cursor": {
          "ref": "7192d674-e1d2-41a9-bdbb-29eb80ed60d8",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a448bdeb-c44d-40f1-a9dc-585bb84d6816"
        },
        "item": {
          "id": "530ad0b6-e9f1-4278-9e39-edea8fd48669",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b4c48c1f-7c47-452c-b36b-3c002b2c16de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4586a2da-0071-4f8e-b793-59cbb2d2cba7",
        "cursor": {
          "ref": "2d12e458-113a-4197-b750-a539535b298b",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "5774c3c0-52b2-471d-8592-b9f99b19465f"
        },
        "item": {
          "id": "4586a2da-0071-4f8e-b793-59cbb2d2cba7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "46c16995-768b-4d26-a477-ff4858700a6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ba2fad-30b2-4193-8e11-dcf4bc3274d8",
        "cursor": {
          "ref": "456f7642-e01d-4092-a761-d434a9e69598",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "7e7c4cb6-25aa-44b9-ae61-6f2a40d5d1c3"
        },
        "item": {
          "id": "c6ba2fad-30b2-4193-8e11-dcf4bc3274d8",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ecae377a-1b8b-409d-9dcb-c525f8b7ec17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffe4f647-76fd-4bc5-b7c8-da8ed4414e29",
        "cursor": {
          "ref": "d335df04-e16b-477c-bd3e-e1918b61c992",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "db68fa3f-5f4a-4c7d-a4d7-9ba6ba78471b"
        },
        "item": {
          "id": "ffe4f647-76fd-4bc5-b7c8-da8ed4414e29",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3ad2382a-37d1-455d-a977-ee81002b9e44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf13587-bd40-4cb7-8e03-623e001e5cd8",
        "cursor": {
          "ref": "ebda3e23-5413-4f6b-b66b-b8776e93448d",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ebfc88c6-dfdf-4eea-93c1-5e94ada092b9"
        },
        "item": {
          "id": "7cf13587-bd40-4cb7-8e03-623e001e5cd8",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5e3100e9-4526-4c50-9b44-7c1d2de90838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e65bd97b-ec1b-4c56-837a-10e5798fdafb",
        "cursor": {
          "ref": "7fbcbf3b-e9f1-4980-a899-09e10e98b29e",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "4ca0d45b-8878-4a37-8faa-5d5582d4604e"
        },
        "item": {
          "id": "e65bd97b-ec1b-4c56-837a-10e5798fdafb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "db543bb6-434e-45d8-8765-3f89923dc405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b0f7310-cb3a-483b-8157-edeac5d76cfa",
        "cursor": {
          "ref": "ab664651-f685-4e20-a5ce-304607e27d6d",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "43fe8bdc-252a-49ee-b8b0-e1a16c0ac469"
        },
        "item": {
          "id": "4b0f7310-cb3a-483b-8157-edeac5d76cfa",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ba4d7018-1bf5-4fa7-967f-b5432a7fa560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aabc70a1-0066-4331-9134-b816d1d07d72",
        "cursor": {
          "ref": "87d8c2eb-1b36-49c0-88bb-8d2eaf72d59d",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5d9964dc-6f06-460c-9bb1-72aa6eb311ef"
        },
        "item": {
          "id": "aabc70a1-0066-4331-9134-b816d1d07d72",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "20a37aa7-052f-4e9a-a791-3c9eb530bc86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf89b9f-c96c-4ea3-8d4c-4ab72ce60d67",
        "cursor": {
          "ref": "e9b8a0a7-9841-4be1-b39d-a482ced99429",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "4458fe7a-0d9d-4835-8c86-077ee6833c31"
        },
        "item": {
          "id": "8cf89b9f-c96c-4ea3-8d4c-4ab72ce60d67",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "28da1f47-f226-427a-ae5e-78e1a011328f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9517f25-2163-468a-a23a-de41dd83c227",
        "cursor": {
          "ref": "b441bea7-4a99-4945-a7bf-9916380f728d",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "45515173-d4be-4d69-932c-074ef1a6ca72"
        },
        "item": {
          "id": "c9517f25-2163-468a-a23a-de41dd83c227",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4dbf923c-c7b2-43dc-940e-3effddc3712c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a365d3f6-73a8-4f9f-9655-d6d9ef095171",
        "cursor": {
          "ref": "9e24a256-1140-474c-8935-53f5694fbed5",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "8df755d5-555e-42fc-9125-31794752b94f"
        },
        "item": {
          "id": "a365d3f6-73a8-4f9f-9655-d6d9ef095171",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "37f52f68-7816-400f-b7bc-b0193522baa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c6fe186-411d-48cd-a2fb-8c2f09d39417",
        "cursor": {
          "ref": "1fa9a6c8-a25d-4543-a231-f6b918f1eb33",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "83da9cc6-262c-4246-b160-7912cea18ead"
        },
        "item": {
          "id": "5c6fe186-411d-48cd-a2fb-8c2f09d39417",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "92ed5db4-ccb9-4c73-9174-574485caad3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b032dac-75f0-44e5-bbf1-23e94d7a7d94",
        "cursor": {
          "ref": "27290ee1-5e37-45cd-8f1b-4fe2b4ebb025",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "780c1b96-5721-4825-b20a-d1fa65f52102"
        },
        "item": {
          "id": "2b032dac-75f0-44e5-bbf1-23e94d7a7d94",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "064ffd0e-9137-4378-9650-1071d9c2dd56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4cb3cc7-b174-42b7-9690-df05cdb56568",
        "cursor": {
          "ref": "8ba4432e-dce5-4382-b245-6b4af6d4fe44",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "47ad41fc-6898-4545-8d74-7e9a28c6b232"
        },
        "item": {
          "id": "d4cb3cc7-b174-42b7-9690-df05cdb56568",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "57a13fe7-1508-49de-ae17-f1df963ffb8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66fc1027-963b-4c4d-9829-401b51e1f33f",
        "cursor": {
          "ref": "42e0c90f-bd08-42fa-ae26-b7240ef6dde7",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e669f9ff-9051-4dd7-9714-30af64f1fea8"
        },
        "item": {
          "id": "66fc1027-963b-4c4d-9829-401b51e1f33f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "88468f15-c2f9-4a29-b1f9-ff9780e54b8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8df948a-5520-4c87-b6ba-240c5382c72c",
        "cursor": {
          "ref": "ace73280-ff33-4b7c-8cb4-efa4d97558db",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "6ef5a537-5628-4117-bd92-9a2bd8e639cc"
        },
        "item": {
          "id": "b8df948a-5520-4c87-b6ba-240c5382c72c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "85a24cc9-62b2-4076-a516-b16ba2381b23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19cc082c-4cf0-4eb1-8b5c-bdc7c09e799a",
        "cursor": {
          "ref": "aab46fa3-1be8-4727-a077-9aa230b1ccdb",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "af446ed2-9384-4993-b957-c919c1e055e9"
        },
        "item": {
          "id": "19cc082c-4cf0-4eb1-8b5c-bdc7c09e799a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9d57b810-b1f5-4e7a-998f-2df6d6f6c692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "730fb9a2-62a8-48ae-9bc6-41f03155b0a6",
        "cursor": {
          "ref": "f16b6766-23f7-409b-9538-6d7c9ad94b66",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c29355b7-b6b4-44fc-9d62-022db1ec3e8a"
        },
        "item": {
          "id": "730fb9a2-62a8-48ae-9bc6-41f03155b0a6",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f04c98e8-8b2c-43ab-b700-87ce0dcab5cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a609e507-d1c4-4840-bbb6-06da7b1aa394",
        "cursor": {
          "ref": "7bdade92-5d6c-4865-8746-ec838cce6306",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "4682d52d-4c78-4bec-9e3b-9a67cd682e46"
        },
        "item": {
          "id": "a609e507-d1c4-4840-bbb6-06da7b1aa394",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0b57f3e0-bbdc-4db4-a764-b0f7609d7d9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f19240d1-7f1e-4282-816f-707cdb33ea60",
        "cursor": {
          "ref": "df9bc37e-6bd5-40d5-8e49-ec05f3084891",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "28995d53-f508-4a32-806c-8f0345255364"
        },
        "item": {
          "id": "f19240d1-7f1e-4282-816f-707cdb33ea60",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "fdb3eb39-c182-42f9-b2e6-7b68f794b807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f97ecea-5e42-4dfb-9046-15f1974c3c86",
        "cursor": {
          "ref": "6af26861-d688-4001-94ee-23a2b74892f8",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "22eecf70-bf3c-46ed-8ab3-0cd479001416"
        },
        "item": {
          "id": "2f97ecea-5e42-4dfb-9046-15f1974c3c86",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "227c5e64-296a-458c-ad5c-1e3115c6b07f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89bdf062-7da7-4d7a-98ed-d398d0618d75",
        "cursor": {
          "ref": "ed3103bd-42d4-477d-9ffe-7d0da5782793",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "c0a8c98e-609b-4b45-9ec2-894c117acaad"
        },
        "item": {
          "id": "89bdf062-7da7-4d7a-98ed-d398d0618d75",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "aeadb236-15b8-4c6a-87d3-ec42cc855131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8507c1b8-47a5-4a0d-bb29-acc64dcbc516",
        "cursor": {
          "ref": "50e826de-c78e-4fa3-96e2-7cae87641bb0",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "846dd437-80d3-409d-a2c3-d8449e637042"
        },
        "item": {
          "id": "8507c1b8-47a5-4a0d-bb29-acc64dcbc516",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "ba4e6c96-bf46-429e-aaf0-97e45a7945f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf2076d1-0ab9-4a9c-a3fb-2f33d59a4ed8",
        "cursor": {
          "ref": "26ae2e21-a00e-4790-9afb-274eca4e6a5e",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "4fdde9e0-de7b-4dde-9804-568d2b4ed662"
        },
        "item": {
          "id": "bf2076d1-0ab9-4a9c-a3fb-2f33d59a4ed8",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "b675fdb1-b1f4-4d8c-a7ad-47e74ea43813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f9bab4-0c8d-4468-b320-b83509f47362",
        "cursor": {
          "ref": "9be50021-c7dc-40e5-aaf7-37a18b051f89",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "1c2f96e6-56c6-44c6-8953-2a502e7dca11"
        },
        "item": {
          "id": "c4f9bab4-0c8d-4468-b320-b83509f47362",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "7c6cc1bf-9909-4808-9434-cc1f2570930a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04e8309f-2977-438d-9129-ae407ad4ea2f",
        "cursor": {
          "ref": "ab90144d-4286-4059-bc08-4267bd8afd9f",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "3ed18274-1689-49fc-bc3e-7369f7a7b6d1"
        },
        "item": {
          "id": "04e8309f-2977-438d-9129-ae407ad4ea2f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f9b478d4-cac9-4494-ae55-a21980c91721",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d90f47c-c26d-4dfc-a4d5-eb8359eb55d0",
        "cursor": {
          "ref": "6eabb3a5-0953-4ff3-86e5-edd09bb428b6",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ee9ab152-30a6-4a23-97e9-996c7f077103"
        },
        "item": {
          "id": "3d90f47c-c26d-4dfc-a4d5-eb8359eb55d0",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4b4c2b2b-d256-4541-9ece-91dbe8b0e4bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc960dbb-237e-40dc-8271-918486477b8f",
        "cursor": {
          "ref": "668225ee-5482-432f-a9eb-8c68b58e0b06",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "58114e9b-9491-4888-ad70-33117d3f7c9f"
        },
        "item": {
          "id": "bc960dbb-237e-40dc-8271-918486477b8f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "233e83e4-c498-4920-a292-a4cfe3a4a5f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01664849-5e51-4be5-b34a-4df3689e68cb",
        "cursor": {
          "ref": "eb041087-bd37-49b8-a1b7-de4182f8d219",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "e7d94ae6-d78e-4b41-8d80-f825ec962635"
        },
        "item": {
          "id": "01664849-5e51-4be5-b34a-4df3689e68cb",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "02c00582-0647-4e10-bbb2-16d085468c10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8182735-772e-4f6d-9aeb-876c05964fa3",
        "cursor": {
          "ref": "04fba969-a24f-4c00-9cb9-29212af1a438",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d88d0058-2671-47e3-bab1-abf8776867b8"
        },
        "item": {
          "id": "c8182735-772e-4f6d-9aeb-876c05964fa3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "2ffded5a-1324-41de-b217-afb6d0f7f8b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3307e74-da0a-4ad2-a75d-6da529384729",
        "cursor": {
          "ref": "396d1938-9993-4bf2-8fe1-b893f2559d51",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a330ae91-cf07-431f-b37c-aa570139eedf"
        },
        "item": {
          "id": "b3307e74-da0a-4ad2-a75d-6da529384729",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e006fdfd-92a9-495d-888c-8b74cdc19dde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8bf3e6f-123d-4a40-99b7-4b2952c2e6a2",
        "cursor": {
          "ref": "993a223b-e1ad-494d-ac5a-dd4ce817eecc",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "a03d70ef-bedf-4390-ae92-14f975f74703"
        },
        "item": {
          "id": "a8bf3e6f-123d-4a40-99b7-4b2952c2e6a2",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e83cf283-f033-4e88-afd9-fcbd7d197a0d",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "63d991d2-b4e5-4d84-adc1-e2cbe6a320aa",
        "cursor": {
          "ref": "0cadca66-fba0-4a4f-b70b-1adc5476f629",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "833eada6-dce8-47ad-8142-8a79d7e0fbea"
        },
        "item": {
          "id": "63d991d2-b4e5-4d84-adc1-e2cbe6a320aa",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ed5698c8-fc24-44c3-a0ff-f3b6227ac1f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaef4675-1f49-45c1-b0ef-f306782138a9",
        "cursor": {
          "ref": "51c95c01-5bbf-4acb-b00b-26a241ca1b80",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e956e3cb-2630-4216-bdcc-d7311ee825f9"
        },
        "item": {
          "id": "aaef4675-1f49-45c1-b0ef-f306782138a9",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "309ce07f-8165-4581-a841-d95f1ebe4746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fd45161-50ef-4a76-9b25-34e8ddb0b654",
        "cursor": {
          "ref": "96b3223e-19ae-4665-9ecb-c2e3bf0ff18a",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "fbd123b9-933b-4275-b5c2-61ac72cfa1a7"
        },
        "item": {
          "id": "8fd45161-50ef-4a76-9b25-34e8ddb0b654",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "a02cd076-e998-420d-a87c-4adc4837123a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ce050a-10da-4512-b111-e9c35b7997ef",
        "cursor": {
          "ref": "43acb29d-999a-4d39-ae91-fe7568ba4a61",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c663ce3d-c6d5-4ae1-878c-2c01261ef893"
        },
        "item": {
          "id": "b2ce050a-10da-4512-b111-e9c35b7997ef",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "2a6d2dfe-a085-410c-9506-c9c26ab870e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1cd2c11-25d3-4b3d-9e90-eeb2ae65fb9b",
        "cursor": {
          "ref": "0a55ac78-4db3-4d75-85c5-55af1ec28a6d",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ca958a41-a902-4a21-b6a1-55b9bae4dd0b"
        },
        "item": {
          "id": "a1cd2c11-25d3-4b3d-9e90-eeb2ae65fb9b",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "92874806-73fb-4a80-8c22-a798d5d34236",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d86d386-5a7a-4552-83ce-95ec65716ced",
        "cursor": {
          "ref": "a32ff7f8-f801-4ea1-b917-e93e8cf047f3",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "5beb00ea-e322-4547-9805-a90efb9b5fa7"
        },
        "item": {
          "id": "9d86d386-5a7a-4552-83ce-95ec65716ced",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "197da4ba-ae5a-4b5a-8772-c3146a40e827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ceefa63-4d1f-422b-828e-c83893263e94",
        "cursor": {
          "ref": "3dcaa49a-c6d8-48ae-8675-2617efc5b52a",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "a4a72935-fdaa-4788-b68e-cb11634bba58"
        },
        "item": {
          "id": "2ceefa63-4d1f-422b-828e-c83893263e94",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "7e145be9-df9b-4fac-81fc-8e4cd669370e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a8e6281-5a86-4b53-b4f9-0793d8ae49af",
        "cursor": {
          "ref": "f60d2fcf-6139-408b-b7d1-ca4e1afa0800",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "afda8d6f-b0f4-43a6-9248-c7bc6457c3a5"
        },
        "item": {
          "id": "3a8e6281-5a86-4b53-b4f9-0793d8ae49af",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "ccdcf5e8-0f32-457a-b76a-f3eaaba68980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21477cc2-3ed0-46ae-9233-294aafd657c1",
        "cursor": {
          "ref": "5a681e8c-352b-4795-b64d-64aa43de7aef",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "225418f7-550f-4ebb-bba9-f36ece551595"
        },
        "item": {
          "id": "21477cc2-3ed0-46ae-9233-294aafd657c1",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "0bbba37f-f936-471a-87a6-b1b1eb3a71e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52426b45-c7e0-43d1-bdbf-bf4491189d96",
        "cursor": {
          "ref": "bf81a378-9836-4c43-a470-410e9f0a2875",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "3d9e6593-8fde-42d8-a25b-c9044b976ee8"
        },
        "item": {
          "id": "52426b45-c7e0-43d1-bdbf-bf4491189d96",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "d1ca61a4-e3ae-450e-b1fd-430d72f95d7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1109a848-b3c3-4b71-a733-f9626e05d76a",
        "cursor": {
          "ref": "48ca7333-124c-41e4-b7b8-f2417a841f45",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "5b3ef913-ab7c-4f30-9192-bb82949db5c2"
        },
        "item": {
          "id": "1109a848-b3c3-4b71-a733-f9626e05d76a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "42d08b15-fbc3-4785-90bd-e472dcc6f0a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "461ed2d0-e8a4-4e80-827a-866f11ebefc5",
        "cursor": {
          "ref": "e361a3ca-1f2f-4277-8200-77aa21716ead",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ff9118ca-b2a7-433a-a32e-8e590cb25363"
        },
        "item": {
          "id": "461ed2d0-e8a4-4e80-827a-866f11ebefc5",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "93e1e844-d682-41c6-810e-f0a8b75be934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c692b929-f75f-4aeb-943b-4ee1bf9be84a",
        "cursor": {
          "ref": "431fb943-10d8-4e4a-9f53-950204bf9cea",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "765ed354-0a5e-41a8-b46e-0a82a89b4f10"
        },
        "item": {
          "id": "c692b929-f75f-4aeb-943b-4ee1bf9be84a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "30f93e06-1f8e-433c-8cf2-dea3807db883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcda6329-ccec-4067-98ad-881be713aa1e",
        "cursor": {
          "ref": "01b5e274-738e-4d9f-9e6d-1f4b88e3cbcd",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5fd8c90d-0065-4097-9677-95f94195d387"
        },
        "item": {
          "id": "fcda6329-ccec-4067-98ad-881be713aa1e",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f764a07f-4d7b-41cb-bf4a-a71f72877d20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec86260-106d-4c46-8bae-601694d3c510",
        "cursor": {
          "ref": "6f1a1df5-3751-4d2c-8e6e-7a7016952334",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "160c2eba-4119-408a-93e3-5aac99285d50"
        },
        "item": {
          "id": "1ec86260-106d-4c46-8bae-601694d3c510",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c54f0fe8-0a43-45c6-8b24-1ed6fd758217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b09929c-90d6-43b7-a0a6-c154874cb9bb",
        "cursor": {
          "ref": "8d193743-d846-4e7a-96a1-9b5fb34886cb",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "4aa2e1ca-3048-4ada-a6b1-356a37a05228"
        },
        "item": {
          "id": "6b09929c-90d6-43b7-a0a6-c154874cb9bb",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "1256954c-ad6a-48fa-9312-d12f7441b713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54279b61-e58c-4ae6-8668-98f6e3ebd682",
        "cursor": {
          "ref": "ec786e27-2a48-40eb-898e-8b9419d5b524",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "bf0d47ef-1a88-4b62-8c48-e0bfca3eba13"
        },
        "item": {
          "id": "54279b61-e58c-4ae6-8668-98f6e3ebd682",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8f208acd-343f-4099-8cda-9c9cfe6c94bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b668a8-e4c0-4b8d-8c60-26adc3fffb76",
        "cursor": {
          "ref": "0a978a7b-d39e-492a-9b9b-044ff51eb246",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "19242de5-810b-4467-92a0-c5912f557fec"
        },
        "item": {
          "id": "28b668a8-e4c0-4b8d-8c60-26adc3fffb76",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e7a5bcbe-26af-451f-a041-ca6a0b77c5cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e88b8b9-bb46-4ab8-bfa5-f01352daf001",
        "cursor": {
          "ref": "ec1447c4-915c-49e7-88b2-89ab220b1217",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "1b784b57-9e5a-4c79-a38f-d3fd26f1cba5"
        },
        "item": {
          "id": "4e88b8b9-bb46-4ab8-bfa5-f01352daf001",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "4933d347-8e6f-4bf4-b258-e62b9c63bd0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fe05d7e-e2e6-4e6e-b874-823e025faacd",
        "cursor": {
          "ref": "c237282d-d523-4247-b8aa-7836229ef295",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "0f243c09-3973-48d9-a4a8-9d8d7dd04cb8"
        },
        "item": {
          "id": "7fe05d7e-e2e6-4e6e-b874-823e025faacd",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6e153655-9157-4262-9cdf-ab30f67f3702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f3c504-3f6f-4419-b7f0-aa40ce5fdbe2",
        "cursor": {
          "ref": "5c3e019c-6f9c-4970-bb6e-ea131da3a509",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7ee89693-6a68-49ab-b2d8-998779fd7a6d"
        },
        "item": {
          "id": "d4f3c504-3f6f-4419-b7f0-aa40ce5fdbe2",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "5b6e1d07-7f98-4108-9a93-eabda8ef4a7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bc5de2c-b0d9-484e-a350-7923f5899b8d",
        "cursor": {
          "ref": "24f3b29a-e502-461b-a540-5e875783498e",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "5c32fb02-605f-45a7-bc0f-9ac75b898066"
        },
        "item": {
          "id": "8bc5de2c-b0d9-484e-a350-7923f5899b8d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a3fa7355-6e1e-42e3-b1a4-acfad50bf5a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd949341-9bf2-48b8-b476-7774f2339cd6",
        "cursor": {
          "ref": "7017f3a4-1b75-4aaa-a48d-5a85a6558e74",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "7fce4580-3c39-4a9d-b49b-60ee7cb6bcd1"
        },
        "item": {
          "id": "fd949341-9bf2-48b8-b476-7774f2339cd6",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a9d15180-035d-44d0-bc64-d6a0a14a964b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad413199-3593-4419-9e38-386123e9ac68",
        "cursor": {
          "ref": "bbe8af05-7b37-4bf4-916e-05e301ca9909",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "7064b5c3-d9a3-47d9-b472-39ae34b4bd32"
        },
        "item": {
          "id": "ad413199-3593-4419-9e38-386123e9ac68",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "9d357fc7-b78e-4291-bd89-417bf827f544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e7d09db-de65-45b4-bc36-d56b92e6e5ef",
        "cursor": {
          "ref": "fc50970d-4095-4b3b-b169-22242ea45f82",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "6b7e6d73-a31b-4067-9f6f-05c79da94a90"
        },
        "item": {
          "id": "6e7d09db-de65-45b4-bc36-d56b92e6e5ef",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "6b94ae94-dc90-43f4-9692-e3ad815f715e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e90e01da-07b2-4621-bbc2-5fad5f70ffe8",
        "cursor": {
          "ref": "558fcb21-38a0-4390-a004-657e3be04da1",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "bbfed610-2411-4d79-b810-12eb53b71064"
        },
        "item": {
          "id": "e90e01da-07b2-4621-bbc2-5fad5f70ffe8",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "cf805fb6-0ed9-410b-954c-c9d7f44e0649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d3ecf26-22aa-494c-bf5a-62b59502f2d3",
        "cursor": {
          "ref": "c884e3e6-773f-477e-b83e-83e5359e335d",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "29f44400-d25e-47ea-8098-50aa9326faa5"
        },
        "item": {
          "id": "9d3ecf26-22aa-494c-bf5a-62b59502f2d3",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e5e87cea-fe92-4467-abba-4839f8149640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "877eb6a3-a066-4325-9e3d-111eb12c5b6b",
        "cursor": {
          "ref": "fd9c7a1d-844a-4ad3-91d2-b6e4031fbb53",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "19c0b967-812c-48ad-aaa6-f118e6bfbd36"
        },
        "item": {
          "id": "877eb6a3-a066-4325-9e3d-111eb12c5b6b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "946c1a26-c523-4925-8a08-5bf2bb73ed86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a42cf208-383b-49a0-9bc6-21e6c66e099e",
        "cursor": {
          "ref": "8d68a976-e7ef-4d29-b715-0af1b541642a",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "98aa60d7-a838-4936-9fe0-67ec26ff36ce"
        },
        "item": {
          "id": "a42cf208-383b-49a0-9bc6-21e6c66e099e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "2c672b31-1712-4775-815a-919c2f13256b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26e9a05b-a1a3-45d5-ba58-113ade92803e",
        "cursor": {
          "ref": "c639ab76-4a0c-4b1f-a1c7-7e56ae84c784",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c6d5e05f-5e05-4c95-a53b-405be114519e"
        },
        "item": {
          "id": "26e9a05b-a1a3-45d5-ba58-113ade92803e",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "7238868c-8fef-45f1-b006-47b0e5134326",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "94418c25-a4e5-4091-93e3-f1aec306d99a",
        "cursor": {
          "ref": "17f583c3-6c70-44d7-bbea-3733352d2eba",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "cca3a53f-5426-4b83-80d2-f0c805797cd3"
        },
        "item": {
          "id": "94418c25-a4e5-4091-93e3-f1aec306d99a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "5f5fc4dd-4169-4fea-98ec-2b73cdf3c2d9",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "c29b8131-533b-418a-a53c-8835f982df57",
        "cursor": {
          "ref": "ae3aec10-e36b-41be-b7d8-a36d33ea6318",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "1a9fb8c6-537a-4059-93f7-02da60663fc5"
        },
        "item": {
          "id": "c29b8131-533b-418a-a53c-8835f982df57",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0be236df-1f1d-4650-9c17-0ac547bd8e6d",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "13f286af-4cb9-4c84-862a-08787f3e8aa1",
        "cursor": {
          "ref": "08aebb4c-c9d0-4577-9e4d-ee462039710f",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "47c2f8ba-aceb-4968-9bd2-bdd083178f80"
        },
        "item": {
          "id": "13f286af-4cb9-4c84-862a-08787f3e8aa1",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "9842c5db-8933-4e65-9286-47b94e95aeb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c51d34a-ac42-4fd1-a8b9-417b80277a17",
        "cursor": {
          "ref": "f6ce58f2-63f0-4b8e-85ac-92b72b6eafbc",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "5abfa683-9186-4f19-b4f3-a69403b894d6"
        },
        "item": {
          "id": "7c51d34a-ac42-4fd1-a8b9-417b80277a17",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "186fc7f9-704c-4bd7-9e2c-057b31e3648b",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "3744f896-17a0-49c0-8c18-2e18a736b9ba",
        "cursor": {
          "ref": "3a0f3249-6452-4ef4-83d9-7c1f85e28bee",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "0f1ccf65-8cfc-4d9c-be1f-08d18b0699d1"
        },
        "item": {
          "id": "3744f896-17a0-49c0-8c18-2e18a736b9ba",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "91d44035-b5c7-4f91-b1f0-cd3a2cdc2141",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "a4ff567a-f453-485a-b020-a0cbf0d801db",
        "cursor": {
          "ref": "c2daa6d7-4892-4c64-ab74-1d1342fb58a6",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "8d13cfea-2f7b-4b6b-97c7-21fa7bd57bc9"
        },
        "item": {
          "id": "a4ff567a-f453-485a-b020-a0cbf0d801db",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a968a02b-f425-4890-a34f-71e32cd2c6c0",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "260b34cc-aac9-47e3-a368-72906b293428",
        "cursor": {
          "ref": "d7a7ab2e-21c4-42b3-98e5-9c73d3003a9c",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ec23f705-7613-4add-b95d-2b0b53d058cf"
        },
        "item": {
          "id": "260b34cc-aac9-47e3-a368-72906b293428",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "68691b51-b0ee-4b29-930e-9fed07324341",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "f540103e-0baa-4b77-8508-920bd6c9754e",
        "cursor": {
          "ref": "c1dbda9f-71a5-4b5a-bf57-2fef7ffe3a6e",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f74cd31a-4377-4b2d-87f8-160e6281fc07"
        },
        "item": {
          "id": "f540103e-0baa-4b77-8508-920bd6c9754e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "64bad85d-0ae5-4df0-b41a-124dafb5ed93",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "68901584-4a07-4612-9382-82dda249e35a",
        "cursor": {
          "ref": "78fa6677-0e7d-4bf2-a66b-55e771a51c8e",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ed5657e8-3b1c-437b-8cb5-aa92e9346837"
        },
        "item": {
          "id": "68901584-4a07-4612-9382-82dda249e35a",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "92b3ce0a-24de-4caa-89fa-82fc009bb1b1",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "55b48ad2-c9c9-47b1-9cbc-8f24f09bb295",
        "cursor": {
          "ref": "a8ec8312-fca3-46c3-b0f5-8149c4bf8020",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "6a36d70a-d653-46a9-bd81-ee5098ccc009"
        },
        "item": {
          "id": "55b48ad2-c9c9-47b1-9cbc-8f24f09bb295",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "51a067ce-4e09-425f-a38c-052b83cc42dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "532cf30f-be6f-47a0-ab5e-cf2df767cf55",
        "cursor": {
          "ref": "36b20d73-e186-4d54-991e-054c86a4c7c5",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c222e224-e08a-402f-93df-19a3cc2821f6"
        },
        "item": {
          "id": "532cf30f-be6f-47a0-ab5e-cf2df767cf55",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "da298202-f56c-4631-b4d6-fea1430459f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4241056-610e-4619-87ec-adae7a41a09d",
        "cursor": {
          "ref": "ebfb8c30-4e4b-44b0-8025-64900c17e4fc",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "af93d9f6-f3fe-4114-8a78-cec3d0a1b929"
        },
        "item": {
          "id": "c4241056-610e-4619-87ec-adae7a41a09d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "ee2cbf84-c289-4f9f-b45c-a5ccf1c909f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90d7d892-40cf-4abe-ac71-631c44587fd3",
        "cursor": {
          "ref": "b97af3e6-0834-4759-abfc-0bd178fc0309",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "725411be-1590-48c0-87ef-124c5663f95d"
        },
        "item": {
          "id": "90d7d892-40cf-4abe-ac71-631c44587fd3",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a7645551-f910-418b-aa21-3ac3436fb293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52034b78-a7b1-4270-bf35-f301ccb8cd7f",
        "cursor": {
          "ref": "43250f9c-d284-4a76-b941-3b4e5a11be2b",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "7721e1da-d503-4263-8b5b-b6ab7f540f98"
        },
        "item": {
          "id": "52034b78-a7b1-4270-bf35-f301ccb8cd7f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d2894e53-8fcf-4d13-838e-fe8e5bedd18a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "919a1aa7-5995-4516-8f54-b349c1e76bf8",
        "cursor": {
          "ref": "65e775fb-795a-4cf1-a52e-1f889cc79735",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "00b01fb1-d4d3-4aea-88a7-39e57aac6f48"
        },
        "item": {
          "id": "919a1aa7-5995-4516-8f54-b349c1e76bf8",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "a5ed323d-d9f9-4f1a-aece-1ad3bb088de9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d5f2bbc-52bc-4fa9-a56c-cc028a71e5cd",
        "cursor": {
          "ref": "1bf303fa-182a-4353-b973-a1578b49479e",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "098299f2-4cb6-49d1-bb2b-38ed3e0a4310"
        },
        "item": {
          "id": "0d5f2bbc-52bc-4fa9-a56c-cc028a71e5cd",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7c2cc9e5-a1cd-4b45-b268-d5d2080d5cbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c347ea35-9de7-4774-b090-f992740053cc",
        "cursor": {
          "ref": "9713162e-245e-41ed-8b64-f4fd96ff7033",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "72aecb17-325e-4cb3-977f-bee98763086e"
        },
        "item": {
          "id": "c347ea35-9de7-4774-b090-f992740053cc",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "662e4e7d-9b52-43af-af5a-dc3802f116af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c70d1ec-ce33-4136-b719-0bb9c77fc0c8",
        "cursor": {
          "ref": "17be85cc-61e9-46b4-8cac-0845825ec0f5",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b7a4d91c-5028-462d-ab11-ce0ae8a7b09c"
        },
        "item": {
          "id": "5c70d1ec-ce33-4136-b719-0bb9c77fc0c8",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "3baa380d-24a6-4fd9-a1b6-e444f52e968f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f3c1754-4549-4609-aaa0-550d8a421fa1",
        "cursor": {
          "ref": "e2671c5e-94a1-4e56-b03e-f5ba8000080d",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "cbd97ba8-4711-459a-87fe-df4cb5d90d04"
        },
        "item": {
          "id": "2f3c1754-4549-4609-aaa0-550d8a421fa1",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "729095d4-d024-4f8a-80a4-f172d5a42585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9a7c66b-5d58-4002-b3dc-8fa59a7a9d34",
        "cursor": {
          "ref": "da18d377-26af-4f05-95ba-f234403f12ab",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a5456a86-13a4-43b0-a119-c780b69a0b75"
        },
        "item": {
          "id": "b9a7c66b-5d58-4002-b3dc-8fa59a7a9d34",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "81fe0d99-97b0-4929-9e98-25a93254cd8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a61c6b50-ffa8-4352-be2f-0f63b480000c",
        "cursor": {
          "ref": "52dbcf22-35b4-42dc-9154-dd5d617083f6",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0aae4dff-fa8c-40f0-a702-f5ecc5636d24"
        },
        "item": {
          "id": "a61c6b50-ffa8-4352-be2f-0f63b480000c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d8a6a393-1625-49dc-8d1d-5545c78c5fea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6160333-fc05-41b6-a8ec-d492076ee9a5",
        "cursor": {
          "ref": "c34f69d9-916a-44aa-9341-8897ecffcac0",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "7472fa15-5db7-4339-abcc-332c713d7204"
        },
        "item": {
          "id": "c6160333-fc05-41b6-a8ec-d492076ee9a5",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "34d66e10-a927-4e5e-8f54-4e60a599f6b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62df44dd-3084-40c9-b4a5-6686a6e20b97",
        "cursor": {
          "ref": "4143c811-2616-4aad-b78a-c826f743a701",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "1c431f48-307d-4da0-9731-97191ea3d7ef"
        },
        "item": {
          "id": "62df44dd-3084-40c9-b4a5-6686a6e20b97",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f9c36e64-50ab-40d0-a71d-079a1d3edbbe",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "d5ed76ee-fe01-480a-b9e3-db51daac70c0",
        "cursor": {
          "ref": "9a805837-200e-461c-95cb-caa836fe068c",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "125a4c3d-d3a4-44f5-b02d-6dc258085a57"
        },
        "item": {
          "id": "d5ed76ee-fe01-480a-b9e3-db51daac70c0",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "94792909-5fa1-4ce9-9c6c-b58f0ff05cea",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "2858a150-2152-44e3-b03e-115b7727f006",
        "cursor": {
          "ref": "7c91cb26-9c99-4db3-b901-c85723ffcb5d",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "801f9e1a-6e49-47d9-8c47-ede3d0748f77"
        },
        "item": {
          "id": "2858a150-2152-44e3-b03e-115b7727f006",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "db91b67e-7d65-424f-af6f-b4e253715479",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "2047be20-40fe-40c1-80a5-448e36ddd401",
        "cursor": {
          "ref": "47fac713-c211-48c9-b727-61aae31e9225",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "828f2ec5-c75b-473a-858f-acc09cfa2328"
        },
        "item": {
          "id": "2047be20-40fe-40c1-80a5-448e36ddd401",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "94514609-9a3a-422e-87ce-ba3c4fd8d868",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "9406216c-9c3d-4c1a-93df-045f777f2bf5",
        "cursor": {
          "ref": "51da00f3-61ab-43bd-add8-32f9becc3cdd",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8f5a5d62-c293-4df0-b8ee-72a3ef128b26"
        },
        "item": {
          "id": "9406216c-9c3d-4c1a-93df-045f777f2bf5",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "2dab4220-fcf8-4a33-ac96-618a1950baed",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "b11bc77e-838a-4968-aa4f-c9fb7da20cb2",
        "cursor": {
          "ref": "c478bcfe-82d2-45eb-9729-c8a0ffeabb3b",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c4a9ec18-ae64-4b8f-a0bd-60625113f496"
        },
        "item": {
          "id": "b11bc77e-838a-4968-aa4f-c9fb7da20cb2",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "57780c89-8848-42e3-b42c-d4b7678f815c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44dbbcd4-e967-4fa9-a14c-5e327b9d4337",
        "cursor": {
          "ref": "6e083e93-dd9d-4b34-a1b2-89083c755a7f",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "da16b28e-4f93-49de-955e-48cb9f3b5e50"
        },
        "item": {
          "id": "44dbbcd4-e967-4fa9-a14c-5e327b9d4337",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a56accaa-8b8b-481c-b55c-2b21f340e8d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70b02dac-83e8-4b6d-b493-229d4f84e22c",
        "cursor": {
          "ref": "f411d05a-f277-46d3-a59f-e54520213cc1",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "0255cae3-fb08-4efe-b948-f3577b420dbf"
        },
        "item": {
          "id": "70b02dac-83e8-4b6d-b493-229d4f84e22c",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "223b612f-cc44-48d3-a515-edb99ae7a658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d112490b-bca0-4b46-8e68-37e8b1069a99",
        "cursor": {
          "ref": "3d3c0ad5-43bb-4f40-a33b-a26baaa53a22",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e8f5118b-966d-4082-b64b-40d79a855f13"
        },
        "item": {
          "id": "d112490b-bca0-4b46-8e68-37e8b1069a99",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b1b13800-7187-48a4-ae9b-8e6b7235e414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "644bceaf-25d8-4809-8fc5-8bb0a62a9977",
        "cursor": {
          "ref": "6e19153d-7d33-4faf-a764-9dd33c054ffa",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "8c7f7d6c-14c5-4cd1-b89e-550e9abe89ff"
        },
        "item": {
          "id": "644bceaf-25d8-4809-8fc5-8bb0a62a9977",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "addf2829-b357-4e36-9ab8-7ebc2698bd17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8899cc64-40b1-4c91-9f6b-be63a6133d09",
        "cursor": {
          "ref": "6f9cce43-0316-4406-9bec-87e82331c435",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2062a4f4-68e7-4ef9-a910-5fe1e6bd0db6"
        },
        "item": {
          "id": "8899cc64-40b1-4c91-9f6b-be63a6133d09",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e529fc3a-22a5-4d89-9349-c3b1ff005b38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b386e22-5104-4dc1-af67-5766819fec18",
        "cursor": {
          "ref": "fc151fc1-0dba-4511-bc7d-773138d686a5",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c544688e-2c30-444b-8a3e-daba28b9d91e"
        },
        "item": {
          "id": "8b386e22-5104-4dc1-af67-5766819fec18",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "f3ee8dcc-a3bf-4911-879e-62f595db4a82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd9c30b6-9d83-4cf5-876d-814ef2814aa4",
        "cursor": {
          "ref": "de35a267-5ea7-4eb2-a664-781a0f8c6850",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "0272fd06-eb41-4f4c-83d9-97a218357a95"
        },
        "item": {
          "id": "cd9c30b6-9d83-4cf5-876d-814ef2814aa4",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "7e8b94e6-2af0-4ca8-80b9-86e760094636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7167b0ae-1976-4f4e-828d-31d03738ec1a",
        "cursor": {
          "ref": "ec32ac5b-7610-4a0d-a32a-6d464d095403",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "f45686ab-c9ab-4139-ab0c-6667b09dac6a"
        },
        "item": {
          "id": "7167b0ae-1976-4f4e-828d-31d03738ec1a",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "f826242c-0a96-438e-b6da-beb3d32bdbd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eba0881b-4092-45cf-9bf0-6c0de85171c4",
        "cursor": {
          "ref": "5ad48a82-f8d1-4b47-b7e1-a0dd490158a3",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "35a1741c-6139-4598-aad6-2aba773230d5"
        },
        "item": {
          "id": "eba0881b-4092-45cf-9bf0-6c0de85171c4",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "01122390-05e2-4152-a9d1-fd0fc7a4eca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db54aeec-b611-4b41-a21a-e31c4ab538cd",
        "cursor": {
          "ref": "b3e89e21-82e4-4467-a334-0cc10f69d7be",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "2dd39f72-984e-4763-933c-2ba74ffc3ae5"
        },
        "item": {
          "id": "db54aeec-b611-4b41-a21a-e31c4ab538cd",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ac875807-195b-441c-b8ed-892c5da5cfb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25af5c07-63d7-4d8a-a181-a1d6e6fd8b71",
        "cursor": {
          "ref": "36337680-0f3b-4032-be36-75cf4867a13b",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "abf0a55b-4a6d-4191-b4d1-ab32e6a743b2"
        },
        "item": {
          "id": "25af5c07-63d7-4d8a-a181-a1d6e6fd8b71",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8dd0eb5b-4172-4426-b226-d35671460098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "709059ef-5969-4acf-bad6-2602637e54ef",
        "cursor": {
          "ref": "30aa4238-cbd4-4fcf-ae76-99cb1f812232",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "919b3826-576d-4f54-9d1b-462822de3718"
        },
        "item": {
          "id": "709059ef-5969-4acf-bad6-2602637e54ef",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "13b76632-e78a-4e0e-932f-157356508174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46050ee2-529f-49cf-843c-4591d680efb7",
        "cursor": {
          "ref": "a7acde57-e8b4-4576-93dc-6710b6b6ba99",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "cae2bdee-843b-4ef1-8ea0-3f3fb4c19a57"
        },
        "item": {
          "id": "46050ee2-529f-49cf-843c-4591d680efb7",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "8959c362-47d0-4980-907a-1fed09aacbe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a64a56ef-58b2-4027-bfb5-cd91507e6eec",
        "cursor": {
          "ref": "a38d3127-6a50-4fbc-af17-2c4242191c73",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "ec6dafc2-eb17-4831-aae3-6db57f38ae83"
        },
        "item": {
          "id": "a64a56ef-58b2-4027-bfb5-cd91507e6eec",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "d4e693f0-644d-48c1-834a-797530d38a7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68a7c283-0edf-4c9f-bea6-dbfb3c6a5fdc",
        "cursor": {
          "ref": "9c23f88c-c019-4d41-a56a-d5c6bf11cfbf",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "5242b0d0-17a7-4467-ac98-7ab4d8088011"
        },
        "item": {
          "id": "68a7c283-0edf-4c9f-bea6-dbfb3c6a5fdc",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c288972b-c3d3-4965-96b5-1e0030686320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92842860-8d87-4f08-91d4-440f7e1f67ec",
        "cursor": {
          "ref": "12896863-84ca-4f60-ba47-e81c24d63c03",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "03330da5-c86f-4e87-bdda-7e31d3a53288"
        },
        "item": {
          "id": "92842860-8d87-4f08-91d4-440f7e1f67ec",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "022d81b6-61b4-455d-9c95-75e85af95665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e6ebe1e-4ab3-41d6-bc28-175eeb3ef6dd",
        "cursor": {
          "ref": "dbeab486-3831-405e-9a57-86e2b54ddb18",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "9809caaf-b0b6-4a0d-8034-802cbfca666d"
        },
        "item": {
          "id": "6e6ebe1e-4ab3-41d6-bc28-175eeb3ef6dd",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e3b52288-954b-494b-9cfb-30cc0145272a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a562dfff-7233-40bc-b63b-30cc02bd68a8",
        "cursor": {
          "ref": "798ea3be-7029-453e-8579-4e4153d6ef0b",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "976e7d63-2be1-4b29-a314-28c1bafa1044"
        },
        "item": {
          "id": "a562dfff-7233-40bc-b63b-30cc02bd68a8",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a7395e30-02d3-4019-ad66-bfb62b252eeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b97861-9cf0-4eb4-ba34-ed6b130cc249",
        "cursor": {
          "ref": "a05fc770-c3b4-430a-b2f5-bd2adf02b28e",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "aef62faa-b41b-4435-94a1-531387220c63"
        },
        "item": {
          "id": "f2b97861-9cf0-4eb4-ba34-ed6b130cc249",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "93880881-2bdc-426c-ba25-0237df46a648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83644bca-f298-4538-aaaa-74fa5a008795",
        "cursor": {
          "ref": "e6c34a53-cc17-4c0b-b99b-319b3d877dfe",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "6ccf575c-03c5-4599-9b6c-8b80367f2904"
        },
        "item": {
          "id": "83644bca-f298-4538-aaaa-74fa5a008795",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "739b776e-66a9-4a99-b231-6ecea6b274ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01998a45-04bb-4905-a8eb-57327fc0a23f",
        "cursor": {
          "ref": "c857dde9-5264-4f89-808e-d28b588c5d8f",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "6a416f40-7203-4eaa-be40-125ff9088e21"
        },
        "item": {
          "id": "01998a45-04bb-4905-a8eb-57327fc0a23f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "b6b013e1-5d7a-4357-b810-17caa51da692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "873c2ffe-4dc1-49ce-be18-9e8d48c03d0c",
        "cursor": {
          "ref": "36e2d5c3-7d68-4093-8847-bd21d58eed4a",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "ad4feec3-a860-4f7c-a38f-3fcc9cd9709c"
        },
        "item": {
          "id": "873c2ffe-4dc1-49ce-be18-9e8d48c03d0c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "7f4bc7f4-3537-48fb-a927-aa858df53853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aa729b2-e9af-4e1b-998a-db8927b8db2b",
        "cursor": {
          "ref": "5b20bea2-b8fe-45d5-ac44-0db0cbc0700a",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "ae79bd27-ebd2-45a7-8b1d-d517a9501c93"
        },
        "item": {
          "id": "7aa729b2-e9af-4e1b-998a-db8927b8db2b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "8d6500f2-907c-442c-90c5-73c2aa89f4f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e649ad-6ae1-493c-bc22-03932ec46fa3",
        "cursor": {
          "ref": "813c09c7-1b5e-4c5b-82b9-2a2dfe77172b",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "d300b23e-2b54-4d58-a888-a8b9da61ecf8"
        },
        "item": {
          "id": "33e649ad-6ae1-493c-bc22-03932ec46fa3",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f57177dc-93ef-4d86-bde7-23f6106d0a84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3061ac81-6e97-40a5-b5b8-f9be2d0c12c2",
        "cursor": {
          "ref": "c85bee57-a63d-4f68-89a6-3de53a1e2d0f",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "ded4a469-a1b3-456a-8c3c-a3cc6fce9fdb"
        },
        "item": {
          "id": "3061ac81-6e97-40a5-b5b8-f9be2d0c12c2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "5b7a9746-99a2-4d8b-bd91-d08a2382df57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a00ae695-70c2-4a2f-b5ee-95dc36ef482c",
        "cursor": {
          "ref": "8860cd2b-5515-48d6-9d57-a123a43c7587",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "a9a7f252-7142-44aa-8acc-9644462fb5eb"
        },
        "item": {
          "id": "a00ae695-70c2-4a2f-b5ee-95dc36ef482c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "9c2685a2-a9f3-4acd-a91d-ed541b94427d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8acf160d-f7fa-41a3-b1ec-107c39a43e78",
        "cursor": {
          "ref": "cd579bdc-0b56-415a-8f83-5d1d47d8f030",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "2cf7576c-1019-43dc-b83c-3d25ecd64cea"
        },
        "item": {
          "id": "8acf160d-f7fa-41a3-b1ec-107c39a43e78",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "ced53576-2886-4401-b9e1-00c7f7d9a676",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c55fb2cc-a851-40d0-ab86-a494e7dc4f50",
        "cursor": {
          "ref": "08654e75-0e54-4627-8472-c7ee389db5b6",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "ca8ead1e-b189-4c69-8e1d-b1adcb11fe38"
        },
        "item": {
          "id": "c55fb2cc-a851-40d0-ab86-a494e7dc4f50",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1f585b97-8465-4053-bb58-5ed8f3b76cae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "307012ef-425d-493a-b481-4023dc0cef6c",
        "cursor": {
          "ref": "0b7b531b-fe6e-426f-b3ad-701fe384c402",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "a01033a4-a74f-4e96-be8c-db6252824e5c"
        },
        "item": {
          "id": "307012ef-425d-493a-b481-4023dc0cef6c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "17672f16-962e-4e7f-867b-bdab5e61b385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96290af7-e9bf-41e8-bad0-38c1f4ebf325",
        "cursor": {
          "ref": "ed0e632b-69fc-4c36-8a2e-265368e6efb7",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "d179a490-f344-4de2-a1cd-c2d35128c665"
        },
        "item": {
          "id": "96290af7-e9bf-41e8-bad0-38c1f4ebf325",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "26152dfd-3122-4365-a2ad-1f66127a9316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72741a0c-f150-4d0f-b166-053522529b75",
        "cursor": {
          "ref": "c76aec6d-c743-4939-89d2-56b8f977b83c",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "027a97c1-f204-4ad2-a1ae-5a693f0498f6"
        },
        "item": {
          "id": "72741a0c-f150-4d0f-b166-053522529b75",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ca440ac9-6d83-45f5-b66f-828047d3f25c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2a314a0-bd38-4511-8717-d10eb2cf9129",
        "cursor": {
          "ref": "c982a061-c86b-4b3d-bb21-013a5cff8825",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "9b7fcaf4-8a5c-43e8-a6dd-c3911c3bca9e"
        },
        "item": {
          "id": "f2a314a0-bd38-4511-8717-d10eb2cf9129",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e66bde01-71b9-4f37-bada-e4cb1c059b50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf4668d-9ce5-4d2b-8f45-c42331dc063e",
        "cursor": {
          "ref": "c324fd9e-05a5-43a2-b422-4e4864e5ae7b",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "ed92f6c4-3435-4971-a8f8-7bd9b18bcefc"
        },
        "item": {
          "id": "ebf4668d-9ce5-4d2b-8f45-c42331dc063e",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "319ec702-6625-4fef-86da-7601d859179c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42e45fb2-c838-4f61-a0c2-8719bc91c0ed",
        "cursor": {
          "ref": "9a6a4b1e-4e69-44ab-b2b6-7c8fe2415a8f",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "234f6a5b-399c-4720-b842-26b2e66aac4f"
        },
        "item": {
          "id": "42e45fb2-c838-4f61-a0c2-8719bc91c0ed",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d9f1a130-e1aa-45a0-afc2-d994a9696fe5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "423b1337-4365-41e2-bc90-368223eebaf2",
        "cursor": {
          "ref": "6597cd5a-5663-40e4-bf29-49978a3a344c",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "8f5e6bfb-a4aa-4a67-9677-0364868a2724"
        },
        "item": {
          "id": "423b1337-4365-41e2-bc90-368223eebaf2",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3c6d30bd-0855-41a0-b38c-69919481ae86",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "182b2233-8225-4741-aeac-4ab06543e268",
        "cursor": {
          "ref": "48150db1-f895-4a8b-aa3b-9fd36b1145a4",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "185447c0-fe10-4c2c-b5a6-3e629fb00240"
        },
        "item": {
          "id": "182b2233-8225-4741-aeac-4ab06543e268",
          "name": "credentials_verify"
        },
        "response": {
          "id": "1890d021-190e-44a0-a484-00d398f4bc25",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d716c3e-c5bb-4e59-acc0-8d7962a0f2fb",
        "cursor": {
          "ref": "c125f788-6507-4e93-93c3-d5b62c88a514",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "3e46e786-90cc-4d9a-b47b-bd85d87768fb"
        },
        "item": {
          "id": "3d716c3e-c5bb-4e59-acc0-8d7962a0f2fb",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "097240f8-040a-475b-b331-55f8d5b13690",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0ccb0f1-a2db-4c95-be0a-520eca4ef977",
        "cursor": {
          "ref": "4bf61715-32c5-4782-ae0b-b13bd4a5b3c5",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "b8d7ecf7-12c6-415a-b3ad-cc9f669b701d"
        },
        "item": {
          "id": "c0ccb0f1-a2db-4c95-be0a-520eca4ef977",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "20b1070f-698d-4f34-baaf-f89d9dc32a74",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0ccb0f1-a2db-4c95-be0a-520eca4ef977",
        "cursor": {
          "ref": "4bf61715-32c5-4782-ae0b-b13bd4a5b3c5",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "b8d7ecf7-12c6-415a-b3ad-cc9f669b701d"
        },
        "item": {
          "id": "c0ccb0f1-a2db-4c95-be0a-520eca4ef977",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "20b1070f-698d-4f34-baaf-f89d9dc32a74",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "692a5603-423d-4fe0-86f6-daebde8cf3b1",
        "cursor": {
          "ref": "718d5a10-4c4e-4f18-aad9-74fb9ef96885",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "54082fb0-8079-4ad2-8d85-304064c0640f"
        },
        "item": {
          "id": "692a5603-423d-4fe0-86f6-daebde8cf3b1",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d7b43103-19df-4b22-8c83-ccbff9a1dfb6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88bba0b6-121b-4bda-a060-a15ed0782ddc",
        "cursor": {
          "ref": "e226fedb-bc8f-40e0-b391-3bf27949e498",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "c4f15755-cc50-475e-b7ce-cc6c6f73d0b8"
        },
        "item": {
          "id": "88bba0b6-121b-4bda-a060-a15ed0782ddc",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "76091ffa-95ae-46ff-9c94-beda8a41f67e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}