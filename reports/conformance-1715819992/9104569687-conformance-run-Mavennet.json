{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e94a8868-cd45-4ad3-ac39-42cd53080bf9",
        "name": "Clear Cache",
        "item": [
          {
            "id": "eb5f20e8-b523-47eb-94af-89eddac6236b",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3179340d-43cb-4ed5-97d5-d1f2f575f85a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8f984a55-fc62-462d-b507-fb40823427f5"
                }
              }
            ]
          },
          {
            "id": "1184e1c0-0208-43a3-aed2-6778317164bb",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0c487e12-b808-450b-a0db-491e211a4d39",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0d34e814-9b21-4809-954a-068a7632bc53"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0bd22407-5c2c-4b25-9f0f-6c6f65bcad7a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "952dab80-d27e-410c-83c1-a8d86ec6cccb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "085bd571-a6f2-4a0f-96a0-43d8d7bddf8f",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf2329d1-5dd3-43eb-8f70-8be495e20155",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "610dc09e-25b8-446d-befe-25caabfcf920"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8254550f-3be7-4001-9b78-453779d73139",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "295b23e4-0bf0-4b66-9152-45fa3eb29010"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e1fd6e60-d389-4f7c-bde7-bc99f4fb7072",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4b8c11c0-219e-4395-931c-7bd13e2bce81"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "afa234a4-d2a6-4323-88fe-4fac182a44e5",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "35b5a8dd-3059-4e24-9c6b-5fe5b9c5fb19"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c1618af6-d7ba-4fea-81b3-7cb0d83b0fa7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c52dbeec-d6eb-48b6-9397-ae71fb4dc9e9"
            }
          }
        ]
      },
      {
        "id": "0d303636-785c-45d7-9534-a3c00aea9e73",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "5542fa51-dede-42f9-b317-c8d6b6c5fd49",
            "name": "Negative Testing",
            "item": [
              {
                "id": "40e19512-3c9e-4cb8-8bec-f2607f7cb882",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2669f0c1-12e6-4222-bd6b-ecfbfa1cc711",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efaec5d1-f330-4daa-b073-8320905de779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "73cddfc1-afb9-4ede-a3cb-511b504602f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a413ddb-f117-499f-97e9-b406f8accc16",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8548f034-9a19-4abe-a95c-d0878631b564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ddee28d-cd39-4fe8-a1fa-38c234459e1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "561fa523-e280-42b3-acd0-4f088d9ce1e2",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a316242c-f3eb-43a6-b56a-45f2493c64b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "825650e2-6e3a-49c4-a45a-9b7b92aa22c3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8a96a9e0-5df7-44da-a060-2228f00aba74",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "07b9082d-6496-4d83-8354-9bbd0892500f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce5bfd8-24f9-48a9-ac49-62bd7034cd80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "640eecfe-c1de-4d5a-bf0b-bb40e0902155"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66e344c4-46e3-4e32-9cfd-b833a9b4679d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49941a5d-adab-4167-85bb-2200e58a94ae"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cec23a97-48d0-474c-a008-2f9efc6e95fa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1d5f4a8f-750e-4470-87a5-fedb97abbd98",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d6046c3-94bc-47ad-ae5c-2c1ce7b0a37c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "d1c2159c-dbff-4f29-a024-2194488b8069"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "652488e8-6c55-4f94-8aff-93c9286c364a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "de798a86-293b-42fc-9d3b-7d721181233c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5e85141a-4a4b-4aa1-a902-7a9e7072615e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2b09c662-b0ad-403b-9f4f-861ef8464c8f"
            }
          }
        ]
      },
      {
        "id": "a82bce64-d693-4bba-9b6b-b0c5ca0bdbf4",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "bd172bd5-7504-4cbb-87c5-a97bd6aad61c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "731392e2-98b7-4f21-a814-bb3fbbd2d6b7",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "34028505-9af0-4273-85b4-8de8131c0d55",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4220ae64-17b0-4c02-97a5-94e51b74f7ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c477fed-d41f-49eb-8642-68b89ddbfa5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c38d27-c0e8-41e7-94dd-55643e8f735b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c236848-e2dc-46d1-bc6b-ce5a346cdac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bde786fd-d27f-459b-af25-ce57843e1e42",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "878bf381-9bed-4673-af6e-ac050a984d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83773e64-773d-4569-b00d-80891b5a3271"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c02d9d37-031c-46d6-8287-e7859809ef6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e966957d-b21d-4902-bbeb-0e2db20bc79f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d064a43-35e3-4056-8dc9-fb3ce1311e0c",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7288a61-0c28-4385-a2f7-176131e1b1c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "782ba7b6-9eb6-4304-976a-0171727a04c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73863382-5340-4d0d-a077-885c9037b961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db70f785-3dd8-406b-8782-778c70f994b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4e36219-b25c-4676-9a74-6391dd3ae78c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3186c79-c73a-41f6-99d4-1f4e20787bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5b773d4-4cf1-4195-93a8-ddfcf8cd5fc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c0ff97-626f-441f-a2f1-eb1ad8f9fa67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce403524-3c68-4cea-bb5c-081b66e552ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db52f103-215d-413d-865b-703ae812628c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16042713-65a1-4796-981d-61df283e65f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40026ab4-089e-4f5b-8c2d-7aa36ecb7f19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d481c16-f121-408c-b22b-4d1b4f70bb7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b8e7925c-a96b-4677-bf42-bd4b86c54946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02c82ac4-1804-4a64-9dcc-cd7892aee9a0",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98dc7611-2d0d-49ae-be0e-89786da35b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b6db245-3d5c-44eb-bd0f-55950c2386a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d93d09b2-3885-45a6-9a1e-a60bb906d4ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b8d325f-6493-4e5c-a134-830718bb739c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17051a2-959d-4787-9a31-62da12d52431",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29abcd69-548e-4992-bd5b-5edcc7f70a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8dd4074-7a4b-49fc-a504-69a25aa8e3c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41198b5f-054c-4327-a6f8-b0241da613cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b39d65d-a382-40d1-9df7-e357eaa1df2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2917ed3e-573d-4825-a795-aba9952fe8fc",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09aa09a9-8b65-45bc-b52b-cd6fbe4d5842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbf06e17-222e-4e0d-9c19-e7df1aa9a2e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ec5494-296c-4b45-b045-7805dd3fc768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "13a63afb-fbad-4f52-85a8-27715fb13469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d7114b4-d450-40e4-9d9d-54acfbad0112",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16729bb3-a20b-41ac-8235-b5efd285cd8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c040ed10-fc6b-473e-a919-fca6dbd97bc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d07131ed-c851-4d50-abaf-4e88d6c170d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23237057-ebbb-4eb7-8b3f-ea2b625376bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e472f23-52b1-47ed-b2e6-ec46e60a23ad",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12cad693-8de0-473c-980b-4d6d91963760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0d21da5-40ca-4783-a076-8b27eed5b131"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c68480e4-c5e6-4e4d-909c-ba67fda23f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "baacc112-c14d-451d-a4ec-6e02ab866366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "206ef08d-71e0-4e44-87cf-d38759dfb2c0",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c10fe097-7f58-4f32-b96d-fa47ed199e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e481123-3285-4d7c-aa12-15921f341b9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a9050f4-91c7-4fe3-b9de-da3c910aabcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c40f5f2-15a7-4071-a267-4ab5db92801f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb6672c1-cbe6-480d-a9f6-808fc95f30bc",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "540cfe8f-abef-4adb-b515-a597f5c70f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "995f02d2-497f-42ab-879f-66cf728ee595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37acff37-9fbb-4e5a-88b1-771528358385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "945bf893-b707-42d5-913e-216f518a2890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f9f93ef-9586-4f6c-9b87-2ea419bf9ee2",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9195be3-1493-4099-9bfa-9f1d5df19a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61b3b829-b707-4e32-b8b6-cc3b4a5f1cf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "febfd62f-8dd2-4f94-8fb8-f4c759e94d67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "80768a93-a696-4209-a39f-ee8716c1f9d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e289eb2-e106-43b9-97ad-1305c45164bf",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f26a852-f7ac-41be-aa82-ec6173400f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92cf9045-d873-4494-a603-793f74f4b9d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "844b8794-1c0b-4056-a91c-28c6ebfa1352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e13104c4-a9b9-44a2-99e6-a0015202c104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "843dcab2-33ee-4057-8810-5cccc7e46980",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4320b241-a55f-4be9-863f-431c5a420dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "866b30a3-f7c4-4c4d-ba55-5c194f9bf6ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09bee07-b7fc-46b7-b911-1cfb5c9a904d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "35f3cf3b-a210-4cca-8262-98bde8c1702c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "558d764e-02ec-4c66-8ac6-d8db97648822",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c37910da-a0a0-48c5-a119-85d22385543c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c041ebc-df14-42c3-80f7-5c3964df23c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13aa85a3-c432-432b-aaea-acb32c8fe561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c30b95f-0168-4a1e-adde-75182124d83d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d55a686-47b9-4209-93a4-0a94f3fa3a6d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83fcfc59-a88c-49b8-a710-1dd0d70a659e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6167cfc-ef8d-4456-9573-0d55a350a814"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "018b33cf-faee-4cd0-8be6-d55aafe88c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a9d7b5a-a51f-44af-b132-72014017af9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a4c2ba-7b02-42d0-ae6f-e51839370478",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f2ff871-6bff-41b4-87f9-6ab445a60425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27b9c857-6dbd-4075-9b5d-23a20d748531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0acb3c9b-6b74-48bc-9e41-ae99a462c7fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba56026f-e7c1-46e2-99b6-7aefa3c178dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e58a6f31-acf3-400a-9086-8f7511d57fbb",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fd129e4-de19-4b6c-90c6-05be09048fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0afe1fc0-6407-430f-851a-b76377cc11f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a05d0793-9b96-4ab9-8079-bedb193a2737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba2a95d5-2fae-47b8-988e-befaaed574c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0613a5ae-850a-4862-a9a4-07cb8c52af6d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "836cd317-8e71-4a1e-aa39-ae7d53706d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2325e0fd-7b62-40f9-ad28-540b393112b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dead1759-fa66-40f7-9b26-8688e0016cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "45fd6c56-a0bd-48d8-93b3-b28f01a5d77c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2508e5b-5b42-4ff7-9f09-f670501dc104",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95e49dc0-57fb-4108-86e6-98d9b5da8dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "684cddda-f66d-42e5-b552-8893ac21e80a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fbcc19f-2706-4356-9f9a-af8f15aaab41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4f3e939-20d4-4300-a1be-7c2f22bf6d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70888b7d-a55e-4d83-8a0e-9e36c94bea9b",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9575c109-5a7a-41a6-ae9d-06bd2bc8ecf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55e2e3bc-842a-47f3-a67b-76935caf6fbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6ca2c87-f9e8-4aa9-80e1-356e3e978f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "407c00c6-0709-4343-9aa0-e08efec823de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f0ce912-1ba8-420a-b4fe-386a9edb0a21",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "966afb5d-73c1-491a-9d41-85288ad9c8c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "887f31b6-bbfe-4495-ac96-ab28ef3e0921"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d18e8007-820b-4967-a8ed-c7b5d5bdf803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "414d14c0-292e-462c-9458-3e7992493bed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d79dac18-f747-4f14-8a72-8bffdfd5d36b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29fe8625-8a69-47de-8c4f-af12fd175dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89168d45-d8c0-4fc0-9a6d-103e6a01c4fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccf52da1-d186-48a9-a8b7-8b89cf60ae21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "db185fcc-8cc5-4aeb-8500-32118cca04a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9535d71f-6b33-4e96-8a7f-1b5b390b40ad",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b372306-15cf-40c7-aadb-669e7debf3ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f2718dd-ece3-4c60-8fd0-0bd97193a1b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb9330ce-619c-49ce-8728-59b8fd9d98af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6add6ef-ba1b-472c-bb35-a5031b7ec8f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5243232-2f34-44c2-8604-2789af0c36de",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d301aa-5f41-4cf4-9803-1b0705f36ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb905b4-200d-4298-a5ed-1a3cd96f7b42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72b56391-df16-45c5-8cb4-ac3290dcae80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d557f8ca-388a-4fe0-b303-00341c86f97e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26734b88-49ea-43f0-aea9-e8d60f96d4f1",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e0b1907-b4a0-4086-a449-3920771d649c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d18b4018-4257-4ce6-962f-a4c332abce6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f2618c-f324-407e-9f96-3dd9e8740626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "55ac76e4-ba75-40d6-96f8-7026402bd143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d285ca4a-900d-40f3-8028-97d27f6ea9ad",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c2b5ab1-1547-42dd-b870-1efe483e8ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66be2907-9c38-4e78-ad50-4b3a2769dc6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a08311-0b0b-458d-a0ba-264fce5b87ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3417e23-5a7c-4444-a668-f9e89bdb2296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dfc5e94-6593-41df-b6d7-b46737926508",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21cf7f54-8365-4e8b-9894-4036e791031e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec3fd0cb-7967-439c-ba9c-28c21844c687"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19cb1632-1b21-43c0-81c0-c2d1a093c0de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "18dea7b5-56c3-4d32-8cd8-84260bcf5776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca0602fc-370a-466e-8052-0e151a313def",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3994ec03-db7e-45ea-89c0-63f2108bf72c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06c33214-8f74-48c5-b0d3-6efc2d09fadd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a3299d-3034-4fb4-acfd-a38d294a5215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "1403c434-138e-46d8-868e-2d324cdcc509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28dcc82a-44cc-40ae-98d4-ad390850922e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cfe5a83-765c-4d9c-8d1d-070eb65167e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "244200b2-db05-481d-a755-f59b3904d61d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e93ede-25f9-4e17-9ddc-4b2d756ee78a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a98eb902-4f5b-4cf2-9970-e5c07d1aa3e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99bf7f05-b88b-4607-8e7d-39c000c8daac",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc2700f4-938e-48aa-a9fa-6b6e14170beb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd3ab105-9227-4ab5-9010-303577528007"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "884f8ebc-6a14-459c-8cb9-cbc46abb2675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "42461be4-c483-46a2-8845-3e3dbb463c90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b171ec3-da8e-4b01-9ebe-873f427cd689",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8eb62c1-54c2-43bc-a648-610cc184bfc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bb2c03b-e4ee-4b3a-b899-aa3f2294a4e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3d0901-6291-4b5f-86a7-977c7abce4d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "79903386-faaf-4f4f-94fa-bf434b8a7a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03b51359-3ebe-4de7-ad5a-aa79ec32bb70",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bb8a189-b665-4f60-94f4-465a876ea5dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70b518bf-d3b4-44f9-8400-46a9033975c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d4abbf8-5b6f-4d4e-8141-1f651955b3e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c37f1b06-cdd6-41d4-81cf-c24d5f00cf06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "258e0931-7154-444f-984a-d1bd2af969b5",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f00eac-bedf-4e92-8e45-86cea670d4a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e00fe117-9257-4542-bc06-e037ff7ef48c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bd800fe-e907-4924-931d-4e0a71da7b3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "619550e9-66ee-43b6-8e0f-0a0c86357685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160cbc81-3913-4c97-a011-a6bc13d95350",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cabb269d-61d5-446e-8d9c-2219c7844afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb046285-3895-49ea-b693-47521409a8a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "574a235d-8567-48cc-b28c-7f0588e650ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f8b65384-45a4-4ce3-8c1f-7f7fbe6a1468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee6af7e-2414-43cb-add7-8afc14868656",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ccf3d50-b99e-4bd7-8db9-ecd08d10576d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d9b38d7-804e-4da6-869a-a68a9926e331"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ce1e0e-cff2-4790-b25d-9a851861eacb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e24648b-0d8e-47db-8a54-d73d548eea05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b49c081c-eb56-44be-ae39-9f1b82008fee",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b4f8e5-fd95-4cd1-b698-f51842cc5a10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3062d27c-636f-4457-b9bc-40f5b3343e51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1484fdf-0917-4858-9d19-7adce8cfae18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "59d2e8be-f0d8-4032-a7f8-27c60d660b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d7b7c38-0a3f-43ca-9e7e-a35dce6823e7",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a274f56-cc4c-4de3-980e-8e1a27fa0398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b368de1b-ba2a-424e-93f6-4ab8df051b75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64856827-5d3d-4c1e-8d56-9970a685fb71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "87c9241d-6a19-4dc2-a484-42c1e59518c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a5733eb-9a77-44e6-8a3c-d119c3513358",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1824beb6-1e83-4f31-a166-8519637359b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dd628c7-e7b8-4b67-bdea-783abf58f703"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66366178-c83f-4a7d-b631-f6bfd27f533c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0130302d-7137-43c6-a9fb-1d3cace3f544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "035ceee7-fd86-46cb-99ff-c525743d8b55",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b60e0ce8-6f1b-4d4d-965b-a66634519181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "152e7a86-412a-474b-a2a3-f8f7185f32b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fae395cb-1903-4ecb-ad78-f322e90531e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "09452f17-97bf-4bfa-b73c-ca42c9cb3a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cedb2b13-3881-40c8-b41e-bf984910b87a",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f73dcbd-859f-4399-85ba-a980bffa37ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9b20c9d-fe67-4510-afea-689890e19519"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e96136c-8d36-486c-a056-935728f23a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "d4513ee0-8b57-4cb7-85a2-f2e24bb6dcee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03fa205a-069a-4754-abc5-64ba7b53443f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be4f1d0-8739-4935-9c66-4fd05195876d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e21bc89-9906-4e90-a71d-d654358b88cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "784bd08a-0c49-4f4c-b9f8-f1ac5d5389ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e9169ba-1499-493a-9f28-932a91619059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b30e2e01-14b3-4dea-9ca5-4d6dbfcc2cc0",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00903d69-05a6-4967-a214-a57df7bc87ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "643a9f1d-5e2d-44cf-821e-79ce3319aade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e1ad2f4-3a33-49d9-8c6a-05c6795340e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a705c9f-d585-4acd-b519-5d6b8b1070b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61bf8e60-bc52-4873-a3e3-7c0d85ce5060",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b46f2e51-6f47-4957-a1fe-515b5c8248a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3452bec-4e94-4836-b03f-bdde1818b8b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e72f9ee6-e6fe-4e42-96c2-81c019794ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ac6f2dd-a111-4bb7-87a4-9cf0d9e6b6fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01320f66-0712-4ae1-b905-1c89c4dd4ee3",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc9c31b4-d955-4d4e-bf3a-2318c73e64bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d284d1f-670b-4f3d-b7d5-1321987db166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35796901-317f-43a6-978a-ed9a1ba24e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "30204422-89ee-475d-88b7-c48a43684069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "007a4dad-d7d9-4c1d-ad73-bb10844f5f54",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "394d8e8f-1c48-4931-95ad-3cebf636e33f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3901d2d0-3e8f-4c4e-901b-62e19fb7401f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b559daf7-c63e-4792-8c4f-d84a68f5346f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb4c127b-8f97-4c3c-8ffa-ff7b2abd8b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b26b103-e4bc-4320-9f7f-e966ef5074c5",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08523c58-ea5a-43b3-a91f-a57e99541f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6edc41ea-986a-4f0a-94d4-0de68f139528"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d87146c8-365b-4846-8338-4eaa5e0bbd5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b37998c-6d70-4964-9f99-3df0e4757ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa8dbdb7-4493-4226-adbb-08955220855e",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a668f1d5-8a89-4923-b319-13a28c5d347c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc037831-ec30-47c8-9ef6-e29fea01e536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "712c7c93-f5ce-45a9-8f66-389d4f59c5c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "db020704-7492-48c6-8be3-121ba2c4eec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab2792c-7cc1-4a5b-8f23-79907e80423e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f31db3e-794d-4310-94ac-42a4e810bdb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f9f1723-6ba8-4516-bc51-78894510cce2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc881f1-40bd-41ef-ae48-b31fe97e1146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b44d927d-8a49-4994-8b61-35a6cb61c19a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c9e1bf9-e9cc-4036-9e64-e256a204bbd2",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "004cc63c-84d9-4de9-863e-667f32856ccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a14e5ce-5dac-45e5-aa9b-8f31918af296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c6fc6fe-1dba-4717-8154-3220fa9774a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd41bd5e-35da-4e22-98eb-0d2fc7429fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a0639a9-4d66-4c16-9c2b-6209c7fa5c69",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3547b22c-3fb9-4835-9058-6f922b111474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77d80af1-db4b-4b8c-a31c-8b41fb4a12ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e869d1a3-7f49-4992-bf61-2d0951192c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1005c169-d858-446f-91aa-7a50c9e1e250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec2cfcbf-6ded-4c58-a042-3a9f292743c2",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d06f5a8a-0bf1-4fd2-94b8-068789c49993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a800afa-1579-42bc-9f5e-a6fd08894051"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b7edf6-e92b-4de9-a448-3f6df15f8f79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9eb6014-d839-43e5-a69b-e93a02870a79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3edc54-d6f2-4051-943f-a14512a34599",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6f5eb2c-607a-4c52-848c-cc6e2b3e4d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f7058b0-8388-4c1b-b6e2-9dce202e5561"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cf10200-4d83-4bda-b736-b32973b1f67f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "861c68c2-6574-4424-9bfd-7021c4f49c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fda09201-5626-4939-a271-784854ed5d40",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ad7bde-cb15-4abe-950d-20d9f5f911ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69b76cfe-0852-46f7-beda-ffcda1bb51a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a52c48db-e62c-4a2e-a56f-3857bf4f6258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac7e31b9-3e01-4a93-bc66-4ed639b24803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6bada31-3084-41ab-98af-59e70220c6f8",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c3f752f-c1cd-482a-b071-870816fda548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f5e0739-68ae-40f4-bf28-34af7df7a718"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd8a1726-85ae-4c02-9bb8-d6e9087ef05b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8c59bb88-8d76-4fda-8003-6a5ba087ded5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b28f33e-6351-4ab5-845d-c65ebdf0f463",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e9e151-bfee-4afb-88c9-d557e9641317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "086d1a15-059a-4de8-8f79-5d747fb14e24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ae80add-c6a6-42ba-8e4f-51ebbe507c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2297a2da-07c8-4d70-acd2-b40e805d4d21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec8a2884-9a4c-48b4-9a4c-7199cf1e2fb4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de5130e5-3a24-4a4d-b3ee-a46e8adc35af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edecf01b-be57-40de-92c3-619ab053c323"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a6c385-97f7-4147-95cc-308e13088a92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "12bf3505-1e2a-43aa-af35-3f8b6fbf5b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11fb4895-d918-4040-998f-60ba5ab80520",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d42f05-c167-4dc6-81f3-de6dcb8ea67e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5150ab3e-a215-412a-a9c9-26d85a92cea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0e9ba37-1f6c-47d0-9d60-7a5f4e48c84b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a84a9e4-d240-4ea6-9d0c-81629be40178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93bb4bbc-9301-4282-a240-36627fcbee17",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d014cb16-8162-4097-b7c0-ab067c4600dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2db31cb5-b8f1-4cec-aa3c-1d476fd4122c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7bc067-2e63-4ea9-bcd6-a3b39db27210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3879a2e7-cd8e-4e44-a719-a77240214c5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36bf25d4-c596-4e0e-bc91-b35b0a57e825",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b333f7c-3e8b-4e2a-8ce1-80253b675e4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ff13587-0051-4fd0-90f3-66f80c733bd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f64f76c-87d6-4a7b-9501-50469fcaf359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e29be3aa-d125-410a-bb4a-7ae81c88d6b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a117078-95b0-48ee-87cd-6f8a7fe1ae4a",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dfca92a-7bd2-4307-a3d7-93dfc8f599d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18ad2125-cdb0-474e-918b-1c87269b9aac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4993f5d-0a90-4075-ad46-05a1ddc1a67b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1947b10-de2f-45ef-9d1f-91002d3cb31e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bad1a9f-fae1-4b96-af2b-da1c57e74712",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8216501e-039e-404c-83af-a613e5840e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34c2c4f7-725a-4257-b562-b8a1d8b52941"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5682e028-a6d5-4ef4-b7d0-f13aa92b819d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6126dd9d-de7f-4cc0-930a-50e83aa566cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c679c5-51f7-4127-b2f5-c228bcdd81c4",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaef77cc-5507-4d5f-81ee-fe14b3031ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cda8ceaf-de89-43a3-9df0-7fd6f76db80d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9c80205-6239-4acc-b755-62dbb597f8c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a313f3cb-1bcc-4e87-ab05-0002fbd4358c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50c39cae-d430-4ab0-b323-66af4c2317fb",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6fcee00-0d70-4511-9816-5a1d2a4f2cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f79c3d75-86e3-4000-bea5-dce0e5700729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a660d9-2141-4ad8-b9e9-15e48215aa91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed001106-52c0-4400-946c-3d2cdb9471f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bf27dfd-b7a3-4097-beb4-e71ef44654dc",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7488c6b1-9b80-4f68-bd62-e704f8e859f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb595bae-23ff-4e23-bc8a-46a2636d8f0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee67d054-988d-4fcd-9a72-3caa301822cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "204c9d17-d4a4-4ed5-b312-944138c82f0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86130f57-2298-44e2-bbc6-c3cd19103b58",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ffed65d-476d-4b43-bd9d-95b5058b11e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b7766b1-8fd8-49ee-ad01-4db46b6cd867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f156edb-4a03-4aa5-b7a0-a1c98a770b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d9044961-c4a2-427d-a150-79e9067c8c58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd1f2cdc-0fb0-45b3-bab5-208162179db7",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f356bd-d081-4d0e-9f3e-76ded2b4d0de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64626f3a-d52c-4d9d-8eee-fbb8ce5ff303"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82e0b14f-e2eb-422a-b21e-a0803d29ba1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8806a4f0-ac6e-434b-9705-bca415d5159c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e800b3ee-5723-485e-8662-1503572978be",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bebfb560-fde1-4c9a-9f55-93904bf03f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2105d42a-63f9-4f0a-9a5f-31d39c66d4c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be0d8b54-8769-477a-a69d-22d59409d6fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fecaf36c-f006-4374-a2e3-ba39da2dad6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8140a95c-ffd3-402c-803d-dc0a2daa9067",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75346cde-07f0-4082-abe4-400227dd409f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63b75fad-7664-4e62-b36e-28d7a3ec0d95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e94b567-f836-41c9-bc0f-e6a7938edf45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4b788f1-487d-4e0f-9694-b6f60ba1bcff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d16291-f7fe-4526-b2d2-258df09e6edd",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e89838dd-ba6d-471f-a824-6cda80f873dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23a106e8-4969-45cd-b7a3-a19af935bfe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c117c699-1860-46f5-9f9e-4a5d6d90048f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b0b66d6-9653-465a-9791-60ebc10666e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f2941f4-398f-4710-922e-dd3d442be501",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eccf4fd3-5460-46bb-8065-23a05fa40e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e09a3e7-0151-453b-af5c-49ae5172e149"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b357165-1f16-4d27-9b5b-ea3efcfa9bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2665b1fd-7b27-4e2f-8253-4dd4ecea7836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ef37c8-db07-48cc-bced-e7d7bdc8b19e",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f905f8-b435-4aaf-b99c-23f99a7e5ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5705bba-fc67-42fb-a892-029dd4beafbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "394b36e9-8ee1-4866-8020-0fa14fb35a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c64359d9-e4a6-42da-8af6-9f00797ac310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae0b2d70-133d-4761-ac45-e0a7a68df98a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d9e347d-7ae6-419f-a971-f6ee9fdcff2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71f8b724-ffd9-4ae4-94a6-a33622e224c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad62492-636e-41d8-acb7-322bf50f775e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "70cec354-0c34-428f-bccc-d78bff57c2d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13d0252d-ae94-4997-975e-21a2b5fd76b5",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b802672e-e7fe-4a23-83aa-536d7f8d3baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "197f103f-905f-42b8-ba2b-bc1fb5e3c6da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4ee99aa-d148-4eed-9b65-6e6ac3d3989e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d47ca9eb-3be7-43e6-b321-5a1e200fd9a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f56c96de-21e1-41bf-b63e-9336f48b34d2",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "845aa902-2490-4a55-bad9-b644f008954d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a06c373f-d935-4a10-aa82-072f043c8577"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "254893a7-169a-4e27-b43e-bab0d2a1c9d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ba63e21-9253-4987-a2c0-e734618b6b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec67e5d7-b376-4afd-8cfb-a1f712dd8dc2",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a4ddfd6-caca-46c3-a196-4f0e5daa2c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5668680-28b4-49b3-ae8f-65b8d76a6c70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b5531a2-9d3f-4939-8d58-bab9692527be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "58aa8237-d7ba-48ae-a900-60afbf124443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c775c65-f65c-43fd-b6d8-667e78f4b0f8",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2bb91f2-92d5-4b4d-a141-b88484a7bc6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67072883-04e4-496f-ace5-716ffdf075c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2789cb9-3ce9-4354-86ae-f38f3c1ca621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb186b60-be6c-4731-93fc-9fcc8274834c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b4eea1-4d4b-49c2-9100-8d982cfb7b76",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae960ab-61ee-42f5-b65e-0f03a9764bfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b006e83-27a2-4632-9d10-f1c39ca9ab5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47aac46-6648-4d8a-bea5-784541326583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c57e3e77-06de-4b19-ad56-820b35cac79d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f59810-18e7-4e75-86a0-fcf47736df63",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a101d9-8506-40c6-9f1b-524897f7adc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4b6b32e-a06d-44d1-ba49-965980083502"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea5cc44-fd3c-4053-b4a8-b9ebb61f1841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2445de06-aac1-4024-8a25-ad26cf1a756f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f489082f-fa1b-4842-a41d-c83880b30368",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cce6f3e-a31c-45fe-92c5-ea4ee894cb05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c53f87dc-88fc-4da7-a432-fa04b33f60a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9f9046d-0aa5-43e5-9ae0-ebac133269bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "26af406f-3512-4c4a-b815-5dd30cb10094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70b49cf9-98c7-4d98-abba-9b21adc1cf27",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e668ad-199f-4af3-bd97-3babbea51d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d6df85a-3eb2-4c7c-b0ce-ebe628f96ad9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6026873b-d7f5-4f79-b29d-4aad9ea02112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1d1a774-232d-4185-bace-2e8c0d5ff309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c8b906-3218-4d19-b9cf-3edf66fe518f",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f450cb-95a5-437a-882d-73c3c6c07af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9894b46c-40dd-4777-baf3-8636beb27c09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca0ef15e-13d0-4651-913b-3fa1fc60a69e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "83d9ce71-c9ba-41b3-90b5-8ee087a3a6f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a401cdd-72e5-4b74-8ae3-b1e54ddeb048",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26252169-7d06-4c26-94a2-63066687d94c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc9cbf97-a5fb-4a76-b889-b31a095c282f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e85f789-7180-4ab3-9c19-be6f24e8a6cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "618fedb7-7ab6-4f2d-ad27-3bb50ce53429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566d7a81-794f-43c4-b552-dadfef0cda44",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "407e627b-2e74-42ad-a15d-ef281c490c72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e68cd5f-c493-4858-9844-0627d036cd8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4edbb2ec-e88c-4587-a442-c39b961b62e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "960eb325-2e1f-40ed-ba64-9d559475e13b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce143ebb-01b4-4e37-81a7-f76aed06f6ca",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ba7caf-7dae-475d-acc4-1f1f53989c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ad5a9e0-2cce-47f7-a1dc-cd986ec0ec74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "960a5550-6f26-4d00-b226-cd03f9ecac4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4262cea-738c-46b2-ad4c-93497b3929d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "250b236f-6995-4604-9adf-d3bb652a57be",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd9136f-99c5-44e4-b60b-e7efe2c7c970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20227995-50b1-412d-995a-bf2b1a6fce11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0699e461-a13b-4caa-be67-4072c6a0af0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb899f81-2290-414e-bde1-687fc32a76b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db0bad67-fb98-4862-bd75-3bc74822c62c",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fce4c18-9203-45b7-9dea-7e3e3ca94dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b3458ef-09bc-4e75-ab0e-75462433c1f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "274e6b23-4e60-4934-a312-655cc94c17cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4992f045-1b4f-4489-9de8-344cb5ca452b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6471b2b8-79b7-4d80-be12-af40edd6f7d9",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dafd9dd5-7f2f-414d-b1f9-40430ed57ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4371ad48-2ab3-4868-8f4e-41336231d141"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a64f56f9-3361-451a-a51e-79c6a9ae3174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d264947e-bfa0-4515-bfd6-580a966099d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d3ed5f5-65e0-4e94-9fe8-fe312aa581b2",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84fd7ed3-3364-4401-9dd2-c84044e738c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35a5d3ff-7e57-403f-9c07-7a219683f18c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11604945-a646-4486-ac4e-8ddfca11ca8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4cd7ab62-9c32-41b4-bea0-4d6b01cfe773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed0ffd88-d58a-4487-9c08-eaf5e5f5cc9f",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c34e876d-7f7f-4008-8da1-29aa0b298a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "159333ee-4593-4483-903f-aa2539520391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c39c3086-506b-47b9-b14c-09754270cc14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5dbf6aeb-a3b4-408c-9129-b8aacee1bc35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "615647a0-d3f5-43a4-a1bd-ae65a356b0c2",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bee1e28-2c4c-43ad-9b03-ae1fc8c3ee69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "019d0379-d558-468f-bd7d-94bda72d7b66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9a68206-2a0c-488a-8125-42ad60c80df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6fcf998a-1a10-4210-a081-1a97511ea159"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "735fe564-3ab1-43fd-947d-4b7c68dc2f77",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "39a34c99-bf06-4984-ae29-6702525da707",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed29b48d-5e7c-4532-bbd9-bbabd1235a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d737aabc-1c92-478f-96b8-af7f35d31877"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a3fdde3-8dfd-4b91-9ced-3b3cd749e559",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "877d86c5-4d55-408a-aac3-00ee8ee0f7c1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "23b0439e-da09-453f-bcf7-393a90267385",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5590c090-1bdb-41e4-bdba-1e9bd21f44cf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "112945cd-6d7a-46d1-bf5c-e71a66ac4ca7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c8279405-554f-4974-a808-93076e6b7443"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "305a168e-b0cf-49fa-a1de-03acaa419ccf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "938fa4db-94d9-4df1-9e05-e9d77eed1f49"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a1e4afe9-3eea-477e-ae3b-ad7a2ab80cc4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ead68472-060a-4560-92c1-665c00f191f8"
                }
              }
            ]
          },
          {
            "id": "e7f16789-a743-48da-a80c-02fbeba90325",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1bebb47c-80b7-4314-8404-057786baf566",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "84983956-d4b9-48f4-ba32-907151059a4f",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2c2bb37-cbe4-4a6d-8d92-df66cb582ac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5c5ab83e-798e-44d4-837c-8fff77edcbbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a0bc392-6447-4d47-ae5b-da49d0ce59d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "675f9487-7e0e-4e0d-9774-db593f7f9b3d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "737ba855-a498-4037-bff7-051dbf05a3f8",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "61bcbaf6-7bb5-4261-b295-a4a562cd4f63",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b71cf1e7-2189-4c29-ae08-b5b64423cb3c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fca38618-baa8-4d13-b764-7d5812cb6c7a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5389db63-445f-48f5-81cb-c0c9531e44d3"
                    }
                  }
                ]
              },
              {
                "id": "6a186aed-4b3d-4284-84a5-2def4eec3375",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2295221-740d-403d-9e59-3da0f50ae8a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "169e38ed-c3cf-4686-9ec8-ca36c9ae0d6f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "822ec923-fd24-48ae-a28c-7dca40a4e718",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ea444412-1015-4fd0-b8a3-33dc3f47feea"
                    }
                  }
                ]
              },
              {
                "id": "85df1eb3-efd7-4892-855b-cad00de84782",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee70c983-a782-4dc9-a281-066111a56cb4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9e2d3054-2a05-494f-ae92-ad03d0f19986"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8cbdc181-86de-4f48-a70b-a262a477b91b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e149ebfb-9404-4586-a9cf-f1856875ec23"
                    }
                  }
                ]
              },
              {
                "id": "5267faa1-403a-4c38-95f1-6f5019e33d61",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7306f7f3-ee81-4a3b-88c1-26ea54a35d78",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f1146512-a9bc-4007-944d-ab7084cc6fac"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "276805cd-f3aa-462e-a6bb-42ea6452d7f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "42ad176d-ed82-4259-8222-60ae70c60526"
                    }
                  }
                ]
              },
              {
                "id": "96b07363-f790-4767-92a7-65b96fc51c5d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea57020d-9977-41ff-b5c0-2c65b95f115c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b35d890f-c92e-4fe8-ac95-67ede1bac47f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ac58126-701d-4c54-98db-e44588912c5e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "1e91121a-ada0-4242-b227-fd79a7f79bf8"
                    }
                  }
                ]
              },
              {
                "id": "d4ccc3d3-2b75-4113-a0c1-64d267045c6d",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "47797095-7db8-42fb-b2af-a2ee176c14e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c514b845-de0b-4126-87b0-decea9a743af"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b1990889-ca25-400a-b733-759be1512410",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e59a09fd-4373-4197-9367-abac076a7c61"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b085bd65-c1dd-4476-b8d3-e61bb327714a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f085e25a-ec2c-457a-99c4-4019961e8fb0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "592993c3-6c1e-4c20-92ee-32ebf66264f2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "beff7095-a42c-4452-8dd5-2a29bf4a7d55"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "88b4d5f9-d7d7-4401-93d4-efbba1f2271e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "1bb1b2ce-d4a7-4f5d-8185-45aa3b5e5820"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a0c32046-46b4-4e5c-94fe-0248cc8ac7b6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b7769bd1-b5c9-4dc8-924b-20fd73bfa78d"
            }
          }
        ]
      },
      {
        "id": "bec5b656-150d-42db-9ee3-97082dd85bc8",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e046bb46-8174-4cdc-a556-942b404f252d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "aa1cbd33-49bb-48b7-9ff0-291cabb5ba3b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1b5381aa-d4f0-4335-8b56-8641806d2355",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3d9bea2-3832-4466-ae4f-8495b5010a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0bfd3a9-bc87-4260-b398-ffd13cc302c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bec9274-b9f5-46e2-91f2-d64d217ce7c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "162fecd9-c002-46c1-8241-6c6e482c6537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c396a48-6a41-4949-beba-3c8c0137bb4f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d45802c1-9ab0-448a-94ee-05ae3734fa51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f75396e6-3f77-4cec-9d18-17521743cc78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "773b57ca-e492-480a-861b-2d30e76f32c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "32e1c23b-8a53-4ea5-8fd2-84dc9b7ea37e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "753090c8-c237-4cb2-9052-88a5c2ed4399",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10bcf954-d89e-40a4-9c64-1ef69e7b8567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d434e1a1-1e82-4e7b-a148-c199e0444d3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d8d50f-e76f-4e55-a2a9-258e7461de93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f9c717f-1544-4e9d-948f-1b96d2d9f07a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9805b926-1faf-4b92-8504-5ab71d8fe9b1",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "056bf6dc-ef3e-4dc8-90b9-37bf1ab16bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5192b2a3-dc9e-4062-8a99-ad6bb6521613"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "241dcdff-1667-40c9-978e-4f53be49d832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "16f40c90-887d-4f5b-9c19-dd55f7a2e36c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04dd57e-ae83-4fab-b370-8e50c54e51d3",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9109a5f-6e4d-43b7-8efb-95b77c284a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e391b9e-c695-4acc-a881-a9ebf081c706"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c37cda6-0221-4225-970c-a925c6164ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "57cd8578-5fa3-474b-80eb-772c9d477dcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48626d54-4440-44c7-bcbb-0f2c86f25bdd",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "258198d6-442a-4dc8-a849-a853d81fb5ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c4964d5-9c79-4860-9169-3983e1711b88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc5f0d8c-2649-4081-a15c-8b7ab958edb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "99c17ad5-f48c-4f22-b672-edf7fae0cbcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "124b78c8-3c9a-4791-99cc-57d95efc15e8",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb0227b-1934-48e0-8d9f-28c97f633cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74fd7c68-5b74-47a0-891e-0c2bd90af3ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c72cd25-3aa7-4131-97c1-cd9d346a9c1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "790305f4-d942-4173-b40c-f6d2f3d6b19f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d28be27-900b-408b-a54f-cdfb7f8466f5",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc95680c-e753-4491-b6fb-4746e152e2b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02ef662f-9fac-4623-a76f-5e41d6a4a618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2efbca2e-9d8e-498f-8250-b5dd7b1279c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf37c602-2550-46db-8f02-0bace24a22de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "794bea78-8a08-4083-9894-f292224beff7",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be9e661-d8f7-4dd1-8b9b-d7130d26ed22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15236391-9208-49dd-a5db-2e1824352839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca00007f-3966-4e59-807a-6463fd45914d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8340cd63-97ed-4f7f-b335-a23254bca647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "503964e8-9a32-47c0-a5d5-86eea048a89e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db686ca8-0138-4594-9348-87f427453187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddf14a1e-0fc1-496f-a878-fb935afb862c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f719a1-40de-4a10-8c21-fa5678c7c8ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "44207433-68bc-458b-a315-a200ceb479ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b02e1b7-32cc-431c-a4e4-60ef39e15a2f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2f3f9f7-022f-45dd-af6e-88b45c183f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d88db95-1167-404a-afd4-2b40a5117d50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fa427d0-5f88-45f4-9f18-ce42bab3a660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "832c346c-66d7-4331-bb49-288c4c2a3214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8a551a3-1000-4eee-8bd1-ac74a3606909",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e5e9fd9-a9be-49da-9e80-5b80bf6ba669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea8857bd-4d24-4cd2-9c75-6ca216f59fca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "559a08e7-0621-423f-9a97-e1ad4a400561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9e9ae9e0-8b49-4f84-9637-3ccb19e0360a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c8fb561-d4ec-4464-92b8-99e5dfa1a19b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "079a8dc7-b175-4f5a-8ed6-a5720a93b6ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33d687d6-ad9f-4637-9eb7-9790fb96a89f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87af1e3b-580f-4a72-bd5e-b16edad5e882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "33198d4a-4812-4c4b-b6c9-d49b9b9eb6a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf009af-8bc6-424a-b0d9-fef85245975d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2edf6300-8394-40c1-8813-1d0b12b35aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "283ebcd7-16b7-4eb3-b094-f5458da90940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd5b3a0-7819-446d-affc-0df756f8cb6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "271341b2-c830-427e-94ea-9576053646a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21067db5-4a5a-4339-8623-afa27349cfb8",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4e1dbef-d616-4833-954c-3a31b0f782fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbf90cbe-dfd5-478e-9126-c059e4fe3d71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3fcdcf1-78d1-4411-a85b-1685e056cf03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff733a7f-7630-473b-a0a1-7e1bf283f542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "162dc5ff-2149-4535-b413-2409ad860f7b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "652d37a5-5fc6-46bf-baa3-5fe86d28bf93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d0d53b0-422c-452d-8720-b27f446ed747"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83da9b2-62a9-42c3-926f-d75ace9e2912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "abfacd7b-69e7-4a98-ad9c-009f4e01e70a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43a49fb7-8d82-4c56-8940-736fca6ba5ee",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4724e5e4-d76c-4ddf-a612-bfd9bfacfe62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a188fce-cd0a-4b84-82d6-9699327dce64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eab8eefb-133c-4588-ad7a-3b4832bd1bf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecdde5e5-5b7c-4d4c-9ff7-065287cf01a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa32148-ee45-4675-83c5-458ff616f82a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c81dc796-ec6f-4ab2-9194-722ea3641905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03e33279-cf54-462d-93dc-1656265b6d34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "894a526b-8b45-4eb4-9503-c8e2d6b62230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c455b51e-4195-4800-92c4-42d8bcb70ad9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f31965de-e76b-4b78-8a22-ab0308cb4f33",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "620bebd5-33de-4935-95fc-53354f029bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da763c13-fe9d-45fb-a817-ad8146b045eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cafa029-46fa-4e43-b813-a6c8ec55eda3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80e310f4-fee8-440e-bf81-69281c807756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfb3133a-bea7-4a5f-98d6-231785beb69c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66eef9a5-0666-47bf-ad2b-b4c39766258c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "760f7b51-0fec-48da-89d6-240e3a25ccd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "541f40fe-21c2-43e2-bb9b-1cd6c1f3bda9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2b07be0-b59f-4683-9eb2-559c968033cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd7902f-2d05-45db-ac92-e7b7c309e545",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a2a178-ffb3-4668-8a52-054f47fbb532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8306f03d-728b-4f9e-a861-cd33e6ea7a13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d09d5a-1296-4550-a440-7d6e8ab9617a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c920ab0-1828-4f09-9b83-6756a41df3c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c106d2-a40a-46b2-a164-435ca74f732d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac1ee33-e901-4bae-baf8-1323c6477e65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b22dc5b9-0d8c-442f-9561-df810721573b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ef602e-87a4-4d4b-9e34-d2b427f34c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "542d5963-924b-40c0-9811-c3fe73a220a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a5130b-5184-4e2b-852d-627e64ecb009",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b19a3c86-9e6f-47f6-8dd9-2f0853a37485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08480d03-2c05-4932-9549-be6eaebb0aae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e9a8a7-fcf4-4ffd-98f7-1725bc856419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7bdc76d-96c5-4844-9057-7347d0e0e452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac953a7-215a-4d88-8d4d-82959baa38e8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ae5687-c41e-4499-b687-b6d7b87188ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9922557d-9e74-429a-83d5-967b4e8ffe3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f84f366-49f2-4e4e-8861-e28dc43b3e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ea72bab-da17-4174-ab1d-699d8f040b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa02d2fc-7cd6-42db-8987-909cb633a913",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dba7f4db-3371-4524-90b7-7cfe781d92e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4713a5d-8530-4faf-946c-7d6ec63e43cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35223299-bf43-4ffc-97c5-470827bf5bfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c8661a5-f5a6-47b2-afd6-2c98773fa75f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eab14012-19b5-45c4-bacf-62bd0ce093b5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e5c3b0-6571-4303-bbca-dea3802c3e65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d65d5fa-2e47-4816-9c50-40607f736172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25eb1d4d-e518-4d73-882f-b9f25cafadc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "102a5ab5-f939-4b07-8d12-5ae14588eff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00d2ca18-eb7b-4fa3-bc4a-05eb5bf04858",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc5edbe-18e8-4132-88a0-be6a5b0988dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f8fb961-5c18-4aef-ae79-96bed12735b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bf70b0b-46bb-424d-897d-36642005ba21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "297c9d71-cca5-4186-8f9c-e22e92886c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3988ef3-3240-4bfb-9128-3be439b251cb",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "789fbf9a-ed56-4ec0-be91-c43a7ba45923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f47c757-8a10-40f6-833f-0877de607bd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "467f8098-e53c-4e14-a513-e7fad02abf7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a589be58-7f69-4714-b8d2-0734073500ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26b70497-9d72-4fdc-ba6d-e2324ffcff2e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea1e7433-322c-42b5-be80-b03b8e9ad143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "676ffd97-72c0-4406-90a6-1b96e1d31a4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c17bbce-e6bb-4ce4-b467-121ff80d27ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d99a3702-947e-4e41-8b52-19bd7381904d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "702003da-a9e4-4d71-ab7f-5510990d2f88",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcdd7292-eb92-4072-9a1b-1b72a00c9d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f711b7ec-2b18-401d-be8b-d3b28b68024a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e769422-d93e-4526-a740-99acf1ad0c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5db3148-72b6-4f21-bc33-84459d4f541a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d9f9eb0-d9e9-466b-9c53-beffa3ed5d41",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1495443-3cc1-4d46-8974-86a6182e7187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7556e0f8-33b9-47b0-a3be-43037bc38413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1557afb-1536-4238-9b28-80669d9b871b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17745313-bb6e-45c5-9146-b3ca4b86c32d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9903af7a-f713-462b-a8f2-2d8086f76c8c",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b55e5fd1-c4be-4da4-8306-13ed2fe4afec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df85c4d1-d85b-494c-bd4f-515edf261060"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23eecd62-0b93-4090-a7fc-45e8004d91ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1eae8388-70f9-4bdf-91ab-bee76952a9c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32a96a87-3d44-4aea-a662-836f7ac27f99",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13e50d2c-a15b-4a7e-9cf0-a75ae0d43226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f6ee377-6ea3-45a2-9404-09b9b1d5c1df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9e0f309-664e-44d3-82ba-b2dadffbc5b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "acc97cc6-6602-4566-93a9-049bdab52ac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44c9ec25-df02-4961-806a-70fee4f52bd8",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e53d4619-4a78-4f76-a5fa-696ae0ead547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d40bec39-6043-4cef-9fa3-9e14224c2f65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a60da872-e5a0-4dbe-b7a1-f73f58895179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e483e12c-eb85-4c84-a54e-a8db82540e27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5386c177-d327-4b26-89f8-3a67be0ad32a",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1e7437-ff25-4119-8b4b-3d8aa95548e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "193b671e-2a66-443b-b4c3-04ae0f6b3f81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a93c8b-9171-4f06-9da6-f95a245e8606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b96a27db-e5de-4d0a-9305-146962f552d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa6da498-edde-4dcb-9715-fc1e187bc73a",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51476de3-3e4e-4b2a-91c7-9933c16a6d6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "118628eb-7aff-4216-8a8c-32141b74fd45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "294c4fd5-2181-4765-ac6a-afc1860999ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af2f2fa3-fa36-45c6-abe4-a2f51aba4cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3e9a01-74f7-4d69-b273-4f5c89cb1fea",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bab8a805-ae0f-441e-af3f-92d5307f9ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e9c9963-60ff-4410-a9b6-57f4d6d87599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d877bd9-8ea8-4c17-b2f2-4ea5cf16841a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81975a85-b1c6-4edf-8fe0-64ed86c23b34"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b093a390-0bdc-4d42-be54-f6cce42904a7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7029aa0e-8519-4ef4-a81d-157934e48e17",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85d27613-26e7-45e7-aea2-463bd8df05ee",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d1911257-85ed-483b-857c-d2e00960b1dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c177c6a-70bd-408e-9aea-5e15ef143cd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e57b02bc-51e4-4f5b-8b0e-4c87c75780ba"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "adb820da-4aa2-4ee0-913f-0beedb29dcdd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "869a6cad-112f-4b60-ac22-6b9e91499d18"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "807e7c07-aea1-4dd9-b7c9-4bbb9e03971b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "553b28d9-0f84-4d22-a433-0f3ea7c21abc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b558efb-365a-44e9-874f-f4983e140159",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ee13d17c-5a02-4a1f-9a19-b7dd835e9a2f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "de3709b6-44d5-4570-a534-e5e5111eca34",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "075de2ef-7f38-40d7-9c49-bd247e5c8657"
            }
          }
        ]
      },
      {
        "id": "c1555e27-3701-4381-846b-4575e520584e",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "5f117435-f93a-4f67-9cf5-fef42ea91706",
            "name": "Negative Testing",
            "item": [
              {
                "id": "25ed6dba-a580-463f-8c3f-2165a7d8c11b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "eca657bc-27b6-4093-9e3a-55b6ece76016",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35de2db7-2c4c-4cc0-8a84-a4d6ad228613",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48a59e47-b1d9-4693-86ce-0d9d1f6422a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2670ebf9-971d-4669-af62-74481668ea00",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70eadda-24ab-4156-9f4b-66eac3569cdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f777c0c3-e139-42c3-8d68-c61cbc38416b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dead47c-d6cd-4ce6-a5fa-bd602cc82d7a",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "922a771d-793f-4132-82e1-244c7d16cae7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "555de0b0-5a3c-43a6-a27a-d1d29c0fdcf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0846dbd2-11a8-4adc-9e0f-c7a24e709a1e",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31b6361d-bd0c-4192-8511-502bc6b8b49a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db61c6f0-e10e-427b-81da-35351dd1b221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "749b3fe1-d500-4578-b9a7-b70ee3e01481",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3f8216-899e-4ad0-943e-a1d57e7f2077",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14c89460-52ef-43d9-92df-b9be324dec52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "356f052c-2a86-4b1f-b94d-e68d742a3d41",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "898dd8f2-5cd5-4ef4-9ba2-8925cdbcb5dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "241d8769-2d22-4e9a-a367-48b6a7f6f76a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4a68d78-6be0-4f6d-a395-ef6cf1f83790",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1135e7f4-58fc-4f96-b9f4-822142b30723",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18958087-2e7d-4477-8bd5-f6fd6a7270dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f1bd57a-5428-4c29-b442-265396738d55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec375e88-d399-4398-9692-9072017066c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "943f9510-4f97-4d3e-8a4f-5f6084bcc8bb",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a4f632-6fc9-4e26-b280-3ea22d83c46d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cb21859-678e-423d-9526-72088d7599ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c0d7686-2e50-4f60-a880-b904210f609c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5fb9835-9d56-4f4a-830d-8f0afeaf6bc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f75a6c-6693-45df-9bae-c2228a22dc1e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e28b4117-f333-45e7-8e57-b43f3eb0b46d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4c8c56c-4259-43d5-b9e2-e881eb604d50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c24eb9d3-c70b-423c-983d-d8c2caea8bcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a303b49-b2e5-433d-9336-dde1ff1b7d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "503d58ef-3fed-4784-8110-0e0592ec59e6",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c1dc70f-4c4c-40f6-8260-b5b01820b1dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0f66cb3-e268-41a1-96f8-c4b6553da2fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "457118e9-e357-41e2-a273-89d60d19ebac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a16a4d5-4199-4a72-868e-9ef80af5816a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e9629c-4923-4fd2-bcb9-16db5b7a2b72",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f31016f-9cf9-48eb-811f-e0ad86fa88c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcf00ade-96db-4e19-953e-8d9bd6a819e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4842f3c-cc82-4a76-90b8-29ced8865955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c6f733d-b357-4878-a13e-9c0d96564547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a978f30a-846f-4967-87f0-e6e811136382",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca1c2348-a1d4-4094-9713-4f29aa48231c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb332739-4b2d-4a72-9f4f-ef286dc69338"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "281078c1-2ab3-4ae0-8026-640f8e3132e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7304fa3-c65e-4ce7-81af-3ffbe73c9f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3a5d5a3-df44-442c-b6a5-a7a323a41fc7",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a33ff795-b6ed-4181-ad18-c1f0879929e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4973ff1-71cb-402a-b0ef-3c2e7624b7db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8366900f-3b25-42f2-b460-6a044ac2c708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "681f7077-ee7c-4c1b-96a9-7699dce7b094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "543b696d-8094-4566-b2cb-4ad59c9cbfa5",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ea5bb9d-22af-4f99-b04b-a03f7dff619c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2726df0-e52b-40ed-b074-6aa5d7e39a82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d7b180f-049b-4ab5-a2ca-2d325abab70e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20cef9c0-cdde-4e4f-97fb-f1db8988b2c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb64144-9fcc-497e-9ec5-a5b6050d516a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dec5499e-c00f-4ae5-afaa-21e40e648f9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc2d9096-82d2-43f0-a8a7-d4d3c6501ffa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d682a4d3-7c7f-4525-bdab-39472cf0e988",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f28f39f5-8932-4a2c-adc7-b9a9b06b467e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a917a21a-e6b2-4d85-b0d9-22040586c41e",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "035d3730-ddd4-4c7e-9262-07db6c57611b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07d81301-52d2-4f5e-9329-95f9ffafa97f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60494b58-0b03-4a6c-b38c-b66da3e219da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e482b95f-e07e-4b50-a10b-a3506641e421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ca10827-5e32-433c-9e8d-452cc1b8eaa1",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91217040-9cbe-487e-9940-0d6d0321259a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c649e18-06c1-4292-b64b-c8871914b228"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cead5f67-088b-44c2-b1a2-f8913ae3127e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adef41bd-7323-4ca0-bbbb-8b5285e8883c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a083b09c-31a4-4029-b51f-6a771a75497b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd2e242-1571-4708-954d-3fd3270ab8a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1e1195b-1c6e-4d51-a00e-89da7b108d38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b42ac80d-f85b-4c03-9855-ccafbcbe94e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "853955e3-6305-4c83-ab17-11669bd54416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae514849-6bf2-4e44-8cc6-0c37296a7d07",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c9a892-c754-42b0-8310-2d16538f2d8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad900f4a-904d-4f92-8169-01548069254b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d4b376-e8a8-46ed-8a8e-e9e72b49f119",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ee29d83-7154-468c-904e-b4bded518e76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c18a0f50-9a32-468d-bd01-891d19b9442f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ccf64e-889c-4794-a349-40167aca70fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a146866-5d1a-41e3-9b20-ccaf0eaed272"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a0e9fba-c5df-4f83-86dc-6a729889c287",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f098d6b1-21d0-428f-8b37-df8e3d2e2bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab3d4de5-36d3-4a6e-9574-b263672efc54",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b35e70b-5df6-4192-a3cf-05d30d30a1d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfbe3668-a980-4d36-82f4-f9848aa397b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bdd7440-aa96-4626-b769-eaa013fc0c4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6d35c6d-527f-45bd-83c7-21a1f3e74049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09530056-95f3-47fe-aa0e-68b533ae70bb",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b79f59e-fb27-4547-8f5f-15678c9ab865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "708acdf5-e2a7-42f6-b4c5-8cdf21492d7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "371594b6-135c-46d3-a73a-d3565cf48f96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35b76650-4bcd-496c-bcbe-fa9d69204e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d9726d-18e1-4999-a6aa-3012b895705e",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92ea80dd-f572-4dc3-8c10-696fdd7d56f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71ec6e9f-cd23-4840-afaa-96795771ce97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c6f78a-dbce-418f-ae6a-800301111f95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bb82087-c963-4e80-95cd-9d90628caa81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "944eace7-dfa2-4a93-a4bd-99e025909827",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee8d1e49-c280-4d68-8ca4-9163c98b0b97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9b8af59-fc9b-4edb-a03e-45a9677d6da8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c32a25da-e20e-4a8c-b2c8-f99b053c204c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41f26031-a014-4cd0-8475-9bc6b1148a71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a65c760a-40e2-4f50-8ba7-2ecb70629e64",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fef6e70-506d-4e97-a4c7-027ac198de92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dcfbf4e-cf5f-4f33-af77-b9bf2f5b672e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7db842b-c388-45dc-8963-d32ed1bd0c5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57413494-0efb-430e-ab6c-71e37f2c871e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a62975c4-1728-4067-b4f9-59e841309014",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "795e6f30-c9a7-426d-be46-a891bd199f60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8c00349-5233-46e0-8011-059bc4cba541"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ab5fde2-b776-44fc-8135-d2aead0f5ff1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e52e8e52-c1f2-4eb9-8c2f-a96028061981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59773680-3514-4aa2-afff-c55a233038bf",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d623ced5-e71c-4e26-bea2-dcac80ebc45e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01bdac13-eb8e-4e91-929f-a2982d938bf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35d9c65a-14bb-4ff0-ba79-4d894e1d84f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "829c4b2d-3d96-4a5f-8ea7-778f727b493e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e61e080-2520-4b87-b86d-1682e16bfe2b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7854b05c-ced1-4e2c-a170-9292994926cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "189a773d-b1b8-40ca-8af3-8f962c479000"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64c66ee-d49d-481e-bfe6-315439917061",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c572506a-ede2-40df-8d1c-9b99fd334fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a98eeaac-24b1-46fe-9b8f-9f600cb7e572",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7afd634-3fb9-4df4-8f7e-d988178ffaae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f060992-88e8-4201-b8d9-be40c7d7ee8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e81396d-fc57-467d-8973-57c97b31369b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7102bd4d-6deb-4e20-a004-bf66469cd23e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "227c3c49-acb5-4f11-97a5-b7460c09eb87",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f3b26f9-4a03-4e08-852b-31973d3e973e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84381cb2-8c27-4b66-9004-89decf70e539"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c05599-3fde-4a2f-ad80-09fd357197ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a87286aa-5e1b-41fc-975e-78ca6d0da54d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832cab80-1268-4686-b436-d3eccff6abe0",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a9f101-2e84-47bc-835b-07d2da223190",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5566a010-fa52-4768-acea-ae45299d140c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69110c61-bd85-4739-9a1e-5627be287e65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3fac1f5-0cce-44e6-abca-1207cdabfa87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0508657-9d93-40b1-ada5-0e8088d4e81f",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0343077-6028-4313-b927-d94d0e67dd55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e73e91a-a57c-481d-8068-67aada344b53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c3166e6-92bb-459a-a373-8f1830ec9310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "597afcd9-96cb-45ae-998b-8e502eb934f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8969f69b-dc24-4735-b74f-420818a5d4a5",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0508a123-f4d5-4304-aabc-3e26d31c073c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a7a9f1a-ae5b-4a50-94f7-3943fa4ba560"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ddcae9e-be27-4391-9775-7e38f509108a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c056c8c9-9487-4945-9c2d-cd62530679e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d1e583-a7f0-424b-91ff-ca4d3d059421",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a221347b-3756-446d-9c31-54477254724e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "890675ed-2943-424c-bf6a-1f7d008ac0d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "692f6acd-6044-4357-b4bd-a4f2a10d63bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04566bf6-d030-4be2-b900-7e63c87aed01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1578aee0-4b3a-4aba-84d6-e01dca93aa8f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "631d521d-12a4-482a-8483-6f96c06530b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6b4c98b-7fbe-4035-90ef-63f69ce5d2dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2039dad2-400e-45d1-8e03-c37ceab6c4ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8227fbf4-0b54-4f45-9baf-69c2945bb380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99540f0d-5fd0-4cfb-8d6c-d9e3bc075f39",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe4acec8-cb24-48cd-a9fb-faf5ef1ff74e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d6622e5-2fae-4d6d-88fd-dcf7ae885b07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c27cea3c-df6b-440f-ac78-1778dcaf3f63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ec69e70-bf03-4e8e-90d6-d51b2fffd596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6518f98-3294-40d2-b224-a84c6fdbd48d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb41f97-92d1-4c19-82ed-66d78916ce56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1142c1cf-1a02-44b1-8f8f-6896ae64f345"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a38c548-3447-4a4e-a93a-5c1afa11294a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae848fc5-8c5a-4c38-b6cb-cb2ff56f1e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c31b2ef4-92b3-4109-b982-61e37b89fa75",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef670f8-c787-4817-9555-054875679719",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95c155db-5434-4490-8bca-ee17a0f23c58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7fe155f-c9ee-4546-890a-890b97e79a45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a48056e-b586-48d5-b7c6-d4ea6e0f271b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0de7e80-b064-4329-bf4b-d1167d3fdade",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf257ea9-30f1-4399-a7a2-f4a4bd7ead7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0491f5b6-b354-4fb3-8371-29f793186212"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ff69a9c-6188-4042-952f-0c6954ee0177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41a78c56-e526-4f10-b3f2-6bcc1009a7b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92d3f309-ed52-4ab6-933d-de2e954fc65a",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10292e12-483d-4cfe-ac39-55d3ab5e46d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c2529b0-77fd-44f2-98d6-ee9b21333a71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29ff09ca-7dc1-4fb3-9d1b-7060f1807ed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb806957-4641-4547-b715-160eb27a526c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "417f2a76-1375-4b06-951f-48d94c36918c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec5bd1d-2818-4b5f-9384-811cd85d765e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e949bb83-7a28-4b38-ac71-568c94ccf3e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "199f857f-db56-4a04-9796-fad2ae75f5e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c6a1663-774f-4986-9998-3105ae9303cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6769cb7a-e909-4cae-ad81-392943a85150",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d93dbf7-33ae-4a6d-a516-22c22e49a5aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93ef9906-1c74-482b-9921-0fb0024d6d6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "477c86eb-7c62-4218-9045-3e7c329a5960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f49440e-a740-423c-87d7-d1768db9a919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e0136f1-1240-45c3-8507-f07dad1a6388",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fe70699-ae7a-41f3-b050-a0223183b22f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56104ba5-6a74-4247-a0da-f2a53b215e46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e179c263-1a18-400b-9cec-829111f5dba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60cd2d5d-32b5-499c-b78f-28ee54e4205c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42dd1fcb-766c-4f11-bad9-49a969c00737",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e22471ce-f3ad-4bbe-9e03-8fd9e7609c26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "430e91b1-389d-43da-9288-9e1be61736f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54852681-46a6-4f90-bbaa-aca8eb5c0e20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44615d7b-fa6d-4f59-9766-203eaf9bc968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e9aa135-bd7a-4f66-b2fd-6bf3db2c76a6",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3660714d-6145-44e5-b868-e620dcfd7db6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9273b756-7ef8-4b22-be12-044d56fd90f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20019ed9-ff7a-4f54-a90e-9b898dcbc39c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5acc8f61-95ac-4f74-923e-b5b3109ef94f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1014586a-7c4a-4e34-b979-a861e2d1b3f7",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3194280b-21c6-4293-b8ec-ed0d9f9ade6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e29b86a3-68de-4dc8-bb8f-b1da18428286"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd1f166b-d628-4888-a0ee-33a9bbf6dd6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d9a42c9-858f-4038-8e88-988fe544f604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e39360ea-a4be-42ec-882a-1c5d72e48a0b",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30190c4d-f0c5-49c5-88e0-a2a7659ca401",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bf719e9-c4a3-4a7a-ae68-d430f6670008"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ec1d2e2-f442-48ba-8361-2b411c974269",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58242aee-df53-4514-adb6-5f6470ec9450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92aea5a6-46ba-4735-b3e6-1d1ae1d91158",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ccb4ba8-e5d9-4137-92cf-c18d0ae0effe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ebe9d03-6b69-4744-a4e0-5175a01a9947"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "327f1534-1711-457e-b0d0-1fecc1ae2d2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "744db1da-6ac5-4895-8f91-b60e97f0ce56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9783b8ba-3f3c-4ed3-9b51-b09618133fbf",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69911ef4-1bc5-4121-89d3-27877562a329",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "035dba54-c143-417c-8087-af64301fec82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff8349d1-e33f-4f7c-a7d6-6dce0c9cfe2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1845e5f-b1d5-4c78-bd5f-23631996617f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b889938-1a2d-469d-a1bc-60b039417b87",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d69e99c-43a3-43d8-afdb-7fdde3610d87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40488b06-451b-41da-87f4-daf7628519c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b47bd2-98f4-4da6-9b23-79ab3637307b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a265387e-acef-4f5c-bca1-e289d72ce3b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06df94a3-cd30-4cac-b61b-4a9bb2e26255",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c517fff8-d3ec-4d92-b8fe-b644906b9ae2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05a71683-9a5e-4cc6-966a-a84377f0bfe8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef091fd4-421c-457d-914e-7a1c63294146",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8713e16a-0321-4f84-8037-84dcc81f059d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94202b68-0b5b-4da0-aef8-62923fcf3a17",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa5c17bb-49a9-4854-91be-64608d3877ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "918dd6af-90ad-4367-b470-a456178b9d02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a607c9-472f-412f-ade3-c8e1d3ba4a0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f62b3b18-04a6-462a-81a7-2f074009059b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a44640e-60ee-43eb-b77b-15f5b24abf0a",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da0e923c-999f-474c-a649-283306775db2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76392a14-ac3a-4426-8be6-b1140c2f98f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d13ece-90f8-40fc-8365-3d85c7b9765f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e67f9c26-eef5-479d-a817-4c59dc0f5396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ba16a86-73d5-4a4a-b553-dbec58261ade",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f74773d-c032-49a7-8861-ff40bd27fffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67d9afe1-4983-409f-82ce-08d727b3df70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac7e021b-2ab3-4245-89de-b17fed1de1c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae598edd-9405-44fb-a96e-484f65d7ffe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b56c63-c883-4486-8446-d03ba390dfc3",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d1d4c4e-d1a6-4002-b972-a569938f45ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc6bf9a7-81e4-42fb-9e2c-13dde26af90e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faedbedb-7911-428b-86db-b0c29c8932ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14461407-e6a7-4dbe-8d2a-09dbcf45922c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "108db7fe-d7fc-40f5-b797-863829301b63",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7034fa66-c6e0-4fc4-9a0f-f9226fc6b195",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b86227f-5129-406a-be6a-e1ce908cbff2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea9ca084-1686-47be-8eff-1342217b18d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73bc6e7b-c542-45b9-8f2e-941ca1519e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9737de55-f353-4499-ab44-7c7b3f13ec70",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b7491f-f3f2-40b3-bfa8-e03babcdad56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99899335-b5c0-40a8-8338-4705710c7bc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89ad4c8-b271-46e1-ba52-4d47dbc6010f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "631f06c8-81b1-411b-a566-0f6a3204404b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3805e8f-bacf-4ec0-b2ab-5f1b4bb28f6c",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a49f4d-df88-4a6c-b1f3-6524404ede79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2eed8ce-c6d4-4f2d-b80a-feae4053d54a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1729e437-ba73-4673-b915-48f99294666c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "432bf69e-e509-4c07-9543-1aa191196e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1803b0f6-aa42-4d11-ae45-7c786687c8d1",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b287fb-f105-4111-9608-7823192e2f8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63708f8c-2d3c-40ee-b7ba-d074018e056b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e120741-6e34-485e-ab54-170a78f2e6db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5747f25f-62c7-4133-a3b2-bf7c5c957f79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "847b1bf6-c9ae-4b96-90d3-f4693ab5e967",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05fe5e65-a52d-4f92-8e5f-8f312eaa2d5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e46e0c5-96b6-4efc-944c-91bcc584d9ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a0a26e-61b1-4a50-8572-af293770dcff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edb69c57-4d58-4aa8-a832-fdf3015463d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7ec8aaf-cd9d-45ba-a3ad-b8baa23b69af",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b75514ce-bd60-47d7-9b63-ef92e9f79d7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e646f5df-8959-4fb8-8285-b12f4cda46bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d497e8-0b18-45c1-8de3-95416edb551e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bc68b5f-8424-48fe-84c0-affd7ad090fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6efcab41-6bf8-416f-884e-b0acb735fe2c",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d32a09-27d6-4ff3-b9b3-5a0cab629632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e7ce170-a10c-42d8-b416-1b00cc2a5de9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81810310-93f9-41f2-ae70-5e212a66e02e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3458583d-1eaa-4654-be80-3808a7b0f0f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4b6e402-dc1b-4798-b450-fcf485089be1",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72dd704f-b7dc-4234-85e2-cb5252785971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e188212-5c67-4d1a-b76f-231310bf22cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b28b80-d1ac-4105-bbfe-3e2124db6722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36345994-8b45-4e48-95b8-6fdb071ac5bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b0552ed-b37f-4b05-a8da-37335334a20a",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "058e3e49-6317-4a84-b7b8-58cd75a4c1ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "539d5934-fc52-4af0-bd2b-6f43ee26c64f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4dcd215-19b4-453b-bc6f-09d16de2d058",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b7a54ee-2d12-4f76-a62e-45311bd2abf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b47c6f-c004-454e-a522-d2390f73c1e3",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b9ac4e-510e-463b-903b-6507f34f9c0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a220310-9a42-426e-a3e7-6cb9933515b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10a3fc13-8f23-44f9-ab7c-298a0422096f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aec0e966-8390-49e8-a8fa-c1eec37d7d73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4111b2ed-8e2e-42df-819f-6f9ba20b5bc0",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6401361d-fa14-4e49-8fe6-01f0b7a658a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2dd811d0-fb01-4007-ac36-86f3dc50b3cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b6bd93e-b46b-476e-9e41-9c3f295618d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54879305-da35-4447-a5e4-4a1ad65a09ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0781480-8a7e-4873-be66-1470cff9f675",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bffd5b1f-ec0a-4444-b71f-bd238ee6938d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2934fdf3-cc21-49da-8468-dd922fbfc2e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f488151d-ff98-4343-97b3-b1024b9cb1b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31c8fbd4-8a20-48ea-adbe-9c2b9eb9ac65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "310069f7-1981-4af9-b65c-99d0bc142eac",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8231d947-32c7-40d9-8d75-93dff897c534",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdacd26f-6086-4742-9cdc-261cd5111a38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07ea3ac6-dc3f-4620-b500-fd21a5537768",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4c1cdf4-91a2-4d55-8eac-33a951167f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47cacd43-fe76-4db4-8f15-a1abbcc487e6",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5a10dfd-b1d1-42c9-b2a0-3c3ee4716bac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "451a83d8-e1da-4224-bca7-43892d300676"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "943bb744-c103-456c-84f1-6e1d09422ffc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5e91ece-aba3-4c37-ab55-e4120b7653cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "694d49f0-6197-4d15-a73a-11f6240f84be",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2a09217-dcf7-4af7-9d46-ffd539d607ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c75bf9d-ac1e-4c0b-8555-679ba8f557ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d2ab966-7f40-4bd8-b7c4-71add914b8e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "911b9f85-6ca1-4484-a4c1-df155e9d76cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6fcb1b0-2b1a-43f6-bb1f-d753961a1967",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "947db084-0e84-4c4e-82ad-8454214266b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f0d6709-ca58-44f3-bb98-e52ae50129d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c3f6bca-e848-46ea-a141-ec32292b9d94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4b253e4-cd71-488a-ac7f-97c0754527fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c460b07-edc8-41bf-ad6e-71a0640ddfdf",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db6b678-a0da-4575-9780-5f47e8ef3f06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fb03a92-74e4-46cf-b481-2f056915d149"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d30f6afb-c230-435f-8aa8-23349e37b03a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91a24eed-b1c3-49f5-9c2a-a1a890a56cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64caf002-982c-4884-9b5a-1f46e8ef8c8f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f781eabe-7aaf-49fc-bdb2-921cb3d85359",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c02bbe36-44b9-4d68-9481-44d82ec0db67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "255a1361-9c64-4ebf-84ec-85d567cdeb2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fce85345-15ad-4a27-91b2-0f3ec070ffae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90adb890-5069-49a4-970b-2342b85bae4d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3afe745f-89d0-4920-bbc6-f8b12dd07962",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2567b257-fc1f-4194-b5a6-1cd2666639bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b27f47f7-b0b3-4e79-bbc9-aad7316faaf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b2ea4b7-3f59-491c-8962-a211580f94ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13201ac7-d79b-4c35-ad41-79b2e90fe98f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e2dfad-641d-438f-96ac-de00f1e5a1c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff93a530-ac68-4167-ab50-8155bef7cda5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ff3940b-d8bd-40b8-8f70-a4d6fac4be20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e70a9a33-4abd-4741-8920-b53a34c5b3d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4caa77e-9be5-415e-a1ee-9e5fa89dd11c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a363d31f-dad9-4fa9-84e6-d79816f120b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c07c7eba-4103-427a-8cf3-d551737ff045"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87da7bdb-f54b-4b0a-9900-78a71b8f98c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bb68d97-e761-4a8e-850d-c4115eb98d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9341198b-67f1-4b52-962e-8e10bc781316",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae31c2d-70a0-4b77-9f38-55699d44ba46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bafc9da-d342-4186-bd62-d6f0d51fe6da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e33b14-36c8-461f-af89-4e3d768b6a22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "359408e7-1f42-4a8c-95f5-c338cdd68577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb2c21d6-4d9a-40e4-839f-aa0ad8eba93a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca3b983b-2957-4a03-9c8d-6aaab93ab89b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d58fd118-1a37-4088-91ee-a7c5a463e428"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "085f1bc1-b2f7-42c6-89ee-d17780ea8a51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6df36333-a616-41e6-93e3-302d15e3aea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b5f79c-8b09-4d51-9b16-cbd6f37786ce",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22ad307-8181-48b8-9cb8-326ec83b37d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a979ea99-abcf-45db-bfe5-dcbe70eeb5fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac19b4d-9145-47f3-abaa-3ef1765cd52d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf1c2eda-b2bb-40d8-becd-d8d14a54fbfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecf6cf6f-26a2-425e-b169-cdbb4c568d37",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f50df683-429f-4bd4-a1e8-c9d6b14247c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d51f95a8-e44e-4cfc-b313-4dcd360eeed8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb2ac516-447b-4a95-8b99-1b15984b2c21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ab8471e-9cb8-4456-b823-59bdfe25da01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e60f13a-410a-4b32-92b2-4faa0c407b06",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82515fa-0eea-4e33-9774-0575c3ef241d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96067425-d4c6-4c5d-8c30-cd8a3df37906"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c2ba9f-1f53-4ef0-9f59-910495989169",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ddc38d1-c356-49a8-ac98-0119a278ba66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb56837-eeb4-47bf-8fa2-434a3f7b0be0",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b0a151c-c3c0-4db6-a417-3d34fa62a261",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bee1a535-e3c7-40a2-88a0-74ccef399e85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e410bd2b-9ab9-4f13-89d1-29680f596da9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e25c381-902e-4beb-b3af-201ea9d7e6e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48deab86-7040-4c93-8e35-f7ee9c24e292",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e32de60-5371-409a-a40a-a0fa4f28b0a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbcecc1a-0b74-4b34-b8a7-a5531e7ae99d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d12733-4475-41df-aeca-c84078a7920b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77b5ff39-388e-4cab-be5c-50270cf175f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "433be21b-eaae-4b55-84d6-aa741d5a9279",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77767a03-33be-4f92-9cde-91060a1df1ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "179cfe1e-264e-45e1-8a59-d719db5f39d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfdd898a-ecca-4c18-b22e-cc94b08dae5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd873115-bfc6-4bd2-9095-0487308a5db1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc69f6af-cb3e-4832-a01b-3627a616394c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba5633a-a946-4fcb-af5a-9d3791b07ca3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d1cf881-5e86-44e1-8d2d-3cfa0f9671ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d7e81a-bde1-4dbd-8143-6627497860f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fbc7c57-fe66-4c9a-9157-b20a47b80ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "523564d6-cf3f-4220-830c-51d774b3e69d",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90b5da95-52e6-45c0-b612-2af8b032a35d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8376b685-2bd4-443f-9e51-befa6da2e7ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b366e9c-28c8-4388-a660-bbcbf6c96d6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e48383f1-e602-4245-a6a3-387662e76d23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "971d1a05-aaa6-429f-8ae5-90f70cbbf9ab",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "245122eb-d8eb-452d-9e0b-d45138da0048",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8d102a4-c900-45b4-a6c1-e849bd9b465b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "654958f5-641d-4922-9e42-46e029f7f1c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea88024a-57d4-4413-a6d5-f3b8139e9c25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "479ecfa3-ccc5-48b7-92d0-1732c940f094",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99cc5f4d-2315-480e-9737-c8e3aaa870a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d98582d1-adea-4a76-893a-d4e426d9aa5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "914de84e-82ce-4f1b-a296-3b1fb033f7c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac10cb4a-84b1-489f-85fd-982ea286a628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c005372b-7855-4f19-ab80-fa9e44d2bdb0",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85799e2c-415d-4390-890f-fc188f647f3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99bfab5d-925b-4668-819f-b4543ffe91d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ce17afd-181b-4caf-919e-d236dedf1f5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "168e08e2-e9ec-4e81-a0a7-9d54b419e243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e31ee9-c6f1-4397-a8e1-be849f80a2cb",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b924a648-eb1a-406f-86cd-ee5a63812fb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c82b777-cbba-4bf5-9ea0-14d0bde6c926"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f14d0c-5de7-4fe2-bf65-5975c521a456",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c8d2e3c-213a-4664-99e7-d52299e684e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c940174c-de0a-41a9-a895-27742c800c99",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc9008a-f39b-40c7-86f1-28ae88100c14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2eb5708a-fae1-4a1c-9d4e-c8ad1c3eb854"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e5391fa-d097-4100-9213-9c41cd29d309",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d39c130e-be99-4a3b-a3f3-95b97f56f0f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "658d2dd8-122e-4060-a025-5120bba3d285",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd20af9-c94e-4d6b-8d11-5693a04b0e4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de2858e6-2efb-4970-9260-a79a7bda4e2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff6691f4-9329-4acd-a5bb-5c6bb0e19c10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40a4a4bd-795c-4beb-95f3-cf9bcaa4e7de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5166e073-67df-46b8-9022-e90d2cd58990",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17f6867b-e9bf-4cce-a72b-fee41e7f2b3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33ad82ce-6c02-419d-a6a6-a1dc391d1172"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "002f1a18-a8d6-4f60-b065-fdd22d4ac01d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab052a79-7153-4d7f-8c53-0aa110951b3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f14351b-80f2-4a38-afc5-bdf5d5ddbfed",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0493caa0-18b3-4635-9bbe-d43fedb171e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fb6817a-d718-4907-b6bd-e60786161ec9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f9b86a-ba6a-4645-8c5a-82f783046274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a7c674d-e74c-4589-8179-b2d6d083296b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9558daf3-6d19-4731-b1f5-538bc2f170ac",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c923d285-0ed4-4d69-bf79-75705250609c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a94655d2-0ffd-4810-ae1a-e1daf40fafc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb35f5b-c321-4ac1-803a-c4b4eb3ddfb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a34eb57-1d0b-4268-a0c8-92b615ee773f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e5cb1b-be45-4a50-b555-afcd06b80488",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1e9bcd3-fda8-4629-aacb-2bb77f1008a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38965a7c-7d66-4de6-89c8-72a459e66b33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "711e29e9-5964-42f7-951c-eeabb271b1fe",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76c255e8-baaf-4464-9a2a-15fe701dfeac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88543b2c-330e-4b42-ad84-9c7598dc4005",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87fe1719-7303-44a3-871b-8b32796d7ac5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73116991-cf9b-403e-a129-cbae68e7af7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa9d37e0-5374-46b1-a8ac-1b9dc5fcc152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce0b11ab-6a70-4a55-9c63-5f0a586f2bc1"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ebcd2307-6b8d-4082-b813-b86078c4284b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5874e9bf-ae24-405d-9200-96ac4c55e465"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6fc692c-9ff1-4dd5-a36f-d97529ea7aae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d7c48542-25ab-4ed5-a8fb-05851eb5cbf9"
                    }
                  }
                ]
              },
              {
                "id": "3c61a31a-3ed7-41f7-be98-8c7023577fe6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b2df7be5-cf85-48f9-aee2-275413369f81",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd9103c8-c90a-468f-ad59-5a4503434ee8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e13d7165-7d2d-4720-8841-00ffd4b52088"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c49d60d-b0ed-4365-ac78-11b7528ca4ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3bfb8e29-d42c-4bc4-9620-22bddcde7ce8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "291b345e-5721-4ad5-ac57-87c80cec6c70",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "615ce2da-d137-413a-8d13-53123f64bb7e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f4aabfb8-a4fd-402f-8e95-ad18532958cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0bb4a1b6-83b0-4a2d-8c48-2dd5f0f0b21a"
                    }
                  }
                ]
              },
              {
                "id": "aefc86d6-6f70-4117-9ce6-979b8c032a33",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "81b9058a-e0cd-4492-be19-501c53e022db",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8e5eae0-efcd-44bf-9130-382f77cd85e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "0bb14869-d8f3-4788-a6df-82f46195ea63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc70dea-7d43-45b4-8013-f41e491fbf2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86ad9b82-2777-433f-9c86-d291106ebba2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ec4719d6-c748-4c66-bf39-13c51eb68bcf",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9e712c54-f438-4ce3-82ea-f56e58844fdf",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fab39c7c-7cc3-49c2-9d46-9f4460a12331",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "013c9398-0a69-4123-a43e-8ac956bf81ac"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "afbc4c90-2508-492e-9c4d-71ff92a56b52",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f2b6792-f6f1-483a-b7ad-3c6e9ba68083"
                    }
                  }
                ]
              },
              {
                "id": "36fc4bf2-7be4-400c-9da2-a012754eb97b",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a8de95b6-a830-45de-9052-716dd2adc4f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "29545d99-4475-45fe-90a4-5718fb9733d1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "655bc486-5046-4d34-a5fa-77041c4b7cd9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3fda52e1-184f-4898-8c4b-e88d96e5d453"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5840258a-a7f5-467c-8b54-bd4636ab088f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "bc5dbf3c-77e8-4310-8cbb-82a20e7bfc91"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bcbb2cb3-3474-4e79-bc70-14033a2e0762",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "91421b12-b224-47b5-a291-14fd97e476a8"
            }
          }
        ]
      },
      {
        "id": "8d650795-6ddb-494f-8052-15036b271a36",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b123d34f-f9cb-4deb-b331-8e9c2c8418e2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2c239721-f23a-42bb-a115-d3f796fa35e0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "734c9f79-8932-4f8f-9a80-69fa07ee8b69",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8548bc5-fe03-4771-8e20-957cc3afb4eb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "441e617a-1c73-47a4-8bb1-88a0e7a669c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8320cfba-df81-4065-bf53-820f0e0ffaf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a4ef6b92-c448-46c7-9624-339c502d8640"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "678eb47a-c87b-4753-8796-703e995ad716",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b470ac15-421c-44fc-bc49-becd7882a630"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "31004885-d017-47ae-9697-c99def40ad2e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0c49b6d4-2be6-4804-94ea-645080c86e87"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d78dd3f7-a6b9-437c-b7b9-e8d8b643e37f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "689b777d-f741-4b65-837f-a170e6e90657"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e381437b-34dd-4dd3-a9fe-55f0bacc4b2d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5eabe2b0-c9a5-41ca-9eef-18ee41bb62bc"
            }
          }
        ]
      },
      {
        "id": "154a3937-e767-4283-aea1-a3e1d0fb0e6a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "8409e324-6d02-41e8-a253-a790f5e7d22d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f3fa0e9d-b51a-4135-92f6-d34e54d2d83e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b2380ee3-ad4c-407f-8bc6-86d12151682f",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "401d04d7-c70c-4d3b-b02e-fdf2f02c6ab3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29899a41-b0c9-477d-a9b2-2fa98954e1f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4b53f9f-1bb7-4ac5-a43b-28131bfcf64a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5d930922-6c2f-4d40-9d3b-701fbd50263d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f00cd2db-3281-4835-936f-5838abba6e5c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "05cfd48c-2742-423f-a9a3-cd10c6c0f20e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aadbccd3-bf7b-456a-a4c4-3fb9556ab8ba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7036794d-28b4-4e07-9559-4f8442ef6dff"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "090b7169-372f-4796-ad4b-7542d5af4c40",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "85893899-c0df-4764-810b-7060cad73fcd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4ad1bfeb-ccca-4bd8-8966-f7fcde9d74c6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bb56f61e-4353-46cb-a486-6a553e04eb76"
            }
          }
        ]
      },
      {
        "id": "af9dce3f-dbc6-48f4-aba4-2b3b351a4e9b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "7b050d3a-aaec-4149-8cc0-357b94495e99",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fd0aaffe-cf8b-4ed0-b5f8-673ecb25d4b3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a92eabdd-7d7d-46a5-97cb-fb1fd4a5a378",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9fa06c8-1a4b-4ccc-9986-4484e6a02199",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e9f2e5b-ab68-4c3d-a0de-78c9eccdef91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a2dbf92-967f-496e-928b-df9c323fec43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8fc8f7d2-a784-4908-9c3c-cd490c3f8fa9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c13918be-0f5a-49c8-bd06-64ea22c0312f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c02c5aa0-2060-47ad-abe8-996d1888c22a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b65bc269-f635-4da3-ab37-09ffa37d8f8f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da287e38-417d-496e-b1b3-813912eaa50e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f7030ebd-4615-4242-9317-db5d51e82bff",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "215a9edb-7dc3-4d55-b876-007d58419725"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6af1fff6-683a-4ba7-bee8-e846542666ce",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "58c0dbdf-7158-4b17-aac5-11ed0b043779"
            }
          }
        ]
      },
      {
        "id": "0c25c115-bac0-4157-9869-a0b1f3031483",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8184c77d-cc74-467a-8a7f-78b3f4e1be29",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c5754324-f3df-41fb-99a6-f2efc00d7fae",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "efac22ba-c606-4ddc-bc81-f886e5f66066",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "abbdf8dc-4c18-4889-965b-181f07795d79",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "005d295a-1707-4121-b663-1c7e2e5fff86",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 113.58333333333337,
      "responseMin": 6,
      "responseMax": 742,
      "responseSd": 83.720795666215,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1715819776983,
      "completed": 1715819814431
    },
    "executions": [
      {
        "id": "eb5f20e8-b523-47eb-94af-89eddac6236b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "83122cc1-74af-4e51-8314-75050de2a524",
          "httpRequestId": "fc4b7240-782a-4472-8cba-ab9b07b12121"
        },
        "item": {
          "id": "eb5f20e8-b523-47eb-94af-89eddac6236b",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "8d305c2a-7d61-4927-aba3-1d6b81ccdb8d",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 0
        }
      },
      {
        "id": "1184e1c0-0208-43a3-aed2-6778317164bb",
        "cursor": {
          "ref": "7484d5d6-0626-4f4d-8438-dba28f08270f",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "167626c8-4ee1-43b4-875c-681b3efa5632"
        },
        "item": {
          "id": "1184e1c0-0208-43a3-aed2-6778317164bb",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "4a048260-e5d1-435b-8358-45f6a8bac447",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "085bd571-a6f2-4a0f-96a0-43d8d7bddf8f",
        "cursor": {
          "ref": "53a91209-2a38-4f87-82f1-ea23dd5c5481",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f8fe2226-1f07-43d7-be49-ede4e8120d1f"
        },
        "item": {
          "id": "085bd571-a6f2-4a0f-96a0-43d8d7bddf8f",
          "name": "did_json"
        },
        "response": {
          "id": "d768b071-3bd4-4445-9fa8-3f64b7c03612",
          "status": "OK",
          "code": 200,
          "responseTime": 369,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2669f0c1-12e6-4222-bd6b-ecfbfa1cc711",
        "cursor": {
          "ref": "18542f58-48da-470c-99dc-71ddc8765abe",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3e1c5268-df3c-4684-9452-f898a4ec9976"
        },
        "item": {
          "id": "2669f0c1-12e6-4222-bd6b-ecfbfa1cc711",
          "name": "did:invalid"
        },
        "response": {
          "id": "2055a0e3-cb7b-4ebb-b0d0-8b9eb3f7b182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2669f0c1-12e6-4222-bd6b-ecfbfa1cc711",
        "cursor": {
          "ref": "18542f58-48da-470c-99dc-71ddc8765abe",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3e1c5268-df3c-4684-9452-f898a4ec9976"
        },
        "item": {
          "id": "2669f0c1-12e6-4222-bd6b-ecfbfa1cc711",
          "name": "did:invalid"
        },
        "response": {
          "id": "2055a0e3-cb7b-4ebb-b0d0-8b9eb3f7b182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a413ddb-f117-499f-97e9-b406f8accc16",
        "cursor": {
          "ref": "4131f46a-a32f-481c-99f8-9f3c1de53c8d",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "97d438a0-36ff-4d73-bb41-f88147fb673f"
        },
        "item": {
          "id": "3a413ddb-f117-499f-97e9-b406f8accc16",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "50d8ba41-7c51-4991-86c4-ada5cc94c273",
          "status": "Not Found",
          "code": 404,
          "responseTime": 359,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "561fa523-e280-42b3-acd0-4f088d9ce1e2",
        "cursor": {
          "ref": "3bc3d5ba-6ea6-47e2-9cf5-f0418953dc05",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a4cc4705-ae02-422f-92c4-dc346109b7ba"
        },
        "item": {
          "id": "561fa523-e280-42b3-acd0-4f088d9ce1e2",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "df6b0f30-e24d-4aff-a082-6c411dcbd7d6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 89,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07b9082d-6496-4d83-8354-9bbd0892500f",
        "cursor": {
          "ref": "ab3234dc-6627-47ec-b7cd-8df04b8a1d44",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c96c0df7-9146-40ea-9333-9913a127cbb5"
        },
        "item": {
          "id": "07b9082d-6496-4d83-8354-9bbd0892500f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "d2cb1ad5-3e9d-4e2b-982d-c32cadcb0873",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d5f4a8f-750e-4470-87a5-fedb97abbd98",
        "cursor": {
          "ref": "042cda3e-063f-428c-bf4a-6404b326a514",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4200d0dc-bfa5-405d-82fd-76e7ffc6ee9b"
        },
        "item": {
          "id": "1d5f4a8f-750e-4470-87a5-fedb97abbd98",
          "name": "identifiers"
        },
        "response": {
          "id": "7d8ddc29-d70e-4100-a246-7592aac1d812",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34028505-9af0-4273-85b4-8de8131c0d55",
        "cursor": {
          "ref": "c9a9fdb7-9e96-4bf1-9761-39c0fcc1dc4c",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4800b176-0c1a-4bed-a3e9-5d106fddf420"
        },
        "item": {
          "id": "34028505-9af0-4273-85b4-8de8131c0d55",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4f2303ab-3154-4779-80e1-1e08b2da75b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bde786fd-d27f-459b-af25-ce57843e1e42",
        "cursor": {
          "ref": "715e1470-be5e-4b64-a7e5-61a98fed82ab",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "739c21c2-abda-455a-950e-648a654cad66"
        },
        "item": {
          "id": "bde786fd-d27f-459b-af25-ce57843e1e42",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "3e83db5f-bd6b-4966-97b5-03e915aa283c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d064a43-35e3-4056-8dc9-fb3ce1311e0c",
        "cursor": {
          "ref": "963a916e-adc7-4b1c-abfc-119ba833b6f4",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "440c3af5-e832-4a90-91bc-712472798fb6"
        },
        "item": {
          "id": "7d064a43-35e3-4056-8dc9-fb3ce1311e0c",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7425c2e3-46aa-439f-a82b-eefbabec0d88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4e36219-b25c-4676-9a74-6391dd3ae78c",
        "cursor": {
          "ref": "3dea0241-2381-41ab-8e2b-66f701c9c850",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f9e90188-2656-4e47-9f0d-d5dd9ef988a1"
        },
        "item": {
          "id": "a4e36219-b25c-4676-9a74-6391dd3ae78c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a056a60e-cca7-4381-928f-47ccc69bdb60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db52f103-215d-413d-865b-703ae812628c",
        "cursor": {
          "ref": "833191d6-2d7e-42ea-9c94-d4bd0c3ea9f8",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "617a564f-03bd-4dd7-9c00-138c44287859"
        },
        "item": {
          "id": "db52f103-215d-413d-865b-703ae812628c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "0a6a6652-d35e-406c-b43d-fc5871d30645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02c82ac4-1804-4a64-9dcc-cd7892aee9a0",
        "cursor": {
          "ref": "b578e814-bff6-4f25-b8d3-c3f3cda90a8a",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3d641da7-7ccc-44c3-aea3-fd09526c30d3"
        },
        "item": {
          "id": "02c82ac4-1804-4a64-9dcc-cd7892aee9a0",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "72e53e54-f2b2-4821-84a6-378da463771f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17051a2-959d-4787-9a31-62da12d52431",
        "cursor": {
          "ref": "3a132e37-51ec-4e06-8844-38e34f8fe140",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "7fefd2b4-3a98-44d8-bbf1-7128c1e8c10a"
        },
        "item": {
          "id": "a17051a2-959d-4787-9a31-62da12d52431",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "0108de46-e70d-4c54-8cce-030aec1cad79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2917ed3e-573d-4825-a795-aba9952fe8fc",
        "cursor": {
          "ref": "162a6293-158a-464e-8ced-2efab5533a5c",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d7fbe00c-d114-40e2-a72f-b6c30911eb08"
        },
        "item": {
          "id": "2917ed3e-573d-4825-a795-aba9952fe8fc",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "76d7c709-338a-41ec-b160-49d00e635137",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d7114b4-d450-40e4-9d9d-54acfbad0112",
        "cursor": {
          "ref": "a76083dc-eba1-47bf-9dd0-62d83705b11b",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "48ad66d2-829e-4b08-b5ea-49126d2725c1"
        },
        "item": {
          "id": "6d7114b4-d450-40e4-9d9d-54acfbad0112",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "5f5bc11f-4d62-48df-b844-e3b0eb4024f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e472f23-52b1-47ed-b2e6-ec46e60a23ad",
        "cursor": {
          "ref": "03dde7e3-50d2-4663-81c6-d418bfa78b18",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "5ae68e40-d0d1-4829-b5c7-9862221cb7ab"
        },
        "item": {
          "id": "8e472f23-52b1-47ed-b2e6-ec46e60a23ad",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "6fbf2d6d-2905-4178-8561-7aed3dda8146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "206ef08d-71e0-4e44-87cf-d38759dfb2c0",
        "cursor": {
          "ref": "877c348b-6959-4938-b06a-24c3a67f74fe",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "dbb9efdc-f6bc-4de4-8d06-18f440383872"
        },
        "item": {
          "id": "206ef08d-71e0-4e44-87cf-d38759dfb2c0",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ddca8ff3-79b1-4925-9dc9-f00c9ac14b26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb6672c1-cbe6-480d-a9f6-808fc95f30bc",
        "cursor": {
          "ref": "cc44c3b4-9354-4699-931a-60cf4cfbbfad",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "16458d53-caae-4a9e-a4e6-b940cdff4259"
        },
        "item": {
          "id": "bb6672c1-cbe6-480d-a9f6-808fc95f30bc",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "0d807081-7ace-4b18-b845-3dddc96c8313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f9f93ef-9586-4f6c-9b87-2ea419bf9ee2",
        "cursor": {
          "ref": "e2bce8cc-4d7d-40de-986a-2ea15c001c39",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "7bb35658-05bb-493c-a1fb-dc0bc865c066"
        },
        "item": {
          "id": "3f9f93ef-9586-4f6c-9b87-2ea419bf9ee2",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "da5ccd89-35e4-4cb6-b0c0-2cd27b0154a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e289eb2-e106-43b9-97ad-1305c45164bf",
        "cursor": {
          "ref": "bc620999-d27a-49d2-b4b7-ad83a808b07a",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "668601b1-9ba6-4022-a3ae-03202b79090f"
        },
        "item": {
          "id": "8e289eb2-e106-43b9-97ad-1305c45164bf",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "5f7d1eaf-edf1-4fa1-8f83-55b36a389771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "843dcab2-33ee-4057-8810-5cccc7e46980",
        "cursor": {
          "ref": "751c71d4-6d20-47cf-8ecf-f9c3754dc9a7",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "436460c9-e28a-4b2d-959b-e1f52d1df8f6"
        },
        "item": {
          "id": "843dcab2-33ee-4057-8810-5cccc7e46980",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "5b75d939-83ac-4189-ab06-d57da76a4105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "558d764e-02ec-4c66-8ac6-d8db97648822",
        "cursor": {
          "ref": "48124dad-9398-4ad2-a52a-f1c5559af03f",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "58fd0550-f4f9-4b4e-a423-8c38e0487123"
        },
        "item": {
          "id": "558d764e-02ec-4c66-8ac6-d8db97648822",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2540a3d9-f762-4302-abac-edd440938c2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d55a686-47b9-4209-93a4-0a94f3fa3a6d",
        "cursor": {
          "ref": "552203f9-b81e-40fe-aed0-c7bc38f92068",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "26c2af71-4bef-41bf-af48-d2a48e64d3d4"
        },
        "item": {
          "id": "2d55a686-47b9-4209-93a4-0a94f3fa3a6d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "5a673d6b-e0c3-4142-90d2-da9f716b9ca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80a4c2ba-7b02-42d0-ae6f-e51839370478",
        "cursor": {
          "ref": "66c1b3b7-e4eb-4982-9660-7fa69718ab84",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "8fd979f9-8f1a-4b78-b6a6-55926dcf4cae"
        },
        "item": {
          "id": "80a4c2ba-7b02-42d0-ae6f-e51839370478",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c4189bfb-8d94-48ae-86f0-9981a4f3032f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e58a6f31-acf3-400a-9086-8f7511d57fbb",
        "cursor": {
          "ref": "709ea9a0-4ca2-4b95-b828-08a82e2e6047",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b16954dd-c626-4af9-bb62-f228b178081e"
        },
        "item": {
          "id": "e58a6f31-acf3-400a-9086-8f7511d57fbb",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "f13c5f94-611d-4eb9-9ccb-1da54fc92752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0613a5ae-850a-4862-a9a4-07cb8c52af6d",
        "cursor": {
          "ref": "b5c26e58-4129-4c37-8cc8-a38c9a95c96d",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "cf657dc3-436f-4c49-bf8d-6e54f2ae4fef"
        },
        "item": {
          "id": "0613a5ae-850a-4862-a9a4-07cb8c52af6d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f8554fa7-deca-445b-a2de-416b71da0592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2508e5b-5b42-4ff7-9f09-f670501dc104",
        "cursor": {
          "ref": "3460f23a-d4c9-4dff-953d-76be4e070aa0",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a6b97dae-88fd-4310-a951-97d3546658a7"
        },
        "item": {
          "id": "c2508e5b-5b42-4ff7-9f09-f670501dc104",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "fee27f46-a28a-45ab-8c86-ed0b4daae74e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70888b7d-a55e-4d83-8a0e-9e36c94bea9b",
        "cursor": {
          "ref": "512fa7e7-5892-47c1-ba3f-89e09b0dbda4",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "aa983e72-fa6e-43f5-8c3b-f67e01e8e534"
        },
        "item": {
          "id": "70888b7d-a55e-4d83-8a0e-9e36c94bea9b",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ad48436e-8929-4acb-9d08-f944730860c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f0ce912-1ba8-420a-b4fe-386a9edb0a21",
        "cursor": {
          "ref": "f099bfda-ad84-4df8-a4f3-842079f74f9c",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "1f8e8624-e30b-45c6-ace9-5df6ec4f15c9"
        },
        "item": {
          "id": "0f0ce912-1ba8-420a-b4fe-386a9edb0a21",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d8897d46-49ca-403f-8e4c-f6eba5222206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d79dac18-f747-4f14-8a72-8bffdfd5d36b",
        "cursor": {
          "ref": "3ef60736-b885-45c5-bca9-eb5260f73bd5",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "cb73b153-6b9e-4f61-83ed-8abb58be491f"
        },
        "item": {
          "id": "d79dac18-f747-4f14-8a72-8bffdfd5d36b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "3e6ad805-b761-4157-bd3d-594ef58461e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9535d71f-6b33-4e96-8a7f-1b5b390b40ad",
        "cursor": {
          "ref": "f31e2735-705c-473a-80f6-3009e916207e",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4a8e2465-3071-4fa9-a563-fe81b5db2307"
        },
        "item": {
          "id": "9535d71f-6b33-4e96-8a7f-1b5b390b40ad",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "3fd8cec7-1c20-4f15-9185-dc0d6491dfee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5243232-2f34-44c2-8604-2789af0c36de",
        "cursor": {
          "ref": "6b1d185c-b90a-438a-912d-98983ec40177",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "fb14262c-903e-49f8-ad48-bb5ff385bfbf"
        },
        "item": {
          "id": "f5243232-2f34-44c2-8604-2789af0c36de",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "3bb1c5ae-2705-4038-8570-f99841bd8ac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26734b88-49ea-43f0-aea9-e8d60f96d4f1",
        "cursor": {
          "ref": "6fdb8ce7-1a28-4a83-be41-466fc2c12cf4",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "01c9af98-f0a3-4c8e-b6b6-208ea7c813da"
        },
        "item": {
          "id": "26734b88-49ea-43f0-aea9-e8d60f96d4f1",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "c03b1fe2-075c-4c7f-9534-af380ac89e59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d285ca4a-900d-40f3-8028-97d27f6ea9ad",
        "cursor": {
          "ref": "3729000f-b7e2-44be-a755-a47b25b3b843",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "520540b0-5462-4dc1-8d1b-8e57954488b5"
        },
        "item": {
          "id": "d285ca4a-900d-40f3-8028-97d27f6ea9ad",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "7d60b1b1-d937-4d41-91e8-1272956a14c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dfc5e94-6593-41df-b6d7-b46737926508",
        "cursor": {
          "ref": "a84c844a-7c49-452d-a707-2132c144a100",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4abb0f34-f360-4d59-8527-8b0301a2b2cd"
        },
        "item": {
          "id": "3dfc5e94-6593-41df-b6d7-b46737926508",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "8bb64441-46a4-4c2e-97fe-9e09334b3c94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca0602fc-370a-466e-8052-0e151a313def",
        "cursor": {
          "ref": "193bb614-614d-453b-a58f-addada7ff5ca",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "12cacba8-2110-4b24-a872-c698487747a5"
        },
        "item": {
          "id": "ca0602fc-370a-466e-8052-0e151a313def",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "7656f564-c83a-4c7b-bdce-990204f53612",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28dcc82a-44cc-40ae-98d4-ad390850922e",
        "cursor": {
          "ref": "5d2f51b3-ddbb-4a45-b53b-acfa4c4e6b01",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "93cf036f-3538-410d-bc94-4820697b1d43"
        },
        "item": {
          "id": "28dcc82a-44cc-40ae-98d4-ad390850922e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "3725983a-cb89-4742-9535-99e9932a8d1c",
          "status": "Created",
          "code": 201,
          "responseTime": 742,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "99bf7f05-b88b-4607-8e7d-39c000c8daac",
        "cursor": {
          "ref": "998555b7-9b23-4e0b-a943-42291fb1a977",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c6ad722f-fd71-4438-8646-2d4e3eb7adb1"
        },
        "item": {
          "id": "99bf7f05-b88b-4607-8e7d-39c000c8daac",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "178ea3a2-f43a-438d-b4fe-98e001596435",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "1b171ec3-da8e-4b01-9ebe-873f427cd689",
        "cursor": {
          "ref": "d8880024-b036-4deb-ab20-4dfea40078f7",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "94e11c2e-6237-4fa3-a0c9-29bbafd21ac4"
        },
        "item": {
          "id": "1b171ec3-da8e-4b01-9ebe-873f427cd689",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "68df3088-3692-4c7d-a59f-d6e61d2bda29",
          "status": "Created",
          "code": 201,
          "responseTime": 345,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "03b51359-3ebe-4de7-ad5a-aa79ec32bb70",
        "cursor": {
          "ref": "5d50aa1d-497f-4639-84fb-2daa8e24c946",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f850ebe8-35a7-4e05-befb-3c0a397ebb04"
        },
        "item": {
          "id": "03b51359-3ebe-4de7-ad5a-aa79ec32bb70",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f50b9caf-f999-4bee-a0d2-eaccfa606dc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "258e0931-7154-444f-984a-d1bd2af969b5",
        "cursor": {
          "ref": "5aa4321c-d2a5-4078-821d-c99cb8a3c3de",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "88e43eff-05a8-44ed-a832-a285bf662cce"
        },
        "item": {
          "id": "258e0931-7154-444f-984a-d1bd2af969b5",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "519e2c7b-0b68-411f-b14e-e4556135ab1e",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "160cbc81-3913-4c97-a011-a6bc13d95350",
        "cursor": {
          "ref": "1d5daf5f-bcea-41a7-bfd7-d3b05d15907a",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "877b9766-6a8a-4f7b-9cf0-71428a168661"
        },
        "item": {
          "id": "160cbc81-3913-4c97-a011-a6bc13d95350",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ec378406-ae3e-4012-a7b5-40dbe3bd8990",
          "status": "Created",
          "code": 201,
          "responseTime": 347,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "7ee6af7e-2414-43cb-add7-8afc14868656",
        "cursor": {
          "ref": "bcf3fc7e-93ae-4063-afb7-f6d257f3b042",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b5d8a263-2d18-43ee-9e9d-1aaf0c8588bd"
        },
        "item": {
          "id": "7ee6af7e-2414-43cb-add7-8afc14868656",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "f7369724-847f-4fbf-846c-91c57227bfd1",
          "status": "Created",
          "code": 201,
          "responseTime": 321,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "b49c081c-eb56-44be-ae39-9f1b82008fee",
        "cursor": {
          "ref": "4e9edffb-30dd-4773-bbd0-0309db7272b7",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "2b8ad208-1cc2-4825-a653-1f65a8036629"
        },
        "item": {
          "id": "b49c081c-eb56-44be-ae39-9f1b82008fee",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "281a5b01-3031-4762-80df-b89490bc5081",
          "status": "Created",
          "code": 201,
          "responseTime": 333,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "9d7b7c38-0a3f-43ca-9e7e-a35dce6823e7",
        "cursor": {
          "ref": "96a09919-6303-4c7a-931e-ede2daf44226",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6c6a76b7-76a9-49d1-97cd-248023279831"
        },
        "item": {
          "id": "9d7b7c38-0a3f-43ca-9e7e-a35dce6823e7",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0ddd9587-4b2b-4fae-a1f2-992342bc65ba",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "8a5733eb-9a77-44e6-8a3c-d119c3513358",
        "cursor": {
          "ref": "fc09467f-069d-434c-9484-de5338f8e1ed",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "4db10d3c-507d-4662-adb5-9de34ec31123"
        },
        "item": {
          "id": "8a5733eb-9a77-44e6-8a3c-d119c3513358",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "fe3f7e2e-38bf-497a-a040-cd209300895a",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "035ceee7-fd86-46cb-99ff-c525743d8b55",
        "cursor": {
          "ref": "9b148d09-7aaa-4697-b92e-29650983ef95",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "07412693-1209-4236-b24f-f8c07809c225"
        },
        "item": {
          "id": "035ceee7-fd86-46cb-99ff-c525743d8b55",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "956e7ff9-24ed-4bf8-ac97-dbd4baab40c3",
          "status": "Created",
          "code": 201,
          "responseTime": 374,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "cedb2b13-3881-40c8-b41e-bf984910b87a",
        "cursor": {
          "ref": "e2c7415a-eebe-4117-84f3-9e969a7400b1",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7c730ce7-76a7-45f5-b9ff-ff64c648b11c"
        },
        "item": {
          "id": "cedb2b13-3881-40c8-b41e-bf984910b87a",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "bb9581c5-947f-43ca-a6fd-b2f457044a5a",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "03fa205a-069a-4754-abc5-64ba7b53443f",
        "cursor": {
          "ref": "b061abe2-1a00-4856-b6e5-95624c8e7b67",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9259312f-78b1-46a1-a0bc-d615b0147094"
        },
        "item": {
          "id": "03fa205a-069a-4754-abc5-64ba7b53443f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "70c4c5e5-7e4d-4c9c-b908-6d3c9cc51e10",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "b30e2e01-14b3-4dea-9ca5-4d6dbfcc2cc0",
        "cursor": {
          "ref": "dac4dfc4-b132-4ff0-b939-eaf0d4f63855",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "0994003a-087d-4aba-9bd1-5107a31418b6"
        },
        "item": {
          "id": "b30e2e01-14b3-4dea-9ca5-4d6dbfcc2cc0",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b255ec26-9a6c-4033-acc4-94584bc22786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61bf8e60-bc52-4873-a3e3-7c0d85ce5060",
        "cursor": {
          "ref": "75333e26-5d93-4122-9fbe-7a20c0068c15",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "0315174f-81e6-450a-a2cf-1014d1fe5385"
        },
        "item": {
          "id": "61bf8e60-bc52-4873-a3e3-7c0d85ce5060",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "45f1694d-fa56-4a6e-a883-50be22eceec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01320f66-0712-4ae1-b905-1c89c4dd4ee3",
        "cursor": {
          "ref": "5f8c29e8-75ab-4e0f-8ca0-b74cfede305e",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b35e043a-810e-4b7d-afdf-aff0e176d200"
        },
        "item": {
          "id": "01320f66-0712-4ae1-b905-1c89c4dd4ee3",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d8a8da99-45ab-4388-a0d7-35357ef13766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "007a4dad-d7d9-4c1d-ad73-bb10844f5f54",
        "cursor": {
          "ref": "97eb8571-6560-40e6-8b3e-06a0b5e4508c",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "d9ee9af4-34e3-499c-87b4-706654ab93f8"
        },
        "item": {
          "id": "007a4dad-d7d9-4c1d-ad73-bb10844f5f54",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "7844288b-8172-48ff-b223-55b270f2ad04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b26b103-e4bc-4320-9f7f-e966ef5074c5",
        "cursor": {
          "ref": "0212e8b8-5e39-4d39-833d-0f92e2f23938",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "cbc05041-da80-4d0d-bb81-97498222f6d4"
        },
        "item": {
          "id": "9b26b103-e4bc-4320-9f7f-e966ef5074c5",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "bbcf1408-f240-481e-9129-0372bc6aae19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa8dbdb7-4493-4226-adbb-08955220855e",
        "cursor": {
          "ref": "2197407b-6631-4e89-91de-af33f4e91573",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ced4324f-279c-4aa3-9b89-ed85ff7ac75c"
        },
        "item": {
          "id": "aa8dbdb7-4493-4226-adbb-08955220855e",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c6c457b7-d325-47b4-a3ca-c3c076cc7b95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab2792c-7cc1-4a5b-8f23-79907e80423e",
        "cursor": {
          "ref": "3c07a7ac-97e3-4607-bb6d-d04a3e0a00a8",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "84188c30-3418-4bd4-a8e0-43c53f6d8523"
        },
        "item": {
          "id": "dab2792c-7cc1-4a5b-8f23-79907e80423e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "1b684199-6379-40bf-9024-04a933a6e4a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c9e1bf9-e9cc-4036-9e64-e256a204bbd2",
        "cursor": {
          "ref": "38df4df9-61a4-4797-8c25-d2fe48dc2d30",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "edbdf480-c1ac-4789-9d01-2ebbb6a4580b"
        },
        "item": {
          "id": "4c9e1bf9-e9cc-4036-9e64-e256a204bbd2",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d03965ef-0dd7-4c87-9353-26c5b3fd1e8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a0639a9-4d66-4c16-9c2b-6209c7fa5c69",
        "cursor": {
          "ref": "592a85f8-dd64-4661-87c3-a96eb66a8fd1",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d2ef7eca-b7e0-45e8-ae02-976b2ebe914e"
        },
        "item": {
          "id": "4a0639a9-4d66-4c16-9c2b-6209c7fa5c69",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "57880504-1a31-4f9e-8bbf-3c0237b5d302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec2cfcbf-6ded-4c58-a042-3a9f292743c2",
        "cursor": {
          "ref": "db6b7237-540c-40e1-a099-ba0ffc42b7a1",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "692e87c7-f350-438c-a748-92801bf4c5df"
        },
        "item": {
          "id": "ec2cfcbf-6ded-4c58-a042-3a9f292743c2",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "9df4beac-c107-4c7e-b39d-6b2fdf8a1f04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a3edc54-d6f2-4051-943f-a14512a34599",
        "cursor": {
          "ref": "5b405e7c-151c-4e23-8b9d-1d9eba5c4e76",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "7175bc55-69c5-4009-96e5-93f4c03aee52"
        },
        "item": {
          "id": "5a3edc54-d6f2-4051-943f-a14512a34599",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "8a399cfb-8a93-4c98-873a-dc7c5e0acab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fda09201-5626-4939-a271-784854ed5d40",
        "cursor": {
          "ref": "43855697-d56c-418c-b559-1d8f8e17ee1f",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "951fe4d7-9ef3-4bc6-ae80-2d2f33b25309"
        },
        "item": {
          "id": "fda09201-5626-4939-a271-784854ed5d40",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "4f3ddffe-6856-44c7-8115-245f457ced09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6bada31-3084-41ab-98af-59e70220c6f8",
        "cursor": {
          "ref": "f0911b37-6ab1-4c9c-a964-e5a3b67c4e01",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "add0662c-e539-40cf-9f6c-2ee2c40d00af"
        },
        "item": {
          "id": "b6bada31-3084-41ab-98af-59e70220c6f8",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "3ca75199-e242-4ae9-9375-628bd43c0bba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b28f33e-6351-4ab5-845d-c65ebdf0f463",
        "cursor": {
          "ref": "ed653a4b-0c3a-4093-b488-1e5eb0a76651",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "f69344a2-07e2-40cf-a0a7-a67017a0af15"
        },
        "item": {
          "id": "4b28f33e-6351-4ab5-845d-c65ebdf0f463",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "55fbabbb-9a14-4e50-b4d3-536425377270",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "ec8a2884-9a4c-48b4-9a4c-7199cf1e2fb4",
        "cursor": {
          "ref": "d9df32a2-e93e-48d7-8241-58558d33b072",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "850e5f82-ed60-4eed-ab93-eb8603edf32a"
        },
        "item": {
          "id": "ec8a2884-9a4c-48b4-9a4c-7199cf1e2fb4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "11e7a677-b758-4b86-87ed-a69d70e6b3b1",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "11fb4895-d918-4040-998f-60ba5ab80520",
        "cursor": {
          "ref": "e7d7d46e-feaa-421e-ae4b-d066f84cf1c8",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "8c81e565-3884-44b1-9f7c-d69aee9b184e"
        },
        "item": {
          "id": "11fb4895-d918-4040-998f-60ba5ab80520",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "53416039-61ad-4796-97db-28f5fecb1b0c",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "93bb4bbc-9301-4282-a240-36627fcbee17",
        "cursor": {
          "ref": "80961963-87bd-485f-91e8-c1c466620112",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "1d964440-2b77-4714-ae00-f9f866c418a4"
        },
        "item": {
          "id": "93bb4bbc-9301-4282-a240-36627fcbee17",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "862a871b-94ac-45e1-9ba5-2ca5f825a6e0",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "36bf25d4-c596-4e0e-bc91-b35b0a57e825",
        "cursor": {
          "ref": "67accb12-3992-4988-9150-1dc9941db9f5",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "305a435a-457e-4cae-a0d0-42a356fa7853"
        },
        "item": {
          "id": "36bf25d4-c596-4e0e-bc91-b35b0a57e825",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "b6b9a1fd-b8e9-4fa2-b658-22fd66ae9471",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "1a117078-95b0-48ee-87cd-6f8a7fe1ae4a",
        "cursor": {
          "ref": "da64d8b7-acca-40f2-bc47-12a60cc64749",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "e6c0696d-7f12-4eff-8191-152f6697534a"
        },
        "item": {
          "id": "1a117078-95b0-48ee-87cd-6f8a7fe1ae4a",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "93912c7c-d29a-4873-863c-c1d16266d753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bad1a9f-fae1-4b96-af2b-da1c57e74712",
        "cursor": {
          "ref": "59c50673-e3b0-4581-aeaa-d6a0bd0c6912",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "d7bdf2ca-f9b0-444b-ae61-2da365f8ec51"
        },
        "item": {
          "id": "1bad1a9f-fae1-4b96-af2b-da1c57e74712",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "604fd7cc-f5f0-41d3-9df0-6c3e7a8abd04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c679c5-51f7-4127-b2f5-c228bcdd81c4",
        "cursor": {
          "ref": "cbaff534-c3ac-41bd-ad31-0532744065a9",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "730daa97-a765-4d16-a672-ad328796c3d2"
        },
        "item": {
          "id": "60c679c5-51f7-4127-b2f5-c228bcdd81c4",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "4d34fd62-9471-4047-adaf-883ba5f3ae3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50c39cae-d430-4ab0-b323-66af4c2317fb",
        "cursor": {
          "ref": "9f4d6e91-5035-49ce-bcc2-b66391a45cd7",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "59195148-5d4f-4a11-99b7-d54b300bc025"
        },
        "item": {
          "id": "50c39cae-d430-4ab0-b323-66af4c2317fb",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "4296e59b-35ef-482b-9e82-e593c178bc00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bf27dfd-b7a3-4097-beb4-e71ef44654dc",
        "cursor": {
          "ref": "dbe1c13f-ce63-4929-af74-80cddde2bd5f",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d4c85bec-57ca-48b2-8736-1f1000628c27"
        },
        "item": {
          "id": "0bf27dfd-b7a3-4097-beb4-e71ef44654dc",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "3e21d797-3b5b-4a07-a737-720a9f463b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86130f57-2298-44e2-bbc6-c3cd19103b58",
        "cursor": {
          "ref": "feaa816f-452f-4632-9c00-4fa9b0c8c15b",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "05aa967c-d333-4615-b719-8b9b78ca4706"
        },
        "item": {
          "id": "86130f57-2298-44e2-bbc6-c3cd19103b58",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "94574568-6d4a-4eef-b2c4-10c9580eade1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd1f2cdc-0fb0-45b3-bab5-208162179db7",
        "cursor": {
          "ref": "7d53a464-f6be-467c-8343-0b130753b70e",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "aa16ac52-3658-42f8-a283-64f35c23dc28"
        },
        "item": {
          "id": "fd1f2cdc-0fb0-45b3-bab5-208162179db7",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "2a96f4c1-05e4-4663-bee7-dfb3f4674b99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e800b3ee-5723-485e-8662-1503572978be",
        "cursor": {
          "ref": "9aca1082-865a-4686-a73f-eb368edec64a",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "a426b716-7c50-4019-a9c7-a8ba9c6aaed1"
        },
        "item": {
          "id": "e800b3ee-5723-485e-8662-1503572978be",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "4d807ad4-8582-415a-b1b4-b880144fbb45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8140a95c-ffd3-402c-803d-dc0a2daa9067",
        "cursor": {
          "ref": "d9afb89e-8d33-4d5e-9426-d7201c7664ee",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3f7c601f-6379-4dde-8685-d4ab2a18d8eb"
        },
        "item": {
          "id": "8140a95c-ffd3-402c-803d-dc0a2daa9067",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "97fd9fa8-c142-4fb1-82a9-4948875e5aa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d16291-f7fe-4526-b2d2-258df09e6edd",
        "cursor": {
          "ref": "311860da-ad3a-4b7c-b993-347bc07bacc2",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "2cf79cee-acbd-4ef4-9bd7-6ab384ad48be"
        },
        "item": {
          "id": "a9d16291-f7fe-4526-b2d2-258df09e6edd",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "84c1ee7f-5f03-4bfa-a57a-eeef71dd067f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f2941f4-398f-4710-922e-dd3d442be501",
        "cursor": {
          "ref": "ad3b8fed-00fb-47ac-90f9-52d2ba97bc11",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "47dc13e3-aacf-49f2-ab68-5f22515d5fff"
        },
        "item": {
          "id": "1f2941f4-398f-4710-922e-dd3d442be501",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "1af25597-8d41-43ee-b04b-34cc065bb654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ef37c8-db07-48cc-bced-e7d7bdc8b19e",
        "cursor": {
          "ref": "f4bfa8c2-0bdc-415d-8495-e9d741d701ff",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "44220814-119e-47d4-8554-49580db72cc2"
        },
        "item": {
          "id": "b5ef37c8-db07-48cc-bced-e7d7bdc8b19e",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "7c65af28-3391-4aff-b957-191caffc833d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae0b2d70-133d-4761-ac45-e0a7a68df98a",
        "cursor": {
          "ref": "1184ffff-e075-4601-8915-9174d0ad58ee",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "2ddb2ab8-7127-43ec-8343-844beb7df532"
        },
        "item": {
          "id": "ae0b2d70-133d-4761-ac45-e0a7a68df98a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c246f112-a144-4a8f-93b5-aa8714b8780c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13d0252d-ae94-4997-975e-21a2b5fd76b5",
        "cursor": {
          "ref": "4efc57e3-6b7d-4ccc-9e1c-8ca8d3d5f42a",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "4e33289f-2512-4204-911e-73d842354864"
        },
        "item": {
          "id": "13d0252d-ae94-4997-975e-21a2b5fd76b5",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "9d309539-b7ec-4b3e-8cd0-2c590594be04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f56c96de-21e1-41bf-b63e-9336f48b34d2",
        "cursor": {
          "ref": "485ed8b4-c804-4a33-9401-bdf47581c8a2",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e0e5d440-e08e-4f00-95e7-2f52ed69227e"
        },
        "item": {
          "id": "f56c96de-21e1-41bf-b63e-9336f48b34d2",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "7a975cc1-ad07-40eb-87d3-e029741d78fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec67e5d7-b376-4afd-8cfb-a1f712dd8dc2",
        "cursor": {
          "ref": "72e72c7a-c22f-4770-bb4d-ac64dd5b2e3f",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "7e7dd19d-4747-4e2d-821e-c4e140538c86"
        },
        "item": {
          "id": "ec67e5d7-b376-4afd-8cfb-a1f712dd8dc2",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "34550732-7355-4a63-a311-2cc8b2f3e03d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c775c65-f65c-43fd-b6d8-667e78f4b0f8",
        "cursor": {
          "ref": "b080bdd0-68f6-4def-869d-11dab3155b01",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "6a00bac0-dd75-469b-8aab-1ad4f34410b3"
        },
        "item": {
          "id": "9c775c65-f65c-43fd-b6d8-667e78f4b0f8",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "9e3c0e80-6675-4995-a91f-67f70bbea366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62b4eea1-4d4b-49c2-9100-8d982cfb7b76",
        "cursor": {
          "ref": "c3a5e37b-1651-4fac-980a-b73e69bb77c2",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "04444607-b8bf-4ede-84d3-3a03ed2fa286"
        },
        "item": {
          "id": "62b4eea1-4d4b-49c2-9100-8d982cfb7b76",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "1a5dc416-9150-4ebf-96ae-8fa388ad9446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f59810-18e7-4e75-86a0-fcf47736df63",
        "cursor": {
          "ref": "7e9f5456-8b44-4d94-af07-c3e2719562ea",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f0441a1d-67a5-4747-a3d2-2956991cd3be"
        },
        "item": {
          "id": "36f59810-18e7-4e75-86a0-fcf47736df63",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9896ecc0-ab77-4e66-b3b2-07fb9bf5fd76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f489082f-fa1b-4842-a41d-c83880b30368",
        "cursor": {
          "ref": "2fabd5f4-2e09-437b-a0ea-b97006de3a27",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "0fbbae5c-0a6c-426f-abe5-bc6fe4223ed8"
        },
        "item": {
          "id": "f489082f-fa1b-4842-a41d-c83880b30368",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "fb77ec0b-479a-442d-ba68-70aa7e263a4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70b49cf9-98c7-4d98-abba-9b21adc1cf27",
        "cursor": {
          "ref": "7cc592d7-a52b-4790-bff4-8b26413ca01f",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "5cad492b-6922-44cd-b311-812429816ac4"
        },
        "item": {
          "id": "70b49cf9-98c7-4d98-abba-9b21adc1cf27",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7223b84b-a9b0-4bfc-a4db-f28cdcfadc28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c8b906-3218-4d19-b9cf-3edf66fe518f",
        "cursor": {
          "ref": "624b04d4-7625-46cd-a7fb-57698e602a59",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "53cdd70a-749a-47d1-a45b-04f84b591ca5"
        },
        "item": {
          "id": "d5c8b906-3218-4d19-b9cf-3edf66fe518f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "92588796-e3be-44a5-94de-3a996c5c9e0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a401cdd-72e5-4b74-8ae3-b1e54ddeb048",
        "cursor": {
          "ref": "5a5da368-4ae9-4f49-ba87-b638d2c9226a",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "0ef1255f-81a8-4e2b-9ec9-0f91e80d7b64"
        },
        "item": {
          "id": "6a401cdd-72e5-4b74-8ae3-b1e54ddeb048",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b985d884-148e-4525-866c-789d6e26edec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "566d7a81-794f-43c4-b552-dadfef0cda44",
        "cursor": {
          "ref": "42aaa2fe-a2a0-4c5d-9a85-8c2d40a36424",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "58cbf4b8-9d37-4e0f-9398-1acc83a83b3a"
        },
        "item": {
          "id": "566d7a81-794f-43c4-b552-dadfef0cda44",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "cc5b44b7-aa24-4aff-9c20-556fbecb68a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce143ebb-01b4-4e37-81a7-f76aed06f6ca",
        "cursor": {
          "ref": "ec1cc66e-467b-4d01-ac11-5fed4a263397",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "b4670e4f-b936-457b-b549-fe851bd7af46"
        },
        "item": {
          "id": "ce143ebb-01b4-4e37-81a7-f76aed06f6ca",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "2c897f07-e35f-47c2-a26c-9f3ee2ba9ab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "250b236f-6995-4604-9adf-d3bb652a57be",
        "cursor": {
          "ref": "6a12cf6a-a207-49a5-afe5-ddcf5d5cc6cb",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "665b9875-a866-4297-b204-d72ec99348be"
        },
        "item": {
          "id": "250b236f-6995-4604-9adf-d3bb652a57be",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "61d59ef7-6d15-464b-b908-5db1eb1ebe14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db0bad67-fb98-4862-bd75-3bc74822c62c",
        "cursor": {
          "ref": "cb175e4d-6a7b-4301-90d9-5abcfd471718",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "45414fd8-4cba-4914-896a-91990be9fb82"
        },
        "item": {
          "id": "db0bad67-fb98-4862-bd75-3bc74822c62c",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "583303a3-26aa-41f2-a52b-ee4c2ac95525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6471b2b8-79b7-4d80-be12-af40edd6f7d9",
        "cursor": {
          "ref": "bda848af-c0a6-4e4f-845a-ddbf1ffac227",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "87427d67-2e04-44d9-aaa2-7648a9c3ea3f"
        },
        "item": {
          "id": "6471b2b8-79b7-4d80-be12-af40edd6f7d9",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "65c1d0eb-e8a6-465d-89d3-48d78abc7015",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d3ed5f5-65e0-4e94-9fe8-fe312aa581b2",
        "cursor": {
          "ref": "b117fd86-38f9-4d31-99ad-68273e97a86e",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "7367c5ce-8a31-478d-83d2-b372c5da0221"
        },
        "item": {
          "id": "7d3ed5f5-65e0-4e94-9fe8-fe312aa581b2",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "451da115-b108-4604-833a-06fa36be40f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed0ffd88-d58a-4487-9c08-eaf5e5f5cc9f",
        "cursor": {
          "ref": "afe52f82-34e0-4301-9fa0-244d1e6fe434",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "cdcdc37d-41c7-4553-822d-03074ea22c87"
        },
        "item": {
          "id": "ed0ffd88-d58a-4487-9c08-eaf5e5f5cc9f",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "4e6138cd-bac4-423f-8a2e-af620e44b04c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "615647a0-d3f5-43a4-a1bd-ae65a356b0c2",
        "cursor": {
          "ref": "ec619567-2673-442c-b808-cff1a35e87c5",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "589a83c4-2a18-43d2-a701-38c31d0f21bf"
        },
        "item": {
          "id": "615647a0-d3f5-43a4-a1bd-ae65a356b0c2",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "9d2cf01c-0f92-4a99-85b9-3ec90385efb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39a34c99-bf06-4984-ae29-6702525da707",
        "cursor": {
          "ref": "f2663e94-693a-40b3-be50-8417ebaf552f",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "4bcd5670-1150-4dc7-8d05-8e0696454a01"
        },
        "item": {
          "id": "39a34c99-bf06-4984-ae29-6702525da707",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "b9c884e1-e5fa-4369-aabf-ddfb6f9e1b2d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84983956-d4b9-48f4-ba32-907151059a4f",
        "cursor": {
          "ref": "01f8ad9f-3169-4602-a8ae-1d6a0de26045",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "0ac580e0-7854-4714-8290-d3c43323f575"
        },
        "item": {
          "id": "84983956-d4b9-48f4-ba32-907151059a4f",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "4899eb92-4863-446c-8bdf-68fcddf75f6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "737ba855-a498-4037-bff7-051dbf05a3f8",
        "cursor": {
          "ref": "a3b372cc-179a-4382-a3e0-d604b332755f",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "3ed93b81-8513-48b6-8a64-ada4564f66d8"
        },
        "item": {
          "id": "737ba855-a498-4037-bff7-051dbf05a3f8",
          "name": "credentials_issue"
        },
        "response": {
          "id": "032ab331-8ca7-41b1-9354-da2ba05e2633",
          "status": "Created",
          "code": 201,
          "responseTime": 335,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a186aed-4b3d-4284-84a5-2def4eec3375",
        "cursor": {
          "ref": "8cca2c16-43f2-413e-9c71-3ac2ae24ab4f",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "8a426134-54b8-4cb5-af6c-0a57f73902d1"
        },
        "item": {
          "id": "6a186aed-4b3d-4284-84a5-2def4eec3375",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "53b8091a-f48b-4901-92fa-21f748ded01b",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "85df1eb3-efd7-4892-855b-cad00de84782",
        "cursor": {
          "ref": "7d979185-d08c-4c51-9a5b-2cd500824e6c",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "3f01a78c-3474-4203-b47d-6c6f53cd3444"
        },
        "item": {
          "id": "85df1eb3-efd7-4892-855b-cad00de84782",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ab77d3fd-31db-4b61-a67a-1ea557678d62",
          "status": "Created",
          "code": 201,
          "responseTime": 348,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5267faa1-403a-4c38-95f1-6f5019e33d61",
        "cursor": {
          "ref": "06c0150c-a035-4404-a46c-2d67911406c7",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "8cf4ded6-2379-4441-a984-6f24c7d9f720"
        },
        "item": {
          "id": "5267faa1-403a-4c38-95f1-6f5019e33d61",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "cec17e15-89a5-4cc2-b70a-0ebe191c965e",
          "status": "Created",
          "code": 201,
          "responseTime": 387,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "96b07363-f790-4767-92a7-65b96fc51c5d",
        "cursor": {
          "ref": "0f7b3c71-8855-4ba4-9271-927434c97fae",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "2d6b8604-c222-4eaa-9352-929f76ab5ec6"
        },
        "item": {
          "id": "96b07363-f790-4767-92a7-65b96fc51c5d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "386bf359-04f2-4870-a60b-081aa666633a",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-16T00:36:36.416Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-16T00:36:36.416Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "d4ccc3d3-2b75-4113-a0c1-64d267045c6d",
        "cursor": {
          "ref": "fac18643-c759-4acf-bd9c-1f9a630f8c1a",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "bd675960-eb1b-4813-a1e3-7ffa44929523"
        },
        "item": {
          "id": "d4ccc3d3-2b75-4113-a0c1-64d267045c6d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "90c2af0f-9f94-4e37-a4ec-b84282cbd04f",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b5381aa-d4f0-4335-8b56-8641806d2355",
        "cursor": {
          "ref": "f36c7efc-3277-4613-b855-b3e5391cdf78",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a59bd7ad-70f8-4772-a7a6-6a55c3eac8ec"
        },
        "item": {
          "id": "1b5381aa-d4f0-4335-8b56-8641806d2355",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c4895d7b-681b-433b-bd44-d6201fa86892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c396a48-6a41-4949-beba-3c8c0137bb4f",
        "cursor": {
          "ref": "89fd02a9-8b1f-49e5-8670-87c68688739e",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ad7eb9bb-30b4-4236-b262-dc8eeed52c0e"
        },
        "item": {
          "id": "1c396a48-6a41-4949-beba-3c8c0137bb4f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7df00675-2370-4f1f-a81c-b70a92a2419d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "753090c8-c237-4cb2-9052-88a5c2ed4399",
        "cursor": {
          "ref": "88bb4462-af0d-442d-97fe-08de9aa52562",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e2345d98-8275-46d8-a52e-b8697435a81b"
        },
        "item": {
          "id": "753090c8-c237-4cb2-9052-88a5c2ed4399",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9ee093d0-3644-499b-8085-8303de35080a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9805b926-1faf-4b92-8504-5ab71d8fe9b1",
        "cursor": {
          "ref": "7fc832ea-a50c-42dd-ac99-a2a179768335",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "42a51266-6d03-4c43-927f-10197487a910"
        },
        "item": {
          "id": "9805b926-1faf-4b92-8504-5ab71d8fe9b1",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1bcdab01-41a7-418c-bce8-3d867bc62c87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a04dd57e-ae83-4fab-b370-8e50c54e51d3",
        "cursor": {
          "ref": "68ae95cb-2c27-4120-8f32-3b78902cb4b7",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "8d3ba287-62b0-4122-b121-18627d7f59c6"
        },
        "item": {
          "id": "a04dd57e-ae83-4fab-b370-8e50c54e51d3",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ffe6299d-c852-4cfa-a93d-1d46abccd2fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48626d54-4440-44c7-bcbb-0f2c86f25bdd",
        "cursor": {
          "ref": "4d6aa3ab-72bb-48ed-b107-3d489399ce4b",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "60f4a545-6d03-4129-84f6-33b65eb53dc7"
        },
        "item": {
          "id": "48626d54-4440-44c7-bcbb-0f2c86f25bdd",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6a66779e-db53-4270-bbec-98b3f052eba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "124b78c8-3c9a-4791-99cc-57d95efc15e8",
        "cursor": {
          "ref": "93151779-7026-4fce-8ce5-dff73a8cb36a",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "dbb34776-98a0-4e73-819f-c1b18fb34728"
        },
        "item": {
          "id": "124b78c8-3c9a-4791-99cc-57d95efc15e8",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b6702423-dca8-4d5c-963a-ab5d42dbed56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d28be27-900b-408b-a54f-cdfb7f8466f5",
        "cursor": {
          "ref": "5cbc9208-0d00-4a70-9e62-ae6ed446f90c",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "9a883433-de6f-4810-8ffc-5ad0025cf83f"
        },
        "item": {
          "id": "9d28be27-900b-408b-a54f-cdfb7f8466f5",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9cb7f3a0-0856-4716-a7ac-ba3b4981d58b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "794bea78-8a08-4083-9894-f292224beff7",
        "cursor": {
          "ref": "caad8dc3-736d-4956-ae93-13acf66273f0",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "93c50e4f-426d-4b63-beeb-3e7ffbd965dc"
        },
        "item": {
          "id": "794bea78-8a08-4083-9894-f292224beff7",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a85caa72-670b-4e38-8cbe-f77c9121cf41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "503964e8-9a32-47c0-a5d5-86eea048a89e",
        "cursor": {
          "ref": "f1873d88-610f-4b86-829d-8588855a5921",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "0a486a6d-253e-45a6-b993-8ea4fad00bcf"
        },
        "item": {
          "id": "503964e8-9a32-47c0-a5d5-86eea048a89e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5a689123-883e-4e9a-b66a-99a03f6944c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b02e1b7-32cc-431c-a4e4-60ef39e15a2f",
        "cursor": {
          "ref": "2cf4aaf8-2fe6-4558-9c9a-586e3f771ac8",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "55cd119d-cf87-4b22-9336-39e0c5916e0f"
        },
        "item": {
          "id": "8b02e1b7-32cc-431c-a4e4-60ef39e15a2f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "02677f51-1430-4f1e-a5d5-9610ee8c8bb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8a551a3-1000-4eee-8bd1-ac74a3606909",
        "cursor": {
          "ref": "b9a3db5c-cd00-4bf2-9778-63d0a1fef912",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a5bbf1bd-5f76-495b-925c-dd6bf6307246"
        },
        "item": {
          "id": "a8a551a3-1000-4eee-8bd1-ac74a3606909",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "9766e57d-5801-44f9-b12a-b271dba0e6cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c8fb561-d4ec-4464-92b8-99e5dfa1a19b",
        "cursor": {
          "ref": "22e24e12-a1e2-4ed0-b180-bbff96778b37",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f187a449-a74e-4b3a-a159-e2b506a150a3"
        },
        "item": {
          "id": "2c8fb561-d4ec-4464-92b8-99e5dfa1a19b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a1065cc2-83b0-4b57-af0e-3cee97373fea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf009af-8bc6-424a-b0d9-fef85245975d",
        "cursor": {
          "ref": "f1791d52-875d-441e-b04b-5942d4e1dfb0",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "7ef26966-37a4-45a8-8493-1867dd2226b1"
        },
        "item": {
          "id": "cdf009af-8bc6-424a-b0d9-fef85245975d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "01304eec-806e-4491-b9ff-c7309ebbb8fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 106,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "21067db5-4a5a-4339-8623-afa27349cfb8",
        "cursor": {
          "ref": "9b6f733c-777e-448b-9fd7-9438362d9757",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "4f86944f-daad-4611-a8cc-d0c36e91c4a4"
        },
        "item": {
          "id": "21067db5-4a5a-4339-8623-afa27349cfb8",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "df65dcea-ad2b-4647-b6e6-830bef57a43b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "162dc5ff-2149-4535-b413-2409ad860f7b",
        "cursor": {
          "ref": "b5537d72-9558-4412-bf80-eae0011d8441",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f63bd4af-a5f6-4653-8760-736cd0bd8d53"
        },
        "item": {
          "id": "162dc5ff-2149-4535-b413-2409ad860f7b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "704b99db-01a4-4bc8-9844-5c27e16ce923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43a49fb7-8d82-4c56-8940-736fca6ba5ee",
        "cursor": {
          "ref": "f3082b9b-3868-4a13-af00-195bb1d95330",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "8bc3e074-25f2-4339-8675-6ea815ae19e5"
        },
        "item": {
          "id": "43a49fb7-8d82-4c56-8940-736fca6ba5ee",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ce1ed05e-d5ed-4949-8eed-e3a93cbc051b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaa32148-ee45-4675-83c5-458ff616f82a",
        "cursor": {
          "ref": "4982b232-f6d5-4583-906b-d651896fe0b4",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "193847a9-b4e6-4e6c-a30e-10a6bb02a7e1"
        },
        "item": {
          "id": "eaa32148-ee45-4675-83c5-458ff616f82a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f42eeeb4-c7c6-4e73-bff8-c038eea52c5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f31965de-e76b-4b78-8a22-ab0308cb4f33",
        "cursor": {
          "ref": "2adc021c-d0f8-452b-943c-be7ab73b9074",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "8781d839-1c29-4961-9e66-215bee2b87d7"
        },
        "item": {
          "id": "f31965de-e76b-4b78-8a22-ab0308cb4f33",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "55174894-eb94-40b9-bb98-0adf63756c0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfb3133a-bea7-4a5f-98d6-231785beb69c",
        "cursor": {
          "ref": "653473b6-1ee6-4c76-a90e-34ce1b9d58f6",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d3760bd4-054c-4d7a-93eb-4362e2b275bb"
        },
        "item": {
          "id": "cfb3133a-bea7-4a5f-98d6-231785beb69c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "05659f84-f693-4113-894f-459e4c63c08c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd7902f-2d05-45db-ac92-e7b7c309e545",
        "cursor": {
          "ref": "e88a4f79-ca08-423d-bb08-bc60c5f42640",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8e58bec8-5e97-470a-9a6e-b116d7c99db0"
        },
        "item": {
          "id": "6fd7902f-2d05-45db-ac92-e7b7c309e545",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b1c95641-a003-4f07-a657-0a15f6b76fd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62c106d2-a40a-46b2-a164-435ca74f732d",
        "cursor": {
          "ref": "599682e9-3f5a-4fbc-9a5a-7b6a5334e50f",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "62c2c0f4-1d82-4734-9eb5-09607690a302"
        },
        "item": {
          "id": "62c106d2-a40a-46b2-a164-435ca74f732d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "64c4b4f9-ed95-440b-b35b-a35eb8938572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42a5130b-5184-4e2b-852d-627e64ecb009",
        "cursor": {
          "ref": "9f500f3a-325a-4cb3-9b65-49382d13ee30",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "9e1417d0-7d82-4835-8946-fbba936f5f99"
        },
        "item": {
          "id": "42a5130b-5184-4e2b-852d-627e64ecb009",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a83cfab1-d05c-46bf-814c-132f810c7593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac953a7-215a-4d88-8d4d-82959baa38e8",
        "cursor": {
          "ref": "9c033878-c932-461f-ae74-4e1d16fe4488",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "9779f5f0-175b-4ad7-90ad-82c808e38b8d"
        },
        "item": {
          "id": "5ac953a7-215a-4d88-8d4d-82959baa38e8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4798a510-aff1-4b2f-86fd-815362974af1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa02d2fc-7cd6-42db-8987-909cb633a913",
        "cursor": {
          "ref": "b3fc9e26-b91d-427d-8c80-b70bf6d310bf",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "53c4a0b5-6178-4a03-8421-bff3340689d9"
        },
        "item": {
          "id": "fa02d2fc-7cd6-42db-8987-909cb633a913",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "6a3250e5-cc54-44bf-ae3e-1e249ac4e129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eab14012-19b5-45c4-bacf-62bd0ce093b5",
        "cursor": {
          "ref": "9b890fac-ee2c-46ad-b7bd-0eee62232458",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "d6de5030-682a-468c-8fbd-b8c22aa59f83"
        },
        "item": {
          "id": "eab14012-19b5-45c4-bacf-62bd0ce093b5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "46a8821f-3f4c-458e-bef8-78397dbfb62f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00d2ca18-eb7b-4fa3-bc4a-05eb5bf04858",
        "cursor": {
          "ref": "66877838-a82d-4c4d-8630-c96875f903cd",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b9984870-550d-4bfc-9d73-e3c5aef0053a"
        },
        "item": {
          "id": "00d2ca18-eb7b-4fa3-bc4a-05eb5bf04858",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e9a65937-1e13-47af-bf2e-2753221e4034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3988ef3-3240-4bfb-9128-3be439b251cb",
        "cursor": {
          "ref": "d1ad696a-8a92-4c68-b9e0-9599d47e4e66",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "1e8997b8-f1be-4d12-a781-de28a3341732"
        },
        "item": {
          "id": "c3988ef3-3240-4bfb-9128-3be439b251cb",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "bdd8d73f-dd14-4e6e-ac4c-a6506078fbe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26b70497-9d72-4fdc-ba6d-e2324ffcff2e",
        "cursor": {
          "ref": "efd26ef9-0535-41a2-8797-986540a1ce21",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "73fa76ba-ebc3-414c-9a8b-ca1174dc1379"
        },
        "item": {
          "id": "26b70497-9d72-4fdc-ba6d-e2324ffcff2e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a0e59a0e-1c51-46dd-ab10-f76d9f6cc1a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "702003da-a9e4-4d71-ab7f-5510990d2f88",
        "cursor": {
          "ref": "d4cdd334-c090-412a-9c97-470ac4304f52",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "a4264175-ca5c-4ca6-b91d-5445012ce2b5"
        },
        "item": {
          "id": "702003da-a9e4-4d71-ab7f-5510990d2f88",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d4bea0c8-7bed-4515-b17e-406d3dfde654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d9f9eb0-d9e9-466b-9c53-beffa3ed5d41",
        "cursor": {
          "ref": "809e6c13-c252-438f-a5da-37182c3b9b14",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b6ccb04d-7a8e-4ba9-83ce-b013a9a30613"
        },
        "item": {
          "id": "4d9f9eb0-d9e9-466b-9c53-beffa3ed5d41",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c9a3e13f-8fd9-4ea2-97b2-533e379587e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9903af7a-f713-462b-a8f2-2d8086f76c8c",
        "cursor": {
          "ref": "48c6ba63-b1e8-4fe4-8e90-945d94a177b4",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "e83c75d1-021b-4fce-b9aa-01d845c935a0"
        },
        "item": {
          "id": "9903af7a-f713-462b-a8f2-2d8086f76c8c",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "408f6ee4-8f32-480a-95ec-1ac9e3deb094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32a96a87-3d44-4aea-a662-836f7ac27f99",
        "cursor": {
          "ref": "ee44cba9-7a21-443f-bc41-0707fc6a5594",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "35596afa-d848-4451-80b1-1e49d2cf4d60"
        },
        "item": {
          "id": "32a96a87-3d44-4aea-a662-836f7ac27f99",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "b236441c-4259-462c-81eb-e57c9cef9659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44c9ec25-df02-4961-806a-70fee4f52bd8",
        "cursor": {
          "ref": "89eaf28a-f237-4011-bb41-6882999e5591",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "05f9eb79-1c30-4f71-8d52-e7960b1fe3a7"
        },
        "item": {
          "id": "44c9ec25-df02-4961-806a-70fee4f52bd8",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "b20395ba-ae33-4ad3-8ea7-d225ed5138f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5386c177-d327-4b26-89f8-3a67be0ad32a",
        "cursor": {
          "ref": "7e3df77d-be98-45f1-b1d4-156fe005fb4a",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "077d963d-544b-47a9-bf0d-f2d2e42edd11"
        },
        "item": {
          "id": "5386c177-d327-4b26-89f8-3a67be0ad32a",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "b333b4e0-c08c-400d-8a46-8849f55d173d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa6da498-edde-4dcb-9715-fc1e187bc73a",
        "cursor": {
          "ref": "be1ebf77-0e9b-4adf-a6a4-44da8dd70c47",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "81786804-44e9-4043-b8df-b48643ef2279"
        },
        "item": {
          "id": "aa6da498-edde-4dcb-9715-fc1e187bc73a",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "56a76c24-77d8-47da-b8d2-db4ea8c8aafb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3e9a01-74f7-4d69-b273-4f5c89cb1fea",
        "cursor": {
          "ref": "a6b8fb43-2267-42c1-85db-23d73a1ffbc6",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "49cbb83d-ee0f-4757-87e3-768173066b56"
        },
        "item": {
          "id": "ff3e9a01-74f7-4d69-b273-4f5c89cb1fea",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "79ba8ffb-2ed5-4ff2-9349-b7b1db1dddae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7029aa0e-8519-4ef4-a81d-157934e48e17",
        "cursor": {
          "ref": "b1f1f6ab-578b-49c5-b5a8-42ebc3f7b08b",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8f6f47ce-1db2-4c6b-a4e4-6e3dd7f96fba"
        },
        "item": {
          "id": "7029aa0e-8519-4ef4-a81d-157934e48e17",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1ed8f35a-aac7-45f0-b7d1-a29829167148",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca657bc-27b6-4093-9e3a-55b6ece76016",
        "cursor": {
          "ref": "1c20977d-bdb6-4d6e-9745-43a1e5734b59",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "16890f08-a267-4695-b6cb-4c96b26bf380"
        },
        "item": {
          "id": "eca657bc-27b6-4093-9e3a-55b6ece76016",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d0e83ac6-7df5-4c72-b579-f743a71ac512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2670ebf9-971d-4669-af62-74481668ea00",
        "cursor": {
          "ref": "b1861cd1-f803-472e-889e-6b20fcab44d6",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "35e18654-c0e7-4b1f-a256-a52464c44db0"
        },
        "item": {
          "id": "2670ebf9-971d-4669-af62-74481668ea00",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ee876f54-22c9-46d8-b6da-31a1f20d2ba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dead47c-d6cd-4ce6-a5fa-bd602cc82d7a",
        "cursor": {
          "ref": "c1ecf270-506a-4bf9-8143-f10ef364c31c",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a7af9d6f-7e32-4cdb-9061-c2fb69ee8686"
        },
        "item": {
          "id": "9dead47c-d6cd-4ce6-a5fa-bd602cc82d7a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8f95a4f3-3966-4a53-ae81-c4140cf18922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0846dbd2-11a8-4adc-9e0f-c7a24e709a1e",
        "cursor": {
          "ref": "f019c61b-bfd4-42c4-8d86-9c96fc0104eb",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "1c5fe39f-3c31-4c53-982d-314b3ae47676"
        },
        "item": {
          "id": "0846dbd2-11a8-4adc-9e0f-c7a24e709a1e",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ba5f22bc-37b6-450c-98e5-237009dd3ce0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "749b3fe1-d500-4578-b9a7-b70ee3e01481",
        "cursor": {
          "ref": "4c668030-3151-42bf-9bfe-f6b110fc1904",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "e5e72123-8141-4802-b165-d9d3e8300791"
        },
        "item": {
          "id": "749b3fe1-d500-4578-b9a7-b70ee3e01481",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "4b92f94c-81ba-43d3-a93f-ada38f679b08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "356f052c-2a86-4b1f-b94d-e68d742a3d41",
        "cursor": {
          "ref": "3eb2a0d6-1ebe-4a7e-886d-5db520bf4eac",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "c0098e9e-fb02-4414-85ab-2137ef970797"
        },
        "item": {
          "id": "356f052c-2a86-4b1f-b94d-e68d742a3d41",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e902fad0-8944-4991-8452-00a5c3c5d57d",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "b4a68d78-6be0-4f6d-a395-ef6cf1f83790",
        "cursor": {
          "ref": "129e8b49-205b-483e-9c54-4b19e2f028fa",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "f1316fe7-ce7a-46fa-a652-b5782cd2ac2b"
        },
        "item": {
          "id": "b4a68d78-6be0-4f6d-a395-ef6cf1f83790",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "9594cce2-181f-4f07-a73a-0624b5a02b12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "943f9510-4f97-4d3e-8a4f-5f6084bcc8bb",
        "cursor": {
          "ref": "1595015b-96d1-4594-882a-98c8238f7207",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "3aeb7498-1aee-4cfe-8c6a-dc0eeeef41f7"
        },
        "item": {
          "id": "943f9510-4f97-4d3e-8a4f-5f6084bcc8bb",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a050e26f-295e-42c3-84d0-b107a16b9f4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f75a6c-6693-45df-9bae-c2228a22dc1e",
        "cursor": {
          "ref": "04b74035-bbcd-4156-86bf-0c10458ca9d4",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "80559d6d-b5ee-45d0-923d-a9081a9694bb"
        },
        "item": {
          "id": "73f75a6c-6693-45df-9bae-c2228a22dc1e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "04a6599b-9b49-4337-b64c-404c4827482d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "503d58ef-3fed-4784-8110-0e0592ec59e6",
        "cursor": {
          "ref": "303366cb-84fb-4c8d-8b98-8f6c03275234",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "9028c473-b2eb-4911-b791-36026511363f"
        },
        "item": {
          "id": "503d58ef-3fed-4784-8110-0e0592ec59e6",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "5ecfb4b4-166e-445a-8a5d-1635df3c229e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e9629c-4923-4fd2-bcb9-16db5b7a2b72",
        "cursor": {
          "ref": "4b5d598f-0a76-4e87-bf9a-0f6a7996a4f3",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "3147c5e1-b519-42b7-a08f-71c1f58d6b46"
        },
        "item": {
          "id": "b1e9629c-4923-4fd2-bcb9-16db5b7a2b72",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "aaa918ad-58be-4781-b9eb-ee2e3839b151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a978f30a-846f-4967-87f0-e6e811136382",
        "cursor": {
          "ref": "f43b42b2-6f6e-4fcd-a545-9ffd3ca39b3d",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "21f1a025-90b5-4c30-ba60-53f8bcdb1bc7"
        },
        "item": {
          "id": "a978f30a-846f-4967-87f0-e6e811136382",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "626cd447-96d2-48c3-a0cc-177c167e2471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3a5d5a3-df44-442c-b6a5-a7a323a41fc7",
        "cursor": {
          "ref": "f11b9eda-e4fa-4e11-8b35-cc2ab678d4d1",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "52e403f3-f073-422b-a735-eef0a0e425d1"
        },
        "item": {
          "id": "e3a5d5a3-df44-442c-b6a5-a7a323a41fc7",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "868b0527-2541-4814-8dc7-b3662aaffb3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "543b696d-8094-4566-b2cb-4ad59c9cbfa5",
        "cursor": {
          "ref": "8bc89a38-bff5-44bc-b2ee-98015a96d834",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f32dfea0-cefe-4db6-a64e-91af255c1e5b"
        },
        "item": {
          "id": "543b696d-8094-4566-b2cb-4ad59c9cbfa5",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "cf0aeb0c-d72f-436f-ae77-0e14b7f6a5e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb64144-9fcc-497e-9ec5-a5b6050d516a",
        "cursor": {
          "ref": "944b5444-c276-479a-a9fa-84acaf7a4c95",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "366905a5-890c-4362-a0d1-e2847566406e"
        },
        "item": {
          "id": "7eb64144-9fcc-497e-9ec5-a5b6050d516a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c18a9aba-ade6-4241-9bed-a4a2dea270a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a917a21a-e6b2-4d85-b0d9-22040586c41e",
        "cursor": {
          "ref": "a4a9e2af-b32c-46f0-b451-0495d43ed8cc",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "813486d8-8ac4-41c5-8123-a3936b4b8944"
        },
        "item": {
          "id": "a917a21a-e6b2-4d85-b0d9-22040586c41e",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "9d94dc8b-59c9-48d1-8276-d32a018feea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ca10827-5e32-433c-9e8d-452cc1b8eaa1",
        "cursor": {
          "ref": "2eb1e0ee-0472-4de4-8f18-60477d0acae7",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "c5c874d4-d168-43a6-8b4d-c0979fe3234a"
        },
        "item": {
          "id": "4ca10827-5e32-433c-9e8d-452cc1b8eaa1",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "5e0262fb-d95e-4c3d-8968-c5d952ed1d6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a083b09c-31a4-4029-b51f-6a771a75497b",
        "cursor": {
          "ref": "54ad0a8e-cac0-43fd-b8f7-7c111c4ce749",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "3b40e195-02ad-4d97-b22b-48a869b3f7c4"
        },
        "item": {
          "id": "a083b09c-31a4-4029-b51f-6a771a75497b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "80696aad-fa92-4d81-94cc-2e85944735dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae514849-6bf2-4e44-8cc6-0c37296a7d07",
        "cursor": {
          "ref": "86578dbc-448d-42c9-8f0f-07d823dd6a32",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "cc4639be-f4c5-4d5e-b87c-68c476f730b2"
        },
        "item": {
          "id": "ae514849-6bf2-4e44-8cc6-0c37296a7d07",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ac261776-914f-4dd2-9827-3e535bdec806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c18a0f50-9a32-468d-bd01-891d19b9442f",
        "cursor": {
          "ref": "913df84d-2e95-469a-a902-c6debe70485e",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c5f5d90c-0809-4ed2-b490-ed5bcaa5493f"
        },
        "item": {
          "id": "c18a0f50-9a32-468d-bd01-891d19b9442f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "510ef8e8-9004-4610-997d-b187b56af173",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab3d4de5-36d3-4a6e-9574-b263672efc54",
        "cursor": {
          "ref": "590f6504-864a-4319-b11e-fdbdc62d4278",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7dd5a286-4bf4-413a-a9b2-5fb56e118a51"
        },
        "item": {
          "id": "ab3d4de5-36d3-4a6e-9574-b263672efc54",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4ca2f59b-e124-4471-b68f-d8dcd388c551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09530056-95f3-47fe-aa0e-68b533ae70bb",
        "cursor": {
          "ref": "738fdee0-1341-47cf-b368-eb75c282bec8",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "2352e55a-9eef-4d87-baa1-eb1e65b943a7"
        },
        "item": {
          "id": "09530056-95f3-47fe-aa0e-68b533ae70bb",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "67932a88-ea8f-49fa-9772-1455cc123be3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41d9726d-18e1-4999-a6aa-3012b895705e",
        "cursor": {
          "ref": "66983431-0d71-49d9-8c29-11ec6f6e3b90",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f61a32fc-435b-4b16-84af-c852dbce0e21"
        },
        "item": {
          "id": "41d9726d-18e1-4999-a6aa-3012b895705e",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "20ac5673-c3f2-4bab-ac9d-bd5dfb6de2b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "944eace7-dfa2-4a93-a4bd-99e025909827",
        "cursor": {
          "ref": "2c504266-8a01-4c83-b48b-8bda3650d190",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "b389a300-9d00-4cbe-9414-787de33c2131"
        },
        "item": {
          "id": "944eace7-dfa2-4a93-a4bd-99e025909827",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4eecb686-533a-42cd-9f32-f520c07859ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a65c760a-40e2-4f50-8ba7-2ecb70629e64",
        "cursor": {
          "ref": "1373150d-3e84-4230-9214-def1b662d699",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e54af659-5dfb-49f8-be1e-a635b2bd2914"
        },
        "item": {
          "id": "a65c760a-40e2-4f50-8ba7-2ecb70629e64",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "55409d8d-a4e0-4696-b69e-fd7e44aeadd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a62975c4-1728-4067-b4f9-59e841309014",
        "cursor": {
          "ref": "ca647598-b834-4773-9e24-38d603add0ee",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "50514847-73a2-481e-9a51-2543fe12abb5"
        },
        "item": {
          "id": "a62975c4-1728-4067-b4f9-59e841309014",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "52096c44-c09e-421c-bc43-2fbdc0b5af49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59773680-3514-4aa2-afff-c55a233038bf",
        "cursor": {
          "ref": "d322b68f-007f-44e8-aabd-54d24484af22",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "3cbb77d7-a57e-42ba-ac81-de59cc102b93"
        },
        "item": {
          "id": "59773680-3514-4aa2-afff-c55a233038bf",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "dc6683a2-2f11-4574-a185-9a3a9648d650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e61e080-2520-4b87-b86d-1682e16bfe2b",
        "cursor": {
          "ref": "8d4a1986-0b23-4005-80f9-90719bd88e0f",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3e5bfec7-8312-43b8-a850-a7b7cbfe6006"
        },
        "item": {
          "id": "5e61e080-2520-4b87-b86d-1682e16bfe2b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "61559a36-9387-44e9-bbf2-403d79bef5ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a98eeaac-24b1-46fe-9b8f-9f600cb7e572",
        "cursor": {
          "ref": "5db90832-7445-4695-acd0-80274af2a35a",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "4523f051-a6b2-4dd0-a1c1-4fa01071301e"
        },
        "item": {
          "id": "a98eeaac-24b1-46fe-9b8f-9f600cb7e572",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "bdff8616-5f04-4d54-9616-649ed111d792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "227c3c49-acb5-4f11-97a5-b7460c09eb87",
        "cursor": {
          "ref": "df283fc9-e22d-40e0-9928-a281426d87a3",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c02fe98b-c96c-4648-8840-ae27f9f6a3a9"
        },
        "item": {
          "id": "227c3c49-acb5-4f11-97a5-b7460c09eb87",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b4b2ae0c-fdd0-4410-a1f9-19cd3554b2cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832cab80-1268-4686-b436-d3eccff6abe0",
        "cursor": {
          "ref": "486c5e48-e85e-49dd-be38-6550d4322aee",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "eaa17b46-b8a6-428a-9562-fd7daabb3714"
        },
        "item": {
          "id": "832cab80-1268-4686-b436-d3eccff6abe0",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d1b14a2e-08c0-4ec4-9d23-ba6a4572540d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0508657-9d93-40b1-ada5-0e8088d4e81f",
        "cursor": {
          "ref": "14349658-64e5-4c7f-a585-0605bbda1cf2",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "909f1979-d7fe-4aff-b05e-9e02ca745ccd"
        },
        "item": {
          "id": "c0508657-9d93-40b1-ada5-0e8088d4e81f",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "61e4a5e6-4cfa-40fb-946f-556586e1d85f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8969f69b-dc24-4735-b74f-420818a5d4a5",
        "cursor": {
          "ref": "bd37a992-02ad-4446-8d2f-2aca0ebbd5a1",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "c4be212e-c7ff-4b32-a4a6-3c42895eabd2"
        },
        "item": {
          "id": "8969f69b-dc24-4735-b74f-420818a5d4a5",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "91557bc4-19e4-4a41-85c8-f57e2a4826d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d1e583-a7f0-424b-91ff-ca4d3d059421",
        "cursor": {
          "ref": "babb8ee2-a0f7-4717-ba85-2932cc3aa5f1",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "20602c62-51b6-4d09-a8bf-86905d91e822"
        },
        "item": {
          "id": "a9d1e583-a7f0-424b-91ff-ca4d3d059421",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "75229f70-2eb7-474a-90f6-b97d82f02f84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1578aee0-4b3a-4aba-84d6-e01dca93aa8f",
        "cursor": {
          "ref": "3e7277e5-4793-489b-b66b-34a4d5160c46",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b564cdcf-3530-4e44-829f-b4d786a000e9"
        },
        "item": {
          "id": "1578aee0-4b3a-4aba-84d6-e01dca93aa8f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d3d10540-9c4c-4cff-a2ee-b9acfbf7cf61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99540f0d-5fd0-4cfb-8d6c-d9e3bc075f39",
        "cursor": {
          "ref": "82e5c232-f54e-40cc-afb5-4f3b8fecaf31",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "92b6c38a-b0c4-4785-8d24-491697e20db6"
        },
        "item": {
          "id": "99540f0d-5fd0-4cfb-8d6c-d9e3bc075f39",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "3887fb11-aac6-4979-8f37-5c8fc5734189",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "a6518f98-3294-40d2-b224-a84c6fdbd48d",
        "cursor": {
          "ref": "7e99c411-85de-46ab-99ce-b4fdfaf74c9f",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2328c918-1131-4fa4-8af3-3a01a8f21e6c"
        },
        "item": {
          "id": "a6518f98-3294-40d2-b224-a84c6fdbd48d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "9bfe32d3-dab2-4078-addc-b487febe0f3e",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "c31b2ef4-92b3-4109-b982-61e37b89fa75",
        "cursor": {
          "ref": "3f697176-7f6c-4915-bcb5-1809558147a5",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "eac63d4f-6ec8-471f-aaae-6061c278ed3c"
        },
        "item": {
          "id": "c31b2ef4-92b3-4109-b982-61e37b89fa75",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ef9c49fe-f6bd-4067-9636-52b25c4ba0fd",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "c0de7e80-b064-4329-bf4b-d1167d3fdade",
        "cursor": {
          "ref": "f797e053-a9da-457e-8be7-b7b2cc0add2d",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ff917dd3-6f13-44e9-8140-ca9dc49214bf"
        },
        "item": {
          "id": "c0de7e80-b064-4329-bf4b-d1167d3fdade",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c4dd1ad6-0d06-4c96-9ee0-b434a2a90b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92d3f309-ed52-4ab6-933d-de2e954fc65a",
        "cursor": {
          "ref": "0cbdd61b-20bc-4553-8195-024db5ae2a2c",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "04f65d27-55c2-4e6a-9650-ad26b0ba794f"
        },
        "item": {
          "id": "92d3f309-ed52-4ab6-933d-de2e954fc65a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "3ae8465e-35e2-4f7a-b52a-4ebaffb65359",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "417f2a76-1375-4b06-951f-48d94c36918c",
        "cursor": {
          "ref": "49771db1-4632-4b6c-a031-ef7d8f415a3e",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a91f127b-3e09-40c1-b030-7cce3766a1b5"
        },
        "item": {
          "id": "417f2a76-1375-4b06-951f-48d94c36918c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c2caa0b3-fcc5-4b15-ae88-a81e4c9ba145",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "6769cb7a-e909-4cae-ad81-392943a85150",
        "cursor": {
          "ref": "37305e8e-dd9e-4bfe-95d8-c3024dc15010",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "9e26f36d-17a2-4d17-af26-d3a2ddd9e2e8"
        },
        "item": {
          "id": "6769cb7a-e909-4cae-ad81-392943a85150",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "f677b223-6eee-4dce-93a5-ab5788b7af50",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "8e0136f1-1240-45c3-8507-f07dad1a6388",
        "cursor": {
          "ref": "17ecf50d-ae85-41d2-859e-fc5b80a2095b",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "de094408-e4ed-46be-97fa-57e6a8f2c9e1"
        },
        "item": {
          "id": "8e0136f1-1240-45c3-8507-f07dad1a6388",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "04c2bfca-7f3e-410b-9264-5c0ab8c6c726",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "42dd1fcb-766c-4f11-bad9-49a969c00737",
        "cursor": {
          "ref": "5166bc49-2105-4db6-80eb-a5ab0f4d0010",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "9a38e090-b8b1-451a-a53c-8c8543dd55a5"
        },
        "item": {
          "id": "42dd1fcb-766c-4f11-bad9-49a969c00737",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6772d222-c4c1-44bc-aaf2-c302671ee81d",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "9e9aa135-bd7a-4f66-b2fd-6bf3db2c76a6",
        "cursor": {
          "ref": "5edc4dd5-4adb-4801-911e-3399eb06e59c",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b025f1e7-468b-4426-aedb-62d23c9bfde4"
        },
        "item": {
          "id": "9e9aa135-bd7a-4f66-b2fd-6bf3db2c76a6",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "08d2300b-8cc2-4f71-8cab-e10bb60c6c83",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "1014586a-7c4a-4e34-b979-a861e2d1b3f7",
        "cursor": {
          "ref": "d7e0d07f-16f9-40da-bdd8-8c1f74d1f942",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "34eb250b-eec7-4406-9fb0-03cf01f8a3d8"
        },
        "item": {
          "id": "1014586a-7c4a-4e34-b979-a861e2d1b3f7",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "3b3ca721-cc5f-47fc-8ca7-b5eeb441fff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e39360ea-a4be-42ec-882a-1c5d72e48a0b",
        "cursor": {
          "ref": "85889a5f-7f5a-499f-9063-888ce23b1a1b",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1b6f883a-1a35-4d26-99a5-1fd35bc1f6e5"
        },
        "item": {
          "id": "e39360ea-a4be-42ec-882a-1c5d72e48a0b",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "94618557-347a-42ef-a344-fb96e6319921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92aea5a6-46ba-4735-b3e6-1d1ae1d91158",
        "cursor": {
          "ref": "c449f92e-c38f-49bf-8aab-2e542f27f9ed",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "cfdfe1ad-b2b8-4e72-b27b-ca0518ceffda"
        },
        "item": {
          "id": "92aea5a6-46ba-4735-b3e6-1d1ae1d91158",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "970403be-ed24-4dfa-8017-28665428a18d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9783b8ba-3f3c-4ed3-9b51-b09618133fbf",
        "cursor": {
          "ref": "79ac1f2a-1314-4901-8bd6-f33be25026ee",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "fc44d142-60ec-4623-b8e0-3b579571a373"
        },
        "item": {
          "id": "9783b8ba-3f3c-4ed3-9b51-b09618133fbf",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "9e8952af-2290-497c-8e65-a1575ca63af6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b889938-1a2d-469d-a1bc-60b039417b87",
        "cursor": {
          "ref": "d710c287-beba-4af6-b20d-db6d246aadd5",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a112ff91-053c-42aa-9687-224d698ece6a"
        },
        "item": {
          "id": "1b889938-1a2d-469d-a1bc-60b039417b87",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "3e1b0b39-07ea-4345-a30f-638eb7f5c59f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06df94a3-cd30-4cac-b61b-4a9bb2e26255",
        "cursor": {
          "ref": "11857d1c-79d1-4c75-9061-3dbb3bf28666",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "dde9a088-3c85-4262-a131-4819b56a62d0"
        },
        "item": {
          "id": "06df94a3-cd30-4cac-b61b-4a9bb2e26255",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f5b7cc08-3b87-4bf0-a564-19a441047f19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94202b68-0b5b-4da0-aef8-62923fcf3a17",
        "cursor": {
          "ref": "2633fae2-9c34-4658-aca8-ab59ca3dd00e",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "51b6b186-e4cd-4596-9a62-c17f43efb5f7"
        },
        "item": {
          "id": "94202b68-0b5b-4da0-aef8-62923fcf3a17",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "a660b3da-1029-4edd-b31b-30150754b9fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a44640e-60ee-43eb-b77b-15f5b24abf0a",
        "cursor": {
          "ref": "7b9d8f29-050e-441c-b68c-deba2b7c9474",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "826da158-ce34-4de9-9a3a-2f7d316a948f"
        },
        "item": {
          "id": "9a44640e-60ee-43eb-b77b-15f5b24abf0a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "128615f8-047a-46a2-b116-4332095223ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ba16a86-73d5-4a4a-b553-dbec58261ade",
        "cursor": {
          "ref": "76c921f6-6cf1-4e74-89d0-94667dd98115",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "12a8f5ca-be7c-4739-b853-1369acd92481"
        },
        "item": {
          "id": "8ba16a86-73d5-4a4a-b553-dbec58261ade",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9436eb17-c6fc-495c-a617-eb1d8693e429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b56c63-c883-4486-8446-d03ba390dfc3",
        "cursor": {
          "ref": "d0efd369-bf29-48b2-96ee-885263b2936b",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "8c0df486-3593-4ed3-abab-0d5cdbcd65d3"
        },
        "item": {
          "id": "76b56c63-c883-4486-8446-d03ba390dfc3",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ca54c43d-7802-4e65-890e-02a56bccf2af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "108db7fe-d7fc-40f5-b797-863829301b63",
        "cursor": {
          "ref": "6a5c6d7e-8402-42a8-9ffa-1f7ff12affb7",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a603561b-7d4f-4014-aaff-8ce21408bfc2"
        },
        "item": {
          "id": "108db7fe-d7fc-40f5-b797-863829301b63",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "1829e02d-c8e7-4053-9501-e3d5a95d9f3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9737de55-f353-4499-ab44-7c7b3f13ec70",
        "cursor": {
          "ref": "0f4c39b7-7c03-497a-bf4f-3bd9ef5bf8a8",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "41521047-c55c-47de-9f10-5ef357e82405"
        },
        "item": {
          "id": "9737de55-f353-4499-ab44-7c7b3f13ec70",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "c87d8832-361e-43ff-a58d-6a1836e8a7bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3805e8f-bacf-4ec0-b2ab-5f1b4bb28f6c",
        "cursor": {
          "ref": "a87a9525-49dd-4192-aaa1-a017af9036e9",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "3f7a29bd-6dda-43b5-97b5-400a85b56da0"
        },
        "item": {
          "id": "f3805e8f-bacf-4ec0-b2ab-5f1b4bb28f6c",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "9be1342b-9d17-4a4e-804c-a9470673724f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1803b0f6-aa42-4d11-ae45-7c786687c8d1",
        "cursor": {
          "ref": "7911f6f3-a6c7-464e-b003-131862023c78",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "930cf331-7958-4bca-9e9c-ac28a445a095"
        },
        "item": {
          "id": "1803b0f6-aa42-4d11-ae45-7c786687c8d1",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "085dcc68-07ca-4af8-a83a-eb61dba0a640",
          "status": "OK",
          "code": 200,
          "responseTime": 169,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "847b1bf6-c9ae-4b96-90d3-f4693ab5e967",
        "cursor": {
          "ref": "2f35762e-0545-4b6f-b6b7-fa70024fa73d",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "fbc7693d-f518-48ca-a837-a7bab2bd35b3"
        },
        "item": {
          "id": "847b1bf6-c9ae-4b96-90d3-f4693ab5e967",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "425030c9-c541-4338-9fa1-739743d3ec34",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "a7ec8aaf-cd9d-45ba-a3ad-b8baa23b69af",
        "cursor": {
          "ref": "7ee85d59-7842-498f-b857-5f799027704d",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "29ede3e0-3350-4956-bc41-13e38f1aace3"
        },
        "item": {
          "id": "a7ec8aaf-cd9d-45ba-a3ad-b8baa23b69af",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "5d2d275e-60bb-4591-ad2a-7100f8bbac3c",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "6efcab41-6bf8-416f-884e-b0acb735fe2c",
        "cursor": {
          "ref": "7cfc00b5-f97c-437e-b587-34553d061cac",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "3e03a869-d1d4-4d82-814a-6ba97b10b63c"
        },
        "item": {
          "id": "6efcab41-6bf8-416f-884e-b0acb735fe2c",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "422576a0-0a4d-4ae8-b23b-6adc85a1334d",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "f4b6e402-dc1b-4798-b450-fcf485089be1",
        "cursor": {
          "ref": "45540fe2-0b19-4e07-b5ed-3d486126e4a2",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "33460465-49d7-459e-ab89-eda630a7d6cd"
        },
        "item": {
          "id": "f4b6e402-dc1b-4798-b450-fcf485089be1",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "7e567ec8-a9ec-487e-8194-c23d8ef1ec2b",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "8b0552ed-b37f-4b05-a8da-37335334a20a",
        "cursor": {
          "ref": "7d87f6f5-a5ac-4ce7-9995-3a80f8d42e09",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "b211eccd-669a-4cba-b80e-99278c68e010"
        },
        "item": {
          "id": "8b0552ed-b37f-4b05-a8da-37335334a20a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "07417ace-d486-47ed-9133-0bec6f818a45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b47c6f-c004-454e-a522-d2390f73c1e3",
        "cursor": {
          "ref": "89ffcbd6-7983-497c-b6ac-09f68446dd25",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "ef12579b-9d62-41a7-927a-743d51706b47"
        },
        "item": {
          "id": "65b47c6f-c004-454e-a522-d2390f73c1e3",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b9b262af-9bda-42e7-b61b-0c874d86ecf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4111b2ed-8e2e-42df-819f-6f9ba20b5bc0",
        "cursor": {
          "ref": "a8afe61f-11e4-4ea8-8608-8b4cd12a869f",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ccd513d6-b41c-4448-a854-11cf03749f01"
        },
        "item": {
          "id": "4111b2ed-8e2e-42df-819f-6f9ba20b5bc0",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "c7aed487-c8d5-4a62-b799-f40f61f96659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0781480-8a7e-4873-be66-1470cff9f675",
        "cursor": {
          "ref": "87290521-f1fc-4fab-ace4-8ef195e6cb58",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "47f22cd7-2351-498f-b5ad-b072043ca2b0"
        },
        "item": {
          "id": "e0781480-8a7e-4873-be66-1470cff9f675",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "85ca893c-4a6f-4be9-90d1-33e4bc0b0465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "310069f7-1981-4af9-b65c-99d0bc142eac",
        "cursor": {
          "ref": "8c9d9787-18c1-4b1c-b97d-884bc6347517",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e836b638-1e08-40fb-86e2-e7944ce9da92"
        },
        "item": {
          "id": "310069f7-1981-4af9-b65c-99d0bc142eac",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "c3ecf31a-f689-4603-af51-f1ca9df94b70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47cacd43-fe76-4db4-8f15-a1abbcc487e6",
        "cursor": {
          "ref": "26ce45ad-2b92-4d12-b874-2f4d17fcf73a",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "72487065-b7e5-4d7b-b3fb-03a80c157579"
        },
        "item": {
          "id": "47cacd43-fe76-4db4-8f15-a1abbcc487e6",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "10dac0b2-1f60-48b8-843e-b00d13693fbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "694d49f0-6197-4d15-a73a-11f6240f84be",
        "cursor": {
          "ref": "47e6791a-5c24-4c74-b68f-8a5e1a137ddc",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d4e753a5-9a5d-449f-a247-4700d03feec6"
        },
        "item": {
          "id": "694d49f0-6197-4d15-a73a-11f6240f84be",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "bec9c5ba-d697-4ee2-a70d-9e5f124e3801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6fcb1b0-2b1a-43f6-bb1f-d753961a1967",
        "cursor": {
          "ref": "88336cd5-8ccb-42a1-9c0d-15f12095cac4",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "981da75c-51a7-4626-8c88-d517228449be"
        },
        "item": {
          "id": "e6fcb1b0-2b1a-43f6-bb1f-d753961a1967",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "283deeb6-114a-4c7c-b30e-28f52d44ef22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c460b07-edc8-41bf-ad6e-71a0640ddfdf",
        "cursor": {
          "ref": "58e0f14c-d532-43f4-8bc8-567680fab361",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "02037175-0ed1-4f04-b9d9-fa2d62249077"
        },
        "item": {
          "id": "8c460b07-edc8-41bf-ad6e-71a0640ddfdf",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "648aea98-92e1-4968-b795-dcfe10a7dc85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64caf002-982c-4884-9b5a-1f46e8ef8c8f",
        "cursor": {
          "ref": "bdd71a6e-efd5-4afe-9560-16f9271ffd47",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "975930e2-c777-414d-a954-903f6968eeeb"
        },
        "item": {
          "id": "64caf002-982c-4884-9b5a-1f46e8ef8c8f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "6bc6b866-aeaa-4af8-85c4-8a61477336d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90adb890-5069-49a4-970b-2342b85bae4d",
        "cursor": {
          "ref": "b6e09eaa-65d5-4aae-a040-8491fdfc4920",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "9f6bccfb-8290-48d3-95ef-657886a2412e"
        },
        "item": {
          "id": "90adb890-5069-49a4-970b-2342b85bae4d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "54b67564-3a8f-494d-98e3-786363374985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13201ac7-d79b-4c35-ad41-79b2e90fe98f",
        "cursor": {
          "ref": "1eb16ac2-ab5c-4007-b4c1-01734c9f7798",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "2efa5dd9-2e8a-4779-9b61-12c9b0e05856"
        },
        "item": {
          "id": "13201ac7-d79b-4c35-ad41-79b2e90fe98f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "24c8882a-5bde-4efe-a1b4-db2fcc17635b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4caa77e-9be5-415e-a1ee-9e5fa89dd11c",
        "cursor": {
          "ref": "f1a19915-afde-424c-8352-2e32dd9c4b62",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d492d39e-b6b1-4f38-8e06-b04e0d4163e6"
        },
        "item": {
          "id": "d4caa77e-9be5-415e-a1ee-9e5fa89dd11c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a115a9ed-d96b-43f3-9ab0-b2ef3a5ce1bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9341198b-67f1-4b52-962e-8e10bc781316",
        "cursor": {
          "ref": "cf29e2cb-96d8-4247-b7c5-d3f3b6028ed2",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "8d0fb065-3b35-4bf6-bcb5-455cb43dddbb"
        },
        "item": {
          "id": "9341198b-67f1-4b52-962e-8e10bc781316",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "b8c1e371-5641-4de1-b6fc-c3e98ee7dd37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb2c21d6-4d9a-40e4-839f-aa0ad8eba93a",
        "cursor": {
          "ref": "3a721023-688e-4a2a-833b-2d81c4d5a268",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0f7e7d8a-adf2-4c44-9275-94d8f0324972"
        },
        "item": {
          "id": "fb2c21d6-4d9a-40e4-839f-aa0ad8eba93a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "353cadf3-da53-4028-8cdf-b0b9f8eb66f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b5f79c-8b09-4d51-9b16-cbd6f37786ce",
        "cursor": {
          "ref": "69002001-2682-485f-88ef-f7fb9a99b566",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "4af1ad4b-9b4e-4938-9769-464b5a55a19f"
        },
        "item": {
          "id": "39b5f79c-8b09-4d51-9b16-cbd6f37786ce",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "4a12262c-809a-4ac8-a723-4fc09a0d9435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecf6cf6f-26a2-425e-b169-cdbb4c568d37",
        "cursor": {
          "ref": "be3058b3-bb39-44f4-95f8-2212a3d8d9e4",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f3ea9047-ada9-4a2b-9317-7a6923100c37"
        },
        "item": {
          "id": "ecf6cf6f-26a2-425e-b169-cdbb4c568d37",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "613eeea9-df62-4e71-8a5e-2a8c7d7c41bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e60f13a-410a-4b32-92b2-4faa0c407b06",
        "cursor": {
          "ref": "9a303606-9ce7-48e3-9fe8-ccb3914eb357",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "14ec5763-ef47-4e9f-9982-a84a80afe43f"
        },
        "item": {
          "id": "7e60f13a-410a-4b32-92b2-4faa0c407b06",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "8023e0df-c183-42ae-bc20-24c5854a50f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eb56837-eeb4-47bf-8fa2-434a3f7b0be0",
        "cursor": {
          "ref": "8b004506-7171-4ea6-a96d-9aba84512ba3",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "eea8e0ed-7a74-417b-82df-626c071a4be4"
        },
        "item": {
          "id": "4eb56837-eeb4-47bf-8fa2-434a3f7b0be0",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "899846f3-93af-473d-a4f1-a8da4e89bf17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48deab86-7040-4c93-8e35-f7ee9c24e292",
        "cursor": {
          "ref": "d96b8f97-1945-44eb-8c3e-5abc060b5e7d",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b4fbdb85-1e36-48d7-a557-d1b6060d84ba"
        },
        "item": {
          "id": "48deab86-7040-4c93-8e35-f7ee9c24e292",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "80dc0254-b025-49ce-9be2-ac70d17773a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "433be21b-eaae-4b55-84d6-aa741d5a9279",
        "cursor": {
          "ref": "2cc2d09b-bf42-4ac2-934c-62ec221361df",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "abc13f97-6cab-46d4-b1a0-699b43aea62a"
        },
        "item": {
          "id": "433be21b-eaae-4b55-84d6-aa741d5a9279",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "23d2af34-38c7-4386-b8d1-b012842874f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc69f6af-cb3e-4832-a01b-3627a616394c",
        "cursor": {
          "ref": "024e12d8-1660-4d59-8622-18a1dc5068ee",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "38dd1a55-f950-40d5-9c9b-ba6ced8f2738"
        },
        "item": {
          "id": "fc69f6af-cb3e-4832-a01b-3627a616394c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "17da9883-7819-4522-958e-6cf1e5ed39fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "523564d6-cf3f-4220-830c-51d774b3e69d",
        "cursor": {
          "ref": "1529c9e8-5876-49a8-ab3b-acd81f6e155c",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d2a51f1b-2e5f-4039-941b-ffa3f94485e8"
        },
        "item": {
          "id": "523564d6-cf3f-4220-830c-51d774b3e69d",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "69314460-a860-4e91-b88b-d24d2c1f7464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "971d1a05-aaa6-429f-8ae5-90f70cbbf9ab",
        "cursor": {
          "ref": "729d929b-8d53-44cd-ba2a-477f801aedb6",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "828c9a7a-8884-4630-a571-34e51bc230b4"
        },
        "item": {
          "id": "971d1a05-aaa6-429f-8ae5-90f70cbbf9ab",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "13502d1e-0468-44a6-b4f4-43f15c416b19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "479ecfa3-ccc5-48b7-92d0-1732c940f094",
        "cursor": {
          "ref": "cfa6e127-3350-4838-b975-9c7b35bf022b",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "7131cb2c-88de-48c2-a8d7-fee1962e99c7"
        },
        "item": {
          "id": "479ecfa3-ccc5-48b7-92d0-1732c940f094",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "9114706a-fb95-4349-ae76-782f2528d946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c005372b-7855-4f19-ab80-fa9e44d2bdb0",
        "cursor": {
          "ref": "df51a2ab-87db-4c97-8683-600d2ff1077d",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "73c9184d-8a67-4638-8f6f-791f0fa0ffac"
        },
        "item": {
          "id": "c005372b-7855-4f19-ab80-fa9e44d2bdb0",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "ffb7898a-8c4f-47f4-884d-c7c39a978767",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e31ee9-c6f1-4397-a8e1-be849f80a2cb",
        "cursor": {
          "ref": "fde754c7-6a84-4350-9077-7a6093db455b",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "9fa652b6-4bbd-4f3e-8c4c-0f3fc752bc74"
        },
        "item": {
          "id": "23e31ee9-c6f1-4397-a8e1-be849f80a2cb",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "00d75e0f-4ca9-4ce9-ae3f-e661554f4fd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c940174c-de0a-41a9-a895-27742c800c99",
        "cursor": {
          "ref": "77919151-63fd-4902-89e7-3abe030cea72",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f8628051-a7fc-46ae-9619-f7b5a0832785"
        },
        "item": {
          "id": "c940174c-de0a-41a9-a895-27742c800c99",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "4fe7ee5f-fa18-4fc6-be59-3be3511a52e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "658d2dd8-122e-4060-a025-5120bba3d285",
        "cursor": {
          "ref": "97209308-3fa4-4f82-bfa6-dc1333959ef0",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "69d5f967-9b5d-45db-ac6b-64e44a71b848"
        },
        "item": {
          "id": "658d2dd8-122e-4060-a025-5120bba3d285",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "afd9b733-9498-4033-80b9-6b9fd2702b87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5166e073-67df-46b8-9022-e90d2cd58990",
        "cursor": {
          "ref": "5f25d145-b0b7-4a2e-9d90-e03d16aa525f",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d9eff06b-5d06-4313-9fb6-9808b11aaea6"
        },
        "item": {
          "id": "5166e073-67df-46b8-9022-e90d2cd58990",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "8c01055a-3720-4a8e-9b5d-3a545b4168cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f14351b-80f2-4a38-afc5-bdf5d5ddbfed",
        "cursor": {
          "ref": "2adfa582-eb88-4b2b-9c88-4f80d99b56e6",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "c6a94534-9b93-4950-be95-a0d85366ac43"
        },
        "item": {
          "id": "5f14351b-80f2-4a38-afc5-bdf5d5ddbfed",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "d77bca62-554c-4545-a886-e7460c5b18b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9558daf3-6d19-4731-b1f5-538bc2f170ac",
        "cursor": {
          "ref": "656e1eae-c067-4212-aff0-76eae335e8b3",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "9634c189-2ee6-4f36-8fcd-5528fd5a283f"
        },
        "item": {
          "id": "9558daf3-6d19-4731-b1f5-538bc2f170ac",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ebbb9ccd-2602-4342-a5a9-5bb034d7342b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e5cb1b-be45-4a50-b555-afcd06b80488",
        "cursor": {
          "ref": "08db2efe-48d5-4547-abd2-fe4928040845",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "4e488e35-61f3-4430-b3f7-c0131608fa28"
        },
        "item": {
          "id": "c3e5cb1b-be45-4a50-b555-afcd06b80488",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "0af650f0-355e-4645-897a-ef906f092476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88543b2c-330e-4b42-ad84-9c7598dc4005",
        "cursor": {
          "ref": "cd79ea6e-c2f6-43ec-ab3e-bca4efb15258",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "070d66a6-0ff7-4447-b78e-4c76f37449a7"
        },
        "item": {
          "id": "88543b2c-330e-4b42-ad84-9c7598dc4005",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "17a81db5-82d8-47a8-9447-e10d82ec0b0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2df7be5-cf85-48f9-aee2-275413369f81",
        "cursor": {
          "ref": "a02dff03-7975-4e4f-96b0-469b9d96564e",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "5758026f-b878-4958-84d2-7721e7e1348d"
        },
        "item": {
          "id": "b2df7be5-cf85-48f9-aee2-275413369f81",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a225a2c9-7d9e-4af6-9432-dad402da9dcf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81b9058a-e0cd-4492-be19-501c53e022db",
        "cursor": {
          "ref": "965798fe-6088-4184-9321-e78e73ac4fd1",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "44f0dc66-5207-4741-967b-7bd7b4f548ac"
        },
        "item": {
          "id": "81b9058a-e0cd-4492-be19-501c53e022db",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e6cbdc16-ff02-4324-9e20-245ba334fe09",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "9e712c54-f438-4ce3-82ea-f56e58844fdf",
        "cursor": {
          "ref": "c7a2bcaf-3b51-4456-8e95-bc04a18a3caa",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "2906a250-502a-48db-bb90-62a3b134befe"
        },
        "item": {
          "id": "9e712c54-f438-4ce3-82ea-f56e58844fdf",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b9f5a0b5-cb7b-4752-93ad-ca9bf9615636",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "36fc4bf2-7be4-400c-9da2-a012754eb97b",
        "cursor": {
          "ref": "501d54fe-5c15-437a-bfb8-55210122fe55",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "5d802e36-079d-4bcc-b335-32c5a6f40ee4"
        },
        "item": {
          "id": "36fc4bf2-7be4-400c-9da2-a012754eb97b",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "66dd5f67-ba63-48e9-a079-7258dd3bd9e7",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "734c9f79-8932-4f8f-9a80-69fa07ee8b69",
        "cursor": {
          "ref": "3e09dfa1-7520-43ce-8459-a53450747220",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ff0cb64b-0fa1-4437-97c6-ffd4d81316e4"
        },
        "item": {
          "id": "734c9f79-8932-4f8f-9a80-69fa07ee8b69",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9a361780-0966-4eb3-9cab-a4d7dd2669b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "734c9f79-8932-4f8f-9a80-69fa07ee8b69",
        "cursor": {
          "ref": "3e09dfa1-7520-43ce-8459-a53450747220",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ff0cb64b-0fa1-4437-97c6-ffd4d81316e4"
        },
        "item": {
          "id": "734c9f79-8932-4f8f-9a80-69fa07ee8b69",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9a361780-0966-4eb3-9cab-a4d7dd2669b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2380ee3-ad4c-407f-8bc6-86d12151682f",
        "cursor": {
          "ref": "caf6462b-5246-41df-a83d-358aaaec140f",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "43e733f0-4804-4196-9dbc-3e25e76f6714"
        },
        "item": {
          "id": "b2380ee3-ad4c-407f-8bc6-86d12151682f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ddcff4ad-12ec-4e06-abb6-4ca02c231bcd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a92eabdd-7d7d-46a5-97cb-fb1fd4a5a378",
        "cursor": {
          "ref": "99f3ce37-2966-438f-bf3c-578db9ce8596",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "fe821904-3980-490e-a8af-eb187207a439"
        },
        "item": {
          "id": "a92eabdd-7d7d-46a5-97cb-fb1fd4a5a378",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1ea0f6ce-6c91-44d1-b669-03ba09576a34",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}