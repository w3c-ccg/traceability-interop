{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "115941fd-9aa8-4e1e-8c86-f23a4b28b8ad",
        "name": "Clear Cache",
        "item": [
          {
            "id": "d7cdb774-c550-42bc-b0f2-4e64d12e1a69",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7877ba80-e047-42cf-a41e-2c5c02ef3c0b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9353150a-89c4-4cb5-bf2a-4210f7be6a45"
                }
              }
            ]
          },
          {
            "id": "f9e3c0d7-a9c2-4417-b480-6576fd9ed623",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a8b0b733-74c1-4da8-bb31-4759669d395c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4523d906-2d5a-4505-8b89-c852b5f9c300"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "3902b018-36bf-4d33-9341-0ae503b01b76",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d4f89dd3-0ea8-4e81-9db0-ddd883241da3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c32141ab-7527-4058-861e-360098ec413b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "726c8571-23b0-43a0-8dff-a61fc6623188",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bbc6dcf1-6171-473a-a3f1-791e7d688174"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7f7b221a-0183-4cea-ac4c-0639ba59eee2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3a2bda03-a942-472b-8ea7-d1845b50506c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9e71d54c-83b9-4d67-9d80-f40f634c0734",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1427e0b7-f4bc-44c6-9b29-832ae2e773f8"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5ffd9bf1-0869-4f5a-8dea-a9965dc0826d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "b9cb4764-0de4-439d-830a-8d9ee26764d5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "245e3ffa-7b32-414a-850b-ae089ffbf41f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f2d35d41-651b-43a5-916d-27704d042ee9"
            }
          }
        ]
      },
      {
        "id": "8b6182f2-d936-4758-af92-050ede3ec35d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "919d4ef4-59d8-454a-b47d-0fce9136af16",
            "name": "Negative Testing",
            "item": [
              {
                "id": "efefd996-9cb1-44a5-a192-3323da6f73a6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "aeac0ae1-11b5-481e-be6e-c2e7971ac2e9",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3fd9ae3-c9b6-4883-8319-ecf68c82e7c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3715dc21-3356-482f-ac33-f4c40ed11ba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71d0dd86-ba3e-4735-80f2-187d47c73b7d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46b97985-2f4f-42ba-858d-3f7c504ce83b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02546de5-e2af-48d1-8a48-d8dca8e7f0a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "544cfab1-663c-4a11-ad23-6bf0a33fe02f",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c5073a-4f7a-468e-b028-77e906215277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3be183fc-74cd-4de4-b40e-95f9ae85dcaa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ffd2c4e0-e26e-4475-8ff9-da035ff4d4ae",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d4157c62-6e63-4f02-aea2-56dfbe825466",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ee65fa2-0a4f-425c-bc0a-2d36dcb19d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "413cc71f-eedb-4701-ba93-9e894fbf76eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c5b0c3c-f2b3-4e25-b7a8-fa25337fe376",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c90d37f-e991-4873-aefc-7c47f81ae55f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5aee33dd-5ab3-4d68-af3c-7aff44d1ddf6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "002e6c3a-b294-4c72-9a5c-b490e2140fcd",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7f9c78c-c504-4934-ad02-224f8ef64d9b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "aef83b29-059e-4483-b63c-657262dab64d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "acbb46c4-a2b1-4c22-9efa-ae4727be4514",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "063089f3-b255-47cd-8c1d-56b0dd159f09"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "49610c6a-c89a-4af0-8669-79e50e8a31bb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "22b59efa-9c31-4cef-8cf1-de66707974be"
            }
          }
        ]
      },
      {
        "id": "9165b67c-ee3f-4ed6-99f3-57dd393f0e23",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "3c774947-97b5-4ec9-9013-c5a763ffe6ff",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c9125a69-58c1-458d-a6a4-646ec8bf6728",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "07fa5f99-48f9-416c-94a4-4f895d048008",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1eaeb94-c4f7-4f95-9dad-92e527665eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27ff3f05-9c64-4155-8448-f41fce10e7ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "460019eb-608b-45bb-9e6a-573e5a5cab1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d51d770-d794-4172-a0bd-9544e85e868a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "859d9ccb-11f6-422f-9177-6fbd019b8683",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2681685-560b-4061-8705-314969c7dd13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faaa1130-9f11-4e3f-9c85-e42610fe41da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e1aec5a-42b1-41c4-beb3-68a24cf45baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aae60984-fdd4-434b-acad-7fc745448a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14aa52d5-b4f7-4423-8ebd-fd6d6f52996f",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86e50d24-ec99-484d-8840-187cb3344732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbac7319-9f3c-476c-8207-c64202682ee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ac237d6-443d-40a7-8fb3-f3059d262d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e6a5767-0592-4f91-9feb-6c4516576fae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "261369b9-ffee-44aa-9b9d-9d7032be336d",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32082da4-64ed-4b1f-a8f1-af5abe22eeec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "826c7468-e6ee-42a8-a8fc-81ad24648fdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315dce1f-6306-435c-a21f-ceb67c9d541e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bff2c41d-1998-4231-bf0a-6df6d1642d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a29ebb9-2687-4c6d-9a50-0fce010a3d73",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b09fe95d-3556-4b52-9cc2-03e43085059b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a865dd0-ca50-4029-b984-7c5399f1eef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed5892aa-0084-43b2-9a6a-f12843a97d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84383427-fb2a-48a1-8f03-23416d8aec50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a481daf-0762-4147-b085-2c87d4157f80",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "296474a7-4207-42bc-b384-6cf6a06966fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "173e27c0-2565-429c-973b-e9c104a2e805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6611aea-cdcf-4045-acba-2d5a3dd08b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d80e3422-27ca-4081-9116-d06332c09244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe33a318-c708-4450-8fb4-dce253653f53",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b804b8c-e13d-414e-9886-ce791e13393d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a76ec188-d8ee-4a69-ac18-bffc47028ba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae52ab00-8b9b-41fc-8b24-e479f793d53a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "945c1572-a6c3-40a2-8918-6117c6e16472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a89c75d7-9a05-43a2-a8cb-1c2536fa3c48",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f165f01-966a-4806-b416-dc2b2de3c584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39c2e4a4-b23e-4587-989e-36f2ae61fc76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f288712-6904-4b2a-9bc6-f93626cbbef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b5b874b9-f895-451a-9d66-9e53cc76affa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45f2dd4f-6a23-4e9c-8d63-284be8ccf857",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4371e9b7-b636-4f3f-a9b4-0c64d235ae6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16179ecb-5c07-4bee-8ade-6daac58f5932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "831eec7e-3852-4731-8198-a530f3007f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c45a6ab-b8fe-401f-bfbc-f0098fb85272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "630f4903-bc72-4ff5-a631-e59672c0e7e4",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dee0cce-07f9-478f-abed-8e280a78e077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "711ff34a-48b9-4e26-9104-663cb6ec3f73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9311238f-1b90-4885-89e0-caad126a9add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce3ec58a-c57a-4132-a5c3-08c4d894a3af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc8ec52f-8ccf-46d2-9388-2cdd4aa04214",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e229ac0-1ddc-41b6-be59-e2e69a083cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ce4e409-8b7f-44c1-9942-d488c3c3643f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc40844a-bc7b-4327-9937-ceb80192ccaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ddc4e92-35a4-400b-9839-48358d3496fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e181abe-1d0b-4c0f-986e-ab65bb9b85a4",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67072f15-e013-45fe-b7ad-51c7fbc3f53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02128842-d363-4bfa-957a-d7fc5acfc2fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb1cdf7d-821e-48f8-a09d-2f8fbb862a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "382bd35b-e4b1-48b6-8f3c-326be50d8aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc401e8e-6a65-4545-b65b-051007c9611e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa32d37d-d0f4-448f-a735-7139ab72a13b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d775e893-f1c6-460d-94e6-9f9338b83b31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ca2406a-e3b4-4579-b034-9782531e44ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e85a6bdd-5713-4f86-914c-a85e9da55008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15338da8-ab67-4fcb-bc5b-003a90dfdbfa",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2da88939-9314-4083-bcc2-92ca1f9dda4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1343d37b-e465-4b23-8fd7-0705f0f3edd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11516d6c-7f67-4267-a998-7059f93628ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aedf5813-709b-4cea-baaf-57b3f26c41b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d04e3e6-521a-4eda-8063-f5621fa38d7e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e311778e-ca14-4b83-8f1d-40faab47532b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c080b19-e050-438d-846a-8bc8b9924f10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feae3eef-a87b-4ffb-b491-55ae1a7c6c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "20382499-788d-4539-af36-102a3340c666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c52f88e-a84f-429f-973e-e54c0e8f6a2f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76733e83-3a97-4b48-8dc7-2d862cf2ebde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df744704-dabd-45c4-a92a-5f27f40cc7d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f999698-da42-41c1-ad3a-d3a93d08f633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "388276fb-52ff-4cb8-b29e-addf2da2d573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22d636bd-0f20-405b-9560-2a23760a7b7f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a21033-4285-4f97-baf7-08f1f85c8c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95059487-7170-4602-8af0-bf582de66a9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "793d750d-d275-4f97-9767-74ded76720ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a82b405-b950-425f-a5c5-a9272aa942cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f6729d4-c290-4141-b154-ba1b922c7deb",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d71841b-f445-4668-bbe6-5b549a3c7124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1a2c51d-90ce-4c3e-8848-77d2b2e393fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e221b07-ca27-4039-86fe-53b9d57eab96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1fc20f8-5412-4b6c-af9e-2aad5c9ba38b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e10f02f-491f-4989-b07f-5096fa26faa1",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cecd5b04-e9d3-467c-a2f4-b3a5a4f88bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b4b3070-c10c-4d89-9b42-019df68e0da9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1317c8a4-9ea7-40cb-9436-6457601e9cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "df95bb6d-d20e-4086-a25f-133d8bec3329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d99cd469-7409-4732-be81-33e157ef8e3d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da2d148-9b51-46f9-8173-0a2041778c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba092063-b284-47f9-a198-e8da8ec9c052"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9591658e-ae9c-44a6-9f95-862870e167c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2e01040-cba7-4c59-a2a0-014bd3ea618a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc1babdd-9bb3-4cec-b4d1-f9efc432bd61",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5606970-b818-46e2-a67c-1416d8d23e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8e4398d-65f6-4884-a473-d94a65c746e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8683c85-4d48-402e-b73a-65bd11c27d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d00665c-c15b-425c-b544-338018aca26e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede1115c-b968-4ec4-a91b-f392e1ad9dc7",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47105c6a-062f-46b6-bd1f-4017a672ab04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0c123c4-725e-481e-a7a4-8e98db110d02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f372a49a-832c-42fa-9d24-89b25c7a4909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d37698c-0ceb-4d23-93a5-5c71348c390d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59bd6fc8-0c03-4c5a-828d-866108723a4a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82e3a60b-b45e-427b-9c3d-6c01f1b3eb02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4914c1ef-13bf-47a3-94c2-9ed50e58dd78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb30fc2f-c1d5-4266-9c23-54ac040a5423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "85a90220-cd2c-4777-87c8-78aac964db12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "009902cd-246b-45d4-a88d-0e9a73580898",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cbe5b8f-c4a9-4232-9441-c86c679eddf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50ec0136-908e-4893-8245-0860c415e302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "662fa3b3-3f7a-4649-ba2f-cbf0d2e56530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "16d073e0-8181-4f59-9fa2-68fae02ab925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f66062a7-f609-4ad8-b514-63d94058ce9f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d4f3a65-2b28-4cad-ad8b-8743e368ab43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c59983e5-9cbe-4e27-86cc-a198c8cd21e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce06a082-6f33-447f-94ca-544470c99bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6537538-8a61-4873-b1ac-573d976e300f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf97174-e006-47b6-9fb1-7fe6c5c794e0",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdab0d33-8a7f-4f93-ad5e-796bf84083ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cf7f3ec-c43c-4a79-ba3b-bbb48feaad0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde9ece7-901d-423e-b78d-e7f268be809f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "26d9b375-70fd-4bc0-b50f-eb5c369a71c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "075db06f-378a-48a3-a6ec-e4d704f7e854",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e6c70d-92c8-44b2-9389-e186f6d65663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68521d28-fdee-471e-b2e0-2a36e23599f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2d367bd-9603-4a50-8f2a-eae75f0b3306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "714c354c-58c5-4f2a-b76b-de0affc37f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3002968d-9a54-4246-b3d6-d8caebc72101",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c2e5c3c-d08c-4c00-ba0d-b7ab29087bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f3995ee-b581-4a88-a55c-af1d5219ed4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24382aff-8ad6-4fa9-be8d-08a46decc2fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc60cc08-f0d1-4a8e-a4df-8143c9ac5802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13fa223f-4868-4973-aaa3-98bde6a7678c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ecb9aab-96fa-46b8-a213-ce4a64a3dcdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f97ddd10-ea00-4d46-b0fb-a82e4b895578"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a70223-f885-420b-9e6d-1562e3e1b0a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "678e58c4-453f-4301-84b5-93137aea2b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba9039c-c35f-4c33-9fca-d98cbc97be64",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7102586-d76d-450c-bd1e-11e13949aecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a878e36-2a3f-41c8-8f07-e319bb457ef8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f185e8-44a3-4718-b372-bdf78badeef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "522afc52-eb8f-4c32-998a-9a489be1d93a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "444f2807-986f-4822-8d5e-507cbb46187a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5184fa1-d53f-4fb6-8564-9ca1274d167a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c029e3ea-6a7e-4125-b7d5-8cacd8c71beb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa4ad815-fb64-42b1-8d11-8b4b1228266e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad4831a7-95f4-4554-b7e0-17c434703241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc2ad08b-bc53-4a6d-b001-490f92b379ad",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c468886-59d1-4822-97ac-ba505569bd1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4c5e0ac-3591-4019-92eb-21c97ec3b2f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "161b0518-9694-4ea2-8d93-0fc511e9445a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7936698-57a6-4070-9e55-68c9e1fab2c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b994e9-c691-4e14-b272-e8d185394cee",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "195a8878-522a-4680-87e3-e18899065cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ec6596d-4e93-4970-b2c5-4d9ef1d35476"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5e8f4ea-890c-44a5-a1c7-77344a02b6b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d12caf92-0c3c-4303-afaa-9e05910a52c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8cf51a7-47f4-4c36-a321-1e9a7d9e56fc",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17a6582a-5e8f-4a77-b6b2-23bd1bb7920f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a76cae7-bcd1-4fa6-8690-df9edf45e9ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e1c4b24-8f88-40f7-b5f4-5e60924a6789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa705b7c-9956-4fe0-9098-8e82abac2cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba19726e-9b80-4ff9-9ff2-9d8edbb479b7",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d69cf866-11ed-4e2a-8cd7-c8fe9cb09d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4d947f7-cc2a-4014-ad8e-b9feabd9fbb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd697fc-3c0e-4722-af41-e340a97fb72a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "3f1ac362-14c5-43c5-92da-01deef6e1fef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04602023-a47b-4be1-9801-8b6df0155bc2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b4d9233-207d-4219-ab8e-758a7e5c08cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "583a2c7b-3d09-459a-b4cf-8cd0ede0d1c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3213b1c1-fb05-471f-9d39-ddbd2a2cf5f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e7f6448b-2347-44f3-bc40-5acfb3cc469b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aead98a7-b925-4fca-9f3a-5c2c186d1062",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "470f8e6e-03ea-47fa-90ae-63ef56797e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "841df2c5-6b1a-4c44-9a69-d61b4d14d3f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fb241bf-fcf2-472e-89f3-46b357516ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "584eb9e6-3d9a-4416-b7d5-d7cf7240df4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93311525-c2b9-4457-966a-1d144f47d545",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c203b419-f7df-4a3e-b02e-a7629e88638d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55c443a0-5de4-4dbe-b1e1-698509f1b23e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b569aff-1afb-418e-aece-2840449d3e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a706706-0478-486f-8c03-37930a3a859b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c70fe590-580a-4f1e-8e85-4d0fad5a6f18",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f37984b-f39a-4015-bda9-d20798aef733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bc6d6b7-aebd-4275-8832-cd0a7fce3ac1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce10f89-9186-4f99-9182-9016c5770d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d007488b-6ba5-4b47-ab52-f1a0b643f8db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76507b96-89ad-4eda-9a13-7c67770396b2",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "999dea01-9c5f-40ca-97c1-b295dd7e0987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d695dbcb-b53a-4265-a915-e2c3d28458ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a423205d-e9d5-444f-bd9d-044d716bfdaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "02a5c42c-8037-4ede-aca8-a2059bf369b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70265988-4616-4f0f-81ad-7cdde371278a",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42f7c6a4-82ba-4b68-9bc5-4210161ba6bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e9ccf9b-d588-406b-aa82-f05f47902762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b77c901e-f8ed-4dba-b6f0-f0f8b7d6cb6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "143cb336-b46e-4ab7-99bc-9f6c90b98986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a8c8d5-f415-4484-85ea-a7391edf3416",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6611d325-90f4-4795-8ab5-3dfd053c7bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a5c092c-7945-4d6a-b9a8-2733f76438f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c177e83-ab8f-43da-b750-2ad5ecb0afab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "1d39c1be-1b00-4eb7-95c1-104bab2f9a86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f1b9270-b374-4ae2-9b15-95a59eabda19",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "425c3c12-2cc4-4ac4-827b-3925d8ee8cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16d38268-46db-4df7-8379-f1ec9dcde6ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e1c10d3-af29-4de1-a236-0751bb6e3f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c497a08-7e24-4a13-b6cc-3e7bd572e414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4ed7542-f1a1-4b17-b30b-eba1930c126b",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d06a099-4b4c-4961-9a0a-93121f8550ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08d76854-dca7-492a-8c12-b3982640704b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe3fdfb-c240-4ef6-ba70-c6397fee6f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bbf533e-a3df-492c-93dc-3a6a81aadd3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504085a6-316b-47c9-89d2-b08b21cf49fa",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64475015-4a6e-4979-bea7-1e0d61c3ee44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da09c54f-3304-4c24-926f-bad2eefe20d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "149232e7-bf3a-4aa1-9b6a-c6ffe71ac62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8528383-f997-4b82-bbaf-8c4aafbb51c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3d7203c-731a-4513-aa90-037d283f2963",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd59f4c-bd3d-4df5-b495-8fb44c4d8ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9227a61-d973-4e50-845b-cfec89bba782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf3b416b-1839-452d-ac5c-13af1f082828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca018f8e-a9fc-4d40-843a-313efda0424c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c5d1986-9237-4965-adc6-28f758437b58",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2c19b9-d551-40a7-adf0-a4516b58bdce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb40de4c-45ef-479d-9d13-376394bc5cda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "846b048f-924d-4232-820d-2f364e572325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "972c285a-e33b-45a1-87b9-dd5e661d2615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eced57a-01a4-4778-8c30-4a1ceb70e692",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11508fa3-2825-4519-a428-e21fefe130f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f331a024-4ea7-4591-8766-a839c0346d21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "befa2fca-441f-4ca5-8b8c-10273521e4f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8699d208-0998-4961-93a6-41dd7310b122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75cf9d8a-d644-4057-9bbf-73dcd8001ef3",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78820247-70c9-4686-a2cb-f4019d95c131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9038129-1751-465b-85fc-e146631f702a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41383f74-af55-4225-bc23-1b0305e7cda4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "35b9d9bc-bd4f-4265-9384-6208f087d475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "262b04ad-b9a5-4602-8821-b7aa16410352",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d67a56e8-3993-4914-b018-f50b6cef592b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "019814e6-ed1a-4627-a5b7-36eb278cda9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b6dc9f1-d096-4c92-94d5-2ade9ebdbf9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1d4274ec-ce18-48d2-9fe1-87d7e0c2a822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7262de6f-a6b5-4f03-af93-e433902800c7",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1146239a-af56-4045-8d83-e228fdbeca34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6f3ab0a-1c26-4c5c-9cb3-0f16f03468de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a544ad1d-3bc7-4d86-9334-bdddf533cc70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4b1058e-acde-4fac-8213-8f9202851631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3000d435-9653-4a99-87b0-ab89e263f81a",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63c06721-b5c1-4dc7-9ee9-b8e48c678336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4038f4c6-f2c0-4166-96f1-032e1c63a6f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3db48dd9-d2cb-4098-a70a-c4902f633b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c9ada63-1dea-47a8-86c7-968ff4f8ff70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "572350b0-8ff1-408c-8e6f-5e5ed1fb88d0",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "012df1c1-92aa-470f-beae-7a1cdb5641e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ef06c1d-e17c-4a10-a8a0-5899bb7ef328"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a676b6-b62f-46d4-93db-562d52937ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "62bb9393-19b4-44ab-9987-65acaec88bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e924cdc-ee5f-4e9b-99c5-6fbe026a7a1c",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9cb34da-573a-4da6-bd98-5c49309fc5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef41633e-afcf-4a1d-9fb4-215143c09cc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87122ddd-bd68-4b68-a30f-25871651c984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "00330f41-54d5-47c8-ae18-e3b872cbf76b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d37d30b-1376-4e68-a25e-e17e4d479084",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd150320-9701-4eb9-960a-9b3d1d47fd16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3ec28ee-179b-4c91-9093-32340cfa6776"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e81bfaa-7d49-4023-87e2-1cebdc494d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "20bde34d-a290-48c9-b08b-2df86df2d665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc404143-ef81-4bdb-90ef-4ae0a857f1b4",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "738b363b-eb69-45bd-a1d0-5c85dbd6429d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2777d214-db68-49b3-9720-a2d8c32ce68b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "630da09d-c296-4c98-8813-ef02822bca52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "eb824cd2-3f0f-4274-a427-f4e7458806af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63c514dd-8412-4f10-ac68-ed45346f425a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b989221-92f4-4a1a-8f3f-98d173ee7b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "568bd2b2-8c79-4f2c-9201-7658e50e94f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da04dbb5-9608-4198-b55f-5a53c0ac5595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7eb5c53d-9cbf-4c3d-8d1a-a6217548cebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de2a4bca-7415-4be9-ad7a-7eb57358c09e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a96591a-654f-43aa-bbb4-965576fcae5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba0ffd9a-57f7-48cb-9ac8-5ac1721e0327"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3c7fdc3-7706-4489-acb7-fd672a1b75e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "42a02c32-ffa9-4096-a0f5-05e728dcd656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e8be2a-adc6-4735-a926-1c97f72d88c2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b460b39f-51f7-4f34-8479-7d56b97fe5b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07792b1a-2bbd-4716-917f-653a5ab5351d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef293d0f-e7bb-4400-a448-14bb62dee6a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b23fbc7c-c323-4c91-adb1-c8ba8980b4d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4bb0edb-61ca-4d05-a060-d7185b1d0bb8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48882e95-d095-4c7d-bc47-a2c4bc5cc61d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5073d24-0964-4bdc-a07a-019698564fe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46b6bad8-c416-43ca-85d8-89ecfec0df26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6165c8f4-0461-4264-b011-7f7448cb60f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc7b712b-0426-4ea2-afa5-ea4e93508557",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44cc7b8d-af4b-4949-9cc3-ab0f42327fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bc83a16-9b76-4e2c-8f80-740999b2d2b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9179de1-291d-4677-9798-1e59e0b81546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd5f44d5-742d-4e50-b18e-289e40b0401d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c25b712c-4460-4f47-a831-ce971c060271",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "412fa515-cb34-4409-a02d-1cd5689bc38b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "796c64e2-969f-487b-b4f2-8260edfbc980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdb62cf6-6b9c-4c6c-b22f-da07e7f0a810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "9938d508-08ff-498d-81af-f39e551b4b64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0aec0a1-c3ca-4c3e-8ca7-ed33afbf40c2",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05897fc5-7947-4c51-8d9d-7dc5e8480164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd8019da-1a26-4f1e-8940-4c02b1150d52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e550ddcc-a57a-41ee-90c7-198163cfeca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fc4bcea-77cc-4d58-a0e7-60abc3ed1c1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e167e3ec-47d7-4795-b679-433796b9cae6",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54cdebd3-8d54-4dd1-9b89-ba74c20143af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb8b557d-4b6a-436a-9fa7-6519739912e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d58a2235-d756-4a5e-973c-d0248583e8fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "572e3305-30da-4f4e-a7fc-a13b314c0007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34d07c79-ab3b-4060-bf2c-5861894872ce",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8f698c4-17fe-4967-89ac-f42dfa498041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "724daac0-c3b7-4b7b-aeab-04b3bc7abd96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0654421-1b3a-4c74-8422-8278b5494266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7943f92-3174-4932-8b24-63bcf2e1bcbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e090290-ff44-48b1-b2f6-ae5c40e6b8cc",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e8df205-5b32-4ab8-8d2a-13d31a81b3a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f9ba307-53b4-464d-b4dc-8c772c65727e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a1d9ba4-7248-49cb-b2c2-1508cd98b478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e8f6e7e-33f5-4197-819a-26c231fcf442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d3c02e-97ec-469a-9f4f-09a10d4aea28",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac5ce0d-6c28-419c-886a-c95f21b61581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcd1de8a-6f3e-42c0-af85-648116ee092d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c037a77-1083-42ec-9561-4fee996390c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "21b87cbf-f1a7-4eb9-9aae-d9c60056d9ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ad00c74-71c9-4562-9994-ee692a0a71ff",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4474e63c-7082-42d4-93d5-4648a5df0f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "939b5564-07d5-4796-b20a-1bef1bc31118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d8c2def-0213-41d9-bf97-48b8409a4849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ff6a3cc-2920-4979-91b6-22b8865ab222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b54911c-1edf-4e74-b676-faed54d3ad51",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e29d61-1b26-4276-aa96-2c29526b1fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab184f1f-7408-46e4-92c8-4942875a2344"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab22dc0-6408-4a3c-9e07-b5fb6a1c1e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa43bc8e-be57-40eb-ae9d-c02a7c672238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "099e952d-d252-4b85-b5e3-4a52e4032615",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "294c9cb6-9441-4bfa-b7ec-a8ee55cf131e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f372c055-81a3-49b1-baeb-fb941e8dc12a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ac6778-22e9-4be6-a08a-effc78d8401a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "812294ba-16f2-4e26-8af9-8018304542d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e36f597-cc48-4b30-9c75-089d1eaf0bc7",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bbc8222-c5df-4f54-9490-89b9cf10f129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d83ab43-8e52-46cd-a33c-1092926e1ab8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085ab18d-5033-484e-ab1e-9a027c4f146f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac89c210-6964-4418-90c8-39988346f315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d910d150-6f4b-468a-869d-8a399baf3500",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00e071a5-68cb-440a-96ac-010bf8165580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac061705-a502-4060-89c9-a3d54b0aa756"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "466ad126-6ac8-405f-a5e0-497dfbaf641b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "45f7ea65-2cdb-4b52-87e5-8fbb4be829ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a0729a-2ed7-4298-8582-5f83e25a3718",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "380f69a9-be08-49d5-b039-db2b66a4f830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "754dea9b-ab0a-40da-82a7-c8d1a30ca6a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07af8963-1bce-41fc-90c2-446c158479e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9a765fc-f6ae-4fc8-8941-3ff3aaad82df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98d59803-56d5-41c7-92ec-21afa511d670",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "586e53b8-5d76-4b95-ae59-2fb5ce6176d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aa6ddb9-2cee-49ba-ab4c-4fb4cc841bc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d92694f-0117-42bc-85de-92b90e917842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bd0c1144-7858-46a3-8e82-cc898272886c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f7b0a9-c930-45a7-a60b-3deb02ddcfd8",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c08baa45-5f11-4102-afdf-a3c463be76ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aa57043-5d21-47bf-aed6-17d8edb20a84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f432ab2-21eb-4873-b623-14126d55a7f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "81bb0467-f2f9-4844-bbe1-16d7ff985f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bd6dfca-8328-453f-acbe-a170f241e694",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e49d25-3ade-4ef4-954c-99fe1e5c8eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e623b6e-ad08-45d2-94dd-3f91a639c351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "601b2da5-6277-47d3-9f48-48d5745c32c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f2b488e-9a26-4afd-913d-5b49c6d0e5ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc386d4-1bc3-4088-9f54-e96ccd3d4db6",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05bd9274-9f30-4c48-8354-b682de7a5ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14688434-7b04-4de0-a6fd-88f146d9ba9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cb52936-1358-4627-b507-ffd1062b8fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e580d73-afd2-40b9-a46d-e79e40c2537b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5a41719-312a-440a-9541-145bf7c0b69c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a9ef7f-52b7-4a89-b64a-f70b31196663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "528db759-56e1-462a-869e-c8d0fb7269bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a470df5-07a7-4791-ae49-15251ee08bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c68b8c30-4f3e-440e-b91c-b8ab0e16a546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db1e915b-f738-46a5-80b0-51fbc51b53c8",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c0d17d8-f6c8-4399-ad4c-f38ed67d44c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "362bb216-e2e9-475f-bea2-f916256a5726"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f24a3edc-df28-473b-8711-2c23297ed35d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "19441d2f-31cc-4400-9dd4-c8b183e2df89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c1d0b39-c1d7-4f0b-9b5e-1159dd636034",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67bf5b21-6379-4c9f-af37-ddb2521d3ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35f5f954-dd00-4991-a4c4-0b72bc61c203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f025aeac-036e-4a0a-944c-52c309997dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "092cb167-00ea-46b7-98b4-01a8516e4e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2216caf-2df7-4791-9d90-498d0158b9ae",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa032e3e-ef11-451d-b3b1-95c33d377ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0011010e-26d6-4150-8c9b-dd124abb42e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b263ea-aeb4-4a4a-8a0d-c4c6b365e6c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b2de592-cd30-4f7f-931c-896fe7fda594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e81048c-a0b0-46d6-8729-01b9c2326d5e",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cda4aeb3-2bf7-4a43-9812-398afc2a6ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "221fb519-eaaf-44de-89f7-4fa1f8514e5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5a240c1-3e94-46aa-ae95-a8d7751ee636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdf16f89-65a7-4d9d-b4db-ec4ff09d2d20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0d9e988-428a-45e4-847c-ee382711826a",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ab653a-cfaa-4138-80b4-0bccd1c8eab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a8ec89d-cabd-4420-aae7-f2918addb31d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff71a86-4729-41fa-88d0-60405adbf4c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ee15bfe-174a-4a5f-bc79-692ed41dcfa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a07a1a-9e69-496d-a119-b0152dccd81f",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54b0f589-f10c-464f-87ad-663c073a1caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d460b96-4d1f-4e74-b45d-99ac09077dbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e9f88fa-5c98-45df-a652-4fc1427d6361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba0b4279-9788-4fb2-be10-e678764abbb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f79882-4e12-4373-80a1-2a6e1a7a39f9",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f3269b-063e-47d8-8b8b-2d6a2b56d919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd35aba5-776e-4ac6-950a-0da55271efc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c48ab3d-e4c0-4cb8-951d-52073cb361b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "87b7eaa1-51d1-4b76-8d7c-f3bda69f3ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d071d2a3-8e9b-4743-aba0-0fa2be031ac0",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93329710-25b7-4e1f-9040-20848e08a5ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94f036b6-d4df-4565-a99e-47d3b3284660"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f6336d-6065-42ae-a78a-44cbe65cf051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c34215b1-d6e0-4c7e-b199-8351c0204676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed391288-b419-4272-b89d-84af9a683c1b",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91eada94-f2fd-43b9-855a-00701e9c9e13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5efbca3e-fde4-4272-864a-8228a98270ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e432f892-35f0-4d02-80fc-f8ce5b81f6ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c677f8f-f997-4cf5-a099-865f8a0054e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e6f87c9-fb0a-4767-8a90-ba46487a9127",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4283140c-d7bb-41fe-a375-e2bbb8ba6251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bdb872d-ab98-41f9-8870-a4ec6a6ed6d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0cbf1b7-c672-4d28-9e3a-ebd008816ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d66e39dd-89fe-4d23-adee-712a8de49f38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd1e9e7a-6baa-4873-9629-41a5eee2389f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e95b6991-6bcd-4c6b-b769-70bbfb34e1b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ee5af95-5805-47a6-b5af-5d3c5d43421d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7da992-21ae-40cb-bb9b-4f9a7560afcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "347b49b9-4a51-4055-80e4-8f45ca1948f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f04103cd-8eed-48c9-8956-96ca5934b467",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0593c929-1c88-476d-896d-5bca59ae5aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6f3e9d3-bc00-4e1c-b32f-80828fc03466"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96809bf6-df30-4c35-93e0-fbec1a5175fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f45a2a78-3a54-419c-aab7-ce5c36964fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d30751-49fd-4f9c-ba62-657acb288316",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6aa346a-7c60-44a5-b9c3-f878942fb2ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4de2674-2245-44e7-a833-f81cdfbd55e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a2101b3-ae41-467d-b543-e9e775a0649b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "94d76d0c-d685-4df4-93b4-7bc6bfa8f766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee11e71-28ad-43e1-830c-49219576563d",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "490dd9a5-13c7-4518-9781-95cf046dd6e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "20eb7817-71eb-4223-a3f6-819b493d95ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ef7eb1-08fb-4c5a-a47a-eb4edc91cf0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ed193ba-8249-406a-8aba-f6d4eed8a7dc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "641de0e6-9579-4876-aad3-b50f01452bd2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b54646da-a4f9-4f86-93d9-75c8eab13db1",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f9b0d12-daff-4dd7-b7db-6ebb7c401dd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f46d1f1-ad23-4a67-bf6e-6fab7f9ac3cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf4a135-4dff-4118-b417-e1578e42941d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e1db270-edaf-4d6a-b3c0-ce67055eb2f5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cd0adf0a-4ad8-4417-8a37-317ec4967581",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1d9620a8-bc32-491e-ba6e-31867d1eaebd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "567630ab-43a1-443c-90f3-e8f7d961d393",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4dba2101-b1d6-40b1-b6a1-a895eeacf440"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e9653e2d-9fcf-42b1-8786-b88c8b19412f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "32fb72fa-3bde-41b2-9479-042ed8bc0a23"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d2c3171c-b96f-41e9-b69b-bd0c4f91b25d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "181b41d0-c3c3-4199-ac61-caba6f9e3c10"
                }
              }
            ]
          },
          {
            "id": "a52a22fa-0df6-4d14-b3ce-829e1693865f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "203315d0-556a-40b0-b92a-0681004948fd",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "04da0e1d-7973-4a92-9468-bb2c98344ee9",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77a24808-7d35-4916-bc01-60706a5382a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1ead4550-d17d-4e8c-9bea-6953c9565124"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5257cd7-42e0-43b8-92d5-c7189a4421e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e737babd-97fc-4723-9cd0-4fe242b774ca"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "aca493e3-a4e3-4583-9bd4-fc2edd65afc9",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ad171b4-f02e-47bd-ad6d-d3131335589b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d5036807-8ee3-4a59-9d56-70c53ecc70dd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae1336ba-ca28-404f-816c-02ebe23e1316",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d62017c2-0cde-445b-97d6-97cf2be3c835"
                    }
                  }
                ]
              },
              {
                "id": "f39d5beb-9c2e-4f35-ae31-c7a3146393a5",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f1401fb8-c0d9-4fe3-9f4a-0784d6b243ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "37f37f53-7c24-4b57-932c-2771000dfb19"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3197a0e1-a6e5-4c79-a068-f45e0b3bdf16",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "049b9984-bad4-4097-94ac-5e8dfaa236c2"
                    }
                  }
                ]
              },
              {
                "id": "6241d5da-ff67-44ab-bf64-1b8d7d8f1ef7",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe29c126-a0c8-4a99-9eee-09a1227c0e00",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1018f525-0a65-4a32-9e38-6322be9da287"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "42b749be-1a00-424b-94d5-ba914880e7c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a885b714-eb89-48c5-91aa-012d6c76bad8"
                    }
                  }
                ]
              },
              {
                "id": "d5a28d49-74b8-4be9-9aae-35878e3b828b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4c7cbcb0-b634-4240-ba75-8db6c606938e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "28781ee4-ca13-47ec-aa4d-5b308eca899a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "abb4ca62-b7de-45de-815b-818a68dbebb6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "40fe79f6-bd66-472a-a40d-6cba1e75ce15"
                    }
                  }
                ]
              },
              {
                "id": "d24f84b5-5242-4cc7-888d-c48bee555290",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ae7a608-48e3-4647-9fa1-97015cf5ceb1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b30e5fa0-9d08-4cea-9437-c1e3307ccaa5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "068265f5-eb77-4f4f-a266-9f7a6759dd46",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "f38f2e99-8968-4a65-89d7-2ab1d98a607a"
                    }
                  }
                ]
              },
              {
                "id": "ce66657c-9517-4881-b90d-3f51fee9aa91",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f84afe25-4c18-47b4-9be3-93e7210b4635",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e7315b75-064d-40e2-9ef3-e6042487cdc4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "24975a41-59a8-4e1c-a64b-6328c954ee17",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1399b3b0-4e31-444e-8a0a-963270b39ff8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "92070b69-af50-436c-8a95-307aa7871ad9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "627bc8df-eb97-41fc-8acb-0750f39d0ab1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "54f3bc9b-a6de-4e6e-83b5-3caff8bfda13",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f6832505-48db-44c3-a7f6-c71236472689"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "161e0669-7248-4cf3-8191-45acaa765e14",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "e27d58f3-edbf-4bbc-8eea-0b6c0e17e380"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ee2d5595-2a68-4957-aec7-a2a70ca7bd2e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "49b1baa0-4d04-4cbe-8c56-2f4614eafb1f"
            }
          }
        ]
      },
      {
        "id": "7e6d048f-8d8a-4980-886c-048bcbf2fa01",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "f51ec672-4af9-4009-8edb-fe7af5a1cb96",
            "name": "Negative Testing",
            "item": [
              {
                "id": "86cfef7a-035b-4a20-9208-0c905cbb60e2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6f0a3043-95d7-4806-930e-cc5a5aec2831",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada50b1a-e0c3-4c98-8320-3ba4e5b1da7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88a5ed38-8fa2-40c2-87df-ed77d8f11ac9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4663b5a4-b5da-48ee-8186-fe3aa9da8348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "aba4ac7f-ef0e-4170-9f82-07f7f95e7392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37bd15ff-5c54-4c0d-9efd-b8abe69e8318",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "646fac8f-4d18-422e-a89b-f11281184fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dff0eb41-54e4-4ba5-ad77-819f9617c15d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf48c2ba-0b58-436f-b894-237a841374dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eae4ddee-732d-4be1-99b5-b4632530af36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06585b1c-ce3c-45be-86df-6f987a5cd253",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dfdb77f-12a0-4195-818a-cc9e518252f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12de235c-4ad5-40aa-9594-c807a2da5eff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79859351-f208-4f5f-9ced-2944904bf62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bd0ff73-301b-42f5-a36d-0ce753f22c43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22c98891-1536-4877-8972-4b48d731e6a4",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8967f71a-8f9e-43dc-ad14-cb1e97acc555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14548666-6eac-48ff-ab25-57b965a0b4b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "583ea898-d92e-481f-842f-0d4fef451672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "61508685-d08f-4c5f-a6c4-0a7836945cd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f34d55-86c8-41a8-a950-5684f67f507b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21838e2e-a593-458e-b708-07fd96e955f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9851e456-6697-4eed-886b-efeaea4de047"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4adc448b-057f-4f4d-9698-660a92772fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c1108a1-30ec-4de3-9013-a8fd92251e55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de3e2dd-d9f5-47b2-8c7a-d2f6b6676a0b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae217aee-af14-4681-8770-e689263309cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ac5ec15-de51-4b99-8dfb-fdb4eb710f79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4701c72-1ef8-4279-a7ec-aba9429f29ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba1353c3-e6ae-46d4-b7d6-9a839e61c83f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0793edf1-5f10-4082-a5d6-a8a57c4c52c5",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9345e111-190f-4b13-865a-a0b64cd06ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c28fcfb6-405a-43f4-9be3-d7ed200e6b27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4022ca9e-12fc-4318-8a4c-4d5899f97cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c9b08dc-ed72-4e9d-a065-e1a2670cb82a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c580298-6384-448e-8fd6-e81f4f1f7395",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7debac50-a56d-4a26-b662-c73ae81f39e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8119ccf2-b78e-4f40-ad2c-0e37d369524b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "527a4240-e3b5-4c01-8d6f-96eb521bf7e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4fbb67e4-373b-4d50-ad2d-1ff9aea6cca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "726a5ec0-053f-4175-9280-82df8b6bee43",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29c3045c-6e8e-47b3-aa27-9defbc921c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e2c5398-6563-4770-96f1-9017b5b7263b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "110d02e0-2785-4994-ad66-65ca7dd1aba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1e17c73-9dad-4936-9385-d0e2c521e02a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1acd7cbf-355a-4255-bad1-0efbe6de336f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f9469d-970a-49c6-bbc5-59e9a8321700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbc0ed98-efe0-42d1-ac73-b8b7f4bb29fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cc492dd-8787-434e-8d77-f56496cc6db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a088bb88-dd12-476b-aacf-5db56e126dd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adbcfb82-d2f2-49f3-b3d0-1ad32361cd0c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c8f68f-37e6-4414-8d2e-eef54f0c0820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99ff891d-08b3-4303-8794-4da380448610"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25501e70-85e0-48ff-8191-14bf50946b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e649bcd0-596b-46bd-af62-ef0321d35756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d729c5-7550-4c5d-8f30-df9e7ccb0098",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eada4363-490b-413c-95a1-339e09779b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "462fcde0-c5dc-464a-aca2-73cf9a58e3dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6838a793-98e5-4406-aa6a-37115a5a195e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0e1e12a7-cb5c-4c4b-a5c7-6eef8f5ba8be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e176add9-ef90-43b2-a713-e87bfc27ecf9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e899d48d-a3b4-4cfd-b5e9-00da3394b7d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e383f4b9-2ef1-4564-aeb9-bcef83c60b41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9772ac3f-ab5a-4725-a11c-ecaeb5eafbb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "97726356-52ea-4c6b-9e5f-47b2e60a7dd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "358d0683-8c8b-4b9d-8344-19ef387df879",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3347b89e-d36d-429c-b84e-367bd27f6be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f550594-6126-4587-8b19-6d1aa759c557"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a18fc0e3-a4e9-4de2-85a1-1fd319b7a0bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "214ca2e8-35a2-4ef4-a94a-54059a710de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa05a6d-cd98-408a-a43e-37c401f54d2f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c604fe26-e287-4a92-9da9-d9169f30a9ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98c86076-8fa5-4dd8-85cf-18cadc021448"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "120061a6-5c93-436b-a9f1-48e5be6f488a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0427f2f-085f-4c0d-b24c-0b2cd8b2b6ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1f85116-1c9f-4294-ba30-31ea2601ec23",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b96852c0-3438-4f68-a390-d570f35b74a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c65b74a-9983-4231-af5a-81e8d04fbc9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a71b4684-1a46-44da-8a79-e93be3fa1bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b18eccf-4706-4a9c-ac2b-eb96e645dd76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da3a5eac-4d34-4854-8e3e-5749fd884da9",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f415a925-e1e6-4cef-a4bb-6b8d38b23bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4ee9f96-2414-43fb-90de-1bb2faa7ea94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98b6913d-e124-4150-bae7-3287256e3a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e82c8877-f286-4245-977d-aa582a59a3d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03a6c0f5-ec92-4d65-9af3-4a35910a462f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4675b832-ee99-47f4-8d41-c8009c6bbbe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "795aa088-0988-4888-a2e3-8ae9d3c3137f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "339ae4b4-5d52-4ddf-a29e-12f44b7c1110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a36ff7f8-b469-4907-92c8-3ca037795fef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dec719c3-9457-4451-bae6-795eabfc0e02",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34582f56-6913-4a6f-a0f8-1ee9146abf19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39680920-7ef4-4514-98c0-ca90ccb29407"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ace5226d-7e19-4839-940a-65cfc24d060b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f71f60ff-fd86-4d10-b7d4-c4f60a309dca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc0b31c7-15e4-4244-874d-86e64c763077",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f90759-425a-46ff-965a-979fdb22a5cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "519092e3-4bd3-4265-a014-453d92e72e55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4411f089-eada-40a4-892c-067d0568cd25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "12ef9c91-b313-4682-99f7-7c9c8c30b970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e87afae-c4e5-4ae8-9978-2e146570b6d7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a367d0a-a909-4787-bf2f-07412ad1acb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa57ced5-361e-40d0-9931-c8823372d154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee17e88-e0ea-4b38-8e03-4846b05576af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "014942fd-02ed-4ef9-87bc-fee9dc2ef066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a8ffd4-7507-4ac7-99ef-2405f7b44aaf",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40c7a5e6-756d-4b40-915f-152f8a84811a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77a14a75-db78-464b-b4a7-a300059eace2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1670e1e9-23d4-4a5f-8155-eabc578bcf1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c463c3d-0403-41c7-87a0-b3afe9819464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc5f357c-aded-418c-b929-50ea0f0c1069",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2645188f-a8c9-4a8d-9fca-9f99f97b03af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8ec0f19-59e9-4cda-b88a-419bf7a90d61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43059bf3-4169-4966-ab0d-1cadc16f16ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a0c9cd7-7e1d-449c-a18d-0418d3b20312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ce80f28-28d0-4504-945e-1cdf25883e1e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4576d2-d9b1-47bf-93f9-a24f122176ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edabf481-938d-4bb7-a811-7cf9a856a9a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af4fd9e-c7be-42e0-ae49-d775bab81d92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a15fb99-47d3-4836-b3db-b65534b7dcd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bdc4d69-1473-4a98-b7de-2ab46f0649ae",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eed882d-7134-47e1-8aab-a6a5273a85f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73650609-e1d5-4db1-a5de-ab67b75f7f20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa4b88ff-1862-4a8e-8e94-40282f6fc597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc59966f-f9c1-44a5-8ce7-3aba2c71f8f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75b67fd5-c42a-4e2d-a845-1857ab24fff1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd3d8e2d-566a-43fe-9a5c-ad95f9ca0883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "406614d1-a43a-4162-b90d-0bf308db7e64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9900ec06-152f-4d4d-aeca-c1b7b8255533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d5b2ffc-3b32-4f69-bd2e-d564f5331526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6914f3e-efe8-49ef-a676-910546546fbc",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0697f85c-e544-469b-998d-0c54ef8ab2ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e32a76e-a539-4bdf-87a4-e6d95735a12c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cab1144-de01-40e7-ab54-43c923d5b5f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b097d63-b26b-4a4c-9397-9b53db9c0ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3cfcfb9-c44a-4d49-8116-095f61385445",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd897bb6-f51e-4bc3-81d2-5c7f39f34284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0f7a172-3ffc-4a48-9984-f42b34296cfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c5790a-65b0-4e20-8585-3009f917a84f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "801e6df3-20e2-4b88-9d9f-fd2adf64a49e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6283534-98c9-4e49-8722-7f44617f39d1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78540f19-6a2a-464a-ba1d-f7b182c2e900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8782087-d789-473e-8364-1c47542b7bce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aef91c8e-f416-494c-8b67-89d6ca5371d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20a43497-08a0-45bf-907e-ff391c6be525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0923d199-1ec2-486e-9961-ecca2daeb4df",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ccee595-4f15-4a76-baec-3006e401abc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c62084a3-7b9f-4779-9270-d57df11d55dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b711d13-cd2f-4602-a71d-8747b7efb836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b9fb40b-efd2-4919-bbb4-479bbecdd5ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc9996b1-a17e-4dc0-b0a5-7029e228a471",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5821be2e-f502-4ef9-adbb-2f9689c08940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4670833-d451-4399-b537-74e710b87876"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5baaae0-3ffa-4957-9f85-1e8f29c5f87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "298e5496-62ec-420d-aa73-0be47c736937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c602144-5e36-4ed0-8709-8e775f673a13",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f667d549-711c-4012-b33f-fd278b2f0390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1aad71f-e6d3-4b1f-9cc7-4ca4cd5d3a28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfcfa806-0cbc-44c1-90ac-e696db91f6e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9118833f-2c6d-41f6-9a7e-08af03f056d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e1c892-12a8-4af4-9359-8491cfd8099e",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c823a5bd-9c48-4d81-bda1-f2584286b963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73659e3f-e736-4174-8d98-ff4a09c61922"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15daf51c-5fac-4ac9-90ce-b468c3703425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0d27800-d2fb-4a24-8a1b-992ae68dafbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9955f8ed-7a93-4455-acc0-2a6517892065",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a5bf167-2e17-4e4e-a150-e8804bc2b453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "038d7e73-0dd8-40f7-ae19-8e76f89f1002"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e95c7b7-3555-477e-840e-b08e9c42f711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cd02a7c-94ce-4e44-9717-fc8724970439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a614eab-b53e-4ea5-a939-8d38df048f6f",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be1c40c3-8d0b-4602-9e33-2e52602f7930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e97766c8-ad22-48e3-b6e5-c4b35a2fbc81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "904233c5-43d9-4398-961e-2be2355ca730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c70e60f1-11f1-48b1-b88d-7c1d1299c665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcb3639b-10fe-42e3-967a-2bd860005208",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c646879e-18f9-4723-b2e3-0f0ac5f73904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e111a11e-a118-4fff-b7db-0411da321e04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2e1805a-ebea-4fc9-93fb-dfaa0131d869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2eaf29f3-a8e3-4097-9bbf-40750c8d9eae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cf978c9-cce0-4794-ae95-89906ae601bf",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "296737f6-77a3-4fb6-a6aa-0f39b7cf61f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d8e92ea-d1a3-4ab3-9fe4-20c2d8c50104"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80bc0f00-6d2f-48b9-962e-5cd1913db69f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dbd6d50-5a01-46a7-b4d1-83c1b9d197ae"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "903b3211-1204-4afd-a077-9ad616110c1f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c598457e-43f1-4afe-b2a0-c7842cc77574",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df493399-1bec-402f-87ca-65030266eeba",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a2be8d82-f2c1-4c33-a566-da60fa0295fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "379db992-3c31-4d5b-b1bf-34df40dc75e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "839b05ef-d7ce-4d31-af6a-ab8727ae7e7d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d7ff8782-50a8-47a0-aed3-41f40b893dfe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d0eafdf-5004-45bb-8427-6d6afeb31ee6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fd9d409b-0025-4863-8aec-c0686d1b6ac5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "22d3bd9c-95ea-46d1-bf70-823842f332bf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "86c5c24e-49ec-492b-b617-34e621e27634",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cecffafa-c845-4c81-ae98-2565918e0fb9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "88dd2e30-0dff-4d95-94b0-a59e219067aa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0b6498e0-cfc9-4f98-bb91-831da34c005e"
            }
          }
        ]
      },
      {
        "id": "9694fd24-37b7-4e9a-b3b7-4f9303dc63b6",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "111817f9-531f-4403-b1e7-02ca0071011a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f255a2f1-3ebc-4cbb-8f1c-1eb5e436b05e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d4ebbfe0-6730-47ef-923b-edd09088bb4e",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0334c2e9-982f-4751-a982-dce289db83e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10502f73-e498-4eed-a905-cd29be5191db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d47d825-bd5b-491d-b124-bfcea0d95cbc",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67f403ea-fadb-4176-bfab-094c252cc132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a9ac421-d052-4700-b8cc-d54e127f6d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "351cb4ea-9629-4359-8a68-8a6c3c110955",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddd29845-f3e5-4e5d-8c39-cb74f85f0fc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "168012c1-9668-44b9-bd75-239685047f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25c3c393-6762-4342-b72c-a934ea7df65f",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38631e62-5a1c-4809-bd21-079573bc753a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a298db20-a000-4a67-b050-81020a1a65ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a1057f5-3c92-487d-a35c-d13e3073e758",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37ad91b5-8224-4b18-b125-8e9dc4e59025",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2804487a-d7ec-4d06-980b-55f00956fc31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad9be05a-0fdf-47ac-97ad-6f2a4794c7bb",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f5a0b62-d5e4-4ae0-9035-0401708c411f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03ae2677-c7c2-46f3-8f22-cf0f8db494a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f0b75b-c314-45c3-a946-f2def583ca83",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbd2ee12-77d6-4ae1-a6ac-d8df7cfd8c32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "898ed019-879f-4d71-8927-900fc90a4427"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8fd1ba-6267-4612-8e05-3721ee0c219a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be10ab1d-3b87-45ff-b0ce-062f8b69f3c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24816e32-a8f7-41f2-9da1-8fc56b508577",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10069257-17d7-4474-a24b-178fb42a258c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad72da53-5b84-45de-8163-67c5f5b1d2a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1233b489-9411-452a-8328-34b5e2a99251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26c77f3b-4c30-4ca2-a6c7-92425ba9a967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8909262b-c912-427b-a0c2-7d5c1814f315",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c34f2c7c-2e8e-47e9-8886-33680d421883",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7b8d630-0f3d-4c6f-a5db-c6446158b438"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c153fd-5714-4ed4-849c-d977408566b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a32b669-5cfb-470e-b14f-5dbb1badb3ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "994810de-86dc-4990-87f3-40755af65136",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ef824c1-46b5-4a27-9397-953181b6faf7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c616d7eb-a409-4a3f-9ed6-461ccbaa672b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf301735-ff8d-47b9-b2c4-553df4291281",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ceca0b4-9f1c-415a-8736-d00365bb26ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9fb8538-afc1-42f9-b9c4-8984113f4361",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b12414ad-fc7a-4d9d-8530-2dcabf51b5ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5905a0eb-a236-4caa-98c0-47c5b2e7ea36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d6c863-9943-4189-8da4-a1f6a496db51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eec3b9f2-25ad-443d-8268-dc6072f768e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d257357-725b-44ec-8bc2-33e5075755f0",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5540c9-555c-4da0-8857-883f251c2f38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aee140d-d041-4ff7-99aa-011ab7ad91ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3917780b-5ae3-4433-a923-ec77389bc881",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "333e4975-a5bb-4b63-80a8-abaed9b6eeee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "563b57a3-252b-4a89-a51e-0363a69a1aba",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d24da88-7667-40c2-88be-8298ef218923",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b043a96-f90d-4af0-840c-94f765a08a26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82552a34-5939-4eb7-b5aa-c6944e2bb3ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b42617cd-dae2-4852-a6e9-2d5cae2736f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44c15ca4-c53c-4318-b8d9-2b081a2d2e7a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ef2ff11-aa16-499a-8b3c-43853fb90080",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0704582a-0a69-477e-94c9-d602d87b26a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "631ab3af-6fee-4c09-aadd-226d32d1f257",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd79db63-baaf-4abf-9f2e-54649c2413a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "841fe78a-6a9c-4694-8142-29763890bda3",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5969abfa-7b2e-4202-95c7-e2b15a5d0e57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6647bf70-7a1e-4840-8874-7c7a3fc985d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bdb9f2c-0858-4457-a8fc-fedc5a4d9297",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "988b390a-44a6-41dd-9c4b-b960a07407a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8571296-4996-4263-9f0f-e42a8d76e2aa",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "482faa8d-4978-4b26-b00f-91599efc76b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4450a3f-9cc1-4ed5-82c1-d8ef9c79ed34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2429efa1-a2cd-4dc3-82f6-08a2c8cc4c48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e61677cf-be4e-4e32-adcd-ef64dbe14dad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df74285b-d1ef-4820-b2a3-87a93826fe29",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c63fc175-486f-4a73-86d2-b0e648b7287a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df939f64-6d28-4646-a2fd-90bdfba5fc79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e33b168-0c31-4b61-8402-2c481edee3f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78bb1c64-3e34-440b-aa8a-b1ba9ccdf671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "808d9236-0666-4cfa-b741-865e430ac524",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cd41cdb-b287-4c03-b94f-2f508e223943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c87da84b-6e54-4b22-991e-1dfcc1c7b5b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a31c21-1f8e-42bf-a83b-a65b14f0b4c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba427dc3-aafd-4796-9179-eb446c752808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa6cd09-a82d-4043-be0a-2a1b6a7f0cec",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7736cfb9-187c-4ac3-a8e8-6dedc28f89e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a659140-d3f1-4674-9304-10323491642d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30c770c0-7e88-4682-8b2e-71bdb544ae5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad8540e4-1549-4411-b276-8ba68a3e98e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d03607a9-76be-4f54-a553-db4337448e66",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5c21993-1787-4859-bc09-d0f07a61a9a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a7f00ba-4cda-4693-a02b-9e03fd381d25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14de4bc4-56d8-4d21-89c6-cd7b2b20f271",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76fab9b9-95ef-47c8-b133-f8f9413b8368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6054f18-c4d9-401c-837b-02c46779bd79",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a0940c7-e1db-4423-9dbf-ae8f8b804a7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53d88bb7-0e9f-4b78-893c-1bb7d945d54a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c4edfac-7d89-4f1d-b94e-9e1420cc213c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa3f0c97-8114-4b3d-a912-fc0796e44d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdbfc850-ded5-4bb1-8a6f-2faeba4953bf",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc324ccc-94f1-4f64-b106-f8bc8f890b0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37cd70bd-0379-458b-b01f-83d0f1b456b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1df53e86-64f6-4b97-86a6-25fd38af4d5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64bdebe7-6278-43a8-92f2-065c389dfe3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ccdcbbe-be24-44c5-895d-238dcdf79717",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e001253-3002-4205-8cb1-a906c05a1122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a0987a1-5a09-46c0-9352-65f8c04b446e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca76cff5-b6ed-4071-beb2-98e6580c25e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0e3df93-4e2c-462d-b388-e2d176e9094c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e435ce54-93d8-4b43-87cf-588e247c3b0e",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea4bbea4-9fad-4890-b6d5-33608e989332",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c52fbcc7-c65c-4314-8e4e-69a4f6425cb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "440af6d4-01fc-4a03-8c41-c42eb8381819",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f8e90e2-03f7-4c11-b2b1-cc2c4f1f6523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb4d6d7c-8188-46d5-968e-46fc81cb4e8b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1ffa3bb-6eaf-4d28-8552-fd9b1cfe5173",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a40466b-dfb3-41f3-abbf-5182494c4b9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf32008e-01e9-40a2-8bcb-2bc404f8802c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a22b396b-8d57-4414-be05-e9871790b19c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52bddfc1-e15b-401f-b0e5-d8f27e60b062",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65db2e5c-70f4-4c88-bf55-7a772d5102c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efe2614d-27a2-4c06-b2aa-9be126ca3d04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "612604de-f94f-4bf7-9db2-2ef54c2378d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baf0c5c1-3f31-431f-be5b-5d43013659e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "917b78ae-84c3-4478-952c-25e868f6afb0",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5123e3a1-976d-41a2-8103-876e016d0d0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e89d2906-9fe7-4a3f-99e8-69945ea1db30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa85f015-78ef-480d-8d16-f16cf3c4b6e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22ad39d2-fb0c-4aa7-93bb-a0cdbfc16530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd809fcd-cdbd-4957-99b6-c4aa7151a5bc",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56e6410a-4ebf-40bd-b688-1897e392b076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90b93911-5b03-48c0-8c85-3cb77abb05c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b60a7d-4cc8-4ed1-989b-a21caee22404",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec4a7f08-28d1-44f2-978d-7d05b65fe152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d880cf-8fed-46b2-a916-5ffe1a1a1bd2",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7616f7f6-96b5-4d96-a5fb-a4ed3f356901",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd3787c1-2ef9-4975-9a4f-a265abaeb72c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa0976f-5c67-4aae-967a-0e641174ea73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f26507d-ea40-4c9f-84fb-1eb56710c947"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46d88a69-a40c-463f-93a2-e7eb6e92e94a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b4ffc6b-944f-42cb-8615-dcc132f20944",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da4539c8-5121-4173-a374-d0a9064899c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31378c66-4e93-4fff-b307-eeca7dd7b3e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d67c7f7-1646-46e2-a601-f8d89a298864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12ce8360-7a52-43cb-8b3d-d81f6b0cb8cc",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78a67500-411b-421b-9b3c-216203c87825",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e91f885-4840-4f42-befd-4bcccc812876"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d302e584-6d8d-4169-addb-44e656a16fec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5103c43d-0695-4368-b8e3-e65b2e84cfcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e15235a-26dd-449a-93db-ccea1a170d93",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea1cdbe6-c899-4c50-8116-bb7bb8038b08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3863c498-16b5-4305-859d-8519a0844b10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37cc850a-8328-4902-a6ba-c4ef56eff376",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fc318a5-abae-4549-ab65-3c7a367dd3ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd1ee33c-dcce-4fc0-9ffe-8d5495543841",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad116309-3640-43a8-a630-e4073702468c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f793b827-42b0-4c5b-952b-e77710843119"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d9a47e4-1ca6-4052-a876-a64a1c3c856e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d592af78-58a3-4c53-8df0-018f3c8a8d3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cfafb35-4798-42e1-8458-3a5ba74f0f3c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc95ff7d-5e09-4c75-b9a2-957f05d07332",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b9c5a4e-2483-47d2-82d6-150d46f126db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1561a74a-82cc-4a97-af94-d27945a1f58e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c38fdd0a-3185-435e-aaec-6e8d038bdc35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35ee0f1e-2eeb-456c-a581-1ea4611d0298",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61529b66-d285-4106-9d2f-7b1eb5273a18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2ecc430-289a-4bfa-982c-f0ba249b8955"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f3e453b-2366-46fc-b596-b9bf32a79b39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "634b91b6-324e-4249-934a-7c77f0bcfdc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e4eb703-0ece-4c87-8425-1e67119b867f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54ac082-6f9b-435e-82fa-7b952deb3aec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "476051f5-ed6a-427d-85de-61c1d4cce527"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae6ba0e8-bdc4-4b02-8ffa-0926b11d3d10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "674337bb-bcf6-4b2f-ae70-1e26403f8f59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fbdfbc9-d119-4029-a5fe-4f70c9c59d07",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f427b269-f988-4e3c-9bdd-97169f9996d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b7bed96-31cc-4ffd-a5ff-d43c343716a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf8f8454-968c-4e3f-8c0d-1e783c02b1a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fbfd048-4be0-4eca-8058-fa1c1f9d2ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc97c8e-bf39-4266-8993-4d7369a0b31e",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd1367f2-2503-431c-94bf-0c57c15ee93a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fceeaef-38e5-471a-b6ac-3fa5159a9073"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "025d9937-5016-42b9-af0c-5afb53e8e778",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76698284-23a2-4012-80cc-18c03203d562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dcf1eeb-a0fd-4ef6-b886-5f47c9b7e0d2",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "355759a0-d9a5-4978-a7cb-82556dd4f526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90a6d354-de93-4964-b99f-3bf9d83027b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aced2fd-a2cc-4fd3-b79c-ea66f21eb85e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3ab3ee2-8a0f-4f5d-b179-62cde02cd458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "315748f7-f16f-4ecb-b2e4-149b5c83274c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f5a280-0753-4e46-a04c-0dfb7b2149f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beb39b3f-a152-4190-9346-c8844e41dd98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbfe92d4-7db6-474c-9439-29df4458bc74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9217da1c-3b6e-4bf7-9273-1bcf3dbe6868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5faaa1ac-6885-489a-b054-aab1a84d29cc",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a045b155-ee1e-46b3-b759-2c2a9ed28c08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ccd94d2-1a2b-411c-8e1a-6460ee19721b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "466b874d-30bf-4170-be12-e33c8f0b7287",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33e84ed8-5b21-4b8c-9289-039d696ae71c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c86957b5-b16a-4cd1-8e59-defd42f17a63",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c272a79c-4eb2-431f-a2e3-e73a86846311",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bf3d094-3f06-4fa4-ae02-561089d4d1c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b011faa1-74da-4fd2-83ac-74686d5294c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e81c12f-3878-4298-803a-13891e2405c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e720c92f-bd5b-4623-91ab-279778697511",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9259988a-40c0-462e-8457-9c67c80870ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d4cbb95-4054-409a-992f-e9459de7f572"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce6675e9-8965-4c36-b587-f9e95f16f14f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5417ef1-843e-466c-a84f-82f40cbf5c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b225798a-a219-487e-9cf9-eb84b71e39e5",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c74248-75b9-4bfa-9347-3962815e4e4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1989369-f17a-4f08-a536-978fa19eb000"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ab81fce-ae63-4a36-8966-7523f5fa5fa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dd42e82-ed18-4719-9f70-4111bc8c0565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "391318aa-7646-4507-b16d-cca62b2cbbaa",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1308ec63-70e4-4baf-846f-3a550647f4d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebe72cf3-513b-4b9a-ac35-246d253f189e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7021dbec-7856-42d1-971f-eedcf76b24cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd1cc7cd-6295-465c-a51c-08a2a01df67a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a4c9c4b-c475-47c2-90a0-babec7e8e352",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3778045-01e3-4ba7-bea7-918588a12c30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05dacc6c-aba7-4f05-a600-1f3b22d9f2d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a88e4a-c843-4a5c-a598-30f45a1eb807",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46ff7ba3-a2ac-45dc-bd87-aa28068329e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7545c956-59c3-4ce3-a38e-3434c8e64a2e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81226910-430f-4913-bda3-20ae382403e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aa7332e-4e5f-4231-8ee5-94f6183bf96f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a956ad90-b382-4903-9e76-f9ccbb763e4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dbaf2cd-3712-420d-a07c-2f657b677859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5240f87b-c674-472e-8aa8-a622d307f302",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba02b2cb-5b5f-422b-9625-7ab928fbf983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06ca0eea-a235-459b-94be-919aadb1ac14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e540d9d4-c764-422e-9a4b-1466590fc5af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2c98c42-19cd-4077-8677-ed723f9693df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51e6b4f0-ebe5-4542-8531-cdc74ec015f9",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c04fdff-eb72-490f-b585-16f6934281a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37c42f97-5854-4328-97f4-05757cde0adc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "660039ab-18b0-4270-8e31-ac59b0d70ae7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8c63ae6-7931-4a56-86bf-a6fefac6af1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a45d9d5-2c95-438f-b8f8-be9922bf7f8a",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b965cde-255a-40d3-a303-bf4c35d59ca0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b289274-e28b-46dc-8e42-4fc89eac8624"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a89ae0-f628-4329-88fe-977fc183887b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4e4b07e-d4ba-4b52-9823-ac23355d4a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faca4fac-c775-44cc-9e3b-2f10bc887d5b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9094f8b2-68b1-48de-b7be-5416c25d8994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f18d3e90-4016-4272-8df7-b3d99f499104"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b7cb7e4-742b-43d4-a8de-642b4593d78a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a353735d-07da-46c6-92c6-93b8a6f8c9cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adba12b5-3e7a-4049-a39c-6e73af8a1b2d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5feaf491-66d7-4046-bf6e-aa0652e38d5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2f57ff1-11dc-4f55-a6a5-81cdb1cffa05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b0ab0e-b852-42d3-81f1-92bb5d9fdc73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b1451b6-4dd6-4975-b3bd-18c79b194280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2535f91d-4da0-4642-b6a6-2743e045c54c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d29401-20c8-445a-9fff-7a0e7f03d984",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f579f3ab-6e89-4e23-b128-f09cc64ec386"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4407cba2-9af7-4868-a3cb-560abcd1169a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "786dd700-8eff-42f4-8e81-cc16b79564a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b211d15-fb69-4c93-bce9-d6c5a3306153",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95ec42c0-a561-44f8-86f2-b8251afc26d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cc83343-4dae-488f-9860-bd6254149c03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e1476bf-7570-4381-8de2-95b178510fac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "837f6646-8165-4ef2-afeb-9b22ff2969ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "943371e9-637e-4c19-beeb-b87f3cf64388",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70b153b-6da2-42b9-aaab-88311ddebf2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6255661-3654-42e2-a2ca-b4625d8106e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "153efb99-bea8-415f-84a2-a2708376a49a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94154548-9657-4dd1-9114-4fa0dbdba61a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb681af-6daf-4e10-aac7-45fe3701d32e",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d195ee-cadb-4406-aa03-30bf31e19b06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "461bccff-8dc5-41b6-b54e-5d24a93b8042"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3e35ac-9134-42db-b980-a9f609df1079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4ee96ea-8673-403c-a90a-c7e9c659a3d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b3e47e1-303a-4961-b2d2-cdc9f95a4c1f",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "545e53f7-5c78-4211-accb-3abd41904d18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dcdf8b3-ef0f-4b46-ac91-bed41a7ba888"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f00ee27a-e68d-4efc-adeb-c2ae04928303",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "500d6493-e908-47fb-936a-80671567133d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed6c01c8-22af-4487-9571-57872ddf0ba6",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5c1975b-b5c8-47a7-b708-6ea71cf60f41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ded9c3cf-f6b1-4c61-a7da-1a299ec6f2c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2754821b-6ce3-4841-8134-7eba4b5dbfaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f22026e-0f91-4b17-b653-f152ed8eacf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfcbb3aa-bf66-4eee-ad79-8c2e026039e5",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b8c9f41-e245-444f-9224-db11489a92bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "297ac251-96a7-4a02-8efb-b9a6b50cc139"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53ac7197-277b-4f4e-9756-5167ce5c3f3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e5d9bde-4e22-4106-8256-5bd173cae7aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c065c8-979e-4c2d-933e-81435308bd13",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd5c80c-8267-447b-ab5d-99ef50c0d49b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2528e9f9-89d6-40e3-a608-479a66dbf9ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fbab941-84f1-4d70-a240-7116fa614df1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed3e34a8-edd8-4fcd-9516-5b163d6b28f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c712e3f-c33e-41ce-ae72-bc4db53c7b65",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "973ce150-6d8b-42d2-b152-b8ea0e432ad0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5151683f-87fd-4faf-947a-f7306e1c4973"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34087d65-6f55-4f18-9380-d66e809eed22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c319ef20-bd55-40d2-b8d6-773ad0718826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d8f3dc-2be4-4825-8205-cab88dd62886",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2badf09-0755-4e90-bb95-e256a91a9311",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd306386-6f91-4a97-afea-1a8eee03eb4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b5b71d4-66e5-4fb6-9991-1bf6b45ca97a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f46da23c-71eb-4954-8c6e-96a816cc1293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2f04af0-bc43-4f98-bcb8-995323f61153",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab0cd21a-af13-473c-86cd-4255fe83b8ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce1a41fc-ec07-402c-b128-6fb356c8fca5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f04ef80-f7bf-444a-949b-261249130a6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d757279f-1213-4b6d-a1ce-f8ca13eb9c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c133c8-4263-4e95-8307-6f133ab807ae",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a69f8af-e215-4c79-b646-3dbe946650d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3a1a672-de69-4da0-942c-3dbb9b086a10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4a3abaa-9dc9-4916-897c-1ee86cb76423",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "194a2dc3-bad6-4104-b5ad-48885094875f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2644ce17-f3a1-4e36-bdc5-dfbd7473edc3",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc519ce-cfb3-42e2-b64f-49ffc62f2d92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93a2db51-389e-46b2-9f12-9f43b39f440b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "beda7207-d09d-405f-8606-ac2195a80268",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc51cf94-490d-428f-a8ce-5ba7b8c4d418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71fe0332-5a42-4970-8d95-c6c2cafbb7de",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95cc559b-f078-463f-92be-2b76fd994956",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc76e60f-a680-4fdb-8a42-54c9556d2283"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c685bea8-7934-48b3-83e1-0edca3edae3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29536949-a368-41ba-a481-daca285cdd91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce50779-56b4-41c4-9a00-9e9795962ec3",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e629544-8024-4e9e-afbf-8ca8c9375371",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50b86721-a77e-4fa2-a560-fdde4ade1621"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "302c9d20-dbe7-4f8f-b89e-35a7d561f60a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4b0c5b3-7e6f-4186-9078-ea053369486f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e873fc-a72b-49cb-916e-664598c09797",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0168e14-dd39-4a0e-a765-f0e52bd9a889",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b444f1df-1701-4ede-9f9e-c64c5888da18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bcd0479-8d5a-4b01-98b5-aa843e2f3fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a525c20-0d62-476f-90ad-cc6faecb2e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd9c9673-7431-49c2-8b32-87c602d1361a",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe1fe38-23f9-4576-909f-ecc9cee1ecc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e83775a-c424-484e-b7c9-75fc9db82206"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36a8f5cd-14fb-4389-934c-2cd3d2e035af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e267cd44-8fe8-4559-8a3b-398043b75434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "574d54c7-ad04-461d-b57d-ba0acdfceca9",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "333ba7de-0c74-4925-9b89-df65478b186d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e915af7c-2411-45ba-8456-f2ab2773e4e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd7d2a6-ada6-48c2-87ac-608ef6d58efd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb01856f-0525-438c-b2bf-4eb4d99cfacb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd031ad8-f0ff-498c-b614-10fc5e773717",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97683154-318a-4721-b08a-cc69ce1a75b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52aed99b-cba1-4ab5-99de-11789fec14ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db1382d7-fad8-4a07-95a0-fecfa7562afd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8fda0f5-5170-4899-a6f7-7d80d2ada7a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82001160-d05f-4e59-81d9-65646474ca6d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afb5ba06-3ce3-4eed-8c58-d782b391a998",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8175b8f-c1f0-4faf-a013-a1988cf24cce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9329b2cf-54b6-4cec-898c-f47d46c8f204",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed70308d-7c5d-4dd0-95ff-7bc3d123c9c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ca193d-8d4d-40dc-b513-74486f03208e",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59108d57-3029-47ad-9385-f7cb910502b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "103ddeea-b666-404d-a17c-bc93902289db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd058932-ce03-4bc4-b66e-c665ec7a9f1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eed48e61-d515-4f6b-af6e-b6a6ceb7ff4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7173929-acc9-4b07-8cd5-03f61f9fb4fa",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "928c84e6-28b2-4f7b-96b7-9fdc8de3302b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cecf7529-d487-4dd5-96f1-2365c4410bce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64a66b8-265a-414f-8a05-b8a466cd08de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4761868-402c-43c2-9858-37b3c2d7f92a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77ea3370-675c-4987-a081-bd53cc6cee93",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5071ca14-64d6-41fc-a211-05db331839cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a72501ac-69e4-4856-bbef-d7a4dcd59b46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8830537d-6ea7-4641-96ed-68c212224b9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7568f11-8a04-4d4b-8b3f-91e1a55250f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fe7b095-296e-4aa6-bfd9-93926b3cbe5e",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b4cae0c-88ba-4bef-b3f1-378e7e2bee6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23c6352a-308f-428a-bfec-55bddcfd182d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39da3a92-ff2c-412a-bba7-ad0942a88c66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "898eec01-7854-4477-a117-1550e170a946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7740f9c-f29b-4067-a7eb-b136d2774218",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa0bb466-67f1-43b6-876b-1f2755e3b8e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b392f2f-7e45-450a-9c6b-5697a7c9b9d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d17c0c00-a76a-4232-98cb-afc0aa41d7f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26f59f6c-ee88-4b69-a0cd-ee00fc121f53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9385d46-660d-46fe-ace6-7d2216f3014c",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a29a2b97-206f-4f10-ad01-3eedd332838e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9a3b2ec-6949-4a5d-9eb2-c2d2f0042c59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0a9160c-0391-403a-a82d-33317549b909",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aefe03f-6859-4783-a8ae-e36dc408952e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "569b1b88-3779-4457-8ecd-633cf95c6448",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c972a0c0-fc8e-4023-a807-6ea78037d583",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cad3f6d4-e95f-4d25-be17-65ea6f55536e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d8a2ee5-d4e2-4a9f-b9f4-dbbeb91f823e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2212ceb-90e3-4a49-a62f-1259f9b18c94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8071f8a8-ce22-4069-9f4c-4e414b4b3713",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d383be6-c0f2-42ac-ba5a-ad46a91fd6bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b72976dd-fd30-478a-89ee-24f9fec343f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dea60a5-8ea9-4480-913a-6aef89ab6c03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce14c14e-2ab3-43f1-a169-793bd92d64a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "355178e2-a6da-4df5-8fc5-a447e8412c23",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f5e2a09-12cd-4015-b8d7-6c95c43a9b6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cd89147-e8c0-4995-af1d-8f3e091a583c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f418108-db12-4d86-8498-0061f1f11620",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53b2620d-8112-4016-90c7-54b4210f5227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "543816fe-6c7b-47a9-b15b-57f2100dc04a",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a967d3-32c1-45c1-9aac-307e10716860",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f964ce3-442a-4796-9340-e2c304cc8000"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddac2e3c-10cd-4b2e-84ec-13571ea4661e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db761c30-907b-43f1-97e8-0b502c7ef740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af3dc700-ca41-4352-a5a8-3e33696c80d6",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c9a01fe-6b20-4c49-8b89-4f83f42c345c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3b87912-c912-4ce7-925e-b46494082607"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9199abf-2cb6-4799-9872-7dfab3f21c4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "949e20e1-f92f-48cc-91ca-3b5532492084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84f8f976-4de3-47c2-bce0-f372f051edff",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a98e90f-7d54-4daa-8245-4f5800617aad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a0205a2-66e8-4af1-a023-62a77073e219"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9490afb2-3ef0-49c6-9302-eafbf1a495fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7821d83f-fc26-42a7-82f1-1fc8e671cb6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c64db9b-9d20-4f14-9a33-944eec92d029",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "214ada70-4928-4727-bcc5-7b0f6d606edd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "732f4350-316c-496f-adb0-936bff0375be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3914b9f5-e6e0-4d79-ba48-532f9c2df5e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dc4a94b-5b4e-4ab4-b7b9-9f2a578a6a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "033242cc-7cf2-4a60-bdcb-4ddb816db078",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0054ca6-d30f-450a-8587-0918630f6aed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88156aa1-93bc-45c6-8312-5f3616ca43b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c71f4b6b-7204-478e-98bd-a88ecb6086b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0508ac81-2034-47df-abaf-42d389962932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89e0a72c-0a50-4ca9-9f5a-e8f254141809",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cd2cf04-082c-4005-a305-136aa3a9a794",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7bcbbb8-07a5-47a6-80d7-da915afdfc38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d6f966a-8ec8-4cf5-84d2-20c6f4ee28ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ac7029d-29ef-4a15-b8c4-9dbba76ab841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85e4cda4-1908-4fe8-b05d-aae616bba5d7",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55cf332c-1cfd-434b-91b5-d5fe654b082f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b713a290-cd43-4342-8062-a0c418d99325"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49911c13-b562-485d-b4ef-5aed1e4bf49c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70d1e780-feb8-48d5-a122-6302df88f721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f85525c-575e-4d3f-b51f-9c0dd2d9e677",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7072940-8b21-4742-8985-8f7d085389a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79dcc57e-a036-414f-ae31-b2e845d4afe0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be25cfd5-07e8-4254-a2fa-f4d64208e1cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ccf3a57-4768-4877-b8b3-13526f7b7ac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b95d28d4-c440-4996-852f-71fa50d96f88",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd61bea8-ac82-45f7-b4f6-e7a8f8751a4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a361874-10ce-4573-9dc9-cf79c98a1d05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47c8b173-a489-4017-8900-1f2505f61ca0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f741905-3ba8-40ee-b769-f01e2bc681df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ee0cd4-0241-4ca0-8e9c-7b2e23e2d88c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8754386b-d85f-44ba-aa64-0e44080682f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4754a3fa-e635-4507-8413-fabc1f9932ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a024b3-7205-4bc2-bffe-85400c507bc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d256371c-dffd-4d0d-864c-dbc3fe1c1ce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee338b61-45c2-4c01-8ed8-71c255fedac1",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faeacd37-e1c2-48f9-b8e9-ef5d184a2e75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e3ba7bc-7b05-4ad4-a3a4-2f7501368700"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c72ccea-eabe-441d-8234-bb2268d76da6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22276206-feb5-4dfb-b896-989053656c3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1363827b-83ff-4ce4-ae39-165a2ba22cf1",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f7bfa09-36a2-44c9-b0ee-37fa6ca1e7b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2d25d3a-2f4f-44cf-a826-74a43bfcac05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb7d7b84-b9af-4319-bcce-06402a29bcb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e709e9f-cc09-40bd-82e1-9b0be9a5435d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee3ed715-4549-483c-b7be-bb3ff767b927",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c6490f1-8952-4311-aada-9b4490125fa5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "076f9fd9-f3b8-443b-b8f8-49bcee277cfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c836cdd-3ea9-444f-8644-f51515ce66c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f683b66-8aa5-4491-96b6-e174780891df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba3ff509-c56c-4f6e-86dd-bb235016c4e5",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd934b0d-fb65-4b9a-9c8f-57e47ea02629",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5da37735-e813-4fcf-8f11-516c144da069"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b2b251b-451b-4575-8589-e8a2e3cf8d54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73e9efe7-bb42-4466-95af-4133031e775c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f5d34b0-9c70-4de5-961d-2df63c5f2237",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "895e42ef-50f8-4260-9fc5-e76669d7ec60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd1fe571-af0e-4a37-9a38-2efcac42f758"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a8a7719-395f-4de7-ae7e-51fa0c97c623",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f0368d1-1a49-4913-851d-aea4b32086cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10acf8fb-68d6-4955-b761-78f52526d9d6",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "748d2fe9-50ab-4893-99da-55864305401d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6d6baa0-5ac8-46ec-9c8a-e6404005f118"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45f0217b-9ed7-4fff-a651-88d3b8438147",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baadf72e-4431-4899-94a1-5eedda1516bb"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "068d5ef9-45db-4118-8e60-f174a32b472e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0cd86ec8-399e-4533-b167-e9a46e3959b8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d6fa9ff1-a607-4e62-ac50-a015754f627e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f5617fb0-0a3d-4631-abce-2f891883db62"
                    }
                  }
                ]
              },
              {
                "id": "89e949a9-0598-4d15-8513-e174d13f8377",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0c8a93f3-04f4-46de-8af2-d35b65fda8c8",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f127a506-d069-47e0-9544-2375fc19f88d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "bed7a529-a946-486f-b0ac-75ceb123619c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4a0f958-ad07-489c-99cc-4b07ce4e3f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a133e7b-b38c-49fc-a24f-b5ef1536d0dd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27982a1a-0c59-4a0b-b20a-ee414e4e38dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42531b3d-e747-4c5a-a844-4cfa7e089e0e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eca040e6-5c0e-40cd-b84c-12e9e5a4f912",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ac59fef-8e79-4c5e-a62a-982baa333a11"
                    }
                  }
                ]
              },
              {
                "id": "2421615d-3426-4938-8926-6e16376f2431",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "cdde7af5-8623-41d5-9b56-8a32f62ce6c6",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ebda2ff-3463-4bdc-92f5-2b8640c82d4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "0cdf4c68-221f-41fc-aaed-b3389a37a55f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "756b0cba-bdc6-4108-a28e-f776f7678acf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "866ff0ca-e3d4-4be1-b5e4-ee555ad96c49"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "473d74fe-4bae-4a11-8cac-39e8e5e6dd5d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "808abe98-54d5-418e-a231-e7c6e6259546",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "04678047-42bb-4f3c-8764-ffd0abddf42b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d96a86fb-0474-4f0a-9a70-90d59ca85f1b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f9768e2-5234-42c3-af96-31c8fe1ce3c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f3994467-924c-47f0-aaf0-7b9a78ed19b4"
                    }
                  }
                ]
              },
              {
                "id": "ec5faa4d-66c9-44d7-9f50-458da4b35156",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d6f7f71-b02a-4ac0-979f-5a40d204ac3f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ae760c18-58ad-4a6f-b419-d9febcf290b4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aff749c5-0765-446f-96a4-98c2d73cfb7f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3c440a7e-3f9d-48f4-8c4c-978d7ef85432"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ae2f63d3-eb50-4c20-9b10-9366ed8ae7bf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "09d7b270-c7fa-441e-a4ee-ecb22ce235b8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7d1960c8-602e-4b08-9afe-b5eb6a444e7d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "89c5af4f-b7ae-4326-a614-ed77999d8edb"
            }
          }
        ]
      },
      {
        "id": "91e0e0ff-d156-43b7-a64c-6934ccf24e76",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "024ccf4a-4035-4285-8728-128fd4a47e77",
            "name": "Negative Testing",
            "item": [
              {
                "id": "23502e99-6bcb-4aa6-a805-238a82b8ebbd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "16b081da-6d3d-4755-a091-0f965f5ebd71",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a636035e-2847-452f-bb9e-60e13d53c637",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6acc6127-f76e-4663-958a-22691c7d3e5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af406bc-f59e-423b-9a35-6b04eecf8030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f73ba62b-7d79-45a8-aa5e-af89e4aa5cc8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5871f212-ded3-43b9-bb08-5e25d224becc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3612b6b4-d09a-41f8-bc18-0d96e714abfe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a812cc8-3fe8-4aa3-a7e3-4b29e8235a69",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "40e449d9-2f92-4412-840f-836753954d22"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6c9cff0e-6cb7-40ba-85b4-d94d26c36136",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "4f2b290d-a0c3-4f57-9f5b-87946878fa30"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1bda1523-4ffd-46fc-8408-f02f34640756",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2ca90005-6ade-4708-8b2b-bb78286dc1e0"
            }
          }
        ]
      },
      {
        "id": "376b909b-b4cb-47b8-954b-fd409a410245",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "36e15a0b-c5c1-4cd2-8cf1-4033ef0fde06",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8bc7566c-18ee-4055-97e8-928f78cd12a0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d8f7398d-9b1e-4c2a-acac-61bb8664494b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b645c5-2ba8-4f64-b79b-84ff241c51a1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bfc20648-de45-4404-a0b5-37fd064b82aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "773a88bd-2a16-41a3-96ad-c496227998ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48ec0712-4767-4bd4-9770-703e3a61ebf0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a936ec51-3582-4ff9-b6cb-ebc5cc9c6c76",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41119310-874d-4a9e-801e-c9852186ddec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "103277e4-adcd-4627-a4d4-26cd6f4bb0d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56b91a9f-d948-447e-b916-e897991e98de"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b1388c17-cb0b-45ea-8925-9164d1325577",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "18309acd-64f4-4e2b-a454-6200b2f8a84a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4886ba69-9589-41bb-8f3f-83f1631f402a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9c3e7eaa-d0c1-4aa8-b79e-b6c3d20c16c2"
            }
          }
        ]
      },
      {
        "id": "f1f943a6-1e4f-4ecc-8846-c24519fbf614",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "746ef973-d400-4825-841c-b39fd6e72379",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8ab4a327-f5f8-451d-b25d-c82729c234a4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9a12f82b-efa5-4cf4-aea6-ab63dece70ba",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a780fa6-59ac-4fd9-8715-89f54abecf21",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0ca0658a-2024-47e4-b751-bc84e7de40a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "169f993e-c90c-4636-91a6-dee24ec53a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f2213156-f5fa-446b-89b7-1928a230f2ae"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de240419-2a54-4e17-a534-192404addde6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b3cc7d30-3483-4a24-a1ff-0fffb73e13b1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "10019e11-dd6e-46d8-8ff4-082259a87619",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a2eaff4-e220-4d53-9f24-1ca26fe0c89e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "41b9de3f-f424-42c0-acef-f369e6c50228",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cee35a18-9e60-4264-b991-cceabc79bc41"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "616dda7f-7865-4cdd-b00e-cb85e4e4cb0c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ff4acf5d-7c4b-46b4-971d-8cf23d149c05"
            }
          }
        ]
      },
      {
        "id": "bd593de8-450c-40c4-a271-a1580a6b3c45",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ff4929c7-2054-4738-9340-8a0951c2f68a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "23e864d3-105f-47f0-9982-862ff25bcdaa",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b1140f8f-b035-4573-8dcc-6777c5eef670",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6b3c11e7-9bf9-499d-8e3d-2e562a7d846d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "55bd869a-e724-407a-9c6c-85f09961082f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 73.03174603174604,
      "responseMin": 7,
      "responseMax": 681,
      "responseSd": 81.84353408519553,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1715992588308,
      "completed": 1715992615164
    },
    "executions": [
      {
        "id": "d7cdb774-c550-42bc-b0f2-4e64d12e1a69",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ba8e7dd9-59a0-4f68-8ac1-60896435f182",
          "httpRequestId": "76fe177d-5fbb-4237-a306-0dc0799ed389"
        },
        "item": {
          "id": "d7cdb774-c550-42bc-b0f2-4e64d12e1a69",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "3cfd8e84-d079-4836-9715-2718b71c45db",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 0
        }
      },
      {
        "id": "f9e3c0d7-a9c2-4417-b480-6576fd9ed623",
        "cursor": {
          "ref": "b213743d-aef5-4880-a8d7-b6ed7cbe5263",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f371a092-6618-4e42-bc37-98e30c2f1038"
        },
        "item": {
          "id": "f9e3c0d7-a9c2-4417-b480-6576fd9ed623",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "c0dd5107-d434-4960-b3f6-b1414dfbff6b",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "c32141ab-7527-4058-861e-360098ec413b",
        "cursor": {
          "ref": "320fe485-4d28-4333-8d06-56a5f46f85b6",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1d5cb345-51d9-4169-9f5e-651155a76ab8"
        },
        "item": {
          "id": "c32141ab-7527-4058-861e-360098ec413b",
          "name": "did_json"
        },
        "response": {
          "id": "a326c77d-101d-485d-93cf-6769a0cc4d97",
          "status": "OK",
          "code": 200,
          "responseTime": 294,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeac0ae1-11b5-481e-be6e-c2e7971ac2e9",
        "cursor": {
          "ref": "a4d6bdc0-caf6-40a3-a356-db1caa8b8ed2",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b14b2c45-67aa-4e2d-b5c8-1b22fe4c9921"
        },
        "item": {
          "id": "aeac0ae1-11b5-481e-be6e-c2e7971ac2e9",
          "name": "did:invalid"
        },
        "response": {
          "id": "319d3b81-b53c-4ac8-8290-bae649cfa6af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeac0ae1-11b5-481e-be6e-c2e7971ac2e9",
        "cursor": {
          "ref": "a4d6bdc0-caf6-40a3-a356-db1caa8b8ed2",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b14b2c45-67aa-4e2d-b5c8-1b22fe4c9921"
        },
        "item": {
          "id": "aeac0ae1-11b5-481e-be6e-c2e7971ac2e9",
          "name": "did:invalid"
        },
        "response": {
          "id": "319d3b81-b53c-4ac8-8290-bae649cfa6af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71d0dd86-ba3e-4735-80f2-187d47c73b7d",
        "cursor": {
          "ref": "3bd05323-6b5d-41c7-b9f4-69df0258b81f",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9b157b8e-a26c-4ea6-952d-7fad0b87eb67"
        },
        "item": {
          "id": "71d0dd86-ba3e-4735-80f2-187d47c73b7d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "6de03e30-738b-40c7-b62c-3406c9fddf09",
          "status": "Not Found",
          "code": 404,
          "responseTime": 318,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "544cfab1-663c-4a11-ad23-6bf0a33fe02f",
        "cursor": {
          "ref": "883d75b3-73cb-4bb4-bed8-5279754ef05f",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7750e87a-039f-46f5-9c2e-9810182de5f0"
        },
        "item": {
          "id": "544cfab1-663c-4a11-ad23-6bf0a33fe02f",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "90642f88-d93a-412f-9dc4-066458d8878e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 87,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4157c62-6e63-4f02-aea2-56dfbe825466",
        "cursor": {
          "ref": "59aa2772-75ee-4592-bd0a-9db82a94c37f",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8d6e7d01-5da0-4142-95b6-8bc63d940ff0"
        },
        "item": {
          "id": "d4157c62-6e63-4f02-aea2-56dfbe825466",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "69e2dcf0-4159-49e7-8844-298886a82098",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "002e6c3a-b294-4c72-9a5c-b490e2140fcd",
        "cursor": {
          "ref": "c94e886d-ae72-4fa5-b3e9-e54c0262a03c",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "95560cfc-fe7f-4d3e-afa8-1458c0aa7175"
        },
        "item": {
          "id": "002e6c3a-b294-4c72-9a5c-b490e2140fcd",
          "name": "identifiers"
        },
        "response": {
          "id": "dee94b70-0def-43a9-9f4d-91ac793573e4",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07fa5f99-48f9-416c-94a4-4f895d048008",
        "cursor": {
          "ref": "79b4da66-a464-4bce-80b5-2cffd1627396",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4aa008af-041b-4829-898a-0679474bf4ad"
        },
        "item": {
          "id": "07fa5f99-48f9-416c-94a4-4f895d048008",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "434dab44-1a00-4110-8959-4b2b97a8f333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "859d9ccb-11f6-422f-9177-6fbd019b8683",
        "cursor": {
          "ref": "23f2e56d-ceac-4ffe-bbae-0f8d6b50522d",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9c8687ce-4db1-462b-9244-f7493b1b355a"
        },
        "item": {
          "id": "859d9ccb-11f6-422f-9177-6fbd019b8683",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "2743583b-9d77-438e-97f1-e84fb5e0fd4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14aa52d5-b4f7-4423-8ebd-fd6d6f52996f",
        "cursor": {
          "ref": "8856de83-b0c9-4d8c-abe5-4a58310980ca",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "711bb598-b3f6-4adc-bf16-4947afc0ff1d"
        },
        "item": {
          "id": "14aa52d5-b4f7-4423-8ebd-fd6d6f52996f",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f91f0b0b-0efb-488d-b594-5315d673e2e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "261369b9-ffee-44aa-9b9d-9d7032be336d",
        "cursor": {
          "ref": "ed34753c-e511-4499-8d93-a13ccea7da01",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "fd4f77f1-2194-497c-b41b-a87caeda7eaa"
        },
        "item": {
          "id": "261369b9-ffee-44aa-9b9d-9d7032be336d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "493da06a-7777-4829-b5a4-ae59e5596cae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a29ebb9-2687-4c6d-9a50-0fce010a3d73",
        "cursor": {
          "ref": "48e2d0d7-f62a-4a9e-bd45-1a7fa0572b69",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a93b3247-4668-4438-a532-6e37bf49b0af"
        },
        "item": {
          "id": "0a29ebb9-2687-4c6d-9a50-0fce010a3d73",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "373d8638-1318-4c99-96f4-ad813a179445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a481daf-0762-4147-b085-2c87d4157f80",
        "cursor": {
          "ref": "a374a12e-8c88-446a-8bef-064c872d2ded",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3ba44b23-b5b8-40c5-8551-d113dc362da4"
        },
        "item": {
          "id": "8a481daf-0762-4147-b085-2c87d4157f80",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "45dfca2f-8744-48e6-8ab9-d9ddf4e38b98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe33a318-c708-4450-8fb4-dce253653f53",
        "cursor": {
          "ref": "7752cb95-533b-4661-8329-a2d0678a7cc8",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f048f49c-27db-4e92-b6b5-94ba9d316a2e"
        },
        "item": {
          "id": "fe33a318-c708-4450-8fb4-dce253653f53",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "228b4f7e-47a8-4a9d-923f-9aa045f2e424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a89c75d7-9a05-43a2-a8cb-1c2536fa3c48",
        "cursor": {
          "ref": "1faf6420-6081-4848-8af1-c8875e880bd7",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b3f14043-a699-4978-9a80-144b187fe0b1"
        },
        "item": {
          "id": "a89c75d7-9a05-43a2-a8cb-1c2536fa3c48",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "7feb4374-f316-40f2-a60c-adfef91528cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45f2dd4f-6a23-4e9c-8d63-284be8ccf857",
        "cursor": {
          "ref": "12f5f881-82f9-4ca6-b6ed-cfb341fc086f",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "59dd7e48-b011-4df1-a758-ec971901746a"
        },
        "item": {
          "id": "45f2dd4f-6a23-4e9c-8d63-284be8ccf857",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "55a18f2e-f626-4af3-bb49-cd75793491a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "630f4903-bc72-4ff5-a631-e59672c0e7e4",
        "cursor": {
          "ref": "8dc1ddf8-62e0-4bbd-aa31-335ca1420fef",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f797b98a-b034-42fc-a476-2735f4576c7a"
        },
        "item": {
          "id": "630f4903-bc72-4ff5-a631-e59672c0e7e4",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "1141bff9-5890-4322-863e-93aeeeb89184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc8ec52f-8ccf-46d2-9388-2cdd4aa04214",
        "cursor": {
          "ref": "c42c1ac9-dbab-400e-b869-4309d30efce7",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9dac1e18-6c3a-48f6-a449-4945205e37f5"
        },
        "item": {
          "id": "fc8ec52f-8ccf-46d2-9388-2cdd4aa04214",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "479c8e3b-5504-4474-b552-5cb94bdc7333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e181abe-1d0b-4c0f-986e-ab65bb9b85a4",
        "cursor": {
          "ref": "b00705b2-e740-4886-85ba-eef79f1269b3",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "02dfecb8-2a70-442e-9c01-4f25bf352221"
        },
        "item": {
          "id": "9e181abe-1d0b-4c0f-986e-ab65bb9b85a4",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c6961d70-d19d-471f-808e-22bb053dcfdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc401e8e-6a65-4545-b65b-051007c9611e",
        "cursor": {
          "ref": "fc201cc9-9ae5-4e2a-9b63-2447025595a2",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "16a8631d-3c68-4e64-b6f9-2a70eebba36f"
        },
        "item": {
          "id": "bc401e8e-6a65-4545-b65b-051007c9611e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "4fd72352-93a3-41cb-a6e9-3f2af29d6ec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15338da8-ab67-4fcb-bc5b-003a90dfdbfa",
        "cursor": {
          "ref": "0b784b55-e630-47d9-a9db-704d15c165fb",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "fb71292c-5514-45a8-a316-cde6f6833226"
        },
        "item": {
          "id": "15338da8-ab67-4fcb-bc5b-003a90dfdbfa",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "da90c79b-4abe-464b-b06e-de86934d060e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d04e3e6-521a-4eda-8063-f5621fa38d7e",
        "cursor": {
          "ref": "bd5943ab-bed4-4e50-a560-6454890a9f86",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "272be36b-f29e-4e18-b889-84dc29f1fef4"
        },
        "item": {
          "id": "7d04e3e6-521a-4eda-8063-f5621fa38d7e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "c4d83714-7ed3-4378-b060-cd7f230ae774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c52f88e-a84f-429f-973e-e54c0e8f6a2f",
        "cursor": {
          "ref": "9426159e-e244-4cfa-891f-9220255727e2",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0b38f1ca-3b58-430e-975c-1530b12e1587"
        },
        "item": {
          "id": "9c52f88e-a84f-429f-973e-e54c0e8f6a2f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2327b204-52c5-437c-a437-2a8709ae280d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22d636bd-0f20-405b-9560-2a23760a7b7f",
        "cursor": {
          "ref": "b8010175-f09a-4614-a299-0e0d8d135437",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c3f28b87-e550-43ce-b07c-b395e3078b19"
        },
        "item": {
          "id": "22d636bd-0f20-405b-9560-2a23760a7b7f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "5b71fccf-72dd-47a1-86de-62ee0978fe8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f6729d4-c290-4141-b154-ba1b922c7deb",
        "cursor": {
          "ref": "c6486ce3-ead6-45c6-b798-c1769e54a683",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6faf9284-cfdc-4790-b033-b19bf81cd4fc"
        },
        "item": {
          "id": "3f6729d4-c290-4141-b154-ba1b922c7deb",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "3d1845e6-5cbb-4001-8a31-4e4f01f3b2ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e10f02f-491f-4989-b07f-5096fa26faa1",
        "cursor": {
          "ref": "e654d6cb-54d0-4d87-aeaa-31ee260fe591",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "02aaf58d-043a-4fa5-8b93-c27b84b8f0a0"
        },
        "item": {
          "id": "6e10f02f-491f-4989-b07f-5096fa26faa1",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a152ffad-a8cc-416f-9645-42cd300c4b59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d99cd469-7409-4732-be81-33e157ef8e3d",
        "cursor": {
          "ref": "4e5bb47d-e89e-49ed-b78f-c1390a5d98e2",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d0afc26b-080c-4599-93a7-0b31d0d76ace"
        },
        "item": {
          "id": "d99cd469-7409-4732-be81-33e157ef8e3d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "1bdd7f7c-d299-4da7-831d-1a57d660f020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc1babdd-9bb3-4cec-b4d1-f9efc432bd61",
        "cursor": {
          "ref": "7d397d83-ec35-4c89-a6ea-d7ec2f4d05dd",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "5c616298-2d7a-4208-b32b-69e316e526dc"
        },
        "item": {
          "id": "dc1babdd-9bb3-4cec-b4d1-f9efc432bd61",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "960f519c-629f-4c17-b734-7476caf14ea0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ede1115c-b968-4ec4-a91b-f392e1ad9dc7",
        "cursor": {
          "ref": "00ed80a6-1483-4539-aa94-30c85ce4908f",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "2e89bd69-c733-453d-839d-b4139c06c8f6"
        },
        "item": {
          "id": "ede1115c-b968-4ec4-a91b-f392e1ad9dc7",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "070cb6c4-babc-484b-8ae6-6b8a9e6d05d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59bd6fc8-0c03-4c5a-828d-866108723a4a",
        "cursor": {
          "ref": "c350815c-ac94-4ad9-84f8-e21495298af6",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "01bedf90-06c1-432d-b6fa-417990b89bc8"
        },
        "item": {
          "id": "59bd6fc8-0c03-4c5a-828d-866108723a4a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c5db54bf-2e7d-48b5-9621-cedda8012633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "009902cd-246b-45d4-a88d-0e9a73580898",
        "cursor": {
          "ref": "819046d3-ccb2-4631-91ef-76390afeb9da",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "dd93f42c-0019-4089-a3eb-d293af319bb3"
        },
        "item": {
          "id": "009902cd-246b-45d4-a88d-0e9a73580898",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "9f97b9b6-9f3d-4e92-9635-68f8e5a43c01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f66062a7-f609-4ad8-b514-63d94058ce9f",
        "cursor": {
          "ref": "9c90a217-6052-43b5-ad96-1666ed65affc",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "7dcabd2f-1ba8-4b8a-b193-5a72e841b44d"
        },
        "item": {
          "id": "f66062a7-f609-4ad8-b514-63d94058ce9f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "11d695c8-9995-491d-ad37-6dca85de12a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf97174-e006-47b6-9fb1-7fe6c5c794e0",
        "cursor": {
          "ref": "76b936ed-41b8-4604-97ee-d9d50f70e746",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "1bf2309e-22a3-4563-a81d-87c748675e4c"
        },
        "item": {
          "id": "7cf97174-e006-47b6-9fb1-7fe6c5c794e0",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "c78d32b1-699b-4f2f-8b12-0edf8191525f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "075db06f-378a-48a3-a6ec-e4d704f7e854",
        "cursor": {
          "ref": "a5ae9467-8a99-40e1-bd9e-19e70197aff3",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c4237591-be01-40a4-a6e1-4a97d2198cfd"
        },
        "item": {
          "id": "075db06f-378a-48a3-a6ec-e4d704f7e854",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "52418d20-4767-4bca-9af9-d21d0fbbf766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3002968d-9a54-4246-b3d6-d8caebc72101",
        "cursor": {
          "ref": "dbdd8756-1215-4c87-8fc9-5f4145a197d0",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "be44f1cf-8561-4909-9c37-3fb24677846b"
        },
        "item": {
          "id": "3002968d-9a54-4246-b3d6-d8caebc72101",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "5bb0ca7e-8aff-41d6-8741-9d7c30927eac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13fa223f-4868-4973-aaa3-98bde6a7678c",
        "cursor": {
          "ref": "6b49e47e-ad88-4781-80d4-2d6d3b907fc4",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "495ce3db-6bf1-4b99-b29d-5c93fd8b4331"
        },
        "item": {
          "id": "13fa223f-4868-4973-aaa3-98bde6a7678c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "a7776c41-6afa-4dde-9490-70dae038ad3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ba9039c-c35f-4c33-9fca-d98cbc97be64",
        "cursor": {
          "ref": "e7f656f2-a09c-40f0-92e2-ee929821333c",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "adea5651-18d2-4572-80c4-52844a0af8a7"
        },
        "item": {
          "id": "4ba9039c-c35f-4c33-9fca-d98cbc97be64",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "34faf1cd-0118-452c-abb4-3a8d9c8877fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "444f2807-986f-4822-8d5e-507cbb46187a",
        "cursor": {
          "ref": "d4676791-ecff-47dc-b676-7b6601323716",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b25a0bbc-66c6-4f7a-91f9-67b5c9a56d61"
        },
        "item": {
          "id": "444f2807-986f-4822-8d5e-507cbb46187a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "98f0717c-e729-4d92-857b-91d1879fdba4",
          "status": "Created",
          "code": 201,
          "responseTime": 681,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "cc2ad08b-bc53-4a6d-b001-490f92b379ad",
        "cursor": {
          "ref": "f1e01751-786b-49bd-826b-591a8b9236b7",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "bd145dda-219b-4577-9670-913b7421d0a3"
        },
        "item": {
          "id": "cc2ad08b-bc53-4a6d-b001-490f92b379ad",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "21a5893d-b006-4e73-915e-f3a4bb80a425",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "57b994e9-c691-4e14-b272-e8d185394cee",
        "cursor": {
          "ref": "f797e650-a2a1-4746-be24-b9fd3e43e945",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a1738d66-86bb-4624-b516-28ffe39c07e8"
        },
        "item": {
          "id": "57b994e9-c691-4e14-b272-e8d185394cee",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f2e4eabf-0209-4362-9542-0c9726b56d75",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "d8cf51a7-47f4-4c36-a321-1e9a7d9e56fc",
        "cursor": {
          "ref": "1489cebb-123e-485e-a869-6369f9131eb0",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a500c7f5-6ff1-420d-952b-ddf34ece5cbc"
        },
        "item": {
          "id": "d8cf51a7-47f4-4c36-a321-1e9a7d9e56fc",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "2f125b9f-7a91-4fcb-9011-06093b27074a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba19726e-9b80-4ff9-9ff2-9d8edbb479b7",
        "cursor": {
          "ref": "e0f769d1-cbae-4407-a5ab-eb5ced749432",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c9f94826-3058-4ed1-9949-2365dd4aae79"
        },
        "item": {
          "id": "ba19726e-9b80-4ff9-9ff2-9d8edbb479b7",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "04bbfe8f-3500-42e6-8769-b1f493275253",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "04602023-a47b-4be1-9801-8b6df0155bc2",
        "cursor": {
          "ref": "c4355347-ecc6-4415-a99b-5dedc984b946",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "67f32ff2-9e0b-4960-9075-3a25615fd530"
        },
        "item": {
          "id": "04602023-a47b-4be1-9801-8b6df0155bc2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5c26478f-5634-485c-a58a-e5cfe0ba68b9",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "aead98a7-b925-4fca-9f3a-5c2c186d1062",
        "cursor": {
          "ref": "16935b26-4bf8-495c-9df6-d73de28cd158",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "aab0aeb3-8729-4d87-b9cd-1bcc16ca2f07"
        },
        "item": {
          "id": "aead98a7-b925-4fca-9f3a-5c2c186d1062",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "642f5f78-20f8-4be2-96dc-cbc4a5265934",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "93311525-c2b9-4457-966a-1d144f47d545",
        "cursor": {
          "ref": "581017f0-bd5e-4459-9db6-40981c7d1382",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "898adf0c-8877-47d2-8e46-237ce7f5007e"
        },
        "item": {
          "id": "93311525-c2b9-4457-966a-1d144f47d545",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "964375ad-f743-4ad1-807e-98cfbc5d9e40",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "c70fe590-580a-4f1e-8e85-4d0fad5a6f18",
        "cursor": {
          "ref": "2c2a4732-00a7-42c8-81fe-f6490ff9f2b1",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1a4eaeab-086f-418a-80a1-d7c1731fb669"
        },
        "item": {
          "id": "c70fe590-580a-4f1e-8e85-4d0fad5a6f18",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0a788a8f-d7da-446f-9778-fa26c8843baf",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "76507b96-89ad-4eda-9a13-7c67770396b2",
        "cursor": {
          "ref": "e70db121-d3d9-4dea-b235-dd3882a06d25",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "34a2cf0c-2018-4be6-a6a6-89855550b96e"
        },
        "item": {
          "id": "76507b96-89ad-4eda-9a13-7c67770396b2",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "3c192ea7-2342-4cfa-bd94-27149268e70a",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "70265988-4616-4f0f-81ad-7cdde371278a",
        "cursor": {
          "ref": "fc564da5-86e6-4585-9fe4-6d4f18165001",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "38769b16-29b4-4d3c-b1e1-5a661f088f48"
        },
        "item": {
          "id": "70265988-4616-4f0f-81ad-7cdde371278a",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "4c3ddce9-6d97-4fe6-a094-468fd5e40b46",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "d2a8c8d5-f415-4484-85ea-a7391edf3416",
        "cursor": {
          "ref": "99cafe7a-8c21-4e27-98b8-ea98858b625a",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "12c92922-46cd-46fb-88fa-e426880b8574"
        },
        "item": {
          "id": "d2a8c8d5-f415-4484-85ea-a7391edf3416",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "43482b61-4e5a-48ea-ae61-d369fdf564e4",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "6f1b9270-b374-4ae2-9b15-95a59eabda19",
        "cursor": {
          "ref": "d78dbabd-160a-4b89-9786-9e877eb89923",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d1677780-afc7-448e-88db-16737acda1e5"
        },
        "item": {
          "id": "6f1b9270-b374-4ae2-9b15-95a59eabda19",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f4dba1b9-2467-4f20-b4b9-2103e539429a",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "e4ed7542-f1a1-4b17-b30b-eba1930c126b",
        "cursor": {
          "ref": "a0eb7c4c-1ebe-4441-9b3d-a7d0cffd4b48",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "6b1d1711-d50e-438c-856f-129b4c04250c"
        },
        "item": {
          "id": "e4ed7542-f1a1-4b17-b30b-eba1930c126b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "eaf0d96b-0a9c-4f02-8c08-f77d9d046265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "504085a6-316b-47c9-89d2-b08b21cf49fa",
        "cursor": {
          "ref": "bf8472c1-3c4c-4f2a-9721-ba9bfc5cafc8",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "96d5a0e2-1cc6-4a0b-b2cd-27ffe482b608"
        },
        "item": {
          "id": "504085a6-316b-47c9-89d2-b08b21cf49fa",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "f28900f4-3ffc-47e6-931e-ac24ffe1eb8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3d7203c-731a-4513-aa90-037d283f2963",
        "cursor": {
          "ref": "68c6befe-8c39-432d-a0b3-57fc791ffbd8",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "271b8639-ef2f-4610-aeed-766468a43cb8"
        },
        "item": {
          "id": "e3d7203c-731a-4513-aa90-037d283f2963",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "379a050f-d149-4c74-8575-3dd4f1606a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c5d1986-9237-4965-adc6-28f758437b58",
        "cursor": {
          "ref": "e5ce74f3-8255-4243-9812-3468f1dbd9a1",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f1dd0776-a11d-4a14-b347-59e81975aa97"
        },
        "item": {
          "id": "0c5d1986-9237-4965-adc6-28f758437b58",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "0bb53ae7-8250-41bf-b81b-c77135ecda93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eced57a-01a4-4778-8c30-4a1ceb70e692",
        "cursor": {
          "ref": "6fee3146-e60b-4e85-a6f6-7341ca59e045",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3bf216bb-137b-4910-9c98-f76d36d9380c"
        },
        "item": {
          "id": "4eced57a-01a4-4778-8c30-4a1ceb70e692",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "8d44a4e5-9ad5-42af-92aa-1ca6c92f102b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75cf9d8a-d644-4057-9bbf-73dcd8001ef3",
        "cursor": {
          "ref": "84befc76-6dd2-4a43-a54f-90b6c17bbf29",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d19f0883-a8b8-4b08-8e55-0d1008a42c87"
        },
        "item": {
          "id": "75cf9d8a-d644-4057-9bbf-73dcd8001ef3",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "4cb5a1b0-4295-47d7-8ed0-f8b42ba1fdd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "262b04ad-b9a5-4602-8821-b7aa16410352",
        "cursor": {
          "ref": "755023de-6671-42de-a60d-69dc10994a1f",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "84b7479c-04f1-4510-bf67-ee2766e9c2dc"
        },
        "item": {
          "id": "262b04ad-b9a5-4602-8821-b7aa16410352",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "fb6eb045-13d5-472d-b5e9-4af85a471e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7262de6f-a6b5-4f03-af93-e433902800c7",
        "cursor": {
          "ref": "0a736699-b089-43d5-bd88-b7d6f7e973a9",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "14bdee2c-d742-4afc-8314-c36535229ed3"
        },
        "item": {
          "id": "7262de6f-a6b5-4f03-af93-e433902800c7",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "977a782f-2e79-4b72-b820-1bc0c1432e20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3000d435-9653-4a99-87b0-ab89e263f81a",
        "cursor": {
          "ref": "9db5ecf5-c2a4-4e1a-9fa5-9dd10cbcf668",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b5e3a3bf-3bf7-40aa-aabc-c0488ea89593"
        },
        "item": {
          "id": "3000d435-9653-4a99-87b0-ab89e263f81a",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "c82a92f7-5cbb-4629-89da-9f363cd22eaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "572350b0-8ff1-408c-8e6f-5e5ed1fb88d0",
        "cursor": {
          "ref": "608b9765-567b-4cc4-9bba-766cf4671b2e",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "4fb80085-7ea9-48d5-a5d8-6ecf064eda4e"
        },
        "item": {
          "id": "572350b0-8ff1-408c-8e6f-5e5ed1fb88d0",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "baeb5f0f-3bcc-4955-80b4-0fa0eefcc8b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e924cdc-ee5f-4e9b-99c5-6fbe026a7a1c",
        "cursor": {
          "ref": "2d1cf235-dcd5-4ac0-812c-a5eda638c755",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8cc35007-9bbb-47cb-925e-18bfec710a65"
        },
        "item": {
          "id": "3e924cdc-ee5f-4e9b-99c5-6fbe026a7a1c",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a4fb8a1d-4bd2-4dc9-90a7-0c27e6e1a8c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d37d30b-1376-4e68-a25e-e17e4d479084",
        "cursor": {
          "ref": "ee066fc8-e7ab-435a-b1ef-f1db95961e7a",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "270227b3-e4f8-426f-8046-7ae361f9331e"
        },
        "item": {
          "id": "1d37d30b-1376-4e68-a25e-e17e4d479084",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "1964bbe7-0067-4ae5-bec4-b8644be07203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc404143-ef81-4bdb-90ef-4ae0a857f1b4",
        "cursor": {
          "ref": "fbae0b03-7aba-4203-9e91-ed55e0a79e6b",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "1d1bd62d-18f3-4274-a0a4-68db8f5c491d"
        },
        "item": {
          "id": "cc404143-ef81-4bdb-90ef-4ae0a857f1b4",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "9008763d-961b-4203-aa5a-e4cccf207b97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63c514dd-8412-4f10-ac68-ed45346f425a",
        "cursor": {
          "ref": "987d6ef6-e506-429e-b9d7-4b7c3dd9675f",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "256d49ae-7f83-4a38-a9f3-836b41352339"
        },
        "item": {
          "id": "63c514dd-8412-4f10-ac68-ed45346f425a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "b933205c-75a0-4d82-af73-e226b09362df",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "de2a4bca-7415-4be9-ad7a-7eb57358c09e",
        "cursor": {
          "ref": "56a6d93c-797d-4a23-b244-3dc9385c2b08",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "e701a0b5-05e9-4d32-89f7-ef7495f4dfb1"
        },
        "item": {
          "id": "de2a4bca-7415-4be9-ad7a-7eb57358c09e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "18366b26-0dbb-4f8d-b96d-e968a1748b46",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "08e8be2a-adc6-4735-a926-1c97f72d88c2",
        "cursor": {
          "ref": "4ebb9f7f-9e7c-4dba-a3ea-d3891fd3015d",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "cf1ab614-acc2-4e76-a275-a461ae069f84"
        },
        "item": {
          "id": "08e8be2a-adc6-4735-a926-1c97f72d88c2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "559019c4-c741-456f-a574-9c6a508804c3",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "f4bb0edb-61ca-4d05-a060-d7185b1d0bb8",
        "cursor": {
          "ref": "d768f706-e85e-40c9-9aa8-34229635f09d",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "dca59e7c-bcf3-4d06-bb37-f92d3ea04197"
        },
        "item": {
          "id": "f4bb0edb-61ca-4d05-a060-d7185b1d0bb8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7134c9d6-f41a-48c5-b993-94f164b363a4",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "fc7b712b-0426-4ea2-afa5-ea4e93508557",
        "cursor": {
          "ref": "a1af7d98-c238-4c2d-aeee-bcb1f49442d4",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b69337b2-402a-4696-a501-f4591a1a7157"
        },
        "item": {
          "id": "fc7b712b-0426-4ea2-afa5-ea4e93508557",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "b1b1bcd5-0284-4e0f-8e73-272e947495bd",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "c25b712c-4460-4f47-a831-ce971c060271",
        "cursor": {
          "ref": "cd41a95c-033b-457f-900f-491f1a809065",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "4cce93c5-114c-4c4e-855e-e3a935cd5187"
        },
        "item": {
          "id": "c25b712c-4460-4f47-a831-ce971c060271",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6213abf5-b9b8-473c-ac06-86672b8fa3e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0aec0a1-c3ca-4c3e-8ca7-ed33afbf40c2",
        "cursor": {
          "ref": "317f8645-1063-4e2b-9688-081f0bae4cb7",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "03b2d2c9-c7c3-4383-9f77-d0707be32060"
        },
        "item": {
          "id": "f0aec0a1-c3ca-4c3e-8ca7-ed33afbf40c2",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "2e513b76-ff64-43bc-9ded-ea198d4f5bee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e167e3ec-47d7-4795-b679-433796b9cae6",
        "cursor": {
          "ref": "ec207140-5363-4d16-8868-9ec74a9e9826",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "519b4674-4955-4882-a4de-12050451ebc4"
        },
        "item": {
          "id": "e167e3ec-47d7-4795-b679-433796b9cae6",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "5ec8a24e-8cfb-4b37-8e3f-24196c5edab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34d07c79-ab3b-4060-bf2c-5861894872ce",
        "cursor": {
          "ref": "ffe6ef06-d75a-4105-96d7-f5029c85d549",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "2aa23db1-89a0-4b81-afa4-1aa376327123"
        },
        "item": {
          "id": "34d07c79-ab3b-4060-bf2c-5861894872ce",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e0a613cb-8bc0-4eba-864e-42f6edca83d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e090290-ff44-48b1-b2f6-ae5c40e6b8cc",
        "cursor": {
          "ref": "367b23a2-b9df-4254-9b99-6e20c51898ba",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "bea7045f-3cae-4a10-a95a-5227da4dabd7"
        },
        "item": {
          "id": "8e090290-ff44-48b1-b2f6-ae5c40e6b8cc",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9367a802-0a87-4a2c-b962-d62891e036b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d3c02e-97ec-469a-9f4f-09a10d4aea28",
        "cursor": {
          "ref": "8bed46b3-8000-4535-9163-9482523506e8",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "09962154-1ec2-4ac0-a6b5-f54f40378e45"
        },
        "item": {
          "id": "47d3c02e-97ec-469a-9f4f-09a10d4aea28",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "5e2d8e62-ec4b-46a6-8da2-dca86daaf642",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ad00c74-71c9-4562-9994-ee692a0a71ff",
        "cursor": {
          "ref": "d047bb45-7921-453f-8264-79bc81251090",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "504534af-6e04-4eae-bd26-a0bf619d4ce3"
        },
        "item": {
          "id": "3ad00c74-71c9-4562-9994-ee692a0a71ff",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d717d9c2-72f0-42dd-b2ed-02d13b1d11a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b54911c-1edf-4e74-b676-faed54d3ad51",
        "cursor": {
          "ref": "b20acf3d-3206-4f32-b44a-20d8e461bf2c",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d508524d-f5ac-4ecd-b928-389fd2039d57"
        },
        "item": {
          "id": "8b54911c-1edf-4e74-b676-faed54d3ad51",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "73835dbf-9dad-4a16-bbcd-4a424cd4e9cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "099e952d-d252-4b85-b5e3-4a52e4032615",
        "cursor": {
          "ref": "9749547b-3c43-41da-b29b-3e59b0d23393",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "663cf38f-909f-46bf-a37b-f1c640877018"
        },
        "item": {
          "id": "099e952d-d252-4b85-b5e3-4a52e4032615",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "94cdf903-dbfc-4941-9ef6-ab7b47889877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e36f597-cc48-4b30-9c75-089d1eaf0bc7",
        "cursor": {
          "ref": "57e12a1e-5c78-4862-bd96-05f17c670c1e",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "7f144a28-8077-4c0e-b46a-2ed281fba5a2"
        },
        "item": {
          "id": "4e36f597-cc48-4b30-9c75-089d1eaf0bc7",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "13edccc8-6e2b-4e88-9e36-00b7d6d641fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d910d150-6f4b-468a-869d-8a399baf3500",
        "cursor": {
          "ref": "36ca1bae-c2df-4da7-adaf-fd76c329824a",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "2cce90d3-8cd5-41ac-bc39-a6cb7b6d4d38"
        },
        "item": {
          "id": "d910d150-6f4b-468a-869d-8a399baf3500",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "163c3989-4b18-4cbc-a5ec-427f6d27b6b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a0729a-2ed7-4298-8582-5f83e25a3718",
        "cursor": {
          "ref": "105f482d-95e2-4199-8382-98892f36ae94",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "89a886e8-1a7f-4cd4-970e-ce4d91ffe08e"
        },
        "item": {
          "id": "f9a0729a-2ed7-4298-8582-5f83e25a3718",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "87bfd28d-a161-47c6-bfd0-b3f6444e55dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98d59803-56d5-41c7-92ec-21afa511d670",
        "cursor": {
          "ref": "4275b549-7e12-45fc-af76-f3ebcce3e5cf",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "2aff34f9-4db6-462e-8f99-e899da9dfe42"
        },
        "item": {
          "id": "98d59803-56d5-41c7-92ec-21afa511d670",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "3d12cdd2-84f5-4511-8c50-834efa65ff03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09f7b0a9-c930-45a7-a60b-3deb02ddcfd8",
        "cursor": {
          "ref": "d7f7243d-c326-40ec-b1f0-28d642d0b936",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "897a2eab-05ce-4ad5-904c-63798467b559"
        },
        "item": {
          "id": "09f7b0a9-c930-45a7-a60b-3deb02ddcfd8",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "e96c7671-c2a6-49f9-8a67-18b92a6a2b95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bd6dfca-8328-453f-acbe-a170f241e694",
        "cursor": {
          "ref": "a77d5981-62d5-497e-9a79-7a9f06c351d9",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b92b22f6-299a-4e0a-9565-b0dce23e3984"
        },
        "item": {
          "id": "8bd6dfca-8328-453f-acbe-a170f241e694",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d70c0253-cdb5-4036-90c6-ea8f1cbd2f57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cc386d4-1bc3-4088-9f54-e96ccd3d4db6",
        "cursor": {
          "ref": "aae6a1e0-cead-495f-8c06-8c139c478a70",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "f4f245d9-66d2-4ea9-9eb1-68b862cb006c"
        },
        "item": {
          "id": "5cc386d4-1bc3-4088-9f54-e96ccd3d4db6",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ee3858ee-0201-4700-bc6f-5e0db37ea9f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5a41719-312a-440a-9541-145bf7c0b69c",
        "cursor": {
          "ref": "0529bc10-a062-4154-8fd4-ec22471cedb1",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "33a9f0d6-be5f-4017-8355-aa067abce298"
        },
        "item": {
          "id": "f5a41719-312a-440a-9541-145bf7c0b69c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "57aed03c-471a-4cd9-b839-42cadd1dd7cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db1e915b-f738-46a5-80b0-51fbc51b53c8",
        "cursor": {
          "ref": "56ac9661-9770-49a2-b57d-88d3c3da68f1",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "56f6f0ac-1915-4082-a8a2-6c56bf40973a"
        },
        "item": {
          "id": "db1e915b-f738-46a5-80b0-51fbc51b53c8",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "3dd0e4a4-2de6-45a5-949a-0095320308a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c1d0b39-c1d7-4f0b-9b5e-1159dd636034",
        "cursor": {
          "ref": "43551c51-6480-486c-be2f-15ed6f83add5",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a5f3706d-bf2d-4d42-b695-91518559e4f7"
        },
        "item": {
          "id": "5c1d0b39-c1d7-4f0b-9b5e-1159dd636034",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f49051d4-5361-4dfe-a166-08d66b8cac7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2216caf-2df7-4791-9d90-498d0158b9ae",
        "cursor": {
          "ref": "260aeebd-6221-419c-98da-16e94116cae0",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "42cac9ed-bce7-4513-9391-f1b9b5b837f4"
        },
        "item": {
          "id": "a2216caf-2df7-4791-9d90-498d0158b9ae",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "50f9fb7e-12d7-47dd-83a2-a99df7d7eab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e81048c-a0b0-46d6-8729-01b9c2326d5e",
        "cursor": {
          "ref": "37283c3d-156a-4b53-b324-b1de98abb438",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "f64d4c7e-dab3-41c2-8833-6fc9bec2a743"
        },
        "item": {
          "id": "0e81048c-a0b0-46d6-8729-01b9c2326d5e",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6072d91a-eb01-4e25-bd38-bf5fcaea1bc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0d9e988-428a-45e4-847c-ee382711826a",
        "cursor": {
          "ref": "517ca6dc-0906-4a9f-a055-d8b97bac2f82",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "5a17d0af-d9d1-43dc-9a40-a270afdcc9a3"
        },
        "item": {
          "id": "c0d9e988-428a-45e4-847c-ee382711826a",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "a476747a-12dd-4b15-a9de-e094840e45b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a07a1a-9e69-496d-a119-b0152dccd81f",
        "cursor": {
          "ref": "0c363943-a278-413c-a4bb-803cda5998ca",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "b8e0f3f1-5a6c-4ebe-8361-5894465d5bb8"
        },
        "item": {
          "id": "99a07a1a-9e69-496d-a119-b0152dccd81f",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "07da4d67-11f5-48ca-bc15-943888b51073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f79882-4e12-4373-80a1-2a6e1a7a39f9",
        "cursor": {
          "ref": "f0c0b030-9d0a-4324-a6f7-ad27262e2f0a",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f1f37fe6-757b-43fb-b231-80fcd33105fd"
        },
        "item": {
          "id": "59f79882-4e12-4373-80a1-2a6e1a7a39f9",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ef847931-67ae-405d-af8e-9c34eee5cd92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d071d2a3-8e9b-4743-aba0-0fa2be031ac0",
        "cursor": {
          "ref": "75b8f9cb-0ec4-44cb-89ac-002465ec05da",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "74161258-5d40-4bfa-9d10-f6ea027eac9f"
        },
        "item": {
          "id": "d071d2a3-8e9b-4743-aba0-0fa2be031ac0",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a06ca4cc-4525-4065-84ea-85abe2cc25cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed391288-b419-4272-b89d-84af9a683c1b",
        "cursor": {
          "ref": "38a22350-f7cc-4443-bf47-202bc03d7625",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "e2f79ecc-0724-4644-8543-b4ace7196e81"
        },
        "item": {
          "id": "ed391288-b419-4272-b89d-84af9a683c1b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "fbc49466-a337-4aa1-b915-74db9baa4fda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e6f87c9-fb0a-4767-8a90-ba46487a9127",
        "cursor": {
          "ref": "a09d21aa-b20d-4cb4-8fdc-cf89591c079a",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "881d3436-264f-44e0-89e1-0a065dc03424"
        },
        "item": {
          "id": "6e6f87c9-fb0a-4767-8a90-ba46487a9127",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ee6a7556-304b-43b2-bc34-351e3e50f54f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd1e9e7a-6baa-4873-9629-41a5eee2389f",
        "cursor": {
          "ref": "43847b3d-fa70-44b3-a873-b60b76df6038",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "fbbcb74a-c36f-4381-90d9-730ea9896a92"
        },
        "item": {
          "id": "fd1e9e7a-6baa-4873-9629-41a5eee2389f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e15b026e-ddd5-4529-a419-4f53dff232b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f04103cd-8eed-48c9-8956-96ca5934b467",
        "cursor": {
          "ref": "d4d45038-6b53-41eb-b9e1-a839abb310fe",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "db40c9de-2196-4818-9576-ae009642f1d4"
        },
        "item": {
          "id": "f04103cd-8eed-48c9-8956-96ca5934b467",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ed0a2343-c124-4993-972a-4207264f9b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9d30751-49fd-4f9c-ba62-657acb288316",
        "cursor": {
          "ref": "72ea960c-14d1-4b0c-8535-09a4eb5349f2",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "d1ab7f50-52ad-4eeb-b21e-d89f1dafd09e"
        },
        "item": {
          "id": "f9d30751-49fd-4f9c-ba62-657acb288316",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d116ca32-73f2-4b15-aece-98de205a1712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aee11e71-28ad-43e1-830c-49219576563d",
        "cursor": {
          "ref": "10f33c5d-6c42-4830-83e6-428bc48b835a",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "425fec89-98fb-463d-95bb-f26ac6095674"
        },
        "item": {
          "id": "aee11e71-28ad-43e1-830c-49219576563d",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "28bcca2d-fa0e-43a5-af2d-0257b84e1ac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b54646da-a4f9-4f86-93d9-75c8eab13db1",
        "cursor": {
          "ref": "cbb5c54d-9dc0-40e8-88ba-930623ee0e19",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "43d03bf4-65d0-40f0-9ce2-89e008a227ee"
        },
        "item": {
          "id": "b54646da-a4f9-4f86-93d9-75c8eab13db1",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "70b614bf-d04d-48f9-840e-02f380879826",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04da0e1d-7973-4a92-9468-bb2c98344ee9",
        "cursor": {
          "ref": "930f426b-aea0-4f6c-9857-5f3a520b7f39",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "72aaf96d-b660-4a50-bab4-62dc99e10f7d"
        },
        "item": {
          "id": "04da0e1d-7973-4a92-9468-bb2c98344ee9",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "029ae895-3ec6-4fef-8712-9324af703c6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "aca493e3-a4e3-4583-9bd4-fc2edd65afc9",
        "cursor": {
          "ref": "485a3a83-c716-4d5c-ab0f-85b2c34e6d17",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0af3a45d-a731-42ab-aaa3-45793aa27f25"
        },
        "item": {
          "id": "aca493e3-a4e3-4583-9bd4-fc2edd65afc9",
          "name": "credentials_issue"
        },
        "response": {
          "id": "be0ca7c6-c379-4ac0-9e7d-4e3165935662",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f39d5beb-9c2e-4f35-ae31-c7a3146393a5",
        "cursor": {
          "ref": "46f9f0d2-51be-4a98-8321-5a282f632c20",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "8e948f68-6c9e-4bc6-86d2-5b0ca279d7cf"
        },
        "item": {
          "id": "f39d5beb-9c2e-4f35-ae31-c7a3146393a5",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "283d7ecd-c39c-4a09-b2ae-3d62e31589f4",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6241d5da-ff67-44ab-bf64-1b8d7d8f1ef7",
        "cursor": {
          "ref": "e2a232aa-b351-414c-a46e-7d04c032abab",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "07fcbb92-6852-475c-aa91-2f9fab95f97c"
        },
        "item": {
          "id": "6241d5da-ff67-44ab-bf64-1b8d7d8f1ef7",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "3ea0d278-efaa-48cc-9cfb-61de1b160b7a",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5a28d49-74b8-4be9-9aae-35878e3b828b",
        "cursor": {
          "ref": "98eeb90e-ba47-4359-bf0f-73477496ea15",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "3753c953-9612-44f3-8769-dc1afb40e4b4"
        },
        "item": {
          "id": "d5a28d49-74b8-4be9-9aae-35878e3b828b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "0f889a38-108b-4121-b138-bbce7af5a66c",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24f84b5-5242-4cc7-888d-c48bee555290",
        "cursor": {
          "ref": "ffe4bf70-93fa-48f3-bd27-3ed8d1973adc",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e4fa10e5-118f-411d-a637-05dccd410d59"
        },
        "item": {
          "id": "d24f84b5-5242-4cc7-888d-c48bee555290",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "63fbd235-4c91-4623-8152-ad53711b0fcc",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-18T00:36:43.192Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-18T00:36:43.192Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "ce66657c-9517-4881-b90d-3f51fee9aa91",
        "cursor": {
          "ref": "8f89693d-b402-4d8f-9c9e-6cdd2c0f0c35",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "333bd795-7a40-4955-a786-0b730791fcf7"
        },
        "item": {
          "id": "ce66657c-9517-4881-b90d-3f51fee9aa91",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "fad4604d-faa3-44bb-ab8b-0367646910a0",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f0a3043-95d7-4806-930e-cc5a5aec2831",
        "cursor": {
          "ref": "02a4f715-31cf-4120-a4bd-6dc196d04ac0",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "df39b48b-e2f1-42c1-a807-e6ef686f0e76"
        },
        "item": {
          "id": "6f0a3043-95d7-4806-930e-cc5a5aec2831",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5ea87890-611d-40f5-b4d6-9484414da58f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37bd15ff-5c54-4c0d-9efd-b8abe69e8318",
        "cursor": {
          "ref": "d4b71595-8c3a-4414-acbc-f2fb460d97f4",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "02642fde-f292-455e-b77c-de85e4420fc0"
        },
        "item": {
          "id": "37bd15ff-5c54-4c0d-9efd-b8abe69e8318",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "9c6547e6-2e76-4c58-8d00-760732046251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06585b1c-ce3c-45be-86df-6f987a5cd253",
        "cursor": {
          "ref": "08e52bd3-635f-4e33-8eac-d085ac4cd2c4",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ed590ec3-4970-4627-94b4-08d07eb3d415"
        },
        "item": {
          "id": "06585b1c-ce3c-45be-86df-6f987a5cd253",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "74c15fc5-9c15-4aca-bf72-40eaf7b8000c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22c98891-1536-4877-8972-4b48d731e6a4",
        "cursor": {
          "ref": "13211134-5c26-4a57-83d8-c33a5acd21dc",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e2d9b3c8-93f8-4c5c-aaed-d3af5704ad17"
        },
        "item": {
          "id": "22c98891-1536-4877-8972-4b48d731e6a4",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9df26e22-1427-4495-a089-860f3587304f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2f34d55-86c8-41a8-a950-5684f67f507b",
        "cursor": {
          "ref": "f805e582-1262-4b15-90b8-331cdec605b0",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "ede72b21-e98b-4ec4-96fb-6bbba4d4d227"
        },
        "item": {
          "id": "d2f34d55-86c8-41a8-a950-5684f67f507b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5fd9f0f4-3056-40de-b56c-62fad151ad31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2de3e2dd-d9f5-47b2-8c7a-d2f6b6676a0b",
        "cursor": {
          "ref": "c901938f-a8e1-4fa0-a926-6fb77648c582",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "fd4b268b-70d7-4939-ae66-318f2536091f"
        },
        "item": {
          "id": "2de3e2dd-d9f5-47b2-8c7a-d2f6b6676a0b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "072ea67b-f45c-423f-b980-5a070072c293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0793edf1-5f10-4082-a5d6-a8a57c4c52c5",
        "cursor": {
          "ref": "bc95cbbd-b087-4633-9696-e79cd82b4ffc",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "9c2963da-ff5d-4be2-b3f7-8b7910b5fa10"
        },
        "item": {
          "id": "0793edf1-5f10-4082-a5d6-a8a57c4c52c5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "98b51482-47d0-48ad-ac79-697fd1d863f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c580298-6384-448e-8fd6-e81f4f1f7395",
        "cursor": {
          "ref": "fc6bc64b-17b6-4526-a3e1-316de25ac46e",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6a783b16-322d-46a8-aa7a-5bee0be21681"
        },
        "item": {
          "id": "0c580298-6384-448e-8fd6-e81f4f1f7395",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b152331e-36fd-4a70-8ef8-3740042bdbbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "726a5ec0-053f-4175-9280-82df8b6bee43",
        "cursor": {
          "ref": "5b953859-816a-49c6-94b7-79dd02ebda48",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7ea681a8-5805-4b3f-a1d5-07103c7fdc98"
        },
        "item": {
          "id": "726a5ec0-053f-4175-9280-82df8b6bee43",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "48cc0569-6b4a-4a25-a6e5-0189b548a644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1acd7cbf-355a-4255-bad1-0efbe6de336f",
        "cursor": {
          "ref": "78061b1d-559e-40d6-9340-7cac4de0e105",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "119e7bee-4d2d-4f54-b973-564b894e310b"
        },
        "item": {
          "id": "1acd7cbf-355a-4255-bad1-0efbe6de336f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "fa0690eb-842f-4810-acb1-443e2b5ee04f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adbcfb82-d2f2-49f3-b3d0-1ad32361cd0c",
        "cursor": {
          "ref": "32a868aa-f69b-496f-a3ce-435e56121bb5",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "05ebf781-7e40-4cdf-ae2e-46ca1c594670"
        },
        "item": {
          "id": "adbcfb82-d2f2-49f3-b3d0-1ad32361cd0c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "db4b63dd-7622-4a09-96f7-3dcb96ceb9c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59d729c5-7550-4c5d-8f30-df9e7ccb0098",
        "cursor": {
          "ref": "d73635f1-bfe6-488a-96a0-3a26a027c475",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "698e526b-071a-4e59-99c2-5139cd0091d7"
        },
        "item": {
          "id": "59d729c5-7550-4c5d-8f30-df9e7ccb0098",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "75468971-c2b7-427b-8d65-ab20d911a107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e176add9-ef90-43b2-a713-e87bfc27ecf9",
        "cursor": {
          "ref": "2d2ef660-6753-4715-8c06-d76bd5aa1d0c",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "89f039a6-d701-4a41-8949-ca187bcc75cc"
        },
        "item": {
          "id": "e176add9-ef90-43b2-a713-e87bfc27ecf9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0acb434a-f281-4c79-9f01-4781df46c97d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "358d0683-8c8b-4b9d-8344-19ef387df879",
        "cursor": {
          "ref": "0443ce85-3f69-4d3a-99a2-cb584701983a",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "30f20f40-1851-407c-88cd-5b120eb3d3f9"
        },
        "item": {
          "id": "358d0683-8c8b-4b9d-8344-19ef387df879",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "62f696ac-1c93-43d9-833f-7a5bef87470f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "efa05a6d-cd98-408a-a43e-37c401f54d2f",
        "cursor": {
          "ref": "18e83af3-cacc-42f7-b3ce-8ccd20c06062",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "e042706e-0434-470f-bd05-ad0ee55e5681"
        },
        "item": {
          "id": "efa05a6d-cd98-408a-a43e-37c401f54d2f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "8dc66f51-f8d8-4523-bb4e-419be4d4fe25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1f85116-1c9f-4294-ba30-31ea2601ec23",
        "cursor": {
          "ref": "8acbd7d7-f320-45a1-be41-c30d87cb1d17",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f7949d15-399a-465b-883a-2f9e75138e22"
        },
        "item": {
          "id": "b1f85116-1c9f-4294-ba30-31ea2601ec23",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8b3d994c-733b-44fb-853d-ca9d1087f6de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da3a5eac-4d34-4854-8e3e-5749fd884da9",
        "cursor": {
          "ref": "d4aa6464-c3b7-440d-8876-6b15192dae96",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "73189572-dfb9-499d-8918-100c16a3845e"
        },
        "item": {
          "id": "da3a5eac-4d34-4854-8e3e-5749fd884da9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "7aaad19e-443a-41ad-963e-f016642ac6a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03a6c0f5-ec92-4d65-9af3-4a35910a462f",
        "cursor": {
          "ref": "98f3e835-c1f9-4b7f-b8d3-3bd7a6b5903a",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "5f56cdc8-9f59-4fd1-b3dd-b51f66bc6a06"
        },
        "item": {
          "id": "03a6c0f5-ec92-4d65-9af3-4a35910a462f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "dddb234f-b186-4b2c-b9ef-722c9c7fc0b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dec719c3-9457-4451-bae6-795eabfc0e02",
        "cursor": {
          "ref": "b528bdf6-3543-4b0f-9398-23d35958d84f",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c3173b21-7a82-410c-9511-2a615f3f9fd0"
        },
        "item": {
          "id": "dec719c3-9457-4451-bae6-795eabfc0e02",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ab5f61ee-cc80-4b60-a894-ca58bbca918c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc0b31c7-15e4-4244-874d-86e64c763077",
        "cursor": {
          "ref": "0d858360-a793-4eb4-97c9-754b1862e6b3",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b1c7a464-be24-4789-8c85-396005109a25"
        },
        "item": {
          "id": "bc0b31c7-15e4-4244-874d-86e64c763077",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "66b1da37-06c8-4777-9838-303607e77713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e87afae-c4e5-4ae8-9978-2e146570b6d7",
        "cursor": {
          "ref": "5eed49be-46d7-4198-ac4a-46c68088940b",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "4dd8e78b-4f4e-47cd-9faa-287824c00f9f"
        },
        "item": {
          "id": "6e87afae-c4e5-4ae8-9978-2e146570b6d7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "21659def-3131-48c0-bab8-eee11a389f14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24a8ffd4-7507-4ac7-99ef-2405f7b44aaf",
        "cursor": {
          "ref": "aafd128d-e09b-4b76-aeee-4c60a2556751",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "03dcaa38-a44a-4eb1-a5ac-26cee81a878e"
        },
        "item": {
          "id": "24a8ffd4-7507-4ac7-99ef-2405f7b44aaf",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e6b93061-2dcd-484d-9a47-4262b2ada80b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc5f357c-aded-418c-b929-50ea0f0c1069",
        "cursor": {
          "ref": "1f43053b-c3b7-4b50-bf98-885363b09b40",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a3bbaa0a-5160-453f-b546-dab6e8384806"
        },
        "item": {
          "id": "bc5f357c-aded-418c-b929-50ea0f0c1069",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d901c43d-10ef-421d-b4fa-1640810f7a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce80f28-28d0-4504-945e-1cdf25883e1e",
        "cursor": {
          "ref": "90f74cec-e54e-4307-9547-8615578c64e8",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b9e23cf2-52f7-4bdb-8739-47e992ddb718"
        },
        "item": {
          "id": "4ce80f28-28d0-4504-945e-1cdf25883e1e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "468bcb22-7f4b-44e2-ba68-8b0ce3386f30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bdc4d69-1473-4a98-b7de-2ab46f0649ae",
        "cursor": {
          "ref": "f7436e94-33f7-4cfb-b09f-a0b7c2ba275b",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c222b714-ea54-46db-b202-9deb8c633f42"
        },
        "item": {
          "id": "5bdc4d69-1473-4a98-b7de-2ab46f0649ae",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ef6f797b-5bd9-4d73-8d27-10b43e9d4274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75b67fd5-c42a-4e2d-a845-1857ab24fff1",
        "cursor": {
          "ref": "1b75ae5a-01eb-48d4-bc5a-ac1c970c0408",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "68323df7-405d-4afa-8b30-11528ce0968f"
        },
        "item": {
          "id": "75b67fd5-c42a-4e2d-a845-1857ab24fff1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c16d8c21-f463-474d-9cb7-32370bd3f949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6914f3e-efe8-49ef-a676-910546546fbc",
        "cursor": {
          "ref": "5fd96b01-ec2a-4c70-be36-040595ff66f7",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "e008c03d-1f23-4ab9-80d3-b50b8a7d4185"
        },
        "item": {
          "id": "d6914f3e-efe8-49ef-a676-910546546fbc",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "02dd4122-6a4a-466b-829a-e63d864adc2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3cfcfb9-c44a-4d49-8116-095f61385445",
        "cursor": {
          "ref": "4de00d48-e2b2-4124-aa48-68c06b2d676a",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "be7047bc-75c5-477a-bb35-ee555fb9f567"
        },
        "item": {
          "id": "e3cfcfb9-c44a-4d49-8116-095f61385445",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3065f6c6-a7e2-48ee-a670-3e423809279d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6283534-98c9-4e49-8722-7f44617f39d1",
        "cursor": {
          "ref": "9e522211-7368-426f-a8ce-5203611dfade",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "4d740eba-2599-40fe-95bd-47b786b35ac1"
        },
        "item": {
          "id": "c6283534-98c9-4e49-8722-7f44617f39d1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9a5271da-9c94-4615-92bd-b67e9648f1c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0923d199-1ec2-486e-9961-ecca2daeb4df",
        "cursor": {
          "ref": "483ed7d2-34b2-46e9-b3aa-9871fcdbd6bc",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "33b05ec8-2f0c-4514-92b4-71ded108191f"
        },
        "item": {
          "id": "0923d199-1ec2-486e-9961-ecca2daeb4df",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0653fe86-3cbe-4fda-a45a-7594dea2e790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc9996b1-a17e-4dc0-b0a5-7029e228a471",
        "cursor": {
          "ref": "af11c2ba-0da4-49b8-96c9-0c7841e3ab4f",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "8bc309b9-093f-4cfd-a44a-973425971b1d"
        },
        "item": {
          "id": "cc9996b1-a17e-4dc0-b0a5-7029e228a471",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "3058d9b8-9e76-48c3-9750-3dee2b3d68a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c602144-5e36-4ed0-8709-8e775f673a13",
        "cursor": {
          "ref": "85062f90-eb41-460e-af15-03f2e5ff2bdd",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "803c7708-6074-48a5-940a-d8f0c144ae73"
        },
        "item": {
          "id": "7c602144-5e36-4ed0-8709-8e775f673a13",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "f16b3f0d-144c-486e-a56f-bc411f650bcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e1c892-12a8-4af4-9359-8491cfd8099e",
        "cursor": {
          "ref": "fc984243-2461-472b-8637-8b326634e12d",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "5522d578-3c0a-4a1f-9109-3cddb9c957d3"
        },
        "item": {
          "id": "33e1c892-12a8-4af4-9359-8491cfd8099e",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "e41964eb-60ee-4b43-a6ab-b4af3131706f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9955f8ed-7a93-4455-acc0-2a6517892065",
        "cursor": {
          "ref": "949de255-2b5b-4530-ac2c-22832ef59018",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "27f783b4-cfcc-4771-bd63-ab050ad32e04"
        },
        "item": {
          "id": "9955f8ed-7a93-4455-acc0-2a6517892065",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "2c1e50d4-fb97-41de-94c0-1466d8f3200b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a614eab-b53e-4ea5-a939-8d38df048f6f",
        "cursor": {
          "ref": "386aeea3-8284-4268-828d-fd7608fc19a9",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "440ab35c-db16-48dd-a1ec-7132d2acbfe5"
        },
        "item": {
          "id": "2a614eab-b53e-4ea5-a939-8d38df048f6f",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "dcd9557b-bae2-4374-95b3-581b127c877d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcb3639b-10fe-42e3-967a-2bd860005208",
        "cursor": {
          "ref": "efb78dc0-a5d7-46a7-b5a3-9cd643ca523a",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "232c5261-7888-4537-a2c3-dc03213608d4"
        },
        "item": {
          "id": "dcb3639b-10fe-42e3-967a-2bd860005208",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "5b9734f3-0ae4-454f-8897-9c10a00b7bee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cf978c9-cce0-4794-ae95-89906ae601bf",
        "cursor": {
          "ref": "54735cc9-ca5c-4b7b-8e99-4b1184f63704",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2e0df6ca-aaca-42e5-8886-aa551ec7e727"
        },
        "item": {
          "id": "5cf978c9-cce0-4794-ae95-89906ae601bf",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "5e19f6d8-ee0f-42ce-8654-0102c4378ad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c598457e-43f1-4afe-b2a0-c7842cc77574",
        "cursor": {
          "ref": "229cecae-da43-484a-8386-571dacb848b7",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2db07565-2201-4cb7-b22d-170e009c1676"
        },
        "item": {
          "id": "c598457e-43f1-4afe-b2a0-c7842cc77574",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4d62bd7e-5b86-4beb-b8c1-b5e073fe911c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4ebbfe0-6730-47ef-923b-edd09088bb4e",
        "cursor": {
          "ref": "5abe1b62-9ce0-4af6-9b70-3d92b410810f",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "5447f962-2925-4f7a-914d-0c82c7f1b8b5"
        },
        "item": {
          "id": "d4ebbfe0-6730-47ef-923b-edd09088bb4e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ebd41332-814f-48e0-b98a-f200bb9a75fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d47d825-bd5b-491d-b124-bfcea0d95cbc",
        "cursor": {
          "ref": "9441a622-34c8-410f-825f-6e845f115ac3",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "4bba1774-fc8d-49b1-93d0-fa42c0aaf74e"
        },
        "item": {
          "id": "1d47d825-bd5b-491d-b124-bfcea0d95cbc",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d12cb4ce-7abb-453f-8e65-8414a487237a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "351cb4ea-9629-4359-8a68-8a6c3c110955",
        "cursor": {
          "ref": "c2c5f1ca-c315-44c1-82b3-003831f87030",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "1af47ba4-cd59-49b6-9a41-c03ea12e3a1e"
        },
        "item": {
          "id": "351cb4ea-9629-4359-8a68-8a6c3c110955",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "4aa7599f-2744-4eed-8558-37b0c05d2438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25c3c393-6762-4342-b72c-a934ea7df65f",
        "cursor": {
          "ref": "a34aedff-b0a9-4312-af84-74ae599d6c1c",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "3cdf5d18-23bc-410d-9701-fc5e15348540"
        },
        "item": {
          "id": "25c3c393-6762-4342-b72c-a934ea7df65f",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "60b6ca9c-265b-422b-b16f-16d2846f4a01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a1057f5-3c92-487d-a35c-d13e3073e758",
        "cursor": {
          "ref": "a5f2c42d-6e08-4422-b8c2-36b4a93470a2",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "0dff941d-2518-48c4-8677-f495163149ff"
        },
        "item": {
          "id": "1a1057f5-3c92-487d-a35c-d13e3073e758",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "103f7263-8e08-41d4-89d4-983dd9378be5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad9be05a-0fdf-47ac-97ad-6f2a4794c7bb",
        "cursor": {
          "ref": "4c6031b7-f4a9-4a0c-96a0-6fc2c8e187bb",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "83b17ea8-f1c9-45fe-a7dd-6203bf377255"
        },
        "item": {
          "id": "ad9be05a-0fdf-47ac-97ad-6f2a4794c7bb",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "73872429-f969-41e0-9bec-9c113e5c59bf",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "d8f0b75b-c314-45c3-a946-f2def583ca83",
        "cursor": {
          "ref": "7738f454-55a9-4ca7-9d0e-8a7a2aa90353",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "16481df7-aa3f-4b61-a9f9-f7ca4999d8f0"
        },
        "item": {
          "id": "d8f0b75b-c314-45c3-a946-f2def583ca83",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "aca1a14b-4066-4c89-8560-d9f2bd6c2c59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24816e32-a8f7-41f2-9da1-8fc56b508577",
        "cursor": {
          "ref": "4d184f36-c7d0-4007-87d9-6a8c19a15e73",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "cf7f3f1a-87a0-40e6-b6d9-372397dcb071"
        },
        "item": {
          "id": "24816e32-a8f7-41f2-9da1-8fc56b508577",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e999b613-7cf6-4582-8679-ea926048d97d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8909262b-c912-427b-a0c2-7d5c1814f315",
        "cursor": {
          "ref": "298f1ea4-279b-456e-934d-a755540976be",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "3dd9d9d4-2d10-4c4a-802b-e473b6896a54"
        },
        "item": {
          "id": "8909262b-c912-427b-a0c2-7d5c1814f315",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ef14985e-9778-40f2-9b94-6df32d605caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "994810de-86dc-4990-87f3-40755af65136",
        "cursor": {
          "ref": "56fb4296-cfc1-4b83-83bc-d85c22df9f40",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "5666ea1c-4e15-4fd6-ace0-4f0494c149cc"
        },
        "item": {
          "id": "994810de-86dc-4990-87f3-40755af65136",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f6af1c5a-329a-4e76-b38d-a85442d48ca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9fb8538-afc1-42f9-b9c4-8984113f4361",
        "cursor": {
          "ref": "0d83822c-80de-4899-b388-c54c9fae6dca",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "90971ef7-29b4-42ea-af2d-4d64a161de7e"
        },
        "item": {
          "id": "c9fb8538-afc1-42f9-b9c4-8984113f4361",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "53bdee28-54dd-49b4-957a-098428c8a048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d257357-725b-44ec-8bc2-33e5075755f0",
        "cursor": {
          "ref": "af410560-9cff-4e53-b48f-5d6ab33e334d",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "3465dc7e-4541-46d8-b4e3-fe0798dd4ad4"
        },
        "item": {
          "id": "2d257357-725b-44ec-8bc2-33e5075755f0",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f4ec9a9f-7333-42c7-9529-078c7cbc97c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "563b57a3-252b-4a89-a51e-0363a69a1aba",
        "cursor": {
          "ref": "8245c2cb-85f7-40f9-8fae-7b53067f5ffd",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "7909058d-6cf6-4bfc-96f4-b2d7db2d8cb9"
        },
        "item": {
          "id": "563b57a3-252b-4a89-a51e-0363a69a1aba",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "91d5222b-d5f1-42fd-9666-30e335d7adb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44c15ca4-c53c-4318-b8d9-2b081a2d2e7a",
        "cursor": {
          "ref": "1df1a86a-123e-4768-8d69-e3347739e8bc",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "11dd0c62-1570-41e6-9542-cfb0155c3174"
        },
        "item": {
          "id": "44c15ca4-c53c-4318-b8d9-2b081a2d2e7a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "2eb9ef55-9adb-4763-96b1-a6eb7e358779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "841fe78a-6a9c-4694-8142-29763890bda3",
        "cursor": {
          "ref": "6d276790-1829-4535-9a24-621a0b8e275f",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7cd61ae4-e1ba-4692-8518-27ca381d9883"
        },
        "item": {
          "id": "841fe78a-6a9c-4694-8142-29763890bda3",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "f9f95808-389b-4932-ac03-2b324175de89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8571296-4996-4263-9f0f-e42a8d76e2aa",
        "cursor": {
          "ref": "5f7a8262-bb88-45bb-ac01-7bb176ac02cf",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b9db61ef-350f-4ab1-9479-02c7e902b544"
        },
        "item": {
          "id": "b8571296-4996-4263-9f0f-e42a8d76e2aa",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "1e07b475-4ae1-4ff9-b69c-46b9aae3c08b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df74285b-d1ef-4820-b2a3-87a93826fe29",
        "cursor": {
          "ref": "90cccf3a-4d2b-4b56-bbbd-3888418fbff7",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "51814e3d-f75f-4994-81de-324cfde608d3"
        },
        "item": {
          "id": "df74285b-d1ef-4820-b2a3-87a93826fe29",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "cbf51de1-245f-41d1-b60d-c771e9f971d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "808d9236-0666-4cfa-b741-865e430ac524",
        "cursor": {
          "ref": "4c1bb35f-386c-4e3e-be76-fb43b52f2b4f",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "0e7c6b1a-46fc-45db-8b14-c817f8542c8b"
        },
        "item": {
          "id": "808d9236-0666-4cfa-b741-865e430ac524",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8e79d8d5-1c72-4ae7-a701-8c980ed3bc8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fa6cd09-a82d-4043-be0a-2a1b6a7f0cec",
        "cursor": {
          "ref": "8f4be23e-2008-46a7-8af9-a44e7796f3cc",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9aef7125-9703-411d-bbb5-9681caefacb5"
        },
        "item": {
          "id": "6fa6cd09-a82d-4043-be0a-2a1b6a7f0cec",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1b842a33-b4e7-46aa-a73e-b7918dca0225",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d03607a9-76be-4f54-a553-db4337448e66",
        "cursor": {
          "ref": "42dafe73-c035-4915-b332-c779ae3d067e",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "14263f3e-94bb-4d7f-b200-471c161a4d41"
        },
        "item": {
          "id": "d03607a9-76be-4f54-a553-db4337448e66",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "20cbe8a3-089f-4560-96c3-c1b9167c84e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6054f18-c4d9-401c-837b-02c46779bd79",
        "cursor": {
          "ref": "d544a250-136e-462e-986e-80947754f354",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "c8b0d407-7bf7-43cb-b93e-1621a1d0f9b4"
        },
        "item": {
          "id": "e6054f18-c4d9-401c-837b-02c46779bd79",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a7931b37-bdd6-4b03-aa1b-a4c7985d7e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdbfc850-ded5-4bb1-8a6f-2faeba4953bf",
        "cursor": {
          "ref": "499f85dd-5e27-4f1d-a767-1684c9fe430e",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "1b0f3f52-eae1-4ef9-8a1d-14173049e866"
        },
        "item": {
          "id": "fdbfc850-ded5-4bb1-8a6f-2faeba4953bf",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c4fc0dce-b4cd-4ab8-b152-aaab3aa60299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ccdcbbe-be24-44c5-895d-238dcdf79717",
        "cursor": {
          "ref": "d19cb945-e9d9-4595-ac22-88147f8f6df2",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "fdb8f09b-3adc-4180-bbfe-a431e44ba6b6"
        },
        "item": {
          "id": "8ccdcbbe-be24-44c5-895d-238dcdf79717",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "6ccbe7b5-4978-4049-8636-0e01ac9a8640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e435ce54-93d8-4b43-87cf-588e247c3b0e",
        "cursor": {
          "ref": "1ea3382e-797b-4889-adeb-aafe98c72be7",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "16421b81-f606-429e-8391-46deb7346f5b"
        },
        "item": {
          "id": "e435ce54-93d8-4b43-87cf-588e247c3b0e",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "cb4b7a3f-25fb-4d44-b863-4619f52e3800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb4d6d7c-8188-46d5-968e-46fc81cb4e8b",
        "cursor": {
          "ref": "89d73a19-e351-471d-a250-176d30d02922",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "4feda215-dbd9-441c-81c3-0d89230451b7"
        },
        "item": {
          "id": "eb4d6d7c-8188-46d5-968e-46fc81cb4e8b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "61ba19fa-e608-47ff-b695-cf9506ded002",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52bddfc1-e15b-401f-b0e5-d8f27e60b062",
        "cursor": {
          "ref": "1c17c9fc-b424-40a3-9932-2cb529d366ca",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "7a62c59f-d17b-4f9a-9377-d522e634651e"
        },
        "item": {
          "id": "52bddfc1-e15b-401f-b0e5-d8f27e60b062",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "92e96917-d554-4ef0-99c7-200b6ccc28e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "917b78ae-84c3-4478-952c-25e868f6afb0",
        "cursor": {
          "ref": "c368f1f9-8798-4d47-a2bb-49bfa85163f3",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "e47a4b8c-b20b-4fe6-aa19-182d5df16db2"
        },
        "item": {
          "id": "917b78ae-84c3-4478-952c-25e868f6afb0",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "13cce543-b438-459a-a8a8-3fb56a5deb87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd809fcd-cdbd-4957-99b6-c4aa7151a5bc",
        "cursor": {
          "ref": "f674518a-240b-4f73-a738-899052660c1c",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "cc6b7a8c-4d74-496c-bfc1-06bae324013a"
        },
        "item": {
          "id": "bd809fcd-cdbd-4957-99b6-c4aa7151a5bc",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "e2622722-bf08-4c66-a21a-6b1fab7ba0a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3d880cf-8fed-46b2-a916-5ffe1a1a1bd2",
        "cursor": {
          "ref": "a0cecb36-4e7f-44e4-a2d5-457dc9046b85",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "73081f4d-e8bc-4581-9f6d-c436fcccaf0d"
        },
        "item": {
          "id": "f3d880cf-8fed-46b2-a916-5ffe1a1a1bd2",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "497dfa58-6f8d-4aa3-aefd-ed3ce3d0ec2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46d88a69-a40c-463f-93a2-e7eb6e92e94a",
        "cursor": {
          "ref": "70f013ef-7b3e-44ca-abc9-1d315d2bee5e",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "214c67a7-be58-470b-a49d-abd48eba3c82"
        },
        "item": {
          "id": "46d88a69-a40c-463f-93a2-e7eb6e92e94a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f9e9572e-0833-4826-b2b2-18ca66e95306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ce8360-7a52-43cb-8b3d-d81f6b0cb8cc",
        "cursor": {
          "ref": "c9a36311-be21-4544-9513-c64ca15517f6",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "a2d765f5-09e9-490a-95a6-fd46fe20b64d"
        },
        "item": {
          "id": "12ce8360-7a52-43cb-8b3d-d81f6b0cb8cc",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b7913188-81c3-4929-aaa8-e2bc7619bad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e15235a-26dd-449a-93db-ccea1a170d93",
        "cursor": {
          "ref": "d5158d0e-f673-47b3-a28e-3c0acd80a8ed",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e13284e6-23b0-45bb-b905-aa1c0b583203"
        },
        "item": {
          "id": "6e15235a-26dd-449a-93db-ccea1a170d93",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "1ad8288e-ec0f-4f18-b9ce-1d047aa6e0fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd1ee33c-dcce-4fc0-9ffe-8d5495543841",
        "cursor": {
          "ref": "d61b90c3-09f2-4bb4-b2be-0e630cea16ee",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "0c59b128-6660-4e63-8ab8-ff2b575f3630"
        },
        "item": {
          "id": "fd1ee33c-dcce-4fc0-9ffe-8d5495543841",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "0dd249b7-781a-4e26-8af1-10cd5f634a62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cfafb35-4798-42e1-8458-3a5ba74f0f3c",
        "cursor": {
          "ref": "dafa2c00-095e-4e5f-b857-947fdec6c4c0",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "9247d83b-a550-4aad-a45c-80bc08f05584"
        },
        "item": {
          "id": "7cfafb35-4798-42e1-8458-3a5ba74f0f3c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "683f2aca-f9a0-4753-9906-705f13577df0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35ee0f1e-2eeb-456c-a581-1ea4611d0298",
        "cursor": {
          "ref": "92435c22-b680-4011-81f0-27cdb28b3afc",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e85b392a-beb0-403d-b54f-8229424c9dba"
        },
        "item": {
          "id": "35ee0f1e-2eeb-456c-a581-1ea4611d0298",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "aa58be2c-a13f-49cb-9347-e902309a2c12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e4eb703-0ece-4c87-8425-1e67119b867f",
        "cursor": {
          "ref": "a0cbfd65-592f-4693-9d2d-0e59c2cedc15",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "687762fc-1f15-4dc2-805d-66215dd70f65"
        },
        "item": {
          "id": "6e4eb703-0ece-4c87-8425-1e67119b867f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "9eb27f86-37f7-4d73-bf44-6b869e7d7594",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "9fbdfbc9-d119-4029-a5fe-4f70c9c59d07",
        "cursor": {
          "ref": "c15d4bf5-532e-43e3-beb7-295f2a38a82f",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "cc638264-a0db-47ee-985b-fbaf6f32f57f"
        },
        "item": {
          "id": "9fbdfbc9-d119-4029-a5fe-4f70c9c59d07",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "41d240ac-5510-478a-a673-0f0d851e3d63",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "0fc97c8e-bf39-4266-8993-4d7369a0b31e",
        "cursor": {
          "ref": "9569e1a4-458c-420c-a252-d0655efdb3a5",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "145c68d2-9c5b-4e4f-9546-aa16a6501b86"
        },
        "item": {
          "id": "0fc97c8e-bf39-4266-8993-4d7369a0b31e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d2048a49-33a9-4315-995d-1d0510b9c9bf",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "4dcf1eeb-a0fd-4ef6-b886-5f47c9b7e0d2",
        "cursor": {
          "ref": "ed55f91b-117c-47e4-9bec-afd9e001b673",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "a08ec90a-9925-426c-b7b8-29ab02febc68"
        },
        "item": {
          "id": "4dcf1eeb-a0fd-4ef6-b886-5f47c9b7e0d2",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "bd86996b-9645-43e8-963d-f8035ccaf3c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "315748f7-f16f-4ecb-b2e4-149b5c83274c",
        "cursor": {
          "ref": "60d7b2d4-b0dd-41ae-af2a-c3d05ab3c957",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "0030c987-37ef-406a-b119-af9396fd3ca8"
        },
        "item": {
          "id": "315748f7-f16f-4ecb-b2e4-149b5c83274c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6a47b092-0096-4c85-90f9-a68b966fca92",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "5faaa1ac-6885-489a-b054-aab1a84d29cc",
        "cursor": {
          "ref": "106582cf-236c-4af2-8c4b-1702cb245212",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "7a3cb26a-f4e7-4fef-895a-62f60680ed73"
        },
        "item": {
          "id": "5faaa1ac-6885-489a-b054-aab1a84d29cc",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b23aaaee-0a35-463f-b88e-b08be9020a4d",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "c86957b5-b16a-4cd1-8e59-defd42f17a63",
        "cursor": {
          "ref": "6ef0fa76-a3f9-44c6-89bf-9ab8212ba678",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "0fa0127f-ae02-49ee-9460-4ed47b22e1e7"
        },
        "item": {
          "id": "c86957b5-b16a-4cd1-8e59-defd42f17a63",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "5d681e3f-9d52-4966-b2d8-3fc5d25af6d4",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "e720c92f-bd5b-4623-91ab-279778697511",
        "cursor": {
          "ref": "59b28ce3-8030-45e7-bf37-2112fb1ed7d8",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "b1009a37-f9e1-4e09-9739-3366325bbb08"
        },
        "item": {
          "id": "e720c92f-bd5b-4623-91ab-279778697511",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ed374fa0-9b0d-4e16-a017-4a00fc039f0c",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "b225798a-a219-487e-9cf9-eb84b71e39e5",
        "cursor": {
          "ref": "871135b2-9b0d-443e-bd48-5a07b53eeade",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "59900903-58d7-4b72-b40d-563c445d75f8"
        },
        "item": {
          "id": "b225798a-a219-487e-9cf9-eb84b71e39e5",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "fcb0246b-0ffe-4da9-a123-6af718d91540",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "391318aa-7646-4507-b16d-cca62b2cbbaa",
        "cursor": {
          "ref": "828f383f-3053-4afe-9901-e65209279b4f",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "7dbdd6c0-13e5-4a38-8a43-e1b4a67b9886"
        },
        "item": {
          "id": "391318aa-7646-4507-b16d-cca62b2cbbaa",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "9c6ab91d-e8fc-42fc-a31c-e2123ab3b691",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "8a4c9c4b-c475-47c2-90a0-babec7e8e352",
        "cursor": {
          "ref": "10012d21-d049-4484-9e33-4e53001a9478",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "00057744-f02b-4c3b-bba6-ed585234471d"
        },
        "item": {
          "id": "8a4c9c4b-c475-47c2-90a0-babec7e8e352",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "98ba8c81-8ee7-4b96-96af-8e42ca65bcca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7545c956-59c3-4ce3-a38e-3434c8e64a2e",
        "cursor": {
          "ref": "fc24b218-b9e8-42f0-bb9c-5d6d04f35260",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "9ff0a0c7-5cd9-4a97-9233-fcfbb7e021dc"
        },
        "item": {
          "id": "7545c956-59c3-4ce3-a38e-3434c8e64a2e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "0be77742-632c-4d1f-b9f4-a22dee9ad73a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5240f87b-c674-472e-8aa8-a622d307f302",
        "cursor": {
          "ref": "3d3f69b6-5437-4eb4-9330-daeb625187b8",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "3bc0c535-f008-4086-811c-ec9c8b30b17a"
        },
        "item": {
          "id": "5240f87b-c674-472e-8aa8-a622d307f302",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "583516b4-2730-4f34-b3db-c704474c3aa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51e6b4f0-ebe5-4542-8531-cdc74ec015f9",
        "cursor": {
          "ref": "7e1acad5-ab4a-4a77-a57f-777f70f64e36",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "80c915bb-a15b-4ace-86c1-fcff7b1d1ccf"
        },
        "item": {
          "id": "51e6b4f0-ebe5-4542-8531-cdc74ec015f9",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "8b244f49-7e91-425e-a5dc-e4479a0f3c7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a45d9d5-2c95-438f-b8f8-be9922bf7f8a",
        "cursor": {
          "ref": "369776eb-7b4b-4396-b022-7ca2d6943c41",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b640de9d-0604-45d5-aa7f-dc90f2c4ab0c"
        },
        "item": {
          "id": "4a45d9d5-2c95-438f-b8f8-be9922bf7f8a",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "58acb207-58b4-468c-be6a-8c60fdc52f6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faca4fac-c775-44cc-9e3b-2f10bc887d5b",
        "cursor": {
          "ref": "5e148cdd-bcc8-44a3-8a3c-cbe21563beb8",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a0400b90-9229-410d-9673-a13c4b61b804"
        },
        "item": {
          "id": "faca4fac-c775-44cc-9e3b-2f10bc887d5b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ec73096f-b0fa-40d3-ad43-cd4ac573d780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adba12b5-3e7a-4049-a39c-6e73af8a1b2d",
        "cursor": {
          "ref": "be95f980-3fee-4aac-bac3-b4938bce5615",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c2158c3f-cfb4-44d5-aa94-754ab3900cc8"
        },
        "item": {
          "id": "adba12b5-3e7a-4049-a39c-6e73af8a1b2d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "42e00ab3-a8e4-4888-856d-932789485506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2535f91d-4da0-4642-b6a6-2743e045c54c",
        "cursor": {
          "ref": "716a91b6-7d6c-4f86-9586-640cf0641eee",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f6f39383-8fa9-4856-b748-c854bbeb450e"
        },
        "item": {
          "id": "2535f91d-4da0-4642-b6a6-2743e045c54c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "36256095-15e2-4c65-b425-0c69c246f5dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b211d15-fb69-4c93-bce9-d6c5a3306153",
        "cursor": {
          "ref": "a6c3a66a-22b3-465e-bfa1-8cddce0beb34",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "90931286-aaa8-410e-9e12-7c52fb1da687"
        },
        "item": {
          "id": "9b211d15-fb69-4c93-bce9-d6c5a3306153",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "2e8591e8-36e4-43b5-b942-b7d229d06d10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "943371e9-637e-4c19-beeb-b87f3cf64388",
        "cursor": {
          "ref": "a1515db9-5301-488c-a718-d0826bcd417d",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "cf11fe0b-e187-46ab-8957-0064e55d2c92"
        },
        "item": {
          "id": "943371e9-637e-4c19-beeb-b87f3cf64388",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b9c9ead7-fb75-4608-bbbb-e5cd74a3f5e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cb681af-6daf-4e10-aac7-45fe3701d32e",
        "cursor": {
          "ref": "bc4b0b4c-7714-45a7-bf9b-15a9ec6d950e",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "3ea00299-d491-49f3-a358-d8f27de5c116"
        },
        "item": {
          "id": "3cb681af-6daf-4e10-aac7-45fe3701d32e",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "1237b464-9fcb-45f6-8f56-43e6b7b57e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b3e47e1-303a-4961-b2d2-cdc9f95a4c1f",
        "cursor": {
          "ref": "c3a137a4-969e-44ef-9fe5-3e45b807c2d7",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e81128e9-8e3d-4f19-a4e8-dabfca82bb69"
        },
        "item": {
          "id": "5b3e47e1-303a-4961-b2d2-cdc9f95a4c1f",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "764a5db1-8576-43df-998c-763b606a8cd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed6c01c8-22af-4487-9571-57872ddf0ba6",
        "cursor": {
          "ref": "18fad96d-95e8-4325-ac06-b39d4ed08d61",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "69ef56e7-0ac1-44d7-9b6c-5b8017ff572c"
        },
        "item": {
          "id": "ed6c01c8-22af-4487-9571-57872ddf0ba6",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0fed6420-4668-48f8-a995-a47008d2f524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfcbb3aa-bf66-4eee-ad79-8c2e026039e5",
        "cursor": {
          "ref": "7b91a833-03be-4ce8-aaa5-193f2f3118ce",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "0220cb53-020d-4ff2-8ab3-edd7e1ac0516"
        },
        "item": {
          "id": "dfcbb3aa-bf66-4eee-ad79-8c2e026039e5",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "350bef1c-dba7-443c-950d-8f080a1d4fe4",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "20c065c8-979e-4c2d-933e-81435308bd13",
        "cursor": {
          "ref": "ee4d61f7-c391-44b0-828c-b7a14c059ffd",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "8b4366aa-164f-44f9-9d57-c022b4460acf"
        },
        "item": {
          "id": "20c065c8-979e-4c2d-933e-81435308bd13",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "16355e4a-2513-4594-bae7-433305f2778a",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "8c712e3f-c33e-41ce-ae72-bc4db53c7b65",
        "cursor": {
          "ref": "c6131327-0ebb-44d8-9ed6-0b1f932b8037",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "2b5e13cc-8005-4f54-aa96-3d5fd4704878"
        },
        "item": {
          "id": "8c712e3f-c33e-41ce-ae72-bc4db53c7b65",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c98b8cbd-db75-4c97-8b5b-57dc0d3e0c29",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "31d8f3dc-2be4-4825-8205-cab88dd62886",
        "cursor": {
          "ref": "33d81f65-f876-4d84-a68f-8e1eb894962f",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "4ad90d98-677d-43e9-a1bc-692c92cb53b1"
        },
        "item": {
          "id": "31d8f3dc-2be4-4825-8205-cab88dd62886",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "5e3b9856-6fbe-4ea5-a4b6-6a6945eaec22",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "c2f04af0-bc43-4f98-bcb8-995323f61153",
        "cursor": {
          "ref": "2d84e8e9-f5c4-41be-838b-f9c58c9cf45c",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "c9776c05-0b3d-4111-b2a6-21a3c0cb9b4f"
        },
        "item": {
          "id": "c2f04af0-bc43-4f98-bcb8-995323f61153",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ccd0671c-dbed-4e49-ab65-e4192c55b382",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "90c133c8-4263-4e95-8307-6f133ab807ae",
        "cursor": {
          "ref": "90d1fcd6-6918-41cd-ae23-e6d1e092e871",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "301726a7-95ca-4977-a07a-26f98593554b"
        },
        "item": {
          "id": "90c133c8-4263-4e95-8307-6f133ab807ae",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f58c6ef8-2436-414a-b500-fb5d1fd9e167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2644ce17-f3a1-4e36-bdc5-dfbd7473edc3",
        "cursor": {
          "ref": "b3dca884-d39e-475f-8ce0-b017370f4122",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "cc6e7ad5-8b3b-461b-b1b6-a8f61b747014"
        },
        "item": {
          "id": "2644ce17-f3a1-4e36-bdc5-dfbd7473edc3",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "9023fde2-cde6-49e1-8f35-8844905bcb54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71fe0332-5a42-4970-8d95-c6c2cafbb7de",
        "cursor": {
          "ref": "f4ad2ef1-e050-4a62-b3f6-fa1123249abd",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "621fdf5f-8b04-4397-b0a9-b977b78dfa02"
        },
        "item": {
          "id": "71fe0332-5a42-4970-8d95-c6c2cafbb7de",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "dd9275cc-c0da-4a57-b6dd-a8c787212df4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cce50779-56b4-41c4-9a00-9e9795962ec3",
        "cursor": {
          "ref": "5931fc23-7c63-45c4-9d2d-5109ff8dd18a",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "43721e81-326c-43e0-8b29-789e95628887"
        },
        "item": {
          "id": "cce50779-56b4-41c4-9a00-9e9795962ec3",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b651a5d5-124b-4237-9a67-3633aa2f6c46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e873fc-a72b-49cb-916e-664598c09797",
        "cursor": {
          "ref": "b22313df-ed39-46fa-95aa-d742195273ee",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "55d51de2-8890-4a2e-9d99-ab3e4f711c44"
        },
        "item": {
          "id": "03e873fc-a72b-49cb-916e-664598c09797",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7973765d-54e4-4bb6-8e29-709159a16f10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd9c9673-7431-49c2-8b32-87c602d1361a",
        "cursor": {
          "ref": "79d1a6df-2f76-4b5a-ac65-c03b5189272d",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "7f1c665d-d0f7-4842-9d4e-af98fd70c901"
        },
        "item": {
          "id": "dd9c9673-7431-49c2-8b32-87c602d1361a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "1f90b25d-42d3-4412-93c0-e61531bb971a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "574d54c7-ad04-461d-b57d-ba0acdfceca9",
        "cursor": {
          "ref": "48f5dde7-b3ce-4de0-9ef7-82b785a095f6",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "0d93956d-a105-4f6f-915a-1548398a7620"
        },
        "item": {
          "id": "574d54c7-ad04-461d-b57d-ba0acdfceca9",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "004a2fb8-a52f-4405-b219-b19fbf72f6bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd031ad8-f0ff-498c-b614-10fc5e773717",
        "cursor": {
          "ref": "747845c3-463c-47a8-b2b3-ef29e4c19e8d",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c5d4f1f4-f023-4f37-8c88-e3d38ed321d8"
        },
        "item": {
          "id": "fd031ad8-f0ff-498c-b614-10fc5e773717",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "1e1b89c8-aea8-4a4f-86e3-f24d7d3fba0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82001160-d05f-4e59-81d9-65646474ca6d",
        "cursor": {
          "ref": "b08fc19c-5c37-4a1a-abd1-04009072eb55",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ffd4a1d6-8635-4e00-af72-e49977520755"
        },
        "item": {
          "id": "82001160-d05f-4e59-81d9-65646474ca6d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "d01e6b4f-6a1e-422f-a919-a1c8bb126b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0ca193d-8d4d-40dc-b513-74486f03208e",
        "cursor": {
          "ref": "993b343e-5be9-4e72-8abd-c5286d6ef422",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a2d7162a-3733-40e0-9eb5-ec1ec107086c"
        },
        "item": {
          "id": "e0ca193d-8d4d-40dc-b513-74486f03208e",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c42f20ee-6345-4a20-bbaa-ee2327b38af0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7173929-acc9-4b07-8cd5-03f61f9fb4fa",
        "cursor": {
          "ref": "784c5cf2-327a-4620-9e67-aadd1ca85e97",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "31396c36-16f1-4fb9-b089-89a544c93620"
        },
        "item": {
          "id": "e7173929-acc9-4b07-8cd5-03f61f9fb4fa",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a51f6c2a-25ae-496c-b1d2-847306141269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77ea3370-675c-4987-a081-bd53cc6cee93",
        "cursor": {
          "ref": "1f006db0-daae-4f29-b076-376b7181a6d4",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "6a220be2-a621-4a87-adea-94ab81e580eb"
        },
        "item": {
          "id": "77ea3370-675c-4987-a081-bd53cc6cee93",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "ff692b97-f117-46ed-baae-0f1d8e1402a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fe7b095-296e-4aa6-bfd9-93926b3cbe5e",
        "cursor": {
          "ref": "d6e24686-951f-4537-a796-ca739baf0187",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a4e83a32-4729-444c-908f-c4887f39e3a9"
        },
        "item": {
          "id": "8fe7b095-296e-4aa6-bfd9-93926b3cbe5e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "03dfc8f0-259a-4fe1-a1a7-539a5cee6977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7740f9c-f29b-4067-a7eb-b136d2774218",
        "cursor": {
          "ref": "13aabb71-0ce3-48f0-9ce9-37bbc7b0f29e",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "5e714ab5-2b47-451f-8094-c211d6b43484"
        },
        "item": {
          "id": "b7740f9c-f29b-4067-a7eb-b136d2774218",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "597c460b-4419-40c9-9269-3f85fd4b2d94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9385d46-660d-46fe-ace6-7d2216f3014c",
        "cursor": {
          "ref": "bebfa115-ffbc-4b18-a1fe-990466d88557",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f55ca856-946a-44d4-aea2-b369234692dd"
        },
        "item": {
          "id": "e9385d46-660d-46fe-ace6-7d2216f3014c",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "0886a0bc-d610-4239-8c08-e341344066df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "569b1b88-3779-4457-8ecd-633cf95c6448",
        "cursor": {
          "ref": "a95aa166-54fe-4a55-83da-8419b9688171",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "065162ab-7cd8-432b-beb2-ca0b4084ee47"
        },
        "item": {
          "id": "569b1b88-3779-4457-8ecd-633cf95c6448",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3f88a704-0f04-4b25-9c65-a98590050837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8071f8a8-ce22-4069-9f4c-4e414b4b3713",
        "cursor": {
          "ref": "07c9d408-3e99-47df-9ef3-d8903796ef59",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f1052794-cafe-445b-b00d-d7eaf608826d"
        },
        "item": {
          "id": "8071f8a8-ce22-4069-9f4c-4e414b4b3713",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "802f41d2-1dae-4412-aa1d-46a42b82c764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "355178e2-a6da-4df5-8fc5-a447e8412c23",
        "cursor": {
          "ref": "d3e85ffb-d9ff-4e98-ba94-cbec71b4e3ea",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "029da606-7e8c-4d9e-bcf2-ef6c2b75315b"
        },
        "item": {
          "id": "355178e2-a6da-4df5-8fc5-a447e8412c23",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "de96e888-5114-451d-80e9-ffe25fa26233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "543816fe-6c7b-47a9-b15b-57f2100dc04a",
        "cursor": {
          "ref": "db6f68e2-2875-4a71-83d3-4663acab8bcf",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "8f650ad0-ff91-4604-9e00-b1115b80d958"
        },
        "item": {
          "id": "543816fe-6c7b-47a9-b15b-57f2100dc04a",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "16456482-1279-484b-a345-6d5b48aa1ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af3dc700-ca41-4352-a5a8-3e33696c80d6",
        "cursor": {
          "ref": "241d04de-55e4-4883-80d6-57a22fec0e22",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "19a9bed5-15c6-4d67-a8af-5f089d366eef"
        },
        "item": {
          "id": "af3dc700-ca41-4352-a5a8-3e33696c80d6",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "5564af3d-da70-4cc1-8458-ff6b13e924fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84f8f976-4de3-47c2-bce0-f372f051edff",
        "cursor": {
          "ref": "a209cc66-723d-42ff-8097-97d3e3b82811",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "2d053db4-a818-46b4-9f58-74191afdfc43"
        },
        "item": {
          "id": "84f8f976-4de3-47c2-bce0-f372f051edff",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "93291def-70d6-4208-b14d-18943a11d322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c64db9b-9d20-4f14-9a33-944eec92d029",
        "cursor": {
          "ref": "3c0df50f-e3bf-4ce3-97ac-edb2df85822a",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "211985c6-0fba-4fca-9834-d750a2ce1549"
        },
        "item": {
          "id": "7c64db9b-9d20-4f14-9a33-944eec92d029",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "0fde5d00-40fd-4997-952c-77052fe1c56f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "033242cc-7cf2-4a60-bdcb-4ddb816db078",
        "cursor": {
          "ref": "40410232-cde9-4404-8b96-e8b60d39e9b6",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "56ca49d3-0753-4daf-b079-8ed7ab33c2d9"
        },
        "item": {
          "id": "033242cc-7cf2-4a60-bdcb-4ddb816db078",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "3a4e3336-251f-4a2f-a7e2-4f604a2b992e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89e0a72c-0a50-4ca9-9f5a-e8f254141809",
        "cursor": {
          "ref": "a32a06b2-5423-4663-8eb1-c3ba2fa34054",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "cff59246-e57b-4cd5-9b50-a38d42f7bfde"
        },
        "item": {
          "id": "89e0a72c-0a50-4ca9-9f5a-e8f254141809",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "d709a2e7-afa7-48b0-b6c3-40c2e0ac6193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85e4cda4-1908-4fe8-b05d-aae616bba5d7",
        "cursor": {
          "ref": "28f2beb5-372c-48d4-91d1-a15d7a529984",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "219f2d7b-01b7-43b3-863c-3a6199ed34fc"
        },
        "item": {
          "id": "85e4cda4-1908-4fe8-b05d-aae616bba5d7",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f7f16a82-3bcd-4fba-8adb-707b833e213a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f85525c-575e-4d3f-b51f-9c0dd2d9e677",
        "cursor": {
          "ref": "5ab763e4-439b-4da2-b69d-cd7781a92383",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c44a453c-8712-48ae-b36f-29b69412bb81"
        },
        "item": {
          "id": "3f85525c-575e-4d3f-b51f-9c0dd2d9e677",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "ebde6666-4f33-44d2-91d2-10d6f0f10029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b95d28d4-c440-4996-852f-71fa50d96f88",
        "cursor": {
          "ref": "fa704619-20e2-47e7-aeda-afeb23fcde9b",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "9e307ec8-ac5f-4005-9ec9-63621d7f6c61"
        },
        "item": {
          "id": "b95d28d4-c440-4996-852f-71fa50d96f88",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "94efe230-b32f-40a0-a3e9-5f0f311c354b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09ee0cd4-0241-4ca0-8e9c-7b2e23e2d88c",
        "cursor": {
          "ref": "38e63953-8601-4a36-ad07-4ecca0e0312d",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "987f8de3-bfdd-4ee8-add2-6bf1a47a5135"
        },
        "item": {
          "id": "09ee0cd4-0241-4ca0-8e9c-7b2e23e2d88c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "eb571f44-4d6d-46d5-95d6-6451ae71011f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee338b61-45c2-4c01-8ed8-71c255fedac1",
        "cursor": {
          "ref": "d8721413-34ff-49b5-a56c-5f9fead80f0d",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "acee4bf8-0f30-4cdb-b76a-8f0ebaf17430"
        },
        "item": {
          "id": "ee338b61-45c2-4c01-8ed8-71c255fedac1",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "078ca14f-f786-4b1d-99a9-02682ba69341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1363827b-83ff-4ce4-ae39-165a2ba22cf1",
        "cursor": {
          "ref": "5a30e608-ae8d-41e2-8a1a-ca6902e61097",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f2c30c6d-6c8d-40a1-8eb6-c28a801e3ac4"
        },
        "item": {
          "id": "1363827b-83ff-4ce4-ae39-165a2ba22cf1",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "0b2b8baf-e873-4e28-bcd8-fda1d19e4318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee3ed715-4549-483c-b7be-bb3ff767b927",
        "cursor": {
          "ref": "4a9447f2-3b3b-4a0b-bfc6-1e902bd448a5",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "099c6456-05fb-416d-8dee-6044aea49a15"
        },
        "item": {
          "id": "ee3ed715-4549-483c-b7be-bb3ff767b927",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "7ba9e46c-9c22-46f1-9aec-cad0f1dc8197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba3ff509-c56c-4f6e-86dd-bb235016c4e5",
        "cursor": {
          "ref": "c6e4ab1d-b266-46ce-a1c2-b116ab19cdd8",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e6fe1ee8-18f8-405d-847e-97287bd8c4eb"
        },
        "item": {
          "id": "ba3ff509-c56c-4f6e-86dd-bb235016c4e5",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "3a64c256-9f37-4daf-8f7f-a425bdc03f86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f5d34b0-9c70-4de5-961d-2df63c5f2237",
        "cursor": {
          "ref": "c8724608-b126-4b1f-ab13-186761832fe4",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ad85f0a6-8cd4-4cdc-ab66-fa78073389b5"
        },
        "item": {
          "id": "8f5d34b0-9c70-4de5-961d-2df63c5f2237",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "0642f5d3-f2a9-4db0-a102-8b946861ae3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10acf8fb-68d6-4955-b761-78f52526d9d6",
        "cursor": {
          "ref": "1843cd20-c7e6-4b6d-a028-20531bdd2940",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ea9b9d34-836f-4907-8c3c-b698d935ba58"
        },
        "item": {
          "id": "10acf8fb-68d6-4955-b761-78f52526d9d6",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "b41c098b-0b73-4385-a890-e48c397157a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c8a93f3-04f4-46de-8af2-d35b65fda8c8",
        "cursor": {
          "ref": "31eae83f-c33a-4c8b-bc60-640f5c2b9d52",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "81cc2787-3881-48f4-8ab6-6fda2e7a38be"
        },
        "item": {
          "id": "0c8a93f3-04f4-46de-8af2-d35b65fda8c8",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d566f65d-efee-46cd-9f25-45f02561187c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdde7af5-8623-41d5-9b56-8a32f62ce6c6",
        "cursor": {
          "ref": "b3da203c-0ce1-45c5-8fa5-b915584ac5db",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "c9095ffb-5acb-48df-a274-d3b4e8370809"
        },
        "item": {
          "id": "cdde7af5-8623-41d5-9b56-8a32f62ce6c6",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "71463fec-058a-41d5-aa83-59f8a832d684",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "808abe98-54d5-418e-a231-e7c6e6259546",
        "cursor": {
          "ref": "5893131b-08c2-45a8-b11c-1302c9124123",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "be54e035-c745-4318-8c19-52b70c93d8bc"
        },
        "item": {
          "id": "808abe98-54d5-418e-a231-e7c6e6259546",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ea3f41f3-458d-4739-9954-59a151e158ca",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec5faa4d-66c9-44d7-9f50-458da4b35156",
        "cursor": {
          "ref": "5d2264f2-0277-4899-9aab-024d3f717a0a",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "32790566-be4c-49f7-bbdb-661db19fc8b0"
        },
        "item": {
          "id": "ec5faa4d-66c9-44d7-9f50-458da4b35156",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "c56f6cf1-1295-4654-9e6f-9655666bf4b0",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "16b081da-6d3d-4755-a091-0f965f5ebd71",
        "cursor": {
          "ref": "b8c8d056-6467-4e24-b1cc-d30308d7ac8d",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f2bdbd1e-e28e-4bf8-bfad-fd3ccfcefd19"
        },
        "item": {
          "id": "16b081da-6d3d-4755-a091-0f965f5ebd71",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7f86a396-adf5-4f9d-a610-6a8690b68bd3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16b081da-6d3d-4755-a091-0f965f5ebd71",
        "cursor": {
          "ref": "b8c8d056-6467-4e24-b1cc-d30308d7ac8d",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f2bdbd1e-e28e-4bf8-bfad-fd3ccfcefd19"
        },
        "item": {
          "id": "16b081da-6d3d-4755-a091-0f965f5ebd71",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7f86a396-adf5-4f9d-a610-6a8690b68bd3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8f7398d-9b1e-4c2a-acac-61bb8664494b",
        "cursor": {
          "ref": "2ae32574-085c-468e-a025-47cacdabdf58",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "32e627d1-aecf-4499-9f1a-ad768e68777c"
        },
        "item": {
          "id": "d8f7398d-9b1e-4c2a-acac-61bb8664494b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "eb299d4e-351b-4c22-8d94-dcf6808dfe56",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a12f82b-efa5-4cf4-aea6-ab63dece70ba",
        "cursor": {
          "ref": "5a99a05a-0f3a-40e0-9df0-34304e2b463f",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "0958dd78-7cd4-4367-8797-13a257e0aaa5"
        },
        "item": {
          "id": "9a12f82b-efa5-4cf4-aea6-ab63dece70ba",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "92225385-4b48-4112-b7db-fbcced4bf9bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}