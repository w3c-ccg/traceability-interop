{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c1ffc35e-6dd0-4087-83b7-bfac96d9ddaf",
        "name": "Clear Cache",
        "item": [
          {
            "id": "64de1b50-8997-4213-bc9e-fbd34b217bb0",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "67f5e6b9-3522-4175-9a38-8e86f3c16a3d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f05ec893-fa04-48a6-8978-d84413512d7b"
                }
              }
            ]
          },
          {
            "id": "e8a16459-ae7d-4ed5-a34d-9c788e943d0d",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "801475e7-6b9b-4f2e-bae5-14ae5b705756",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "549f1f85-52ec-41e6-872e-d70fc4db78d6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "06d57743-194b-4c5d-8ea8-2f0c93959d9c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d4bf876b-4423-4b72-ab09-5f9b4a1cf491",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4b504f0e-8bac-4c6d-bd8f-e49323f433a1",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3fcd4bc5-fba4-4f88-9d1c-6b567c0d7b79",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e4cddb90-24c3-43dc-968d-838e97f05274"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8e9c3e93-aec3-478e-9f51-234ca7847190",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "74d4e273-5f87-44a3-9aee-0004bb59174d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "74dd4ec6-59e8-4f29-b515-a198c6a1d41b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2143efac-789b-4764-bbfa-33ac0425e50e"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "89fe91be-89cd-49b9-9833-a84568ec3b2c",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "c2aa97d9-470d-422a-b609-9d2f64b600c2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8f268e7c-b28e-4137-883a-65a53bc78ee0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3fca3dfb-a4d7-44be-9709-c28780b2791e"
            }
          }
        ]
      },
      {
        "id": "e23bfb11-223c-40ff-b248-c80121629c6d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "3f72fa7e-0f80-4aa8-8158-231638c23a79",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0c145b28-f8ad-4164-821e-9f88b190ac89",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7bece9ab-a8ba-4559-9a7d-2fe6d0e4f1f6",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2800890-901e-4c1c-a106-3138835404d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "522d4b29-e844-4ca4-9c98-b8fca7090ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "087eeb98-d1e6-4ba9-a7b6-ec0cf4319c83",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a97bd18-87ac-4d5e-adaf-00e8e2285dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b915c18c-a413-4707-8bde-4c86bb99caae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c22cc5b2-15c8-4912-a484-c8c5af8823f9",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3974a60-7ac8-436e-b796-d32a60ae8e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7a1ef1b-7e57-42ad-ac2b-80b348f08325"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d49ffff4-daa5-4d52-a272-c2620265dfb5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2e87df4f-955a-4961-a003-7dae813f9570",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c850b500-57bf-4886-bb07-5eb8a4550ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48b97ef5-2a58-4b0e-90ba-bb194e6d36a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4011a8be-e937-40bf-bae4-8ffc02c5e3ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb8ffeb4-2a33-4b58-b8d6-89532f805296"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "abc0030b-3c4f-4da6-aa5a-c7d1c69bafd2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "85cf78a2-e3ea-4441-84c4-81ab61f39ede",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "61ba8c7f-0005-459e-aa97-f05f82f6c167",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f9ed715b-c0ed-4081-9b6a-e43a7a07be45"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d60fa7d-2e4a-4d7c-9c31-439f35dbbc9e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "9ec90b02-1922-4db3-97e4-221390804960"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "abb52105-f2a6-49e1-b585-e3fb6875abf8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "84140467-74f1-4aae-9bc5-a65c95a584d3"
            }
          }
        ]
      },
      {
        "id": "e52e42b6-e5b6-4030-a4e2-4445b80d2053",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "7f3cc237-6f10-4254-b0df-9146c7878442",
            "name": "Negative Testing",
            "item": [
              {
                "id": "971cdfae-bc55-477e-ba01-55da529e7c55",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "d738bdd2-c6aa-42ed-afb2-464d1a1a879e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d037893c-8826-4829-8a7b-adcc59bf7b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4b3e020-67ae-4fca-bb92-b32fa9f3066b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7074a352-9e3c-4367-aa3c-a7788c46e836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2fcad32-50d6-4bc3-ad10-3daefcd56fc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c662a52-2568-454d-8928-50533e646098",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa81d11e-f74d-4c89-9091-e17ec8f3ac96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a922db78-f662-4bd4-807e-8373b6dc36a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4382a48f-6a20-445c-967f-87070fa9bf39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f7fcd25-9396-4e24-9bb6-257977626f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d48a4c0-a07a-45b9-9245-c3412ad22b25",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "381acd43-6046-4669-a864-c2738297e67e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dab6e474-b9f0-4c9f-918a-b293ce138e33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b00fbe23-85d9-45cc-8087-f2d2748d3025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af841ddc-d69d-4786-a4ea-6100a5f95fa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1500e5fb-74d8-4285-a199-8fb498c6c770",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d83c6e-64a4-4b27-b0e4-9b5fa85eb89c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04c90f4b-099c-4f51-8dd2-c5489a9d2ba6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40fcdf7b-bf64-46ed-8ad6-a2e6d6f66433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9342bb96-f30a-4d04-872a-ee13d11b3906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e123329a-9272-453c-8eeb-1bce08600a81",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03aa8f0a-daf2-463d-83bf-52c0303be965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a736f10-7eb0-442d-9ced-17ade9f168c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ca68b85-4e5f-4f2b-b3b0-9fc363e0bb5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4babf4f3-3721-48db-b431-bbb9641d0172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c701278f-4e8c-478b-8e2b-9711140ad39b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42f638d2-fd06-4063-b2cd-4a51ed309661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f74013f-2e9b-4ad5-a830-62da8a0d8238"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5980c029-0802-474d-a04b-a373b7785b55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c8288d9-0e88-432c-bed5-0f72dbb8f036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b183115f-031d-428a-a4bf-e5236a738345",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "971109d5-2083-402e-86c9-33fb44e37faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "895061eb-2fc2-465a-87e1-977f74680917"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24a6e43f-74fc-431f-a155-1d4ed69aef48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8dc627b8-4764-4e5d-a351-f294e178e302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f7458b1-1610-4ad4-8ceb-5b3de530eeb7",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25579d22-34d1-4235-a3aa-78aa829bc8d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62a8c6ab-9c71-4cbe-b39d-6f315dd99572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1088586-71ef-402b-ba7e-cff729d58588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d25d262a-2159-4eeb-9232-99429b576490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8e8339b-fc6c-4bd4-b4b0-de84a9643d69",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a921639a-978e-498c-884e-731d5ad6702a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82f3c811-dddf-48af-a1e2-bd2a6f49a75e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc81a0a1-f9c3-4d9c-9799-731b114c0d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ebb52d22-96e8-45dd-88aa-cb307e204639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d70061-7563-465a-bcc0-b186b6605f80",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11675537-9348-4d26-b096-6e4c786113e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9127f74f-1c4e-4a40-9b3c-de76fee2da85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae4b0715-7fde-4942-ba15-fbb82039b781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee16c1a1-79c2-4ca6-b718-034cb08339a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca42ef9-6674-418d-aff7-0598f725fa94",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd6b8427-7708-4f19-9a06-aefa61c83703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbc9d2d8-fb8d-4678-b90e-f1f6e18b89e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "369f4abe-a106-494c-b907-783522d6128f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ffb423b8-3bd7-4953-bfeb-49dccb551380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e3efaf1-06e3-4348-89fc-bb64c7934305",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89df45e-1e81-4fb9-aded-4e47952fe2c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd43dc6c-e191-4555-aab9-485bf7c80fda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1e5c553-8ea1-4dcd-bee7-0ab8e9a91f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eb51c084-8510-4eeb-b94e-2728a4279421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ad56590-7495-4fb5-9bc6-c74fa4245ffc",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41ffccad-901e-471c-8c0a-8873f953ed9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5f8e4eb-1ff8-416d-b6d8-89c8b79019de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb0bf701-a5c7-4f13-9819-33abdf536044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c31e584f-e035-4efd-bb1e-5fb8adfa2be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "702ea474-0ecf-4b13-8f93-c596e776d336",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e165a98e-c52a-40ef-9c77-de0c46b4a315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eb3aab1-4354-4570-aa06-a0c6b7ba008d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5388df8-b90f-4fa8-904e-f4d81d97e771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0976932-4efa-4fee-b0a3-b6700bf2725a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc4f776f-1a1d-4173-9f19-f91824e25c8b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7fded28-8432-4be2-a283-199b58492070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4501efbf-53ac-4fee-b338-30d93f58e70a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38863f79-4b5b-49a2-b5da-01e88ba11f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e6f0a4d0-9dae-45cf-a93a-87dcc312d9b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e00d9bd-8111-4f3a-99ff-e1f2e75e785c",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "485e4b27-5ef1-4763-8622-d618bd6d1dbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "966c7797-8962-4094-8ff4-71fdfe856423"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da767607-000a-4f6d-958a-accacd1caaeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95d331f6-f6b6-430a-bd6f-3fce03e72265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44cc6ee7-ae32-4d52-b26b-872f3c06e846",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48305cdf-925d-48dc-b704-4df764aaaf15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "392057b1-870a-4115-81c1-b743ab226e7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7fd17e8-9398-4309-ab67-10c0374ae1fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "900fb30d-afbe-4142-b619-0a33fa1ee6ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e613e13b-3372-49ff-860a-39059beb4a16",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8577b9dd-2416-4a1c-97f8-06f595860140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15b8a0fc-9196-4055-ac1e-fc2cfa62ff64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410c63c5-13de-4643-aea2-63910f027ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e9e0bb8-4c1b-4b87-9e57-8124e4079023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "466aba16-ccc8-4dc6-a954-183f9b3a31c3",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fcbb1db-6cc8-4890-8766-30ca4d90b6e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3e71853-016a-403e-838c-644236711530"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc4d404-87f5-4cc8-88ea-23d986744160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2b0c817-4172-48c1-81f5-2ba51aced8dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d4e5d0-de33-4ebd-a1d8-decbb2ebabc9",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd874d4-bf9a-4398-979a-fe59235a0fa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72baaeb5-eae4-4a75-83ea-d39224a0e698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ceb331-29cc-4425-84fb-fc971f8ee383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9dff3bb-2d9c-4f86-9c32-11bf40ff2b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ce0295f-3776-4374-b6c6-80654e3fb383",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32295d99-74c0-4dde-92ca-c69315fcbebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f20e450-3236-4ec7-97fe-2f077bce8d61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7820dc7a-8d17-4b3b-874d-4d5acf941596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bcd13ff-998d-448c-a85e-ec3c4ba46ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd311e4e-18bd-4a64-a459-9d4b1af8b04f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74650b36-3166-4183-9b7d-223b19f40517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0936539-e80a-44ef-8906-a642173ffe43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61ea25e8-cadf-4048-b944-d30352861a14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f17f448-bc8a-4a35-8f01-05956cfbb79d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c42b71-5c1b-4a7c-ab5c-f84d1ed9a2de",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb71fa7a-9db1-42cd-a57d-570b5e800d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10af2f26-1ef1-4aeb-bea5-db634a7db3cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96239c06-5bd6-4c20-a604-af6fb8d6a74f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "26df7ca3-ac03-4731-8b74-c15585c0bd47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6dd9be8-9392-4353-a3dc-9223c780b8a2",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9bcb0a9-4574-4ac8-a3ef-c84d78f786ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eeb6508-1e7a-454f-8ea5-cd8df3c90f27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0987a458-7850-4c77-bbfa-94fa002d386e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b17b5b9-84be-4add-a974-f04d3ba09afe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b362ccc7-e117-4fe1-a263-47ad801e912c",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a633eefc-3c94-4093-8a3e-c3e3c8e4c5cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a675d914-67e4-4824-9784-ce91845172e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c8563c1-7a06-4cf4-a237-1da212fd4777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "30904a2f-f3d1-4e0d-be94-69ff57468354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "166e1a36-9a93-4371-a8db-f8bae3b0f421",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5fe9154-eff6-47f7-b3b9-44bc9fbb554e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d11200c0-99f0-45c3-934c-9398e3c92c24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29263e6c-56ae-4481-ada2-187f9a52bbe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8026749f-029f-4558-b0ff-f591ac4e2a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cd7745d-9d45-4a99-89a9-e85b629ff7c9",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48529595-3c4e-4271-a77b-ae334caeec03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46189efa-39bb-4491-a9bd-02d5a1208ce0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdd61dec-cfcd-4160-9556-0f964e067cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bf5fd28-5dfb-40b1-8296-b068e5a17ff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad49f39-189d-48a2-b108-203a7e7d5100",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e3b7e2-8e09-4313-9ef8-ad157c520805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3835da78-8752-48b7-bf24-b5ff3ab39c24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "627ced1f-9286-42b9-9634-32c1944960df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "39435f93-b89b-4297-8b24-66675f2d0400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d2dcd8-3fd3-4aae-bae9-a95137db1bf8",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cb2982a-a2a9-4f0a-9c7d-0c4b84688d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cc22da1-43a6-437c-98ab-bcc4c238c3a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3cf6afd-59cd-44f8-b8c2-ce72a4e3991b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6c943dc-ebb1-4cd7-839c-4fc37523ee7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c81ee43-b4dd-4f9c-b577-2fe74559ce1d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed2d0fa5-a77f-4a00-9419-ff8d00aeb77c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "540a0521-a3ed-4549-8cea-1d2c21ee2b04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ed283a-2a06-4e90-b745-dcd403117053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "bae4d711-627b-4c13-8782-6ce82fe1b9a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "753faa7b-7312-4b42-91a1-8607d542c2d1",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f93999b-94a4-405a-99fd-0dcdb6bcfddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4e47113-967c-4bb0-8b24-90b37320a6ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb59197-b874-4fbf-a7dc-d3fcd97fd85f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f421fa4-fc95-497e-bf13-2c5e0ce508be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf9cf8b1-4c89-4314-8ac3-45c7a7668ff7",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf1ee15-7e8a-407d-afdb-e50b40e53d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2f0b46d-d92b-431e-9ef3-b7a3556857b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "269672b8-c36c-4ffb-9545-6fdefd61fb8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "19ccc6be-b775-4616-b203-51149cfd169e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94b9255e-3e34-4b65-931e-bca4c305c6f1",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1464093-40a4-408e-a7c1-9e4b9140c976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f239b36-bdfe-46dd-9c4e-0adf7738696a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "980b468b-dcd9-4e3e-9265-d5ad4c149286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8664bae3-c9c7-4dbc-8f43-fc9d4734694d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a54f161f-0ca7-473d-b413-3f928dd7d5e3",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f8d6ea3-863f-4b85-88db-494a6c67afe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afa67cd3-1e77-46e8-962d-115442838c43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3252cf3-e337-4947-919d-356e97dfdad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd1304d9-4a96-4cd3-a453-89ae74187f09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11861f6d-622c-4cf7-a591-67232dcad245",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed3454c-99ab-4c10-b6a2-a71a0733cc94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8feff905-944f-4770-bb2f-e31a7779f4cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b8bf0c-e328-4ea6-82de-e18e40f6a83c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "fe182deb-24f3-405e-8957-2490c0a7036d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f3d154-d7a5-4966-8db1-647d22350192",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd532752-28cb-408e-bf2e-1db5d72cb920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "78a42e4c-b79b-437d-8d0d-7175508ae910"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179918cc-b2ef-4197-a40b-a0f01ece8a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dd9ba980-4021-4aec-b60c-99b8bdf73b66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2738e1cf-bb62-4d88-a0f4-bc188751dca2",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a08d49d1-b236-4949-890a-2843bd776933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68c981f9-7d03-4191-89b7-c77e6cacb244"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3043eaa-fafa-49df-9c42-19bee17647a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c24f0019-82a5-42e0-acc4-f3364296fe0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "797835a6-c233-434a-8359-f38e629dd777",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dafe8b3-62cd-451b-bb55-c0c9452e86f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "433f0d07-8749-4754-b6c9-6c553b2f502f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "688666fa-4829-4fb7-9491-475b13bfd03c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae25efad-a933-4b39-98c6-ac3ec182d775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20fdf680-c28f-4603-b1be-f60b99549fc2",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5242ac48-69ee-41ea-a01d-b81c96a50fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ef7574f-f2ba-4c08-8b37-e239bc7469e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92447cf7-6a54-4ae3-8a55-5439a20b6d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "554fd7f9-b404-4ca3-8b7b-d32f367b4508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee500c6-0f00-40d0-9bdb-285cf855a545",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d05164-a96a-4e00-910f-23bcbb4d836f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f79f1e6-d4b0-4866-8743-e4d70c2eec14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1cb1569-e53b-41e3-a61e-0ca904cdd606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce4fad31-64d1-4273-a169-671a20de6382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42181767-7159-4737-aec0-a67e328dc17e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b8115ac-6c76-4062-870f-aa9b7f0ad9d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d42a0f41-9be5-4852-bd7a-42a4e5476c0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a5e0509-0d16-47ef-84e8-7caa3d163361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d53c1dd7-4b89-4e7b-b893-1d7da07e6158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0987eb7-618b-406c-a627-124f547dc349",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d29de97d-1790-4338-86ff-a623ba905de6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac5b45f5-4fdf-4691-9fed-f1bd997f1945"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1bb252f-3d16-48e1-885d-f5e8ea4d4305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "61d20008-bdc7-42f5-8ed0-71c7a12474ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "400e0f0d-dbc0-4565-ae2c-51cd2ee5a40a",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c3a12a-1e87-4594-814f-0cf436d9102f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8661d6d-edc5-4aba-9fa4-e5507f774ce6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "711315fc-5121-4277-9f72-e07e47140ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7583b4a2-8100-4dfe-8a89-3a33b0c642dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72bd1084-4ce7-4acf-b8e2-445ee1947abc",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b05083d3-9146-4b77-9023-e93bf0c99485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e68195ce-74b7-4d84-8f9e-8f872a66aa9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4294ba32-fb1f-4c2c-ba52-a7d971a3eaea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9057052a-85c9-4dc7-b6f8-41e4bc148fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78fd41a8-1496-4519-80f4-40fca255788a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad96df21-1854-4492-9f3a-c2bb6b9174d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a4183c9-7ebc-4fed-aa5e-0985154b33d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a43e70-b2ea-435a-83d1-982c810dce63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6463437-e37b-4a27-bf24-35ad1f258593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5649a3b7-6a1a-43a5-b47e-fec8ef480023",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "520b1b3b-258f-4208-bc16-4b0e9f665bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a65558f0-ee7f-42bd-867c-e7f481edaa60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41fe4659-382e-4344-be58-3db74fc619a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "15b29545-1fba-4e0d-a4ed-4e5e64d40613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72aa818e-789a-4158-9b4b-6e174d9b73cb",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9525739-b246-4732-b56c-bb534875c49a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a380baa2-7396-422e-a037-ac9908a5fa24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1cdd818-c234-4cbc-aec0-242b95f30b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "43b51fa0-60d5-4647-ab2f-b05f818c83f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bed52d9-0bdb-497b-8bb8-863ceb62c185",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde79d39-7fea-4cd5-b32a-31178c26b029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88dfa6f3-3a1c-435b-b06e-6bf29370443f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b66d56d4-8e47-4806-bbed-9d52b32312a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "56961c2f-d236-414a-b178-79b091ffe7af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3bfc39e-da1f-40ef-bc8a-3a7439da9040",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa904f14-be5f-4835-baff-d70ed71f3b68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbade645-0246-4960-a68b-43bf696b17b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d144e8-5d0b-47df-afcd-7353bd7e23e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2c4bd23-3395-45cc-9eb7-c8230fe2c86e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b225065-c345-4bf7-9651-a71a2efd96b8",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3e2595-fabf-430b-ac88-9a0b10c5d6a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "962b3430-e7e1-496f-9a70-1b0b635bce75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "483b7701-442a-4a45-83dc-438a42a93f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0ec276c5-36af-471c-aeb1-60e975d6937b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7dde3c1-ede7-4004-b9bb-e75810353596",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f6feb6-58c7-4f78-b0b1-033d5fa1bfcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9ce00ca-161d-4f60-992d-8bbc42f2b201"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01d6ca1d-94ad-4d6a-b9b8-c7639b997cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "626725e7-fbc0-4bf2-93c6-2c73c5cf2713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1186404-4b3f-43b6-bfef-befd498c785e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "570b00a2-1e9b-457a-ad7e-f124d5560b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "466735ae-c21d-46a9-bebe-301beae8206a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2609b28-aeb6-4119-bb58-9be92c84e887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe4fe4ca-c6de-44ea-90b2-99faf4244d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0471c7dc-0413-4c1a-bdd9-a05ecbc1bc14",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85bb1e37-7ca4-4779-a62b-17ab2e56a775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd583c11-7f4c-4018-8bb7-feba1023b199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44257c82-0c29-4fa0-9690-ffdcba0c3680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4c41160-19e8-4fca-a27e-1add86d1c69c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcbdb0ac-0f95-4e72-acbc-8ecf1e863643",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c587b7f-daba-435c-b5f4-a3331c00f51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48e6ef0b-e03a-4d5e-b5f3-853ee2902830"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "453797a4-59cc-4f9c-b54f-10545311aea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac9fd166-6b72-4304-a6e8-405ffc37a6df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d78f26fa-66c3-4302-95ef-a71b6f39040b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7ae58f0-8ae9-433a-9b99-69b61aebc8b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ca2482d-79b0-442a-9046-b1c062ac895d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9bddefe-cf05-4bab-9a20-39ee684b0391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a22095f7-1a7e-4df6-ad7a-20452502f0d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f86fdace-4618-481e-908a-57d0580b995b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "827e3af5-8c44-41c7-a89c-a67e1f410f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abd397ea-7ff4-4671-b2ce-fe40a5735042"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c7144a4-bded-4fde-8c51-ab3b2aab3840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8fd7a2c8-5dca-4257-a7ef-02866af8d6b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84fb9ba2-0b8d-433a-bf95-b9fdded25ad2",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d942ba5e-acd7-4797-ba99-4d4ef8cbf9fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4dea82d-4838-472d-8a44-b5c6d7b67aba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e31bd282-fdb9-4ad7-ae19-fcca1f4c8320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dad65865-4177-4855-b2f4-c62051a15ec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc8a3c2c-099b-4453-bf91-01b65975e984",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d0911f-dc68-4d31-b99d-fb95f1ef3d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f12c3e4a-d251-4263-90d9-15c5ebe195b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df2053f1-68bb-4564-a8f4-3ec765884305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa3dc495-82b1-4382-b790-27af73098f5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6042907-b125-45d6-bd39-99c1bfb3ee00",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bbfd09b-6d96-40bd-a1fc-e46f9e1b5119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc4ee489-d18c-485e-ab31-f9fea115f864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d3ecb3-2b9e-4897-b239-8febf9656886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b16f30d-f6a0-47cb-a7ad-5e66e2e2011a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27b3477b-519d-46f1-9048-88e89db63283",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff3a466-ad89-4ef2-95ba-e9c62bfc4f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ee2680e-f756-49fd-8c03-90db7b7d5555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d29c843-113d-45b9-9cf1-b6c457a318db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4916ac1c-73f0-46a0-9356-2cff44277190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40bfe86d-d73a-47a7-9a77-e1407931697a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "379d6f0d-f8dd-4870-86aa-d3fbc7fd23ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7718d62a-f505-43d3-bd93-93f1403346fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ac5eb41-5176-4495-91ed-c527ef24d787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4bbba7c3-7479-4eb6-b63d-146a9ef8b315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4f32ee4-8913-46f4-ab20-a56d833c9583",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54967c10-0ee2-4208-b7d5-85503146da92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5d2964c-da4f-498e-8b28-499ce5b6c637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5ea0e4f-5f89-4f22-b21e-65748f2df0f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "daea6b30-910e-46bb-872b-70e06227750b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3d2345e-805d-40df-bbb8-68c1d59b8cc5",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8788c1a7-6df1-4b71-ad10-13a329ba89e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3e9ac98-64c2-42f0-9bce-a87c116c5d77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dbd51ea-a36f-4c55-95ba-1c26dd43c774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f201b064-cf25-4fb1-892c-3400666a012f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "202f4ca6-65d5-4872-a7e3-a3e7d752dfa9",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a55503fd-7eaf-40b7-98d8-ec0a65202aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50447600-62dd-48fb-ab01-c60e60478a7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc3e328-1a14-4586-b3c7-232ad7957119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "33ea3cc4-29c4-42a4-b689-02e9d23f19ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27cebcee-1e4d-4aca-9af9-8ee9082e7f57",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d2dea1a-f6c5-42c5-b232-a26369123cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c12d89c6-2103-426e-a309-cc45963965ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c282312c-fa1b-4f23-a7b8-743a2751ab6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a92a7a7-66e0-41f5-87f9-74dfdbf0d01f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6508b5c-600b-4613-9298-b5063f4a5c5c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64675d87-d669-42b4-a127-0cc32f53bb76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9495b6ea-3882-43cd-bf32-1c22ca761048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "075166d5-42d4-49c7-a531-5a72bc03d507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a71880fd-89e1-47a9-8b87-748ea15c4a6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a6d977-a8a1-4617-97d0-e42c0b7d8d68",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30c6a3ce-17d5-4e30-bff0-10cbcb17d870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2d6b8bb-a878-436e-861d-177b89539fe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da2f89b6-1189-4b2b-9396-9c2dfaba6479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c426caa6-8174-43a3-a9dd-558e2020bbe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae41be5b-6330-43ff-b1bd-0547cf3094fd",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcde7ea4-164a-447f-bd99-6fc3bf6ea04b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55404391-84a1-4d97-a72d-c89e09f44423"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb0c004-a50d-4d13-afc6-2ba16d55d7d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8521458-7d7a-4a32-a78f-247a1ff41112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8dec761-bc53-4573-9a46-ebd09bd678cc",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "629a4496-8428-425c-a1aa-935cc9605c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc4a7b98-61c3-4410-8d3e-3e6a7122b530"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29c2f62-28c3-4c50-8f5b-528d4b9c6431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b1c0155-05e1-4e8f-855f-0976ae6aae3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7450fe1f-9f03-4d5f-8dc6-efb86e82afd0",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f90c39c-7a86-46e9-8548-92944987dc4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "846d6526-2cdd-466b-a59c-e7a20efce619"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae0b4e35-b7ea-4d57-b2bb-b7d6bf864734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfef4977-337d-4c47-a6bf-4b01a14c666d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8250fa1d-afb6-4165-818b-1b3e59059402",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3647b0b-ef2a-436b-a6b6-2aa2a458f428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bb41312-7b9c-45e6-8e81-f183916dd2e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e218ef8-a745-4a09-9a0b-f272024a50ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa0312b5-f90c-41af-bb82-19298805e77c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33a2e8c1-193c-44c0-a30a-77b8474dba33",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab5c8d38-b8e7-4496-a448-8aa989057219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eb0ff2b-272f-4fed-bf34-39a931181d5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00d57dee-0e39-49ad-8b8c-e7942c7e148a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cca82a39-b6e3-45aa-9e23-7dcb82b8c6b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51af81ad-5841-4b33-bafb-1c220e2b3af1",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cec2200-4f4c-45e1-bb8f-0370795a82fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "768cf56a-3646-462f-ae35-b30d67f65658"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8958abf2-910e-44fc-a90c-f26dd2a38548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c57eaef-4b8a-439e-8d99-8dc3bd6309e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f611ed50-d8c8-4e55-8885-663e7e4862c8",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f154ce34-375e-408e-8894-e63e365e1301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f86af9ed-4774-4b36-b5a3-2e4e1f018390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc0a986-6134-4dbf-ba58-d2452ac54ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6c6888ff-b5ed-4c94-a249-8a59db710b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d13fc6d8-f15c-40c6-b9a2-fac89635c875",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1642edc0-f220-4b75-88b8-e5dece5d15f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e161ae8-0b7f-4322-9c1d-2af63eed11c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e277989-9d75-47a0-9155-1f36089b8916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd677dc7-2d72-458c-a3d8-49c022389a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "944d1710-ab1c-4754-a4be-86f6201d7bd2",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db87ccfd-8530-4187-bed5-b7dabb847293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "878c5df7-db12-404d-a1ff-1ed3d5ce9c04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0713f8a6-d925-4de0-bb67-7f167fb68113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd4c1080-a158-488c-8d34-b348c2d27874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76bb6897-9c75-4d4b-bee8-f184e9611a4c",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc5b559a-4fc0-4aa1-97e9-06fbd7707e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4ed17eb-3c16-4429-aba6-8e0a80e7bf79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd15a75c-f766-4bf0-bbaf-8e5642937569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "43bec9f9-a92f-4829-a67a-4d6a14709aa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be8dd257-9092-4179-ac8c-8540ca8105e6",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30763514-c083-408c-8994-9517d771c79c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ac9cc23-e9d0-4b1a-bae7-43e4cd3cf9da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9389311b-cf6d-463b-b269-bb4660369242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5d96314-d012-4322-bd13-9c0f3c956e3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adc62093-e8a4-4635-ba47-e5b91b36fb55",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "419e8ebc-06bc-436c-a131-47779996bd8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48671e15-4d33-40b9-82d3-c5aa2d0b503a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c77f1a47-5a91-4093-8ef4-b29c2815df63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b110fd4-4771-48b7-afb7-8cb439406662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc919cb-236f-45a1-8a97-539012703a3c",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32354842-290f-4f34-ba7c-9e7451d28814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77db6b5b-243b-4824-be7e-7e6191dbaaf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f323d88-6c6d-4ee7-9285-877f3895fcc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1c13d299-f1a7-4c28-a36c-505edd583d10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d6be2a1-b1be-440f-842e-03b7b024a89f",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba2d74ae-7988-45bf-ac4e-7892675afa73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9513f1de-ecb7-4829-8cdd-d9330ed22a6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a0ba91-93ce-4d0c-b9d5-711b5b80ace9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0d47223-8ac0-4fa7-85cc-f3c13dab319d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b8b7a0-5921-4790-8778-b2b850e3e3f9",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa93a908-76e8-476a-845c-5f6e94d828c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f5a1629-8a89-4b7c-82b7-f1ec3c8d16f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7567ffa-b122-43ce-9d30-e4bff63fc788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9d1d050-9098-42dd-9219-8a5da1c226f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "898ddb99-a602-460a-abbc-356aeadcf9b4",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "891755d9-9495-49d9-973e-361b768afe4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73213475-ba28-4a6f-8675-8fc06aab64ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d6302b9-7324-4682-8ecc-b6a4a4592b3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3aa7260-bc3d-4e00-9243-6b98a4af45c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae94b03a-f914-429b-a713-08f5158f290c",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45302924-a8a8-43e9-bdc8-f639b58557bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a86b943-a01f-419c-94e8-c95929ed1999"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "693c5fa7-1e1e-4503-ac76-412340926435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "92c4b836-8003-438a-b608-4b22cb5af208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded9bb9b-7fd0-48e4-a4a4-7e19bb74b66a",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d0417f7-d982-4691-bc9a-17423f80d871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "617b5540-9050-4f1b-9425-85350db62e0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dbfa747-1004-4d69-a106-6e2834b7dd31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "459428a7-21aa-4201-9ae6-12e00b38becb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f693d952-193d-4030-8548-79303668faec",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac9c0032-9d45-47b4-8488-03ba5ff4f9e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20c0909c-87e2-4633-b630-634ef4db8e76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a0fc3cd-6cd1-47db-9f1f-2eaba6f3c62e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9bd9cfa8-94ed-47db-90be-ade3aa7f429f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c8eec3-015c-45ec-aed6-493959332c93",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce3ddf2e-fa25-4592-8600-fbfa69b18d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d7d0689-bdca-41a8-9c78-4bdb1581fdf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e94927b-ff52-4305-b423-24dbe07966cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd76c401-52fe-466b-8dd8-494c84667191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad349858-2370-4c43-819e-1040980ffefa",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4626073-489c-490c-919b-30b5f50c4e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d633873-4d2b-4c32-812e-5291db64ea71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8959b189-8649-4b8f-8ee1-c2bf58ce92db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "239a1b45-372a-4e78-903f-7c06be1a6616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67c33c30-9527-4df4-898b-e6f71f88471e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a241f21-1020-4ad1-851d-283f27a5609a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78ff6939-8124-4d3d-a509-bd3131f1c3a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a68b6bd6-44e6-431b-8685-670d4d649c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba1b18b2-149b-4f38-8801-49be1e972273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12a62efa-f63b-4b74-a002-cb2380fed92d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a11afe4-6f51-44f6-8df0-fdc879faff2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abe66ea7-411b-4f11-8dcc-1b23593a110c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e1a467c-c099-45da-8aeb-52b7882bcea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "618f3b07-8b39-4964-a24c-f3b7a5ae10e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4955d9fc-ba0b-46ea-8528-85103ccf1098",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a71c493a-0a7b-4926-b003-f32c2de5336f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c6d3ab6-9c6d-484f-81d4-67beedb1c559"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d961f543-1325-4412-91e0-1ed82f291bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "73e4ce50-bf6b-4004-90f4-61306c7ed3ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ea5a69-15cd-4f29-a110-35145e6519a5",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f945738-95b6-45bf-b02b-c259a8527973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "21e28149-6a77-40b5-992d-69dfbf72873c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7247bbba-e40e-4c8b-8344-c425d63dede3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5cc7f28e-b09e-4a7b-9274-cb5a02fe3dee"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "531cbfc8-cb9d-42c4-830a-c408f4e99778",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1cf3a738-a261-4274-baaa-c93de1fd7713",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9c110f4-e800-4444-a36f-15a23533932d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f800e7e0-b1a5-4a1f-9667-3df80423d8f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33cde91a-8577-45e6-b85a-b6d61ddd1b58",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d75870fa-d237-49d3-a92f-f4e3282c6b67"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed98d09b-3f50-49b7-8bce-a0c5ab62c40b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f7866b1-7c09-4ec3-8c51-798a638b53cb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a8707e8-17e6-4b22-8fdd-b44d438a3e19",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "70939858-aa3f-4a08-a3f7-56f346fe33b9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c903fbf0-e59b-4012-a461-b112b1c31e34",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "adb5b63b-1955-4e09-a827-85c85f5fece3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "03b98aee-dfe7-42e4-abdf-b3f506788fdf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3945d7b1-3581-4e02-ba47-4ecd58f2d7f9"
                }
              }
            ]
          },
          {
            "id": "7f489ef7-68cb-489c-9ad8-7e5eaf28b1c0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8ae627bb-014c-4d12-b0c8-bf746ad6daab",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "cbcad818-ba96-4bab-a628-b8902155bdae",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80e0b82a-cd91-4fe5-885a-ed72bde22a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "45769cc1-829d-4361-a42c-ea2131123f9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91303865-1c19-439b-8c5a-9883f1b73efd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f5fad8f-5c0c-45f2-adf1-9bd115193c33"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "506b98d5-159f-4b6d-a4e2-b349ddc03690",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee075f7a-8042-41d4-9c02-8c8fc6ef47b6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "08f4c97e-4f98-4794-a737-d33d461860cf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fbd4ad8e-9218-419d-b6a6-0fe6c9abc962",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ce8f4f19-fd71-424b-92f7-94e1f046cb82"
                    }
                  }
                ]
              },
              {
                "id": "a50a434a-2556-4de2-b1ff-741dfb96a525",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c37e573-0779-40eb-abfa-1d9e57b8e043",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "940dbf61-03b9-41ef-9b82-bd8235f88754"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb68fb3a-75d8-4681-b973-a7e5e54e600b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "678a5ee8-d3de-4a4b-af7e-7f88ed2817a9"
                    }
                  }
                ]
              },
              {
                "id": "6da6e15f-df5e-4a1a-b0dd-9a44a0e45329",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "66ec3bdd-3ee0-4e2a-974d-ff2df24d4b33",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "60d23aa6-9620-4c5b-94f0-ad36f8f9b574"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe39df71-bfbc-46ea-8542-12f4e08cf26a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "17b8a98f-155b-433c-843e-23b1ba50fb9c"
                    }
                  }
                ]
              },
              {
                "id": "4dbfb09b-ca53-4c6d-9b07-5274cade6740",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5dee1f9b-f093-4843-b212-e231de40d69c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0a9cdc50-a603-4b17-9120-465d4dd15421"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da09f23c-f2be-46b9-b940-609ee80b05a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "10a6bfeb-ac0a-43c5-9660-fb1562cfe800"
                    }
                  }
                ]
              },
              {
                "id": "b0cd6a5b-02e2-46f7-aef8-63623641ee12",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e0deea1d-9638-45ec-8ad7-f47bf22152dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b1faa5b3-f9ce-4b3d-b28b-03db47a85754"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "77f8de75-62d2-4646-873b-aef51210dcf1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "90ae9fd1-9440-4e69-ade3-0c1f25ce0036"
                    }
                  }
                ]
              },
              {
                "id": "0d4fdd8b-32aa-40c4-b7ef-9d7f4ddeecc1",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d72566e6-92ed-41cd-bb59-d34e0215324c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5b81f821-472d-4062-a738-2edf0b403a10"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b41a7ec0-0e5b-44d3-808a-6c806682162c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "771cda18-169f-41ce-9062-e34ff28c8b57"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "337dd5d2-eb4f-465d-b1ad-2af4f0a7fdb2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "19c19003-9576-44e4-adcf-2fa9d71715c1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "41c5728f-c30c-4f1f-a155-40be12496579",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "743bd42b-5431-4bbd-b3df-4f0445674041"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e3d0db23-5187-4e79-b4da-9c5f1d42a483",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "e2deeed1-09e1-4399-9ba9-f521faf6a592"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9a72d178-2829-440d-b48f-fcc736447267",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0eb03639-adb9-4d8f-8a49-fd4ab8b7fe68"
            }
          }
        ]
      },
      {
        "id": "dd388cfa-423c-43cc-8f80-ef60ea1f76b9",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "7228b997-cb7b-4b73-bfde-c87c4c5078f5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ffb70dd5-60c2-42a7-b412-f0ec29040036",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2f070248-9185-4dc3-95e9-169d09d57e43",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c32272e4-7675-489e-aee8-0f9c04af8caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c144802-414b-489d-96db-e794365504f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8027770c-44c5-46fb-b51e-c9c2da159465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bafd7d4-5b5e-4820-842c-2661c01e2643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3beb30d7-4e77-40a3-af67-b5a9b4a30550",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d19dd33-8c59-4356-b83e-270c7e07c80f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84c26082-040e-4177-806f-e5e8bfecbbe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f02919e-fe42-418b-8483-c3c2e25e18ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "af59df57-aee0-4d27-8842-1f7507f3871c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6313e240-1b3b-4d5a-95ed-da3d9b94d045",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32120290-0cc0-4ad1-8500-c507a37610f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "236f71e4-cd4b-4689-8d6a-b2908c5617ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94007d4a-2136-4d47-baf5-542aa15ca1c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5e1d719-9274-4415-8014-4c07ab2126f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4df5fb2-6e9f-4f48-a556-62670ab9cb3d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0a78d2a-2b59-4211-8e80-82ca00073a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b341e4f5-2457-4577-8f66-db1645f9de52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd0b17f-7211-4c44-a485-ee07a7ee7b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6771620e-d29a-4e48-9b68-c036cb809b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d4cb3b4-14f8-4d36-946d-979cc37c9f28",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "057cd63c-2a77-438a-a558-42f9dd56d445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db548da1-a398-4770-8457-2e066eb3e61d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e08fdbe-cd85-46aa-bf62-fae05f533d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b6d1d65-6ffc-40e3-99b0-bd874672f3e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f75d162-c646-4462-a08b-59443a8d6b50",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce64835b-3b69-4c50-bf54-7311d14472f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "929aad7d-baf8-4d26-a4fd-a09443407ff5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7aed86b-84c7-43ea-aec1-9e76753bb6c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a1f7dd9-8abc-4856-8ccb-4052dba27375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cbbf762-531d-4ef9-8b32-bf1f503a95eb",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53ea9f73-cc58-49f8-bc33-fc2180f2430a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58a951ed-dcdd-48fe-9c76-84540f7a5a3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dabf4e60-6d7b-4b44-a617-f3dbf4a1c25a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "32db8991-dbc3-4720-95ef-eb2448993102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bfad326-13a2-4e33-aadf-3d7df006d7ff",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1edaddda-cfcb-40f5-b29c-9d50e87cbd00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1d63b19-9eed-4d51-a220-23283ddc03e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfd61605-d538-4a0d-aff6-5972b71d6b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e083d80-e4c5-4185-9364-2471eb66f9a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a51fab7-db6a-4b28-8917-08e6e1adff98",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f953239-2ad6-49da-ba60-01c31d011ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24648c8d-89db-44cd-b2f6-bcd7e189959f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9935e430-50b3-4e30-9773-96e33a112a80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b718cb4-da21-43a3-98d6-2e69fa71c88f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b4e1ea0-bd48-41f0-920e-c789da51a72e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f05bc4cd-9ede-4800-8a4c-2fda06905a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dcea4ef-3795-41d4-9c8f-0205fcc010e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b94b2fba-629c-4484-a9f7-47b732b6f16f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c73ee60e-1f2b-4570-9980-5ae87a19182e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95d8a69a-2a15-4282-9fde-5627053f627e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ecf150-e937-470f-9cb6-e8c9d6fb4c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "691d5434-aaca-42f4-ba48-1544982dcbc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45b89649-45f5-4ffc-98d2-5272ef0a5170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "9b7f5b40-deb9-4a64-870e-30b4e6c9ae91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32417b30-5c97-4cb0-b707-9095b4ffbe20",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7348ed0f-40a8-4bbb-b044-37697cc60632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82cbe589-8f98-45eb-83ac-f836b6e59784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90a9528a-d236-4462-bfd8-aa8e6fb93b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b7d6415b-2e15-41e9-b151-4d1464719560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aa19b83-ef90-4aff-b311-fc19b65dec59",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a77264a-d2cb-4e6a-ab14-21b95d66f549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19033ff5-a145-4049-b392-7047e4da6bd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5c1162f-cb65-4ac6-a5a1-a2a2196fd584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "662ca49a-cc9f-4d24-88b6-0a06450786cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac49850-b3c5-4c10-8eac-79aea3f23b5b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d2576a-bd1f-4718-b053-6493b45b71af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3584689-9646-4209-9a96-e3a4fde49f51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "703f5068-a0e0-43a8-98ba-7d4143db5e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "bde17760-52c5-4f57-9974-f04806f587f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1035d67-050b-4ddb-9be4-762ae7dd75e5",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5118a0fe-021d-40bf-85ea-f96602c86754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51321f15-2639-4d4a-861a-bfdd2fb8b3b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "541c74ba-75d8-44a2-8c02-e26730503365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c62ba7a4-4bca-4b37-a2ce-bc39306bac15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e70d112c-5720-46c6-9463-ea917def15a7",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ac67c87-1ed5-4fe0-aed7-aa5228449384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4438a996-0460-4190-8ffc-901df55939cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98740441-0557-4bda-9ed4-74dc2dbb805e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "d75555f5-07ae-47f3-9173-cd99d33a9c25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9ebc235-8753-4794-bbda-e33ae658ff94",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09b48b3a-dcb9-402c-a0c4-64d0e2637519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdd0b0f5-30da-4484-baaa-529a039eb7f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c12241d-9c07-449f-b75c-f9b15eeb39b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "41c09c53-389a-41b8-be58-598b60baef78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e24cfb83-ea5c-415f-bcb5-679de7cbc62f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b806d772-30ab-45c7-a5c1-f4fc946146ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b12e9f9-f41a-49f8-81fb-3e9d7a777d5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a1e0b50-3724-4fde-9d2c-3321a7943a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8dc60ab7-286d-458d-8c15-2ee95dcd47b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18f08200-6413-48c9-bdf3-77a6ce88c8b5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3422452-3048-47bc-8f00-0a5a1f0a7ce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aa029b5-8794-48f0-ba44-babcf3496688"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d70bb67f-6a19-4709-87ac-56a40c2fe28b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ead2690-d664-415e-b3bd-3b81b8ea1166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aecd4d88-df18-40e8-abf5-a5ac5369b7ae",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c1c718-2c54-44f3-8fec-53a34a1fc205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9395066-e727-4514-8ab4-de4bead44654"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba5e6d85-3fed-401c-aca2-a31d3702277d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3fca681-8406-48f2-a24a-af1ac55a14e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2acb374-7b10-4f5c-90a3-2a41757f8b83",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d6390d5-a6a4-49ce-9389-d5adfccf797b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da0655eb-c9a3-41ea-af68-a9c8010bccd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c257d663-0ece-45f9-8f69-583f9ebc61fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbafaf5c-0479-4ffb-8db3-2aa597d2e610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f04591e-674e-4be1-84bb-09c04ebf260d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f3192a-eec7-46e4-a139-cbeb50f7845c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95853724-d510-43f6-92f8-d7298b5308d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd12fa64-04df-4835-becd-6ff403a0688b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d307ba1c-4ab2-4f93-b87f-2e7c3056db1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a6f79f-7fb3-40c6-8786-7d835d68946b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ed9201-1be8-4ee4-b452-5e24011c67e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7007b04a-057a-4a5d-bc62-34046006ff9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "669f6ac6-e15d-41a9-8980-801aa6f60853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83878c05-d59e-44c4-b141-898a3576166c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be92fa41-b235-466a-8539-4060b48914e3",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e5d3d68-d372-4118-b421-3ceea7324df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29833065-0f3a-4558-9010-ac5204d03045"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15091083-57c7-4d1b-9de2-8c48a4c6f42e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4668ce7a-06fa-4a48-aa36-35c21bed0eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff0e8dbf-f2f4-42ff-ba69-b158f7424e93",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "479adb43-0a96-44ca-8e79-20a21beea73d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f358319a-123f-4006-a58c-ae8a95c81be7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28dd39ba-2ee4-4cd5-acaf-b4dba0d54ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7ef2afb-39a7-4394-b210-59dc3b03bddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71c09fc4-28f6-4d4a-b146-f5a223badf4a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c02479f2-b460-4031-a948-fea5b33d1a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed8daee9-7784-4c8d-9f98-81d9b0fe5d1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73ecf834-dbde-4bb6-8db8-bef2b50356c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f42c3b8d-4d7b-44c9-9617-6a2bb81d31f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "652f2d29-0a19-47dd-81aa-a5914fc9879c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0fa1ed7-c6bb-4c28-b92f-163499d24d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeaa31b7-1fa4-413b-ac53-705f16dd610d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "768ab5c1-80ab-4e52-b687-92810953531a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdedbdd6-6b13-44a3-ba5e-d03028a62dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe2a42b7-ff7b-4aaf-977f-fead14b942fc",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07facd34-ccad-4a58-968e-11184f49dc84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddcb333c-7daa-4578-bbb4-5c02e822c49e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c800eddc-9771-4569-8f23-2a11931ec136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1aabf63d-4e6e-4e2d-9c43-f4351ecea4e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95e7f9ea-08b4-404d-88f2-170720a78fd6",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "648566ff-8a81-4b18-8fef-ca0d41793628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12f4d03f-71b8-4729-b960-71c93172dbd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e928e03b-70a9-4db8-a624-085f6ac40559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ad31298-deac-431e-8a93-a1b0f23e9a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc5c3e1e-6737-4aab-aa12-21716908de80",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe9fb82-1ad1-48f3-a9c0-38b60599d01e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a979411-321e-4b77-9fc8-7a4f45e1d940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15e2fa8-a9ea-431e-b1ce-3992c0bdb96f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33370fdd-ec26-4874-bb58-fbddb98d4aa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a77d4b-3796-4083-a297-19b066309343",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "474c98c7-d164-44ff-96b2-d2f5ae4bbe67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e10daf0-0823-44cf-b12a-c1bf47a82405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b313804-cd0d-4dd5-b7b3-25c398ed0672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d713c76c-6343-4888-af06-b4178e1b4a1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ecc80c-f422-4ff1-976b-2a2858fc06a5",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "787e84e5-a9e8-4c7e-a487-4b1ad79fdf86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e63a9b7-3b1f-466e-86c0-3b38bd49f2f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eb894bc-f0cb-4de8-a3b5-d30b2398cc44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddf60d91-d63b-4927-b23d-92298f8c5e49"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "58feb93c-15a4-4055-a71c-a685ff915fbf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4c6bcf75-9aa7-4a94-b095-61f65a3b6cf2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a096494d-71ed-497a-a69b-3adf111df08e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e3617418-d76c-44c7-bfc0-1a69e417503d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99d908c8-c3be-4915-9027-c93b02538793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dd296db5-34a9-445d-98ad-9cce93c30063"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1bfe132f-7ccb-4263-81e2-55f402f7d770",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c92d55b7-6d75-40cf-9832-604e63cd868e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f12b0bfc-2c07-4221-b477-8f3114194798",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f2d75d6-6ea7-4848-9af2-2527684424ae"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "35c5fa0a-3952-4f5f-b5a8-dd43e574a2c1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f1973732-285e-432f-8e67-4d5652e3d182"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "974dad3c-18c8-4e53-a1e2-636bc95485c2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f18c4ac5-201c-478b-bb72-66fda4293229"
            }
          }
        ]
      },
      {
        "id": "5af1c2c4-5c5f-4f76-82bb-d95a004da5a4",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "9b1e19bb-9df2-4a17-b746-71d9fd141b14",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2e39a8b5-2c94-4513-b550-b74451f56bb1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d52b2fbf-b198-474e-90af-0999dac3c612",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2d777e-0fb4-450a-93af-97f6e472f3aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bf52d6b-0c2e-4560-a7f6-b19785df2ab7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d7e21fc-0b86-42a0-a290-213c0cd6a6b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3624f447-55d6-4ca3-b336-bc4aedba96ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4abc4bc6-2b3a-46c3-addb-1e33277a6056",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "550b903e-5492-4bd4-ad61-a90fdc579c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fcda72f-0acb-4ea1-b64e-64cfc10ef212"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e26ca8a3-865b-4d89-8de5-3ce2a8eab064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2de2fc24-fc34-46b7-8b0f-b8948ceef967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4bebff-8a7c-4a97-a518-c7edafb1f127",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2575a58f-5839-4955-acc2-11740112210d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cff26a5d-d82a-477e-b3b7-39dd2b7e3385"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b34c5af9-8785-4b54-a0c0-ca1af37419d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed04b843-7c80-4be0-a38f-d09b3c55ada5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0017778c-aa1b-408d-8a87-60c452955acb",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b9f82e-97c6-491b-a194-d2205977d44b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe77ecfc-e720-46d1-a7d1-394b8fae31ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57cdd3bc-8b27-40d3-b719-03f03c93a579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f30fdbd-bf7d-4df6-840a-553e6cfb3fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efc2e421-f124-45e4-b5b7-6e299a1d15de",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81e3faae-28e2-4186-9bc7-ac5efca57d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b190929-d5bf-4293-939d-faf30283e842"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6368f582-01a6-4ac6-a92b-6c6025ec2f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "09f17704-151a-4f65-8025-f6d9d810c4b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c690a4d1-27af-45bc-a4e4-fe2026ac52c3",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7cac022-420e-4d76-b267-8bb5114cbc2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50f1ce07-444a-4d78-8a9b-c14dbbdb0a58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f7c254-6452-4c63-bd01-a296ba580057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe1765a3-6c83-4df5-a835-18e7681b5568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb815484-f870-4183-bc46-6d0bd5ea5e33",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12c375d0-08eb-4046-9942-d12a17b1278d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d14cb7bd-ed2e-457c-b7e1-abaf68a0cfde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83d054ea-f483-4f32-b349-ee48eb79f0b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "948fafce-b461-470c-8865-14d958360066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f1318a-41d7-443e-aec4-555465eb97e6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95bbcf55-6a84-4391-8ebf-4605fe4d3322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c476c90-8b21-4925-8fc8-fe8d2f778288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a740c720-75c8-4c3b-bc5b-1f1b61c32526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cc24996-83e1-4a93-afe2-9249cda2b2ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ca96cda-fc94-4716-ae31-939cae8885cd",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98fc0b83-e0f2-49f7-92aa-38f744b73a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "787559b4-4c22-40fe-b632-f8e57d9b65a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "045b31cb-f843-4446-8bff-609a182d69c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "08ce0d4d-bb73-4a45-9810-562c7178116e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1820fa24-6d3e-4035-920e-8f8b89f11e6e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b428df0-fed6-40c2-baa5-92cf0cb7933e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a03f74c-476b-44dd-bfcf-e141093d333c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fc252e2-772c-4bde-85ff-b611d84e792b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "642da1df-a0e8-442a-a308-9aa728097a6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47dc1b7b-59b6-4d64-a35e-c55176eee4c6",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67b94434-23f1-4468-85a7-d2c21bd78e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecedd23a-2106-4207-8a35-15b1582c58e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4477dc09-18ac-48a5-ad9b-6d993bf28027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "1e889718-5ef0-4ae3-b34c-252afd1b2bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9925eb41-5883-461e-a445-89c0f7b4b44f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be7e3089-512d-4722-93c3-0ac621ebf20e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37a418d0-799f-46c9-8ff1-6e71af65bdd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed38e6d9-26bc-4381-b97d-8c5689c0d484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a399a3b7-b375-45d5-8d75-0933bacb0ded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0789ac1-1b0f-4ee3-8f88-4d71f46b9d3c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5128642c-9fc5-431f-a9a1-6fc36028daed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9649372a-daa5-41d3-9cf3-86d83e0b3935"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d427ceed-7390-488e-8b3f-44449529c718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c32f244c-2aa9-4614-adec-952c26545524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec3ba63-4958-491f-bcc5-01a6de15259c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf03b68a-a42a-4cdb-824f-6a65dcfeced2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21dac277-831f-4d20-8e1b-ca5266c0bbd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a73253e2-85fa-4f85-bcb2-37524f682295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a18998f3-48b0-4674-a895-26b846717698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7696be87-9c81-492d-9150-5bc980c3f17a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "643b17de-85af-4d0c-9e37-b22f3743fcea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51a964d0-647d-41d4-abd7-9cde49813325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74ea3ebe-c2d1-4ca6-98ac-4f7310eddbd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "235178ae-9db0-487d-8390-152a4f14df66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c05d86-1d6a-4f89-8211-e62dcf1eabc3",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a25877-bad9-4338-a40a-fe502dfb2a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "146a8e66-108e-4205-af04-c2baf8da867d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f0deea7-9d3a-44a5-abb3-6aa123d2479a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2e16fbe-6420-43c0-a43f-be30889d982a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b30fdff-3fba-4cf5-90cc-ccdebaf61afd",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83592b70-7988-4405-9172-74e629f48e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "477d5f84-f1ce-4702-bcd3-15f6b62217a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f26d2b86-7a75-4829-9a05-3efc6a4252b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f7c078f-72e4-4ba1-b0fb-5602713f4f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd928bce-ba56-42d4-a88a-fe3689e9b8cd",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7449f376-ad90-4309-b3d8-84e9ce8c9318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b7e31d0-0724-43a7-a90c-f8c6307fcf3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b55c0aa-580d-4c9c-ac59-b271795bb5f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "34e8a381-e4af-4d26-aa8a-d44dd0043e22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eba03ad6-f71f-4eec-99ff-bf04cb7782f0",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2918246-28ea-4a6f-a58c-c09ac172fef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42dd20de-58da-49d6-ab16-90d259021c2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf70742-ae3d-48f2-8fd8-0ab4eb538bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1abd5bf-2dd4-4348-b5bf-69c481cee701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e3d4283-643b-4b0e-b4e7-f2ab1397ae8b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04a5a6b7-b691-41d7-8fda-9470746b6505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fed689fc-5d6d-49a6-8eaa-b95f906692ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dddfb4d-f411-449a-a541-832d067b9e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8b8fcf9-5479-47fb-9ed5-0bf84da82a68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20f2d222-f6de-45fd-85a9-b744611a8ca7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd1a09bd-d085-4fe9-ab03-aac22106f10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e23f4c40-5720-42ff-b0b6-dc17bb6be70b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edcfc479-2351-4f57-8cac-22a552107e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68b5a374-140d-4b1c-9033-d7da27293d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdad7749-9aa3-489a-abe1-a30866e05b13",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50184b30-41f0-495c-9d3e-65e2eb0b0371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9981bb6-e6dc-40fc-8468-8678b0cc9329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d507d11-5e04-4fb3-8359-9ebb2104cc8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c93d1667-019e-4b6f-b8d0-d46ef078629a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e45d12-c135-47ce-9e9b-a751a04d6dad",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e2ad08f-efcf-4204-9d86-0edc29da95a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66ebea93-24a4-4a27-9466-a87022c0bacd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ff4c4b-8032-445b-aa03-99b91e193e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eeb483f4-2f17-4f2d-8a4c-049c3afc40ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1223267-3a70-4167-8465-7822c7a78c16",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cba334a-7792-47da-9a96-924c295176c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbf43661-8206-4a72-8796-7ed6678b16a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb22c55-f47a-4559-9370-3fe8225c44dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02dc078b-d587-4af2-9d1b-c2293a6da34f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38350d2e-3ace-4eb6-bab1-1eec5d302aab",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6989daa7-41a4-4d62-a3b0-89bf7b399d6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ec4c9ff-7a1b-4bd6-bd23-830e72145600"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90eb9cd5-2e1f-4aa9-b419-1d72fa8bd988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a11f9b40-589d-4133-9064-d1a90cd4e36b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813ed573-98cb-4fde-be2b-64abbe1913e5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea5bab56-4c62-4aae-99cc-b57b1672906a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fa9441b-d0f4-4836-9665-d5272833dc72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb9d469-e023-40bb-af34-bebb96f90830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "861be059-42e3-4361-b0d1-16651795af59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ada2e79-b45a-42df-aa0f-85d44cdc940b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3377fa7-7609-46a3-98fc-cac1a905eaf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ac5e1fd-4ac7-4bb6-86ac-fda6e5f621cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bbacc4a-015c-4170-a1b2-e56bf6365ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49141a1f-cc73-4d77-8754-f1d5bf78c5e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c778fba1-64bb-4368-a0fa-39a1f79e41a5",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf21758-c885-4524-bcdc-5610152ac33a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7d92bf1-bcc3-41fe-bc89-55954b1a9d26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3374b43f-b88d-4231-ae81-c4a853c4721b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7727b042-e4d5-46c5-9afe-cdbcbce3c521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d4ee301-6f41-4bd3-9a34-d860676f0f36",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "215e56c8-d7ab-46c7-9688-27fc943b41c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcb03aa4-210b-4297-ac44-88553e25f0f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cef44d7-7261-45fc-ad4f-376ec11418f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98c692c9-3976-479f-84c6-f11b9d5ac638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86d7699e-7cab-4761-997e-12f1769f9c94",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac097f5-de36-4976-be63-301394d8cd35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46dbdefa-061b-482e-b893-9ca032c2f335"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a6f0c7c-b709-45fc-8f99-fd47d8e5aa50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64508363-59e3-42f9-84f3-a5b6408eb6a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73a4683a-9900-465d-a584-c3acf772b9b6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3597415a-02e2-4512-a485-66ebccda0537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "905e4d54-5a2e-4595-aabb-337930e07124"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52a4e300-0db1-4612-8525-a67267aac6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61a5a2da-88de-4aa2-ae0e-4d5638ea374d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "950a1e83-b039-4a49-bdb3-4b54dd7936c1",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd6be36-1cb2-466a-a8c6-148ab76ad19d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0484c5f1-0e79-48e9-a205-297945a5a4f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a4ea6b-b90f-49c9-96c9-baea455e895d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4156fc11-d497-448e-aade-ec90d7fc44ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "247a806a-39f1-4db6-b151-ec32acc3eee6",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29fc6c17-6161-4471-837a-c3e9ed21308e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "067ac15d-807f-4ca9-a4c3-78fd9655df67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70993f1-4b7f-4b1e-9b96-c5894580f3ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f55b69e2-35d4-4f21-b858-49f4fd7a23f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8516c359-6f93-4421-ad88-af69c80861f8",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4366cf5d-7bf4-4a94-8f90-5c73b89288df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82b3820f-40a2-4ee8-acf5-cd8d5328758b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d579858-0ce3-4078-8a99-b1962edda4f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "378c46c0-8777-4e69-a143-d1bb5cd6e3ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9decd209-215b-4a7c-ba21-a6042971e9f8",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4250193e-25c6-4b2d-ab0b-81e4141488b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e9f4b2d-dbd8-402f-af32-2e232777adc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619289dc-d249-4b93-9c80-45c1ab873ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd06bd4e-e058-498f-9175-ea4023dfb983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18fc8e42-2ddf-42ec-9246-fc15f5e86970",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e743e02-2f8a-4ebe-a9b0-515b5ed28e86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b59c2e8e-ee61-4f73-81de-bda442b761c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04063ff9-5a46-483d-a00c-5b7cf85a0cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07621f36-cdba-4e11-beeb-f3ff9fa0f323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a2866f-7ee1-4e32-a586-89ee4f34c42e",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13906bb6-42a5-4e20-92a0-0924d085f0c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96ba28dc-47a6-466e-b389-fd6a68ce9976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67268e57-20e0-45c7-88ce-6b95d8cf2c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdb7269d-3aa2-466e-af73-b3d781387bc0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6813ef52-260d-44ae-8417-43569301fd5d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "353e179a-7c5a-478f-8a67-0d4641792969",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb1739bb-e04a-4612-9964-82a9bef57976",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a87a266b-daf5-4b27-bab4-ab9cb482bfa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a6444f-7ed0-4157-8cb1-6d96bf19aa02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "09f70521-23d6-496f-91d7-22d8e1f0c4d8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4764379-50ce-4d25-8714-19f22943291a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2025b44a-0fe1-4388-b247-a0c722645c63"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e928085-d774-455d-abdc-9329a82caafe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e90a552d-86f6-4111-bc2e-55abda631784"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c8cf6785-84ed-45fc-9ee4-735dc38a5886",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "65db45de-d677-48a0-931b-d6b9e3b42c86"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cd4afef3-5b57-4f4e-8d94-ac67d9edaef0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "941f2925-356b-4be1-b930-eaa18c63f8e5"
            }
          }
        ]
      },
      {
        "id": "158527fc-c487-4004-99ba-4a57e7eeb25d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "9e70baa4-58ab-4e7f-a8ec-127f89a3f025",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3b6aedf8-6eae-4263-94c0-92a82d20f483",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "184ab83d-9787-416d-a5c4-c8d249a12287",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a70ae19e-48fa-4b99-a916-7f924dc15cca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26cc2ce8-702c-4d00-a545-7aa909260ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d724bc-6cfa-4115-a66b-d19a09f6482d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbb84436-5daf-4dbc-84c0-8b88e31c4e07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3a2afaf-5e41-414d-a025-46595dc5cb12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0842b662-5ef1-4e79-98bb-e4f50fe57e92",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72b2a9b5-a0a0-4cff-85a6-4ffb9dcc77e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08876256-b563-4a94-85f0-b12e2504d000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bb943ce-74d6-4028-b757-25e8c187a0a7",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb2500c-b969-4be0-bd86-99f8b3053bee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a2ad616-1a92-456c-8638-7e827d8b45b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d15595c-69ab-423a-a74b-2451b00fe955",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe24d29-36f5-4af5-a374-134bcf9ed40e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "238151ca-07ae-4c55-b8a4-31e89eebd02c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7f109e6-22c4-4b9b-8f58-1f38df036cd3",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d36a9c-790a-4129-b9d7-b4eaa3f34c5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bba330e1-02be-4a49-ab7f-478076990344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c129b0b-9002-4759-8a7e-ada6747482a4",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c15b22-b791-4c9e-bbd3-c01388e3f19a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a6a8dfb-01ef-4fb1-9d68-c93a50cf39ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fabad35-d5d6-437a-8414-b866c8a8d26e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "255fe337-62e7-4635-b41c-9af05ea2d1e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f652bc4-c872-4078-9a63-e4dcad56bdeb",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3754404-bca0-42ad-a6e4-58e3a27f5701",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1974d773-fadc-4727-885a-8fe4bf959f45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f81f84c9-fd5e-4823-bf50-3c720a768525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c972e2df-4940-4cf3-a15d-7776fa8e05e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24d3715d-76e1-4c94-9deb-114bc671fa68",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0af8b87-4e45-456b-9eb9-0fee34368c77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb32d7d9-70e4-48f2-a6d9-eaff03b2e694"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d20f3c-fdcd-4b50-9771-f517003b8e21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da5253f9-a783-4da7-ace8-f42bf508c44e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c65d60e6-a3ac-4714-853e-4ba3051f5939",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca1fd72e-e499-46a1-9023-ca243ed2145b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31171fe0-2aa3-40b2-beac-5009cbe452da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01cae8a4-be81-4973-8437-49f8de2b3050",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a68c53d-918e-471c-adba-fea34ff4ffc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa570cb8-1097-4db4-92d1-beb4b92f2a04",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a80192e-3a91-43f1-bb0c-5f7fdb34d340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89e1dfe0-60d6-40d1-9187-bcdceecea737"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49fbc300-762e-41a1-9dad-b1d75e107bed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caba190d-8ec3-4c85-b3e9-444c79a08945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "652c1746-5571-4ede-b0ca-b33c2137b065",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22cdabd0-5a24-4565-afb4-c3b2e9482353",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88d8a7ee-ec88-46a3-b6a5-c5fb9340d4b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b4b9592-5583-4a1b-a39e-93e60adfb98f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8730473e-1c38-4b88-af9e-ec7ed80bcaa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3df89f2-7fc2-415e-8d25-7ea468b1ec6d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e9a092-45a1-46ce-a846-f2b0a5f951db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd3ccab1-08f9-42c0-a5dc-f845fabec38a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d944b2-3e7f-4475-80ec-ae16468bed72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fff95182-35d4-4f33-89b2-9524ed4a46ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9281a9bd-0144-4c91-a310-5964bf5ea480",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d87c33c3-ea1c-4388-a2d4-fd71d30659b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b600611-0234-4078-adba-625ef98ed12c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f62b31-c652-4d95-8007-efbafb0991ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4275a66f-3664-406a-a38f-1efda1e64822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18cfb265-96e4-4b69-b790-eedf2542bddd",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d835a5b-1a1c-49e9-b0ea-ee2951c9f26b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76da87b3-6488-4145-81d1-967d20dc1311"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6972c55b-5611-45f2-9df0-5c50f7117c10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee174ce3-9940-4dc3-a209-8d002d32e3a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eff005f-41b0-4703-a3be-92c5ac0cf252",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef5af28-38ec-40cf-a14a-ffcfabe9aad0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fbc6649-863b-4109-9bbd-1d3690655777"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be97a2e-19de-4781-8117-a22504c8203a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0823deb5-b131-4cba-b856-d8d2f7e26123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b7b80ab-c349-4c09-b6da-4de3f3c28d64",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb042028-f94d-4522-b0c5-138cdbfc6ac0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aac97af6-711f-4fd8-bc82-348fcb3bb225"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05381437-f38c-4023-a9da-7bf6a959b06d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff35adff-9903-467d-8293-7be7a20abe0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5016b268-9709-48b7-a254-9b80f0f1a58d",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f522a33-8144-4ffd-bd8f-04021774d91b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30f00bec-c1fe-443c-8605-63008e0cab9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa8ffa3b-1794-45e7-85a0-d7f082f50c85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbf017c0-161f-4820-85b7-a8394bdd21e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4262496c-4fa8-4059-b5d0-f75a6b56ea55",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06634aba-bfaf-4583-b95d-258c018c0f18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a3cdf72-0bdf-4f66-a231-3e42d0417e7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75002b28-a717-4ae7-bd85-1e823b90f57a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f34d4d7a-2a91-44ac-9f53-4ffd064c474d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f413bf8-f642-4dc5-a6c5-b163de0c3908",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a43290ae-01dd-4944-becb-57762be7a1f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6dfa987-8300-4436-be60-181a22ed37f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "595e5238-9b5f-411b-ac7a-40480ed41272",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d0689c6-3f87-4b51-95ff-4ea989ca4735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e978bc8d-05b5-4972-8a9a-5e3ee8c46446",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0afd1817-be9e-4069-95a5-330bb6ecf723",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dab4758-b316-464a-91db-efb272ade0b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f9d385d-aa74-41ce-9b4f-2726d001ad5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "992648cc-5f7a-44bc-b358-91bf4030f577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3745322c-a9f0-4834-bb92-ea51ffa39580",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3922cdbd-6aae-4772-b853-ee2bdb43eb7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79c91923-06bd-4199-9d54-c02385689b7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79ff5d41-1d38-43d2-82dd-ec45956bca6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6665196-8ead-4c60-a3dd-cf592e01b620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "414f6e47-592e-4245-a274-355194c0ae9b",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ef671b8-ec5e-4013-a37f-74d1037ee7c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9f6fddb-2edb-4d2b-a923-84c6665bf3ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e68c448-e238-4221-97de-2d09dff98a95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edd0ed7a-18ee-4a91-9580-6a4e476ab85d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c6b8c1-df94-4207-b28c-dcc86547bbde",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c65b32a9-53c0-477e-ab10-c6d095f13505",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd23f1d7-cef2-4551-b1ec-4045276f366b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf8827b-e975-4bf8-a471-83a096d51676",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a14caf7-3e97-46ae-8df0-0aa3c0fcdf78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "354c5cf4-72ba-402f-9c7f-033dc4b60db4",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0884db52-5235-4c76-9cb4-29adf40893dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "217fe5da-da0d-4129-8d20-278e69a4f22e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "852229ac-a7be-4382-8718-43ae3caa6c94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e070cc3-4112-40ae-9813-7a0585b1b615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "471168bb-1fc5-4b2a-a15c-5233886377e7",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc3be059-9070-4239-b6d8-165952f396b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b72fa9d-dbeb-4c47-a9d1-449e65c8e577"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5563fd3-085d-4af2-89a8-b3df7570d037",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71b842f1-f658-4092-ab1a-adbf7b7784be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a467a82-0b54-49b1-aacf-39a71186e4c6",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7069920-a4bd-43cd-9c24-91047d2f5465",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be5f6493-9390-48d9-9aeb-16bcf39cce81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a56d3c4-1787-4a50-95ac-c3cbbf582012",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5184b9a1-9fb2-4201-871a-3399001a8af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad338fb9-3117-46ba-b337-a313b536822d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe017112-261e-4fee-877c-c745713a880f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98cc623f-2503-45c3-86c1-1047f1f9d366"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d4f321f-c7e8-4a81-9d34-9981c063237b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db3da803-cd35-4f63-b66e-15f1b7a60b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e92f0a58-031f-468c-92cc-aef12c7f74f0",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b209cb3-5313-46bd-87f0-eeae308af221",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbe6d11e-c6ce-408b-b608-35f9aec5b800"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "172101e5-493e-4c25-a9d9-fdd3494d8111",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b32ffab3-a51c-4662-b8b2-cd643cb10e49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "941a148d-6c8e-4035-96f9-9766b7a59c32",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c419d69-ef83-4df4-bb61-a15d82cf827a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48cf8c51-2e95-4e06-8e8b-d1577d492f6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ead8503-831b-4f00-b085-15818a96f3c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb2b9fde-f7c9-4ebe-99b8-a6551cffa215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7c3e47f-479e-4f85-adc7-6c70795c56d8",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c4b2f8-5164-4212-b66d-a84087b5fab6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ce29d8c-6b09-4cbd-918d-c32a81edfab8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "808373fa-9b3b-41b7-a1d6-9fe9e78a69e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05def032-4559-4625-8696-42f108ab78b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caad2621-1f80-4227-82f8-0aa4b265fd4b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "600b1ad7-c5cb-4722-93c7-bd7e55589233",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "053bafa9-3bac-4a19-a255-daab0544b2c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9db4944-f072-4c54-8bab-7f54b9716460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "700f5a92-8234-4a94-a1b7-957a25421576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "957efbac-0927-4022-94a6-0080fddbce3e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a3bc6f7-50b5-4dee-8142-1614b2036606",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52c54bc6-b028-42e7-adc7-ca46c648054a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e4ca29-d432-40ba-9674-bfe714f2ad2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ee0f1f1-156d-46f0-8e75-04a369efe54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1423dd5-a8a8-47f3-88e4-2c48b20ab419",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c2e3ae9-446a-4351-956b-8664460cd6e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "031db600-a41a-4c52-b4a9-eba21d2b3f27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccdd6608-a969-4e94-a0c6-e9ff93e977a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38353ba3-5389-4450-87fb-10e4d056c5c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c92b37-0c12-446a-b92c-e4bbc4847c6c",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "749922c9-60fd-4eed-9c63-66c2c4d2c6e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "448af766-1ee0-47cf-8824-e51fc87b157e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eaf4556-946b-42e3-81c6-b1f555307184",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28c6d823-f297-4457-afe5-d25d5f12bdae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b4d2c68-5080-4456-b1fb-f3e571ac5751",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1acff75a-8506-42a3-b8e2-56f80d9851a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7dab643-b095-4ef8-93c2-ab8614c4cc89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96b733c-1ab4-42d7-b8c9-d033e9c92a33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b84d22e8-d9af-4516-881e-6b9c13f98aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d8a34e5-6be1-4757-938b-3c5478cbeea8",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7437568-224a-4c7f-91b0-f0476ea0f941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be1a5133-fb96-4e54-8d52-c39bcc8025f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b00f94a-73ac-45dc-8e89-d2516961159d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baeaddb6-31ce-4e75-ab38-8da5f4ee6f3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d1b4b92-a690-4c90-b345-9fdd69b1ab65",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78070fba-0e13-47fe-b29c-50eaff28fd14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "422e32da-52ec-4a36-afee-918436cfb4c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df94540d-4a3d-4b09-aa0b-0da7d60fd96e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a786ad3-ff95-433b-bbb4-fbbc9013775e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e80cb7fd-6730-4a09-8724-c7bb8ed5a994",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81ea2b11-541c-4c0b-9d2c-1ab6cf501110",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d138089e-9495-401d-95bc-2a4d3b6d46bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b582a9-b854-422b-add4-92cffe39bc75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3c866fd-dab2-4ca2-829e-ec15239ffb2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1615b10-f8ac-4e8e-b8ca-8e6bde1fa6bb",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c01e315-6961-485f-b883-04971883369c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbd6ad2f-a6ea-4762-adac-0c8fe1e4f2ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3e8f6e-183b-435f-ad6c-666785cec4d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5d060b2-3175-40e7-af59-ba36c05389d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e328c44-e4c0-452d-a180-8bab83f8ada5",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c53f9f64-f31f-4335-9bcb-a2978ed2e167",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70fcddc6-7814-4622-8444-b626db3299ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eddf25e7-bf1f-49c9-8dd4-0f5a33735c56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d480eabe-2774-446b-a3b7-6efed3ebb1f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d43c1d66-df30-4bbb-81e5-64ea8412287c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "068bb990-edc8-4297-b34b-a7119f8c08ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58bcf61c-91c8-407a-a5f4-395709557795"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e49a3800-567e-4c06-8cef-de586dea39d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff51814c-bcdb-475b-974e-fb6ba6368f0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca1b890e-5b12-4b48-a698-68a44b431ae5",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f857b684-5e46-4672-a71a-3eaf33d6a4f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acdefb49-9737-4102-9e91-33704c815c1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f862da58-095f-4de2-b8ac-4a6810c411ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b5e25cd-7304-4e0e-933e-6a2bd9ba47e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dbd5214-1fdb-4d62-9a40-6e361a735aaa",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9326619d-bebd-4ba9-917e-cca186997b30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bbfad40-b436-4341-bcad-3e3824182d8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f3d0b78-20c4-48fc-ab09-926299a5d79c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51fc0d45-4f80-49e2-a80b-3b3bdcc4a4cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49fe0b5c-4f5b-4246-a122-4a8262cac979",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49863e08-ccc2-4b0b-a68d-db37257db504",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59340725-d516-461e-a90e-7efb59918233"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c02a669-0f7f-4e96-8d03-cb4f8f0f6aaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84a12840-fc11-4e95-ae20-ae981182a9eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "923d0c24-9d35-446e-b40c-d51653bfac3f",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b103c513-c5d7-4d6f-a66e-c61283e28d03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "778068bc-4bb6-47b6-85e3-82c52a5dedb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb74e91-bd67-4f2f-a8a2-413f5edf43b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff370901-eced-45a6-9c82-3a44a569d143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278c9d19-4f16-4069-8e29-004da4d497c7",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f023c73-e65f-4cbd-bd58-c25a61c34274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baaefdb0-ba76-4f67-8f45-216aa72f09f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2d2fb19-887a-4d6e-ad79-00880c19b2fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20d76e74-155f-4b0e-9b48-9aed49ce39c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "812872c9-14dd-4deb-a863-e2c1f118ffb6",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e65f4b1-9ad5-4964-8827-64b2fea81582",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "384ef672-4e92-4113-9f32-aa56c5a55c88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8705d6a5-3ce0-419d-a768-66bddd34673c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4107b182-a45c-4526-84e9-5c7c1faa31bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae7045d-669d-465f-802e-b1dbc8a98d60",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1925de81-a924-4017-9685-c86531565741",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a84ebc53-06cd-4e1a-9413-14bc2dda6bbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed46ffc-2726-4fd0-a95f-b4bea91151d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e4aa79b-a04b-4486-b130-b9ddc6585425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c41865f-f30c-4240-8129-8c5a1a1de380",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a12ca706-6a99-4d06-9f49-8fdcd64b11b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a10f5ea1-6a3e-401d-bd1a-29a93607d3eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "802bb568-1655-4928-84ea-2cb513b572eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4bf8fdd-7f17-446f-906d-2e70a4a3fb83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8acccde-a932-43e6-9c3d-10e918af8782",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef9a2a0d-3ac1-483f-b109-6d21bae27f74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71107946-45c6-46c5-a392-0213acda680a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a8fb746-3fbc-41db-a91c-3d75e0941cb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "559dd76f-d84e-4fbf-8b60-508fb4b1f281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77185e1f-b3a1-435f-bc02-3e883def6ff0",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "567737d7-943b-4c03-892e-1466d7a4fbcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3044acb8-12bc-483f-91b8-e2c7f4b521c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a6c57d9-00f8-4fda-b98d-d116f32b022f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bc205f1-61e7-4bad-96bb-0e2e04c7f0e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4490a81d-96bc-4bcf-8162-2a0fa23902d1",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a88b950c-68f7-4ef8-adc8-a05d82821fbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de5c1f64-4036-412c-9ea9-fd8ff2dd78a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f5c9756-3b32-4f17-a1c3-10c377d049d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b21f6286-73c1-4326-966d-e11c077737fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd1fd4bb-afce-4529-b92b-215cfc31ebf6",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ccff6e-c47c-4f63-884c-96cb7bf471db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b05826d5-8f73-42b5-8354-befe9e0c729a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec28e5a-61d1-4db1-8d74-f2739d9957d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa57f8a8-b41a-44d3-b982-24711c7a379e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eccdb560-a28e-4f23-8566-4ac8fb994191",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d29125-ed8f-420a-bf2a-89b8febbc757",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2ce7e7c-cbef-4247-bf68-edeb6dcf79f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7c455e0-b70a-4851-9e4b-19b2340a56be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95da3142-69ed-497f-b4e5-25a925b6c0a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11c761f8-2c57-49c4-8f7e-a88c3ae1bf9b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f41b671-e77e-4178-af76-907c460e787f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d3678a1-485f-417d-87dd-54334ac5edcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbd6dc41-eead-41d6-b9af-a654b36b62ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1ecb11f-9575-4f54-93a9-efdeb3218318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4639e77a-8c3d-4f71-8168-9a33eb4b8fce",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd5b65b-10b7-44e6-ba12-6fc852e8a993",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d270c4a-e86e-4e9b-a9d1-fedd58fb170d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a6929f2-b03a-42b6-bf8d-e79cf41bc0e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6be24b9-4892-4d5d-b4db-cef05defabbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2f9e700-49de-4bfe-9c16-07dc26afc02e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "400a119a-311d-4f07-a41c-dd22f5295311",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92876ab1-4b18-4543-897f-c6e260c32c7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "062ed8d6-a5ef-4368-bf23-6d6febd69710",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac612e59-0ec0-452a-a731-840eb8ce4c4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "410e8e64-75e4-4481-815c-b769dbd947bd",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa27bff5-c896-43da-9785-ece693f1479b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3afa9922-927f-430f-b7d6-a8ce982d75ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "513b3295-6e4e-4538-a452-e3a6fe4fa48f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a045fe7-4562-4e48-a646-90870e1eadc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2714373-95cc-44e9-8fc9-cf0cd6287acb",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9b4b2c7-677d-4e12-b1c2-96e443d24079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "427ed1dc-ca82-41ce-87e8-1e6df08b9c4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c98507fd-97d5-42fe-9e8f-4cb52b2e5533",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a65e8e48-99cd-4a86-b3eb-9fa9d963cb32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e09813-f6fa-4c8e-880d-58b2f08f7e7b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2179437-5523-455d-9e4a-07bfc2fc58d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "158db49d-7a76-4a48-8154-550ca08ca6d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a99ef2e-e681-4a68-b39c-a6625d9e26bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acb17b80-3415-45d5-bee4-cec157746819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1fd000-07c7-49b9-8cae-38e0b9714c6b",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4a89d74-813d-42ea-8092-d9766d1eee18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1061a222-76df-4b93-8910-d43a23f8ad84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b140bdc3-90f5-4c12-b66d-e17a0779c84c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "258395d7-8b66-495a-bcb8-eda98f6872a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a7b4e0-97d0-439a-931a-e4ba3dc87eaf",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be02bbda-3f64-44e9-9f14-e83941012226",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd094ca7-a294-42b3-9a9e-d2b39141d365"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2f19a48-7f6c-449a-b46c-e6369548c382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cf94e7c-b9f0-4894-abea-1178d992ae76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28a529e4-f9f7-4137-a067-30f281803d9c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80102fd0-0fb6-4bc4-8802-741296c5376f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8512a9fb-9002-4af5-a1ed-944630f2b6b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "341b17e1-b7f4-4c51-9858-865e59f1da3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb4c8894-88a1-458c-b317-a9e5586c23ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "707252ff-65a3-4222-b3ca-963b53741010",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01cc7a19-aa65-43db-9808-070eb0a25236",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b786f70d-9e7c-42f6-b365-a99a06a7a818"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e838d5-5bf3-4d02-b98c-1bfd76b5c308",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8129794e-edf4-4449-8f22-a0cc9def5e8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e103dd9-91e5-4a14-9b63-43afed696f31",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf32abb3-40e5-42c4-b00b-008478de5285",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2f4428d-074d-4979-a2fd-5196469b0b30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a1ca7f9-4218-4354-9b11-d649b250f157",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbaad75f-e349-4dcc-b08a-56d1deb2dab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fade8fc7-e3cb-42d6-8a12-dba00396befb",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2242e2c0-bec0-4381-8cdd-31729eb22396",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f57c2c28-9e40-4924-b870-dc5f295b7cae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc46d10e-4e2d-46ad-8704-6d60bbc769ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adaf67a4-6d44-4518-9d96-e048474e0090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18a6ba01-894d-43fb-bdce-01a7e7a11603",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c4c0a5c-04ca-43eb-900d-64cb0569a480",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d221de15-4a17-4912-a5fb-c5c09c8a0569"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70582dc5-0c93-4e8a-a08f-e65d478aaf0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0865a737-de94-4020-bdb8-4ccc09627288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db8560c1-b838-4d6a-8675-952a73ed1ce6",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f8420e2-42b0-4cec-8d6e-5805591b9419",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ac39b7f-8e2c-4279-bd1d-9927751bd3a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93124840-09a3-462f-8f35-8d443493103a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b87812dc-7e96-48d2-8d09-d5d4159dddbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf824da-ba89-4c46-904f-e5691a1d8ef5",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e485b19-76ec-4b91-a9d5-d21f91d64377",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddce0e04-0f2a-4886-bd38-174c8ecfb98b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35657c51-b216-4508-af55-dad9cf2d4fb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03890c48-0fa4-4cb5-af2c-9371a6ec3185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c9c997-cfe8-4fac-aee6-5ce0b15b5e6b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf9b6e9-df7c-44ab-a283-42c1acc4ff80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c23361b5-2e47-4baa-a64e-e44341ef5d6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8402ade1-9cc9-4d3e-bd3f-9f9a56c82b47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3797a544-325d-4efb-aea8-072a4fbd0220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21c31935-2573-41e6-9cbe-29fb2da24eff",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7214f32f-de40-4fa1-ba40-9500232e03d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dea655a1-01e3-4780-9ac0-9b00f30291af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a75190a7-ae77-4509-914f-ab5ea16246b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08a74ffe-204f-47b0-bfbc-4c02dd6f83d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e18dfdb-93b2-4744-a3cc-ee65877ba1fb",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14a1fb49-c464-4b78-be7d-d6458e7bd829",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a24b10d-7a41-4bd4-bb52-bc70079d9588"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a31501f3-caf5-4864-be75-a66af85014b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18a3205d-6fa2-4abb-b9cf-5acf47b80be4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6666bd5c-0ffc-40a8-b9f8-33ea9e12d8e1",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e691509b-d61e-42d2-80be-7862e117ddd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01615e6a-edad-426c-9ce2-b2f3ed646c0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41340f0-e4d2-4a72-b98a-742e64b0e102",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be5cbfb0-bf74-4e18-a358-bcbccb99587a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bbe1561-79d7-4ad7-992b-a5007ee6d6ac",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11e33c6e-4d07-40ef-a32d-f44b521e83c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b0932ee-8e0f-4b9c-8591-a933950d969e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "928a19f2-0865-48ce-8c65-95a7dc31d503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb7c5704-0105-490a-94ac-a8f942136758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe5aa379-d947-4e82-b8e6-44caa3d3aaab",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "435decd3-4265-4f35-9729-20289e0e0a68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b22c6c6-1a1c-4c4e-be5c-044688fccc9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "709ca45f-af8f-477f-b403-57671801ad1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2fea843-c287-4486-84eb-397e11d2e5f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f6f3738-0ef8-429a-8d5e-a97d364ac2a7",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de6eb8a0-dc15-4c47-b091-3f7e6a709415",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b134b12-1400-442f-8838-43cbe22bf5cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "408ac2b5-0c91-4565-97ab-a0fc9c856426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a84e98a3-8697-4fd8-b6bd-8850c55fd9e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e7e080-cbb1-4d1b-b58c-c1bc27806abe",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3aea545-2a9f-4683-b3d1-003c06049aba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48716329-a8a3-49d9-a7d6-c95b7c7cdd7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a8903da-7301-4a8d-a5bb-f4ef606de39b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "785e2a9e-6bbe-478e-b2d7-3153d0a80d49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64a2c726-3a9a-4989-b9f3-8b5157dffe06",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85f4cf3a-2cc6-4cf5-9724-21e326e53d53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72c503aa-7501-43e0-9938-6aa258d4a45b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59596c83-1b25-428e-9803-9066c7d3cd6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f994285d-d8a2-4998-adcb-bee4fa3cda0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1beeeb49-806d-4972-a4ec-b9a27360e508",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9a6cd93-9e39-4f34-9e18-b4dce20edd72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7a3c76d-ee60-473b-90ce-d428afeafbbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a410dff8-db42-441b-bad9-74cf789fede8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa017047-2e2d-4b4b-90bf-a0c1795bae7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae4bde7e-c201-4133-bd07-3354661e3ae5",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "496ee29b-7c9e-4298-97ea-250694b0e268",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b53cdd22-f8ad-40a8-ac69-18188df25715"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ccb3e85-7ca9-4b1b-b2da-9069ee74895a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64a94146-5d88-4a6d-b769-2679ea274a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c99e337-6c4e-4d04-b2a2-adaef8c2f19f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9417d23c-b34f-430c-9c25-2a220cd5ff1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3012b13e-3c04-4ef8-88fd-346dcc198eaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f22c5d8-a195-421a-ac2d-186b723d5959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e7a45fa-0763-4e9a-9b3a-8c7a3d6d989c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2623b2df-cec7-40e6-8967-b2e1cf2e63ad",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb1440c-1b46-4352-858b-88184ddeb81a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35dfe8bc-6858-4763-b40e-960911582fd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61068412-0ddf-40bc-b25a-80ac09b13e4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb4b5bb5-6baa-4631-8c18-39b19efeec20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4eb4b07-ff3c-4a71-834f-c321d51f74c7",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446d2820-3101-4f7b-b8f2-b29e3d18f309",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cb02a77-0b21-48e1-8fae-0a9ade16470d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e1c45d-3b98-4c4c-ba26-f1d179d6b2f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a72b2974-4175-41cc-b290-2ab99e9f37fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac4191f-66f7-4595-b429-e71e5d06be0c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcdf9290-0a01-41f8-9aa0-7a51edee5cf7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5cb7af8-8490-4393-ae2c-0e308c7e6b84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf099562-4629-46ce-ae33-6c2b328a63d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32dee454-dd13-4c9f-97e1-244c45035887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2426b787-cf72-47cb-ac8a-80c3cf58efe4",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d389e86e-9604-4569-8c6f-c8951ade9e88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fff4a81a-4852-484a-a12a-f79dc8ab904c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d5dc48e-c506-4f48-887c-b80a25e728a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f457a67-1bec-4181-9922-226da5b5d974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aed27d21-a5b4-4bc7-8382-8b990dce1213",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb8c824-6fb4-43f8-b47e-5a9805f5f40a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb6f91c8-a876-4a92-8b40-31af2fc76221"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07fc50d7-7186-4b75-ba91-d8bb597bafac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8789e75d-7f62-4994-b8ab-6f1fb3df64b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2bb2d80-8490-481e-ab49-32909607a98b",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69489baf-8eed-408e-b38c-051ba5673452",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66965890-9de8-4651-98ff-98df3e01e608"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d860df0-e5c0-457a-ba61-41cf3dc83a78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55b4058f-73b2-4299-b66f-2a096fdc25b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae2f4c91-96e9-4104-b3e3-80e87c584ed5",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98737faa-644d-4b77-ae84-0bfee40a8acb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9ec4248-6d4e-4046-bb0b-fa570dc71bac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b0d7df4-80cf-43c0-8a15-3879240b0a08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f0715f9-7e18-4008-9d98-c203b691cf52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef7cf1b-91fc-49fb-b056-d274d95a1f12",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f3ed36b-21bd-4f14-87c9-380bb3abe2f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86f9e231-cef7-4334-afcf-c0ce50ec2a1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd263d10-2415-4897-a8ed-5cbe1676a32c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e77138e-2f1a-431e-816c-b5bb5d72b01a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec24216-fcd0-479b-bb96-8c9ff4cfdc4d",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10453240-8086-4c2f-bac1-660ea6d8be69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75509e87-9567-4593-999e-2c0c38e0c95d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a3999c4-5feb-4084-8fe4-91abbe349f6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17fea925-fc21-41d5-b4e3-f5129465bb56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5377110c-b9df-444d-89f1-5cff083227f6",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a564e2eb-802d-44a2-839f-d5ff19384e7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5e80ed7-5726-4f6a-a810-6455eaa52063"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb5184e6-2628-4875-b9be-5b0774405066",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45f53161-491e-494c-b56c-01de2761a44d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "834d81e8-a8f6-4e31-bf3f-ee2f016ae632",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd540297-9594-4f0d-8f8c-4ac3c7a5b570",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e0b50fd-a9c3-43f7-ae53-72d69a673f30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2462cb5-f74b-4097-afc6-ff959d5106e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fb77f35-f02e-4ae9-8958-fba8c1f1ca01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f3cda57-68f1-41aa-afc4-0cc256634d57",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0920ff3b-42b3-4069-8c89-ef509d29e463",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56a0639a-3dbb-4da2-a935-f2901ef0f7d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f1aaa3a-73ec-4449-8afc-ba9d60b8e9fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "133a24b6-d0ce-4a3e-9870-a2281ceae7c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f3fbe00-461d-4431-b7f0-075b32abbc84",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cb11edd-e192-4f50-bae4-4ad47099524c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3587bcd-ea86-4b37-9cbf-515b9c56d09d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e5daff-771e-4933-ac58-b0d614db7a2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "469b2620-d073-4d51-ad73-259ea8ffb5b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df4e520-4905-4ae3-b04c-068c8a2f4d9f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaea72f9-070b-49df-9f1a-076f1b937149",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bb09987-8e3b-441b-bb9e-5b21447c4532"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71e93b60-b036-491d-b511-4d7479d61c8d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c78a9da-ab73-45c4-ba2e-1377449c3c92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ec0115-af49-4e33-a2c7-905a5c3ffbe3",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe03b2d-8f2b-4cb3-9771-a513d7412c7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffd74abb-a8a6-4dfc-86c3-6444040c3bf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e58fbb58-ae29-4ba1-a140-2ae7f0a271a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d75a8fa-6d54-4f1f-95a9-cdca2d2f6851"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06eac510-abab-4310-b4fe-1a372cff38fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "db79f235-d85c-43a3-9c62-7f959fc0a4f4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4c696479-7e9a-48aa-bb2c-6b250ebb91f9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "056bfe5a-b399-47e2-bc7f-38fb905f0cc7"
                    }
                  }
                ]
              },
              {
                "id": "0d4edc74-fc52-4c68-92ce-554c38d9cff6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "32c07a0e-2be9-4af4-bb12-32bd03cbe363",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17ff4e87-faad-4b7a-9a73-caefcd7a5bc5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "06329226-0bf1-4889-ab38-14d8a21d58f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d63f227-8066-472d-bfb8-7c253718c636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b7e60fa7-1783-4aaf-888d-d751e12df554"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58f34cb5-6bec-48a4-bc71-afe3fd90f2fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e3084f74-7ed9-40f2-80dc-679cceb3b8e8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2c6a0fe-3315-4511-9732-e15f552cfe3a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "98a69052-a48a-4b56-9e54-d3e72e4cd11e"
                    }
                  }
                ]
              },
              {
                "id": "e858fce5-fde6-4ccd-aac9-57a771e79a11",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "3b5f8c73-f007-40fc-b392-b7b9d8ecbfc7",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b155f026-05b5-4311-be19-f869d83c7e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "084ad7c6-5d2e-4874-a0d5-0b30d2a39c36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0181ac5b-2e9f-46f7-a068-59acf1b86969",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4839c99b-584f-4021-b5dc-938e13a86b36"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6a68b78a-d420-4807-99b6-5affaa81ae58",
            "name": "Positive Testing",
            "item": [
              {
                "id": "30091739-7032-49d9-aec3-17d68eff294d",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bdb9c3fb-ce9c-466c-9e49-54b0f751cf57",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8f103113-cd64-4e10-acc8-c3210cecb7e2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b34fae6-2461-496d-81f2-d32da58556e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "34d66ce9-dcc6-4280-baea-17e1747f5450"
                    }
                  }
                ]
              },
              {
                "id": "9fce7fbf-333e-4f53-9847-a1b01dd984d3",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "38418de3-e88f-482a-9774-d9ff0fd0ee8a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "613be2b0-24cc-40f6-a11b-db8fe4d92b79"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30f27b6d-187c-465f-b6a3-3f57b23f36de",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e7422ff-683b-4329-96ee-d3441cd9ddf1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5c90cd40-8c98-41e6-9518-166b8a09bbf6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "3eac2f52-57a8-448e-9210-2cbd5ac79863"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "24d633c5-6451-47fa-98f2-07392beff256",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "905ad7e0-2394-4c2c-bf64-49a241b7ea71"
            }
          }
        ]
      },
      {
        "id": "5b25066f-562c-43a5-8e12-f1654531681a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "d7d5c897-6e22-463b-9c3f-d9c9ea2a7271",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a649516f-0e85-4930-8998-30ddfe3f6a66",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3e261de0-eef3-4aff-b91c-b8ffed227cc0",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2664cfe3-c1a9-4d46-be15-216c59745cbc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "355c3fc3-ce0a-4cdc-9c47-476ed35bc2b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b523290-4c5e-476f-8f00-a6aab4251491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7773a871-aaef-4edd-973a-efba3df852c5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "356e2eaf-e366-45e3-a3ce-ae237626dd72",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31dd26fe-9587-41ef-810d-2b39fccd3eb3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "095da6d6-81c2-4a22-867d-43ff05571dfc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8df27db-a40f-4cb6-acbb-c5c82e06b261"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d2b6d01f-b958-471d-954a-80e9d7b9d291",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "736c7c09-a603-4b94-be2c-3cc986ee4dad"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a88007c8-b1ac-4082-a960-4f348f4fe180",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c60e6e07-7599-41eb-9e43-6911560dc426"
            }
          }
        ]
      },
      {
        "id": "6b2cecdb-1752-4851-b39a-51fbd05b138c",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e5cb9a6b-a044-475b-af2f-081591f23ca0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ebf7f361-ec99-4641-b120-1fd92650c193",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cfc4d6da-9a1b-4c9d-b4d6-04fd7367d35c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e285c8-cc19-4cd7-ae02-49c921570a81",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f3d24717-078e-4d87-b25e-003b0b95f856"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "970a23af-6df4-4a9a-b03f-276014ba5ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "464d35be-d789-4bab-957a-937073ad7928"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6051c629-e045-4336-97f1-47a00fd34555",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "71d09cbf-b04f-4d13-a867-453c612d9d63"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6563662-e5e9-418e-9042-6ee0f6513a5b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10fadfc8-0129-4ca3-b759-0d8db91e9c82"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f1da2c1e-0dcd-49fa-b2a3-3989d8e8f2a0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8f455c79-61c7-4405-8a94-c356353ee02e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "72dbd8f0-dfe5-44dc-b485-aff0e433614d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "966a8839-c754-4b12-a2ac-c4750a0e89ef"
            }
          }
        ]
      },
      {
        "id": "ea1fe48a-0aa0-4dc0-b5e4-a88e212724c9",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "85411f5e-bf5e-4736-aece-db6335c6d4c1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7f6416cf-f917-46c1-9571-b4ce38a9bf24",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8f6c4c61-53fb-42a8-940c-f5859116889b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "897c841c-97f8-4541-8ea2-00e67312151c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bc57b364-df07-4f38-b552-1cccf7932604"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3360638a-baac-4fe0-86a2-1f4e03cc7d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "21489aee-b5aa-443c-b45d-3b063ca03eb5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b68a2c9-fe1e-4319-abd2-daae03769010",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "28ae107f-cfdd-4b44-86e4-445249732a55"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a646a8be-f036-47c9-879a-96c1ada81b44",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c13ce23-bdbc-4cd4-9bda-d2ba6c597882"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ef278475-ff59-4aff-8936-423d1bc88244",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e73ef334-fc14-4153-a77b-254577c2e258"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ea00a3dc-dcf3-46df-85e8-794885aea060",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "071d3684-2ea7-47ed-8ae6-fdb8d4f1fe80"
            }
          }
        ]
      },
      {
        "id": "b230c360-a34e-46c5-bd85-95932c87abc7",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d799960-ef7c-4d9b-931e-81d06a564224",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2e9806bd-3eae-45e8-b08d-400f8fb76428",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "8dde1bc4-1cc1-4214-bb7e-a8ad110f32b4",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f26ea5bc-c03f-4f34-8306-c1db5242582e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ff4217d0-7a63-4153-a923-38f7d80e7edf",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 86.29122807017546,
      "responseMin": 17,
      "responseMax": 772,
      "responseSd": 78.027813935895,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1699835737811,
      "completed": 1699835774414
    },
    "executions": [
      {
        "id": "64de1b50-8997-4213-bc9e-fbd34b217bb0",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6d580a09-c60f-471d-a3c0-584496ff7d23",
          "httpRequestId": "3c886a7b-0545-49a0-9207-c500bd5d8063"
        },
        "item": {
          "id": "64de1b50-8997-4213-bc9e-fbd34b217bb0",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0c633081-7e1d-48cc-8f83-779bef9ec969",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 0
        }
      },
      {
        "id": "e8a16459-ae7d-4ed5-a34d-9c788e943d0d",
        "cursor": {
          "ref": "2b15ed90-702a-496d-821c-be82fdcd4b30",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e1fee8bd-e515-4a64-ba15-fb88d5f3be15"
        },
        "item": {
          "id": "e8a16459-ae7d-4ed5-a34d-9c788e943d0d",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "a70f209d-aeba-46a0-ad9d-b1e4d3b2d3d7",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 0
        }
      },
      {
        "id": "4b504f0e-8bac-4c6d-bd8f-e49323f433a1",
        "cursor": {
          "ref": "4a55d3d5-9c0e-4d48-8424-631b2c52189f",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6c0f6560-8b20-4ab9-aaa1-ebdf0379d9b9"
        },
        "item": {
          "id": "4b504f0e-8bac-4c6d-bd8f-e49323f433a1",
          "name": "did_json"
        },
        "response": {
          "id": "670d2e7f-14a6-4ecd-9ffc-50539181ef4f",
          "status": "OK",
          "code": 200,
          "responseTime": 200,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bece9ab-a8ba-4559-9a7d-2fe6d0e4f1f6",
        "cursor": {
          "ref": "9cd72549-2ca8-4c0d-82c7-bfc8575d5ce0",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c61bc83b-508d-43f6-b962-3579706d2872"
        },
        "item": {
          "id": "7bece9ab-a8ba-4559-9a7d-2fe6d0e4f1f6",
          "name": "did:invalid"
        },
        "response": {
          "id": "b787f5a4-ad37-48e7-bee6-60f3befecf52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bece9ab-a8ba-4559-9a7d-2fe6d0e4f1f6",
        "cursor": {
          "ref": "9cd72549-2ca8-4c0d-82c7-bfc8575d5ce0",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c61bc83b-508d-43f6-b962-3579706d2872"
        },
        "item": {
          "id": "7bece9ab-a8ba-4559-9a7d-2fe6d0e4f1f6",
          "name": "did:invalid"
        },
        "response": {
          "id": "b787f5a4-ad37-48e7-bee6-60f3befecf52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "087eeb98-d1e6-4ba9-a7b6-ec0cf4319c83",
        "cursor": {
          "ref": "a602f30e-2ace-4750-9bf4-3151bfe18eec",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "fc29008e-03fa-4d6a-ae98-c01e64cd5ecd"
        },
        "item": {
          "id": "087eeb98-d1e6-4ba9-a7b6-ec0cf4319c83",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "3a6e8410-b87d-4956-b401-ccc6bdeff0fd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 224,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c22cc5b2-15c8-4912-a484-c8c5af8823f9",
        "cursor": {
          "ref": "1f984352-d341-4f72-92e8-232e6e448a49",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "76003546-320e-4532-b02a-bfa81ff76b8b"
        },
        "item": {
          "id": "c22cc5b2-15c8-4912-a484-c8c5af8823f9",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "3000daa1-b7be-432c-87dd-9659f032b6b1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 63,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e87df4f-955a-4961-a003-7dae813f9570",
        "cursor": {
          "ref": "ba8a5f64-8a1a-4fe3-b5eb-a886a1f52efa",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "bcc32779-ef98-448b-abbe-975acc6dffcd"
        },
        "item": {
          "id": "2e87df4f-955a-4961-a003-7dae813f9570",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "cb00eabc-1c5f-4a85-b1bf-ab020a785b6b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85cf78a2-e3ea-4441-84c4-81ab61f39ede",
        "cursor": {
          "ref": "0ac21666-74d7-4d51-87c6-4a0ef9c9a30e",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f2009124-28ba-41a0-89e4-161a7e16b943"
        },
        "item": {
          "id": "85cf78a2-e3ea-4441-84c4-81ab61f39ede",
          "name": "identifiers"
        },
        "response": {
          "id": "d84c6c02-f2e7-4257-8c52-fc958b238760",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d738bdd2-c6aa-42ed-afb2-464d1a1a879e",
        "cursor": {
          "ref": "298c5228-4652-4e81-8125-ef68085d50a3",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7387db70-bc88-410f-ba40-a0b3c5c19023"
        },
        "item": {
          "id": "d738bdd2-c6aa-42ed-afb2-464d1a1a879e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "90ca576c-2c0a-4004-b014-4907fb6a2e4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c662a52-2568-454d-8928-50533e646098",
        "cursor": {
          "ref": "e28a5d25-62d8-48ca-af80-06efc14703ab",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d96e71d5-034d-472b-93d0-3245ce29b635"
        },
        "item": {
          "id": "2c662a52-2568-454d-8928-50533e646098",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "8318b4d8-96d3-472b-84aa-ad16d181366c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d48a4c0-a07a-45b9-9245-c3412ad22b25",
        "cursor": {
          "ref": "c6b30941-5b8c-49ef-bffd-19167dc5ad5e",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "68c704a9-3eeb-4b93-a7ed-02bc9cd72c1c"
        },
        "item": {
          "id": "6d48a4c0-a07a-45b9-9245-c3412ad22b25",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "121b8dca-d073-4e79-a4a2-36d046c25139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1500e5fb-74d8-4285-a199-8fb498c6c770",
        "cursor": {
          "ref": "e5218cde-6389-4b5f-b65a-a3b82b842bac",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "9650c8d7-d0e4-4b37-ad75-2d961c60db5d"
        },
        "item": {
          "id": "1500e5fb-74d8-4285-a199-8fb498c6c770",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "cd8dd820-7a51-45ee-82af-1e05a04d509c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e123329a-9272-453c-8eeb-1bce08600a81",
        "cursor": {
          "ref": "5c68ec78-1a10-487b-b63a-affce4015874",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "36a76dd2-c6cf-4716-9582-b5ba293fa5ff"
        },
        "item": {
          "id": "e123329a-9272-453c-8eeb-1bce08600a81",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "33b3aa03-d1aa-4549-bd16-d491955bd5c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c701278f-4e8c-478b-8e2b-9711140ad39b",
        "cursor": {
          "ref": "83d500ea-81a2-482c-b0f2-2b84b5cc9368",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8acf9f93-806c-4f52-a7d9-93f84a19a160"
        },
        "item": {
          "id": "c701278f-4e8c-478b-8e2b-9711140ad39b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a242e62f-8cce-4e9e-938e-3951c4ebe794",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b183115f-031d-428a-a4bf-e5236a738345",
        "cursor": {
          "ref": "6d9bd589-160e-42e7-96b8-d6201fab46ed",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "69c225b1-4824-4ba6-9c45-f933e79d34cc"
        },
        "item": {
          "id": "b183115f-031d-428a-a4bf-e5236a738345",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "6a24b5e5-25f8-428d-bacf-a761e704492f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f7458b1-1610-4ad4-8ceb-5b3de530eeb7",
        "cursor": {
          "ref": "6544bed4-ce72-49c3-8cf9-b51ddb25f042",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b8809dcd-572c-47dd-8fc2-eabcd7964305"
        },
        "item": {
          "id": "4f7458b1-1610-4ad4-8ceb-5b3de530eeb7",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4def527b-8534-4668-b633-52d83d958ca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8e8339b-fc6c-4bd4-b4b0-de84a9643d69",
        "cursor": {
          "ref": "cdf6145b-6b5f-45ce-b7d0-755b1f7d98d5",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "2505e6c8-c60c-4531-9ee8-062d5c8a312d"
        },
        "item": {
          "id": "b8e8339b-fc6c-4bd4-b4b0-de84a9643d69",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "89b81e68-f91d-442d-a4a0-9ded932421a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73d70061-7563-465a-bcc0-b186b6605f80",
        "cursor": {
          "ref": "9d3a6345-709a-4ef8-8c39-7d9dcb66c607",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b4595f75-8b1b-495b-99ca-1bff8be8b4cd"
        },
        "item": {
          "id": "73d70061-7563-465a-bcc0-b186b6605f80",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "dbeeb529-3ac3-48f7-89fc-ef9286b5bd31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca42ef9-6674-418d-aff7-0598f725fa94",
        "cursor": {
          "ref": "cd0ab26e-ed7f-4997-8be7-8109bbbbfe89",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ba7c4a6c-2f8e-4738-95e8-d7a1b4c53596"
        },
        "item": {
          "id": "8ca42ef9-6674-418d-aff7-0598f725fa94",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ae05795b-859d-424c-be8f-806c184f9d9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e3efaf1-06e3-4348-89fc-bb64c7934305",
        "cursor": {
          "ref": "f99a9f4e-844e-43f9-a688-30c55da9b08d",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "dc856fdf-722c-4ca3-a763-81e30e433bcd"
        },
        "item": {
          "id": "6e3efaf1-06e3-4348-89fc-bb64c7934305",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "1cd1d6c2-0bfe-4d6c-973d-879b544293b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ad56590-7495-4fb5-9bc6-c74fa4245ffc",
        "cursor": {
          "ref": "9e8daca9-e3e0-450a-b67b-75cfcaad246d",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "378e938b-fef4-4711-bbc8-71ae1f9d490e"
        },
        "item": {
          "id": "4ad56590-7495-4fb5-9bc6-c74fa4245ffc",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "2423ec8d-8766-4193-9bc9-675c92f373bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "702ea474-0ecf-4b13-8f93-c596e776d336",
        "cursor": {
          "ref": "da916727-8e88-49a7-9bf4-0f9f1d39739f",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "93b06d78-dff3-4ed6-88b7-dd4b8cb19bac"
        },
        "item": {
          "id": "702ea474-0ecf-4b13-8f93-c596e776d336",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "8c58ec92-b4db-4c55-8aa4-f61cbff4174a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc4f776f-1a1d-4173-9f19-f91824e25c8b",
        "cursor": {
          "ref": "3d6cb913-5431-44f4-9630-762068ba1b95",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0b58327c-17f6-421b-bdb9-22e2c6c153f1"
        },
        "item": {
          "id": "fc4f776f-1a1d-4173-9f19-f91824e25c8b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "dfa8ad26-a9a7-4d7b-8d01-39e1f380fab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e00d9bd-8111-4f3a-99ff-e1f2e75e785c",
        "cursor": {
          "ref": "1bbca942-eac8-4ce6-989a-cfb57a705954",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "80e94463-c44e-4f54-8462-4ea224c6d09a"
        },
        "item": {
          "id": "9e00d9bd-8111-4f3a-99ff-e1f2e75e785c",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "c657d079-565b-481f-ab50-03ea03f38acc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44cc6ee7-ae32-4d52-b26b-872f3c06e846",
        "cursor": {
          "ref": "26c65e12-2f6f-4ca8-b6c2-3287f90fb506",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c33d7041-05bb-4420-9ded-9eae5ac11291"
        },
        "item": {
          "id": "44cc6ee7-ae32-4d52-b26b-872f3c06e846",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "b3fcc36c-bdd9-498a-a82c-bbdc65e8c3df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e613e13b-3372-49ff-860a-39059beb4a16",
        "cursor": {
          "ref": "60078411-1d5f-42b4-8a5b-2a641697a145",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e62f94b6-17e7-483b-9856-3a5e5f00dfab"
        },
        "item": {
          "id": "e613e13b-3372-49ff-860a-39059beb4a16",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "1e54c906-a550-499a-965a-8ee65c13a41d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "466aba16-ccc8-4dc6-a954-183f9b3a31c3",
        "cursor": {
          "ref": "21fbe71d-79aa-49db-971c-007bad020d6e",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "5bd4b97d-0f64-4f3f-a314-69dac0f3bfa6"
        },
        "item": {
          "id": "466aba16-ccc8-4dc6-a954-183f9b3a31c3",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "be87a3af-f48a-4ddc-8d21-de48b7fc4c8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6d4e5d0-de33-4ebd-a1d8-decbb2ebabc9",
        "cursor": {
          "ref": "ce22f5e4-fda6-4e03-9b8e-14817655e6ab",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "48ade180-c7c3-474b-9a8d-440c0b18b050"
        },
        "item": {
          "id": "b6d4e5d0-de33-4ebd-a1d8-decbb2ebabc9",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f43824b9-ecf8-436d-b57e-6c5a870a2c70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce0295f-3776-4374-b6c6-80654e3fb383",
        "cursor": {
          "ref": "13d83d05-8fe1-4cc3-adf5-1554b9d2bc38",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "14c24796-36a6-44da-8af3-2e3324d01c60"
        },
        "item": {
          "id": "4ce0295f-3776-4374-b6c6-80654e3fb383",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "6e12f377-ddb2-4efb-968f-2104c9b55dce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd311e4e-18bd-4a64-a459-9d4b1af8b04f",
        "cursor": {
          "ref": "6b328098-6666-4db8-b74c-9b83a6ad8264",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "38d63ea3-1bef-4449-a586-87cb6b1fe0bb"
        },
        "item": {
          "id": "cd311e4e-18bd-4a64-a459-9d4b1af8b04f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "eda8d567-ca84-4c41-a5a6-91685f7e2a3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c42b71-5c1b-4a7c-ab5c-f84d1ed9a2de",
        "cursor": {
          "ref": "c556723d-97ae-4659-b2a6-c7d177b003db",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "895ea005-aabd-4be7-a804-333029eec9ab"
        },
        "item": {
          "id": "13c42b71-5c1b-4a7c-ab5c-f84d1ed9a2de",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "41452e58-84d9-4e4b-9d25-9d7e11c69317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6dd9be8-9392-4353-a3dc-9223c780b8a2",
        "cursor": {
          "ref": "08fffc91-2692-44ea-b707-81fc541e8f24",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "87e6d41c-b2b1-4255-8f55-21158f55e485"
        },
        "item": {
          "id": "f6dd9be8-9392-4353-a3dc-9223c780b8a2",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "17956283-a4f0-4e27-9711-bdd826899721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b362ccc7-e117-4fe1-a263-47ad801e912c",
        "cursor": {
          "ref": "141bddc9-bcde-47b8-a79c-9780155d8e05",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4f6730fd-d804-48ca-a1c1-dcf248f11764"
        },
        "item": {
          "id": "b362ccc7-e117-4fe1-a263-47ad801e912c",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "320269e1-20e5-4bb4-b942-7256b4fd9a71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "166e1a36-9a93-4371-a8db-f8bae3b0f421",
        "cursor": {
          "ref": "99764de8-16cd-4c7a-80ae-2fcf1bc4ce74",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ad5f968b-5cd3-4e74-949e-c4430ab3632f"
        },
        "item": {
          "id": "166e1a36-9a93-4371-a8db-f8bae3b0f421",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "59c45db8-b634-4288-9ade-6984323a93e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cd7745d-9d45-4a99-89a9-e85b629ff7c9",
        "cursor": {
          "ref": "4d68ba09-d773-4c31-8bee-79563c303651",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a33b2587-3d31-4220-ba00-cc48d05d9bfa"
        },
        "item": {
          "id": "7cd7745d-9d45-4a99-89a9-e85b629ff7c9",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "cb95c99c-7b34-4dd0-a4f8-9622d48e1775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ad49f39-189d-48a2-b108-203a7e7d5100",
        "cursor": {
          "ref": "c28f2382-3171-4d9f-ae6c-6a7962c25ccb",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "93ee1a25-0e94-4490-9f75-65406ac7ab9b"
        },
        "item": {
          "id": "5ad49f39-189d-48a2-b108-203a7e7d5100",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "fd2f7553-cae3-4ba6-8163-42d2723422c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6d2dcd8-3fd3-4aae-bae9-a95137db1bf8",
        "cursor": {
          "ref": "49c68bcb-bad2-4dbf-b2b2-ceb63c1b3ccc",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "468d30dd-e14a-453d-886d-2e1435fece8b"
        },
        "item": {
          "id": "b6d2dcd8-3fd3-4aae-bae9-a95137db1bf8",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "9a1b5a14-c444-4cc6-b57b-2c97b3a6081f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c81ee43-b4dd-4f9c-b577-2fe74559ce1d",
        "cursor": {
          "ref": "1090a239-0d16-4144-a252-b730b362322c",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9b096c1b-48d5-4f5d-86f9-53eba69431d4"
        },
        "item": {
          "id": "6c81ee43-b4dd-4f9c-b577-2fe74559ce1d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "478f2ae4-f8f4-41bf-8a85-0a0c14b63f22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "753faa7b-7312-4b42-91a1-8607d542c2d1",
        "cursor": {
          "ref": "074a98c8-f64f-494b-aebe-4b9c8739d8ee",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "7e46caa3-ce76-45dc-b733-900c562ee36a"
        },
        "item": {
          "id": "753faa7b-7312-4b42-91a1-8607d542c2d1",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "0ad16bab-5f83-4b15-a68e-938505d93245",
          "status": "Created",
          "code": 201,
          "responseTime": 772,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "cf9cf8b1-4c89-4314-8ac3-45c7a7668ff7",
        "cursor": {
          "ref": "9c9d8d71-ef9a-4841-bdf0-30af2232ead4",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c0cc4543-15a9-4379-b9dd-023ed707ea38"
        },
        "item": {
          "id": "cf9cf8b1-4c89-4314-8ac3-45c7a7668ff7",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "7d9ef943-056f-4fa6-a029-ff69abf39791",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "94b9255e-3e34-4b65-931e-bca4c305c6f1",
        "cursor": {
          "ref": "2db18bb2-be47-4011-9364-fea959022081",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "7a23280d-d01d-406a-a13c-21309cd4c5ca"
        },
        "item": {
          "id": "94b9255e-3e34-4b65-931e-bca4c305c6f1",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "02783b67-57ce-4b02-b486-4fad5958c189",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "a54f161f-0ca7-473d-b413-3f928dd7d5e3",
        "cursor": {
          "ref": "a2d3d40e-c086-4fcb-8fd9-8feece947f7a",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5c440dce-0826-467d-96a8-88aff51e9db0"
        },
        "item": {
          "id": "a54f161f-0ca7-473d-b413-3f928dd7d5e3",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "ff673de6-c671-4951-8e14-c6291edaf42f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11861f6d-622c-4cf7-a591-67232dcad245",
        "cursor": {
          "ref": "9c758af4-aae3-49a3-9b4c-604a10b39a84",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "7732611f-3169-4c9e-a5d3-4d1850dd7d7d"
        },
        "item": {
          "id": "11861f6d-622c-4cf7-a591-67232dcad245",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "7ff07b8d-42e4-437b-b726-a37e283ea535",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "22f3d154-d7a5-4966-8db1-647d22350192",
        "cursor": {
          "ref": "0a1ee375-ea01-470e-b54f-773a957565b4",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ea40e41a-01ac-48b4-b4b0-2821ffd11fb0"
        },
        "item": {
          "id": "22f3d154-d7a5-4966-8db1-647d22350192",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "37531be3-5660-413e-98a1-bf79fe3bd62d",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "2738e1cf-bb62-4d88-a0f4-bc188751dca2",
        "cursor": {
          "ref": "bee47d09-5286-47fb-88e5-84de50de90db",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "4484d3a3-cff2-4176-a1c0-bf24d5981271"
        },
        "item": {
          "id": "2738e1cf-bb62-4d88-a0f4-bc188751dca2",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "da267ebd-0b66-49cd-ba7c-b55aa0916bdb",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "797835a6-c233-434a-8359-f38e629dd777",
        "cursor": {
          "ref": "77011d92-1718-4539-8cdc-e3fdd1cae41a",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b4951409-282c-43ff-a3d0-f8b00664196c"
        },
        "item": {
          "id": "797835a6-c233-434a-8359-f38e629dd777",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "c386feab-f6bb-4b2e-ae2b-85843d275298",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "20fdf680-c28f-4603-b1be-f60b99549fc2",
        "cursor": {
          "ref": "c7615a88-5c89-4256-bd91-fa258df496db",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1525800e-ba2c-4458-b428-aed157d43739"
        },
        "item": {
          "id": "20fdf680-c28f-4603-b1be-f60b99549fc2",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "29667d33-7920-48f8-9a0d-c9c33ece75b5",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "eee500c6-0f00-40d0-9bdb-285cf855a545",
        "cursor": {
          "ref": "73afd433-b17e-4d6e-ac8f-c200faa7fc27",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "07e136e6-6a2c-489c-9a86-7de0e5c26475"
        },
        "item": {
          "id": "eee500c6-0f00-40d0-9bdb-285cf855a545",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a06cf488-6e3d-4e14-9467-78263fd3ac25",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "42181767-7159-4737-aec0-a67e328dc17e",
        "cursor": {
          "ref": "df1ad195-4f4f-41b6-a8fc-fa6c99a9e24d",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "abee2217-c6c3-469c-956d-ecedbab54d47"
        },
        "item": {
          "id": "42181767-7159-4737-aec0-a67e328dc17e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "52787690-8a86-4ac8-b74d-a0eb5ff34677",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "b0987eb7-618b-406c-a627-124f547dc349",
        "cursor": {
          "ref": "23325aa4-d97f-4456-8590-4f1679971a60",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "bfec1d37-e462-41a3-b8b8-9f1020f1a880"
        },
        "item": {
          "id": "b0987eb7-618b-406c-a627-124f547dc349",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "29a1b754-6fde-44c9-86f8-9657702027f9",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "400e0f0d-dbc0-4565-ae2c-51cd2ee5a40a",
        "cursor": {
          "ref": "57c2fcc1-ec57-4edf-919a-7594c0e49326",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "a080a2d8-1ff9-434a-a294-25693650c967"
        },
        "item": {
          "id": "400e0f0d-dbc0-4565-ae2c-51cd2ee5a40a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "fc5aed53-207a-412e-b051-d9da88d51f1d",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "72bd1084-4ce7-4acf-b8e2-445ee1947abc",
        "cursor": {
          "ref": "1b146cc1-5e59-4bd4-a4ee-5ac79f3796bf",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "c86cd90f-ad6a-4b00-aba1-462c6b315b4e"
        },
        "item": {
          "id": "72bd1084-4ce7-4acf-b8e2-445ee1947abc",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2eb7a521-3fa0-48cd-95b6-6516e5498d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78fd41a8-1496-4519-80f4-40fca255788a",
        "cursor": {
          "ref": "ad720766-a28b-40c0-aa15-90276c1ea8cc",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8f5fc5fa-b529-435b-a2e8-4cf842d9b8b4"
        },
        "item": {
          "id": "78fd41a8-1496-4519-80f4-40fca255788a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "a51adeb1-ac1c-4b77-a085-275f52c3b68e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5649a3b7-6a1a-43a5-b47e-fec8ef480023",
        "cursor": {
          "ref": "dea9866a-4305-4e7e-ae86-e64d7f3a39dc",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "95dc1972-ddab-4407-82b7-55035b2ab595"
        },
        "item": {
          "id": "5649a3b7-6a1a-43a5-b47e-fec8ef480023",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "c80a3b94-eed5-470c-b794-9e1d7c3a32fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72aa818e-789a-4158-9b4b-6e174d9b73cb",
        "cursor": {
          "ref": "4292be92-cf18-4021-ab5f-f1a18bb8f990",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a14517f4-57ff-4764-bfaa-587ee022f612"
        },
        "item": {
          "id": "72aa818e-789a-4158-9b4b-6e174d9b73cb",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "46383a07-c48e-47ca-9e09-3f93da50752f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bed52d9-0bdb-497b-8bb8-863ceb62c185",
        "cursor": {
          "ref": "c9d24fe8-b8c1-4af1-9a1b-c03ee46d4214",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "c9771863-ce7f-40cb-b6cf-559065c60ec6"
        },
        "item": {
          "id": "4bed52d9-0bdb-497b-8bb8-863ceb62c185",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "b53db00b-9e8c-4de0-8ac8-d06c243043cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3bfc39e-da1f-40ef-bc8a-3a7439da9040",
        "cursor": {
          "ref": "ec0e3870-870a-4ef2-81c4-7dc24fbfde70",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "af5c40c3-a883-4f12-a5b8-42938f31675a"
        },
        "item": {
          "id": "d3bfc39e-da1f-40ef-bc8a-3a7439da9040",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "70d81532-b8df-442b-80e2-0b49e1b845ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b225065-c345-4bf7-9651-a71a2efd96b8",
        "cursor": {
          "ref": "ef1057dc-6782-4cad-b3e1-d059f653bdaf",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "a075cd9a-9639-41d9-a993-90b8ea3684a2"
        },
        "item": {
          "id": "2b225065-c345-4bf7-9651-a71a2efd96b8",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "1ea10802-9e70-4c6a-9e57-50b6c5119cea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7dde3c1-ede7-4004-b9bb-e75810353596",
        "cursor": {
          "ref": "86f42f3d-65e8-4b6b-8c9f-82ca60ec2c04",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "1707d751-12f3-42c1-98ca-460ea7806788"
        },
        "item": {
          "id": "c7dde3c1-ede7-4004-b9bb-e75810353596",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "bf96cd93-e63d-44a2-9e04-c0cd8ee3176c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1186404-4b3f-43b6-bfef-befd498c785e",
        "cursor": {
          "ref": "82768ce1-0a9c-4a72-99d2-b33ed88439d8",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "7666be72-3c2a-4e97-ae2b-70bf8a41c131"
        },
        "item": {
          "id": "c1186404-4b3f-43b6-bfef-befd498c785e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "00fbc51e-c720-45d0-80f0-f6c2c5780783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0471c7dc-0413-4c1a-bdd9-a05ecbc1bc14",
        "cursor": {
          "ref": "9c0fd1a8-24dd-4b1f-a2c0-74a385a1be19",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e16018f4-d076-4751-9017-19b1a034d67a"
        },
        "item": {
          "id": "0471c7dc-0413-4c1a-bdd9-a05ecbc1bc14",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "b7322c12-2ac7-4225-a923-13396a0a892f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcbdb0ac-0f95-4e72-acbc-8ecf1e863643",
        "cursor": {
          "ref": "12bf9c9e-b8be-45e2-bd86-3e30c709b902",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "cc78439b-4087-4aee-bd58-7d935663c21f"
        },
        "item": {
          "id": "fcbdb0ac-0f95-4e72-acbc-8ecf1e863643",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "70472fb9-b542-4fe8-b017-b1287e120475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d78f26fa-66c3-4302-95ef-a71b6f39040b",
        "cursor": {
          "ref": "1abdd068-1c4c-4c66-b201-e24d585ceef0",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "99a38d48-0c71-4226-ad73-ce60ca8d3ac2"
        },
        "item": {
          "id": "d78f26fa-66c3-4302-95ef-a71b6f39040b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "1e03d4cb-8b57-4c88-9b70-1d65a34e21ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f86fdace-4618-481e-908a-57d0580b995b",
        "cursor": {
          "ref": "125828e9-4dc3-4ec3-bb8e-a522579116a7",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "2169c7c5-b0f0-4618-9a62-1b26d799f06b"
        },
        "item": {
          "id": "f86fdace-4618-481e-908a-57d0580b995b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "fc7a3062-9363-4354-9f8c-b34fdf1af44e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84fb9ba2-0b8d-433a-bf95-b9fdded25ad2",
        "cursor": {
          "ref": "2fcbecea-7c93-4862-929f-a768e8309959",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "1636c733-535b-4bdf-bb81-9698d66b9fbc"
        },
        "item": {
          "id": "84fb9ba2-0b8d-433a-bf95-b9fdded25ad2",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "15c78e55-edc5-491b-98dd-c2f0ab061e6c",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "fc8a3c2c-099b-4453-bf91-01b65975e984",
        "cursor": {
          "ref": "0abfd4d4-9413-47b4-b608-0daa3b05790e",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "48b0d75d-5ae8-45fc-a450-1d8724a1f04f"
        },
        "item": {
          "id": "fc8a3c2c-099b-4453-bf91-01b65975e984",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "819ce4cc-5e8a-4ad1-985f-9cd9763ec9ac",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "c6042907-b125-45d6-bd39-99c1bfb3ee00",
        "cursor": {
          "ref": "1117932a-c348-4cad-93f5-cbd36dff9270",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "133b3069-ded6-4fd4-9f13-8679bffec507"
        },
        "item": {
          "id": "c6042907-b125-45d6-bd39-99c1bfb3ee00",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "aeee0093-8ce9-440d-8c90-d2f1a7e30f05",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "27b3477b-519d-46f1-9048-88e89db63283",
        "cursor": {
          "ref": "6c7e1f09-89a0-4d6c-af68-e4ef48d64504",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b62cf005-8d47-44f4-beff-9109169fc09d"
        },
        "item": {
          "id": "27b3477b-519d-46f1-9048-88e89db63283",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e57838ea-43cb-4d19-9871-b15212d2c57b",
          "status": "Created",
          "code": 201,
          "responseTime": 402,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "40bfe86d-d73a-47a7-9a77-e1407931697a",
        "cursor": {
          "ref": "dc3ad0b9-a227-43ce-94e6-a2ee076c4f53",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "5d8c1bb2-ca44-462e-9ce7-e34c7ee5fcfd"
        },
        "item": {
          "id": "40bfe86d-d73a-47a7-9a77-e1407931697a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "5000966e-7241-492c-a891-ac6b12c398c7",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "e4f32ee4-8913-46f4-ab20-a56d833c9583",
        "cursor": {
          "ref": "a2676939-7f39-4c6f-968c-640affb3b7ae",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0caf40b3-fb91-4318-89b3-2543fb87c401"
        },
        "item": {
          "id": "e4f32ee4-8913-46f4-ab20-a56d833c9583",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "7a0e450a-a1c2-4e31-ab01-3a85e10e5f69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3d2345e-805d-40df-bbb8-68c1d59b8cc5",
        "cursor": {
          "ref": "72b7882d-ed52-46b3-97d5-3ec85cceabbd",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "183d5a8e-e5d9-4ac5-93a7-182a80e400bc"
        },
        "item": {
          "id": "a3d2345e-805d-40df-bbb8-68c1d59b8cc5",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "54d765da-1798-4f84-bcb2-9e721c505362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "202f4ca6-65d5-4872-a7e3-a3e7d752dfa9",
        "cursor": {
          "ref": "a3381c79-2c5a-44cb-a7f5-5dc1f12eeae1",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "4e0d600c-ad19-4b64-a2b9-cabc309c53b8"
        },
        "item": {
          "id": "202f4ca6-65d5-4872-a7e3-a3e7d752dfa9",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "e33709e3-f7dd-457e-9671-e01d6a109a19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27cebcee-1e4d-4aca-9af9-8ee9082e7f57",
        "cursor": {
          "ref": "a0067371-d064-4493-94ba-d7b8068d0598",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "2b5667ae-2a14-40b6-a01c-546a86653ada"
        },
        "item": {
          "id": "27cebcee-1e4d-4aca-9af9-8ee9082e7f57",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "9a731ca5-fc6f-4c39-9e60-c73c9d8180d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6508b5c-600b-4613-9298-b5063f4a5c5c",
        "cursor": {
          "ref": "9757b107-f61f-4de4-b9b6-d6ca9c7e23c2",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "11bede29-0a02-49ad-b09b-54eb4f548e40"
        },
        "item": {
          "id": "d6508b5c-600b-4613-9298-b5063f4a5c5c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e8176408-95b7-4f7b-a925-b71af0a9e18c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6a6d977-a8a1-4617-97d0-e42c0b7d8d68",
        "cursor": {
          "ref": "bcece5e8-d7f0-461e-92b5-57af362141af",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "2dbc26e8-3cfe-4ecf-93e6-b39876622c91"
        },
        "item": {
          "id": "e6a6d977-a8a1-4617-97d0-e42c0b7d8d68",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2e93e2ce-ed54-401d-89ed-94eda137b3bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae41be5b-6330-43ff-b1bd-0547cf3094fd",
        "cursor": {
          "ref": "ec13bc17-a4c8-415f-9ef2-8af0e82982bb",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "4fa56748-441c-4f23-90fa-8c89ff2a0e2e"
        },
        "item": {
          "id": "ae41be5b-6330-43ff-b1bd-0547cf3094fd",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "09c9b989-c743-4198-9f24-4ce5ab11cb32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8dec761-bc53-4573-9a46-ebd09bd678cc",
        "cursor": {
          "ref": "c9e82435-2981-4330-96ee-87a935c196c7",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "68f68699-f145-4aaa-9fb5-ba901f222544"
        },
        "item": {
          "id": "c8dec761-bc53-4573-9a46-ebd09bd678cc",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c5cc0b9c-68a9-499c-beb8-e2c36d4d37be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7450fe1f-9f03-4d5f-8dc6-efb86e82afd0",
        "cursor": {
          "ref": "6189823f-8bab-4e8d-9543-b3e875963c33",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "075092ee-4192-4e04-9dc5-3892b954ac85"
        },
        "item": {
          "id": "7450fe1f-9f03-4d5f-8dc6-efb86e82afd0",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "12c08c4c-3dfa-4ea5-9746-7cf3e0f4d962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8250fa1d-afb6-4165-818b-1b3e59059402",
        "cursor": {
          "ref": "779191c7-45c5-421f-aac6-fd217d0739d3",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d014b3b8-a023-4b41-b7e9-481cfd0dbfc2"
        },
        "item": {
          "id": "8250fa1d-afb6-4165-818b-1b3e59059402",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "d13664a6-99dc-4667-8be3-f3f5e2d602b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33a2e8c1-193c-44c0-a30a-77b8474dba33",
        "cursor": {
          "ref": "55a64090-1b01-4671-8cdb-85f4b321df44",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "1c3ea5ad-c53f-43a4-bae9-cad7a7fb4831"
        },
        "item": {
          "id": "33a2e8c1-193c-44c0-a30a-77b8474dba33",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "a1c5c59f-2f4a-4a37-ba2b-5d9558658759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51af81ad-5841-4b33-bafb-1c220e2b3af1",
        "cursor": {
          "ref": "8e64f355-d5db-49cf-b922-f51e4957a422",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "e5606b19-a93a-4038-a8e5-bfd12d65520a"
        },
        "item": {
          "id": "51af81ad-5841-4b33-bafb-1c220e2b3af1",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "99125d07-b02b-47d7-b31b-9a38d517c9ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f611ed50-d8c8-4e55-8885-663e7e4862c8",
        "cursor": {
          "ref": "30d6e352-6ad8-4f7d-89b8-80e6f6b3c586",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e4fb6827-d6a1-4358-b4c5-243792374c57"
        },
        "item": {
          "id": "f611ed50-d8c8-4e55-8885-663e7e4862c8",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "30855ae5-ec4c-4ae8-abe3-13856a67d54f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d13fc6d8-f15c-40c6-b9a2-fac89635c875",
        "cursor": {
          "ref": "7b6e2b9d-e96e-4bd0-a90f-bb242884cc28",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "6b095eae-584a-42a7-8270-c49035910d54"
        },
        "item": {
          "id": "d13fc6d8-f15c-40c6-b9a2-fac89635c875",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "48bd5054-2f01-4337-9be8-a0bc64d8dbe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "944d1710-ab1c-4754-a4be-86f6201d7bd2",
        "cursor": {
          "ref": "5916a878-611a-49dc-8add-737c74da11cc",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "2799d2b5-71a5-4491-97f4-a23986e24560"
        },
        "item": {
          "id": "944d1710-ab1c-4754-a4be-86f6201d7bd2",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "87c9359f-3021-415d-9924-0f08ba7a9dd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76bb6897-9c75-4d4b-bee8-f184e9611a4c",
        "cursor": {
          "ref": "16fea69c-af8b-4093-896d-8f2b304259f7",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "7d0f3250-a5a6-410c-bbb0-b45376068351"
        },
        "item": {
          "id": "76bb6897-9c75-4d4b-bee8-f184e9611a4c",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a6d6422a-1c6c-46a3-a5ab-e907be28da01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be8dd257-9092-4179-ac8c-8540ca8105e6",
        "cursor": {
          "ref": "44dc17ed-9c7b-4aca-b2fc-4e3c8aad2831",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "39460c40-ecfc-4787-97d8-7846a7953d78"
        },
        "item": {
          "id": "be8dd257-9092-4179-ac8c-8540ca8105e6",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f025b8ce-6b07-4523-aec4-a97e75b6e452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adc62093-e8a4-4635-ba47-e5b91b36fb55",
        "cursor": {
          "ref": "ff979603-e7b7-4c77-9104-db4f9c7d1c39",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a2c6ea73-c2ff-4728-b261-81952b911074"
        },
        "item": {
          "id": "adc62093-e8a4-4635-ba47-e5b91b36fb55",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "b8472d90-7cf6-47db-8e8f-0c28e386fb3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cc919cb-236f-45a1-8a97-539012703a3c",
        "cursor": {
          "ref": "7063890f-f118-490f-b8f8-c1b87e861f04",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "b564578b-50ef-4079-9c21-f4c59565fa8f"
        },
        "item": {
          "id": "1cc919cb-236f-45a1-8a97-539012703a3c",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "873f6250-f661-43cd-8ebc-90a392e78abc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d6be2a1-b1be-440f-842e-03b7b024a89f",
        "cursor": {
          "ref": "18895f9f-fa8c-4599-81ef-a0f1f751653f",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "02db5b58-f66c-4ab9-a42c-2dbf0c0e4673"
        },
        "item": {
          "id": "9d6be2a1-b1be-440f-842e-03b7b024a89f",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "aa8aa4bf-509e-42ea-bf69-60d6f2fedf53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73b8b7a0-5921-4790-8778-b2b850e3e3f9",
        "cursor": {
          "ref": "f149cdab-5a7f-46a1-a0a8-09fd46686422",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "36cfeef8-7668-4607-9278-f1b01764d737"
        },
        "item": {
          "id": "73b8b7a0-5921-4790-8778-b2b850e3e3f9",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4e6b1549-6ea0-4868-b145-e20398f42818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "898ddb99-a602-460a-abbc-356aeadcf9b4",
        "cursor": {
          "ref": "31d31003-6c33-4c12-a67d-15ad2720d032",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ba1aa040-2316-4a2c-9862-c1c152bd0fd7"
        },
        "item": {
          "id": "898ddb99-a602-460a-abbc-356aeadcf9b4",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "58ab245d-ef44-4cab-a177-c98f1c8c5ff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae94b03a-f914-429b-a713-08f5158f290c",
        "cursor": {
          "ref": "6dcb375a-7b7e-4507-8fa4-9f875c0a8324",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "45f5e98b-c190-4f15-839e-e36badf17c46"
        },
        "item": {
          "id": "ae94b03a-f914-429b-a713-08f5158f290c",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "59d4f4a8-fcbe-4eed-9f62-04fe482c38fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ded9bb9b-7fd0-48e4-a4a4-7e19bb74b66a",
        "cursor": {
          "ref": "e677efb4-1ba5-44bf-98c1-258606411dfa",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "56fc86c9-799c-4130-a7d0-e3c4bbb8b304"
        },
        "item": {
          "id": "ded9bb9b-7fd0-48e4-a4a4-7e19bb74b66a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9143bb0e-6e83-4efe-9c6c-53a922182e6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f693d952-193d-4030-8548-79303668faec",
        "cursor": {
          "ref": "60d3c900-5c34-4180-8a14-05d3e2258c8f",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ae0904a6-47af-4228-98e1-c6d88a124d72"
        },
        "item": {
          "id": "f693d952-193d-4030-8548-79303668faec",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3607c68a-070f-4ff3-9320-b84ac5356663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5c8eec3-015c-45ec-aed6-493959332c93",
        "cursor": {
          "ref": "20e31d25-15c3-4000-a389-89b568ce0c2e",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "c6b5b00a-d71e-4f3b-aa88-9f676aea4f5a"
        },
        "item": {
          "id": "c5c8eec3-015c-45ec-aed6-493959332c93",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "248eae76-769e-4da9-a374-617ac02ec04a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad349858-2370-4c43-819e-1040980ffefa",
        "cursor": {
          "ref": "767eb80b-580b-412e-96ea-f3a49adbdb57",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "07993aa5-e596-430d-a457-695967825b53"
        },
        "item": {
          "id": "ad349858-2370-4c43-819e-1040980ffefa",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b9edecd8-7c02-418d-a245-d398c227fac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67c33c30-9527-4df4-898b-e6f71f88471e",
        "cursor": {
          "ref": "80ff9f7b-7118-476b-94a4-357a431c1d1e",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3e1eed18-d336-4310-897e-fc3e7177d0d3"
        },
        "item": {
          "id": "67c33c30-9527-4df4-898b-e6f71f88471e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a8f9a139-4b82-45a2-9120-bbb59f3f449e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12a62efa-f63b-4b74-a002-cb2380fed92d",
        "cursor": {
          "ref": "c53d0981-00e5-4971-8f9a-0fa9daee0307",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "0e184ee5-b119-4d93-b768-8018b90029f1"
        },
        "item": {
          "id": "12a62efa-f63b-4b74-a002-cb2380fed92d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ed0eb08d-8ffd-486e-9a76-f6403cdde096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4955d9fc-ba0b-46ea-8528-85103ccf1098",
        "cursor": {
          "ref": "0cb8dc99-f7ca-4f66-bc64-f48f556ede32",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "5e4b575a-503e-434e-9d62-6e7764641224"
        },
        "item": {
          "id": "4955d9fc-ba0b-46ea-8528-85103ccf1098",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "8a99563d-0018-47f8-89f4-629261d577a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 161,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4ea5a69-15cd-4f29-a110-35145e6519a5",
        "cursor": {
          "ref": "3b273ab7-e4b2-4110-80f0-4111366bf037",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "93e53da8-4afc-497b-a4cd-47cc21b4a2bc"
        },
        "item": {
          "id": "d4ea5a69-15cd-4f29-a110-35145e6519a5",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "18ef0dba-0d97-4d19-953c-c79ba4862586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cf3a738-a261-4274-baaa-c93de1fd7713",
        "cursor": {
          "ref": "633f9808-d56a-4954-bab5-ac6662f3883d",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "2ab7d680-abd8-4abf-9eaa-8caea15910a8"
        },
        "item": {
          "id": "1cf3a738-a261-4274-baaa-c93de1fd7713",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c4ad0fc3-68f9-43d0-9679-2d20717428d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbcad818-ba96-4bab-a628-b8902155bdae",
        "cursor": {
          "ref": "f7f2f96d-cda0-46eb-a07e-bb65bc534049",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "65768469-82d7-4d85-a7f2-2eaffbfd4acf"
        },
        "item": {
          "id": "cbcad818-ba96-4bab-a628-b8902155bdae",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "1d0fb77c-a339-43a4-93e6-de206f3a820f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "506b98d5-159f-4b6d-a4e2-b349ddc03690",
        "cursor": {
          "ref": "1f01dc7d-479d-46ac-80d0-ea9b1959d1f2",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "7330fcb1-fbad-4330-84fb-7798e143e08f"
        },
        "item": {
          "id": "506b98d5-159f-4b6d-a4e2-b349ddc03690",
          "name": "credentials_issue"
        },
        "response": {
          "id": "467ecf53-5ec7-408d-bf93-ffc3aaee1892",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "a50a434a-2556-4de2-b1ff-741dfb96a525",
        "cursor": {
          "ref": "bc98cc3b-69d0-4068-ac0a-6dfc4e9350c0",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "24f54904-ae97-4f47-acb6-979cfa510b21"
        },
        "item": {
          "id": "a50a434a-2556-4de2-b1ff-741dfb96a525",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "07779039-5031-4449-a9c5-e63728a7e485",
          "status": "Created",
          "code": 201,
          "responseTime": 428,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6da6e15f-df5e-4a1a-b0dd-9a44a0e45329",
        "cursor": {
          "ref": "379607e1-c4ef-4c88-a8ad-afc7514ff4cc",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "06634618-004f-4a66-ba64-d057bdb5b4c5"
        },
        "item": {
          "id": "6da6e15f-df5e-4a1a-b0dd-9a44a0e45329",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "9edfe421-4caa-45f7-94ed-85c197dd8a33",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dbfb09b-ca53-4c6d-9b07-5274cade6740",
        "cursor": {
          "ref": "f11f0c0b-d9d7-4203-a5a2-d62989305393",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "fdc5b4c5-10d7-48f8-9631-c7e62328068d"
        },
        "item": {
          "id": "4dbfb09b-ca53-4c6d-9b07-5274cade6740",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "18282f22-b99f-47d4-8e77-db9547ceba55",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0cd6a5b-02e2-46f7-aef8-63623641ee12",
        "cursor": {
          "ref": "025868e3-689c-4673-921e-163b0ba2a821",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "31dc2ade-2770-441d-939b-19d2b886c935"
        },
        "item": {
          "id": "b0cd6a5b-02e2-46f7-aef8-63623641ee12",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "190c7e50-dee4-4bee-856c-0ac9f5fbaf65",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-11-13T00:35:55.194Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-11-13T00:35:55.194Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "0d4fdd8b-32aa-40c4-b7ef-9d7f4ddeecc1",
        "cursor": {
          "ref": "10c54a73-30db-49f9-862a-c64077b4608b",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "1eaeb0ab-44a8-4eea-884f-cc6c5c310855"
        },
        "item": {
          "id": "0d4fdd8b-32aa-40c4-b7ef-9d7f4ddeecc1",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "06e43c41-c1de-49a1-8934-3fc2741cb594",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f070248-9185-4dc3-95e9-169d09d57e43",
        "cursor": {
          "ref": "996a4b23-5cb0-4d2f-8305-1657844e171c",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "d8539c21-97a3-42ce-b0e6-fc6d0a6bb98c"
        },
        "item": {
          "id": "2f070248-9185-4dc3-95e9-169d09d57e43",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "70738834-3c7f-4a20-8c48-f2d427ab2af5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3beb30d7-4e77-40a3-af67-b5a9b4a30550",
        "cursor": {
          "ref": "4a61e751-eb86-4c2e-be50-b6e0bee9db74",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "8f5368f5-bbd9-42cb-aaa2-96abc24c2d8c"
        },
        "item": {
          "id": "3beb30d7-4e77-40a3-af67-b5a9b4a30550",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f93e0d9e-4c61-4cde-8365-8aad49103961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6313e240-1b3b-4d5a-95ed-da3d9b94d045",
        "cursor": {
          "ref": "f02e7ac9-cf5f-47d0-88e5-edde76b0ce06",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "755b8baa-d997-4e41-9d3a-2b9f2d50f38d"
        },
        "item": {
          "id": "6313e240-1b3b-4d5a-95ed-da3d9b94d045",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "fbe23d3c-f877-4e69-933e-03844b49a0f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4df5fb2-6e9f-4f48-a556-62670ab9cb3d",
        "cursor": {
          "ref": "0a45fc40-ff3e-48f3-b8b5-75c4e2179a33",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a80c285f-7484-403d-9da2-c6de6724fd77"
        },
        "item": {
          "id": "f4df5fb2-6e9f-4f48-a556-62670ab9cb3d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1b90ae5c-fe4e-4bfe-8a20-9c0d1fb78a09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d4cb3b4-14f8-4d36-946d-979cc37c9f28",
        "cursor": {
          "ref": "8f795c27-7eb6-4b5f-b55a-87c5775a85a0",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7254abfd-5dce-4afd-aae6-d62a57d59406"
        },
        "item": {
          "id": "8d4cb3b4-14f8-4d36-946d-979cc37c9f28",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f6dfa6eb-fcd4-4a6f-a272-4ea5987e7e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f75d162-c646-4462-a08b-59443a8d6b50",
        "cursor": {
          "ref": "94dc5245-5985-4a7c-b5d1-485e694920e8",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "85c5fb3d-2c4f-4312-86f0-264c4ae4484b"
        },
        "item": {
          "id": "9f75d162-c646-4462-a08b-59443a8d6b50",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "469ac606-596c-4d6e-bc9d-c283e1ae7222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cbbf762-531d-4ef9-8b32-bf1f503a95eb",
        "cursor": {
          "ref": "fae55f85-a0dc-475b-aba4-7cb99bf1a3a0",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "c1004c5e-06d5-4517-b834-cb683bc1d0a4"
        },
        "item": {
          "id": "6cbbf762-531d-4ef9-8b32-bf1f503a95eb",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c962feb1-a95e-4f60-9068-8db1791a8fdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bfad326-13a2-4e33-aadf-3d7df006d7ff",
        "cursor": {
          "ref": "31f0b5c0-e2ed-4c21-9968-dc8238671bd6",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3b83452d-2d78-4508-8606-a2cc2e2ea5ea"
        },
        "item": {
          "id": "5bfad326-13a2-4e33-aadf-3d7df006d7ff",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f5b9465b-8b34-4e24-892f-3556a6e4b993",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a51fab7-db6a-4b28-8917-08e6e1adff98",
        "cursor": {
          "ref": "767ac432-bf96-44b2-a829-e2cdd1359f71",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "3ff49248-0059-46c3-a841-3789795c22c2"
        },
        "item": {
          "id": "9a51fab7-db6a-4b28-8917-08e6e1adff98",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "138c3163-78ce-4fbd-8f29-75edef8153aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b4e1ea0-bd48-41f0-920e-c789da51a72e",
        "cursor": {
          "ref": "d9a6c12f-16e7-49d2-a7f6-b3638f661163",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3f25cf3a-8974-494d-b6a1-11708dc5a7c0"
        },
        "item": {
          "id": "2b4e1ea0-bd48-41f0-920e-c789da51a72e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7d91b753-fedb-4eb4-9dac-69f42984d49f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95d8a69a-2a15-4282-9fde-5627053f627e",
        "cursor": {
          "ref": "f80a4195-2bb1-4c1d-a0f5-99df8196ebeb",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8530de8c-aef6-407e-95d1-bf2668eb5392"
        },
        "item": {
          "id": "95d8a69a-2a15-4282-9fde-5627053f627e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3ab22261-d909-455d-81fc-3e59f7e74bb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32417b30-5c97-4cb0-b707-9095b4ffbe20",
        "cursor": {
          "ref": "5f2602b0-1c6e-4e8a-9ad1-a6df20cce4b4",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a4629869-59e3-4174-b617-4e344089f6d6"
        },
        "item": {
          "id": "32417b30-5c97-4cb0-b707-9095b4ffbe20",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6b9ff520-4fb7-4be3-9c6d-9f808c2aa506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aa19b83-ef90-4aff-b311-fc19b65dec59",
        "cursor": {
          "ref": "c149abe0-0e2d-4232-8c80-357b2b587a1f",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "5cbdd728-5152-43bc-8b82-ec432ab7b8d5"
        },
        "item": {
          "id": "2aa19b83-ef90-4aff-b311-fc19b65dec59",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0245c8cd-92db-465c-893a-76ce37600a4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac49850-b3c5-4c10-8eac-79aea3f23b5b",
        "cursor": {
          "ref": "0d370d8b-33dc-401e-a46e-b095429e5646",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "682fd755-ce09-48d2-86b2-a4b40482d325"
        },
        "item": {
          "id": "0ac49850-b3c5-4c10-8eac-79aea3f23b5b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f2ab2ba2-15bd-47fb-bb43-3fc559f889e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1035d67-050b-4ddb-9be4-762ae7dd75e5",
        "cursor": {
          "ref": "27fb6fee-6148-4219-aa9d-c6b5764368ad",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "8a0270bb-2a44-403d-867e-dda7a9a47c58"
        },
        "item": {
          "id": "a1035d67-050b-4ddb-9be4-762ae7dd75e5",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "89cfd589-7de4-43c2-9c40-0978aada04e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e70d112c-5720-46c6-9463-ea917def15a7",
        "cursor": {
          "ref": "2a07537a-50e7-4342-9d1c-314226f0cb1c",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "404bef21-12fc-4a66-a6ba-46d3d227ab42"
        },
        "item": {
          "id": "e70d112c-5720-46c6-9463-ea917def15a7",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "78b1368e-d013-480e-bd9e-dd75633d0fa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9ebc235-8753-4794-bbda-e33ae658ff94",
        "cursor": {
          "ref": "2bd7959b-739c-40b1-a5d0-a5ab5ef61948",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "89d25123-2a8f-4fe7-94a5-81d442c09bbc"
        },
        "item": {
          "id": "e9ebc235-8753-4794-bbda-e33ae658ff94",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ad1fa5dd-9b40-40e9-b53c-f85c0f923450",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e24cfb83-ea5c-415f-bcb5-679de7cbc62f",
        "cursor": {
          "ref": "f17d7587-0d54-479f-82cb-f6bed30c96c6",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "33645ec8-9064-4a74-894f-fd743aed1748"
        },
        "item": {
          "id": "e24cfb83-ea5c-415f-bcb5-679de7cbc62f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7f40cf06-df09-48c3-9ba2-d33a7f222634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18f08200-6413-48c9-bdf3-77a6ce88c8b5",
        "cursor": {
          "ref": "b9063007-1f0b-4415-accc-ff3b7938c90e",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "0841f886-4bf0-4617-a964-1c1ee377b922"
        },
        "item": {
          "id": "18f08200-6413-48c9-bdf3-77a6ce88c8b5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d0557660-db61-4693-85c6-0cb6f28eb78a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aecd4d88-df18-40e8-abf5-a5ac5369b7ae",
        "cursor": {
          "ref": "c5095db7-83f6-4dfa-b81b-e46f049df3aa",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "0156abed-44a4-45a7-b672-9d33e5396e15"
        },
        "item": {
          "id": "aecd4d88-df18-40e8-abf5-a5ac5369b7ae",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "86610e9a-4755-4e7c-82dc-954b0c37a9b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2acb374-7b10-4f5c-90a3-2a41757f8b83",
        "cursor": {
          "ref": "f25c6124-d971-46d3-8fde-bceb86714126",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "58d6dd51-1e2f-4798-99c9-098a0f760af3"
        },
        "item": {
          "id": "b2acb374-7b10-4f5c-90a3-2a41757f8b83",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "252878a2-7ed4-467e-b711-68bf74631a87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f04591e-674e-4be1-84bb-09c04ebf260d",
        "cursor": {
          "ref": "b5cc574c-5aaf-4327-89dd-b7bcf41c5869",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "dd51a43f-2102-4870-8242-c70046656aea"
        },
        "item": {
          "id": "5f04591e-674e-4be1-84bb-09c04ebf260d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "807a12ea-c55f-401a-9d3e-58ee35536748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a6f79f-7fb3-40c6-8786-7d835d68946b",
        "cursor": {
          "ref": "76e9fcef-f63f-409e-9bb7-3031c6b05727",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "4092755f-9744-4932-8685-167ca253547c"
        },
        "item": {
          "id": "29a6f79f-7fb3-40c6-8786-7d835d68946b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b2ddbd1a-f43b-48bd-bd87-b6c310abca4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be92fa41-b235-466a-8539-4060b48914e3",
        "cursor": {
          "ref": "542a0111-3e12-4554-a8b3-eaf7584b73af",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d71ce735-752f-4f17-8416-168bac26cd2a"
        },
        "item": {
          "id": "be92fa41-b235-466a-8539-4060b48914e3",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a814c4a5-ee48-497b-b50d-670b6c817546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff0e8dbf-f2f4-42ff-ba69-b158f7424e93",
        "cursor": {
          "ref": "a404b3cd-6a6d-43e1-90f2-52cdd5f08753",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "82a08cde-0212-4fae-b97c-2c66c5f0a4ac"
        },
        "item": {
          "id": "ff0e8dbf-f2f4-42ff-ba69-b158f7424e93",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "522d5ea2-b841-4607-9f1b-6e3d5aa26e62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71c09fc4-28f6-4d4a-b146-f5a223badf4a",
        "cursor": {
          "ref": "0882142f-ee05-4434-876b-dd84802f85b3",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "54baab93-c3ea-4259-9344-0ce5f3d8606b"
        },
        "item": {
          "id": "71c09fc4-28f6-4d4a-b146-f5a223badf4a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "89669234-6a85-425b-882e-6b007606c4ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "652f2d29-0a19-47dd-81aa-a5914fc9879c",
        "cursor": {
          "ref": "fafd147f-e0bc-41fe-83d1-054ede50144a",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0297f6b8-1d2e-40a0-9db9-4c13161be3e5"
        },
        "item": {
          "id": "652f2d29-0a19-47dd-81aa-a5914fc9879c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a5af69f1-a78a-4b97-b573-1c0736c48155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe2a42b7-ff7b-4aaf-977f-fead14b942fc",
        "cursor": {
          "ref": "2a32e515-598f-405d-9796-82f15edd32ba",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "0308a1bd-b397-4dd9-b2e0-ac345c1e838c"
        },
        "item": {
          "id": "fe2a42b7-ff7b-4aaf-977f-fead14b942fc",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c85ed0c0-e5d7-4ad6-a5f0-940be15dfd62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95e7f9ea-08b4-404d-88f2-170720a78fd6",
        "cursor": {
          "ref": "a05895b0-2fba-498b-af33-237d71687f15",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "8488b6ab-961b-4b72-bb16-e632dd2f83cf"
        },
        "item": {
          "id": "95e7f9ea-08b4-404d-88f2-170720a78fd6",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "92ae1823-e5ee-43b6-9a6b-a52e28f2e5c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc5c3e1e-6737-4aab-aa12-21716908de80",
        "cursor": {
          "ref": "1ad35e28-37bc-4282-9e91-b21be0273dfd",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "dfbb04a7-e7e5-4a02-9f38-6b664b47876f"
        },
        "item": {
          "id": "cc5c3e1e-6737-4aab-aa12-21716908de80",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "dfd6f655-5216-4329-a89b-2c32cd058097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69a77d4b-3796-4083-a297-19b066309343",
        "cursor": {
          "ref": "14b44a11-ac76-4166-8904-a407a5aa2694",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "2e164ed5-f8e4-47b2-a83a-853d2f26bf54"
        },
        "item": {
          "id": "69a77d4b-3796-4083-a297-19b066309343",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "54cfd9ac-425e-4166-a8b7-54d408cfeced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4ecc80c-f422-4ff1-976b-2a2858fc06a5",
        "cursor": {
          "ref": "eed39fc6-b735-4751-a972-2740bcb2a3aa",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d9b8995d-881b-4db5-8847-6fa486b0474d"
        },
        "item": {
          "id": "d4ecc80c-f422-4ff1-976b-2a2858fc06a5",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "7ab268e9-03a8-4f8f-99b8-0a540c5814bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c6bcf75-9aa7-4a94-b095-61f65a3b6cf2",
        "cursor": {
          "ref": "48d22c26-8b4f-441e-b052-17ed15598db7",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "d4593f07-ecee-4c42-8bb3-9257e0d91942"
        },
        "item": {
          "id": "4c6bcf75-9aa7-4a94-b095-61f65a3b6cf2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "baf2ef3b-3771-45ec-8220-8424e2946d9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d52b2fbf-b198-474e-90af-0999dac3c612",
        "cursor": {
          "ref": "4fcb3313-2571-49b4-bf12-2a6b33451bbe",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "10331815-db2e-465f-971d-5d138b610428"
        },
        "item": {
          "id": "d52b2fbf-b198-474e-90af-0999dac3c612",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1b12f277-9055-4818-b2fe-6ff555b4d3e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4abc4bc6-2b3a-46c3-addb-1e33277a6056",
        "cursor": {
          "ref": "3b0fa030-050a-4e10-8413-6fd8118b7369",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "77ae16ac-0e3a-4779-b92d-03f8f24295f8"
        },
        "item": {
          "id": "4abc4bc6-2b3a-46c3-addb-1e33277a6056",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d5fe6883-017d-401c-a9f3-ff343b46ed65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4bebff-8a7c-4a97-a518-c7edafb1f127",
        "cursor": {
          "ref": "499c7587-a49f-47fa-99a6-825526ba7bc2",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c025f01b-1a23-4f8c-885f-9482f2245edc"
        },
        "item": {
          "id": "9f4bebff-8a7c-4a97-a518-c7edafb1f127",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2b404ff7-c8a1-42ef-8e72-6eab4913a8b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0017778c-aa1b-408d-8a87-60c452955acb",
        "cursor": {
          "ref": "0139391f-1b41-4d06-a969-c550557e6596",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "97d3123d-46e1-4e2f-8513-90673e9f15f1"
        },
        "item": {
          "id": "0017778c-aa1b-408d-8a87-60c452955acb",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1922f564-d077-42f0-83c5-de7e5c831e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efc2e421-f124-45e4-b5b7-6e299a1d15de",
        "cursor": {
          "ref": "58b18428-9a29-422d-bbef-39974ff52945",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "e4504aa0-e18a-4c84-adc8-9a0024fd646b"
        },
        "item": {
          "id": "efc2e421-f124-45e4-b5b7-6e299a1d15de",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ebdc83dc-22c2-4ea8-b497-70ea307ef245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c690a4d1-27af-45bc-a4e4-fe2026ac52c3",
        "cursor": {
          "ref": "2e30eaf3-72c6-4d4d-b5e1-7522fe0624fe",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "19ca1a30-4cc6-472c-bfd8-bb5540439666"
        },
        "item": {
          "id": "c690a4d1-27af-45bc-a4e4-fe2026ac52c3",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a977f26c-9d09-423c-b4a4-462de51b1a56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb815484-f870-4183-bc46-6d0bd5ea5e33",
        "cursor": {
          "ref": "05144621-dc79-4340-889c-4b188b85cf8e",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f952d6e9-c11f-4765-bdda-29b03e81bdef"
        },
        "item": {
          "id": "bb815484-f870-4183-bc46-6d0bd5ea5e33",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "bcd28cd6-816f-447e-aaf6-fa160a468508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47f1318a-41d7-443e-aec4-555465eb97e6",
        "cursor": {
          "ref": "be939ef5-78cd-479a-99a1-c8371f92548e",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "b00d09b8-a95c-4cce-8ebc-57b4c9621827"
        },
        "item": {
          "id": "47f1318a-41d7-443e-aec4-555465eb97e6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ab2f5e88-879b-4e30-8ea1-c89d48e3b0e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca96cda-fc94-4716-ae31-939cae8885cd",
        "cursor": {
          "ref": "a1e3f5a4-ee22-427c-8e0a-d613170a9331",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "96d734aa-8e42-428b-83a9-2d43ccf9a4cd"
        },
        "item": {
          "id": "5ca96cda-fc94-4716-ae31-939cae8885cd",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f7c7d874-0ecd-43b6-8309-d5b65e6af829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1820fa24-6d3e-4035-920e-8f8b89f11e6e",
        "cursor": {
          "ref": "21d57ad5-2c30-4914-b8f4-ff8a42f9e28e",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f84f2011-cb5b-4c31-a001-b7f3d4f8771d"
        },
        "item": {
          "id": "1820fa24-6d3e-4035-920e-8f8b89f11e6e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6119a69d-6db0-4046-b39a-095215d4e3df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47dc1b7b-59b6-4d64-a35e-c55176eee4c6",
        "cursor": {
          "ref": "2b3f7d9e-70a2-4761-95cd-899d2b52004d",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "08671e00-4dc1-4dc3-8466-17bfac2fdebd"
        },
        "item": {
          "id": "47dc1b7b-59b6-4d64-a35e-c55176eee4c6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4c71ced4-6dc0-45ef-af6f-7b6970acf341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9925eb41-5883-461e-a445-89c0f7b4b44f",
        "cursor": {
          "ref": "8e4042c2-f076-43bb-b178-01fcdd65ae14",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "693ed1ac-9133-47df-987a-9ad5b3f21a5f"
        },
        "item": {
          "id": "9925eb41-5883-461e-a445-89c0f7b4b44f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f4aa8882-79a6-4b8d-b45f-675315afd4b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0789ac1-1b0f-4ee3-8f88-4d71f46b9d3c",
        "cursor": {
          "ref": "ce8c517f-47b5-459c-827b-c0bf1cc1e90c",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a798f452-2070-4fed-8c49-a0852bdbbbe1"
        },
        "item": {
          "id": "a0789ac1-1b0f-4ee3-8f88-4d71f46b9d3c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "96aa9f14-6c3b-49fc-9e69-f1d90eb6a5f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ec3ba63-4958-491f-bcc5-01a6de15259c",
        "cursor": {
          "ref": "6623d36e-4cb4-4633-b554-5abfc5a97de8",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "63f92ca2-d193-4390-b189-c2591039508a"
        },
        "item": {
          "id": "9ec3ba63-4958-491f-bcc5-01a6de15259c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "19acdae2-a80d-4762-a0ea-c53ee9873d6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7696be87-9c81-492d-9150-5bc980c3f17a",
        "cursor": {
          "ref": "081feb10-5ca9-4525-ac6b-ddecccc566b4",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3738b354-1dc1-4f71-816e-5a597ef5aa0d"
        },
        "item": {
          "id": "7696be87-9c81-492d-9150-5bc980c3f17a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a0cda5a2-dee1-4e36-abed-a26d904a24ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c05d86-1d6a-4f89-8211-e62dcf1eabc3",
        "cursor": {
          "ref": "09ca8122-0190-48cb-9282-ce5bfdb87834",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "476c67d9-c666-478a-a81e-6fe3d275ce6f"
        },
        "item": {
          "id": "e8c05d86-1d6a-4f89-8211-e62dcf1eabc3",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a8508528-e079-44d8-8436-757719a2b577",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b30fdff-3fba-4cf5-90cc-ccdebaf61afd",
        "cursor": {
          "ref": "d0baf3ad-32bc-412c-a116-9757d9b1cd83",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "fa32cd20-5a7a-4bf0-80b4-705695262a69"
        },
        "item": {
          "id": "7b30fdff-3fba-4cf5-90cc-ccdebaf61afd",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6275913b-3fd9-4a94-9f48-96dcb0ec36e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd928bce-ba56-42d4-a88a-fe3689e9b8cd",
        "cursor": {
          "ref": "817985f8-9653-4df3-811b-3f08406e1641",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1d5a52a1-dd84-475f-ba4a-fa1e2f4b3e19"
        },
        "item": {
          "id": "fd928bce-ba56-42d4-a88a-fe3689e9b8cd",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7de97f43-f9fe-4ea0-82b5-e4256ac0f219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eba03ad6-f71f-4eec-99ff-bf04cb7782f0",
        "cursor": {
          "ref": "b57c0aa8-fdb3-46ba-a67f-e74b1eb1d46f",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "6fda80aa-f57f-4ea7-a5a0-782b515204f4"
        },
        "item": {
          "id": "eba03ad6-f71f-4eec-99ff-bf04cb7782f0",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f7eafa54-9ac3-4ed2-b474-e059a12ce192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e3d4283-643b-4b0e-b4e7-f2ab1397ae8b",
        "cursor": {
          "ref": "b9e968aa-6cee-4eca-a330-8214d8503a48",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "adeef524-c320-4655-b8f6-3787266af18f"
        },
        "item": {
          "id": "5e3d4283-643b-4b0e-b4e7-f2ab1397ae8b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1c7497ef-b974-4305-bcd1-c11c2ece9b57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20f2d222-f6de-45fd-85a9-b744611a8ca7",
        "cursor": {
          "ref": "8b5d1a2b-b85e-47cb-a421-eef47f653351",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e2a7f009-61de-40f7-8ee9-32b77b0f8eea"
        },
        "item": {
          "id": "20f2d222-f6de-45fd-85a9-b744611a8ca7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7aeddd72-85c8-4c40-89d0-82dbe9616faf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdad7749-9aa3-489a-abe1-a30866e05b13",
        "cursor": {
          "ref": "024116e7-9152-4f5a-ac34-f74ad45379c7",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "a1070d51-b1a9-4b78-9053-264b5afe962b"
        },
        "item": {
          "id": "fdad7749-9aa3-489a-abe1-a30866e05b13",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "51e25c4a-cc8b-406a-b42a-ba7ba7c9e6a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e45d12-c135-47ce-9e9b-a751a04d6dad",
        "cursor": {
          "ref": "a6bf6e42-a3bb-41fd-adcf-31a81d2b412f",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "2237167f-796f-4652-aeab-42aa923ce6ab"
        },
        "item": {
          "id": "30e45d12-c135-47ce-9e9b-a751a04d6dad",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6384e327-f6b5-4fcd-90ec-df1a19719d9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1223267-3a70-4167-8465-7822c7a78c16",
        "cursor": {
          "ref": "b3e6e33e-043a-49f6-8a14-d38aeda4fb5e",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "59234918-af8e-4a91-b0c7-a17f4603b299"
        },
        "item": {
          "id": "d1223267-3a70-4167-8465-7822c7a78c16",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7cd4e1c1-ed23-4182-acc3-01eb4f80d878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38350d2e-3ace-4eb6-bab1-1eec5d302aab",
        "cursor": {
          "ref": "569e2e30-c12f-4d9f-8557-1093b8c49f30",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "448654d0-999e-4c81-8439-820fa4c844b8"
        },
        "item": {
          "id": "38350d2e-3ace-4eb6-bab1-1eec5d302aab",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "fced1a48-7e14-4e55-89cc-feb70fcf5706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "813ed573-98cb-4fde-be2b-64abbe1913e5",
        "cursor": {
          "ref": "93a3f6fa-a061-44d4-9d4a-050212800f1b",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "37f70f27-71aa-4cbb-a2c2-837b82658eb2"
        },
        "item": {
          "id": "813ed573-98cb-4fde-be2b-64abbe1913e5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b757de9f-afb7-419f-ad05-817c3edc7ffa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ada2e79-b45a-42df-aa0f-85d44cdc940b",
        "cursor": {
          "ref": "af0994a6-d5f9-40c8-b4c8-f7e8e745adbf",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "63e7441d-4b5a-451f-9e6c-2fc1130b8638"
        },
        "item": {
          "id": "8ada2e79-b45a-42df-aa0f-85d44cdc940b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1be551ce-b5e3-43a5-9316-af6409738d28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c778fba1-64bb-4368-a0fa-39a1f79e41a5",
        "cursor": {
          "ref": "5f73fc1d-eaa8-43c3-856e-b6b8f8cc07c3",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ce1deee7-ba85-44ee-8826-8628568b4cdf"
        },
        "item": {
          "id": "c778fba1-64bb-4368-a0fa-39a1f79e41a5",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a14bd233-5e04-4ba7-b8ca-db9274e569db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d4ee301-6f41-4bd3-9a34-d860676f0f36",
        "cursor": {
          "ref": "4e9aa4f1-6a05-4765-893e-d45d49c7e1ea",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "740f33e8-f510-4c00-92f7-fe4bde4aac93"
        },
        "item": {
          "id": "2d4ee301-6f41-4bd3-9a34-d860676f0f36",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "4187842b-9584-4db1-b084-8f4f04b91ba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86d7699e-7cab-4761-997e-12f1769f9c94",
        "cursor": {
          "ref": "6d614592-770b-4475-a560-6af741de06da",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "4ede2412-941d-4ff5-b1c2-6340b1f6586c"
        },
        "item": {
          "id": "86d7699e-7cab-4761-997e-12f1769f9c94",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0ce537e6-6584-4e47-a695-c07fb2323faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73a4683a-9900-465d-a584-c3acf772b9b6",
        "cursor": {
          "ref": "f679bf48-f86f-4411-851a-ba2614847ed9",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0db91d3b-6f73-429a-a4fe-4b3d97716ebc"
        },
        "item": {
          "id": "73a4683a-9900-465d-a584-c3acf772b9b6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "64312ce5-2887-4de4-a535-79a8510ae216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "950a1e83-b039-4a49-bdb3-4b54dd7936c1",
        "cursor": {
          "ref": "f03d1582-bb43-4457-aa7a-2457db9a8b03",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "da5ee44b-924a-4751-b756-bf66846c3c0b"
        },
        "item": {
          "id": "950a1e83-b039-4a49-bdb3-4b54dd7936c1",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "ee67dbe3-3e45-4364-8677-1a4436f29036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "247a806a-39f1-4db6-b151-ec32acc3eee6",
        "cursor": {
          "ref": "558e6fab-1102-4f39-a6f2-788a96c11dfc",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "0e87cfd3-1412-4cdf-9c02-44d1eb9319b5"
        },
        "item": {
          "id": "247a806a-39f1-4db6-b151-ec32acc3eee6",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "00bd8568-0fcd-4037-9a29-013ea1b60b54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8516c359-6f93-4421-ad88-af69c80861f8",
        "cursor": {
          "ref": "be81e245-0257-40e0-b1a3-726db112a8c5",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "7c847144-0a0c-4829-b4c1-eb1cb324cdb0"
        },
        "item": {
          "id": "8516c359-6f93-4421-ad88-af69c80861f8",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "85812bbd-32ab-4406-b39d-b2bc4ac34a72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9decd209-215b-4a7c-ba21-a6042971e9f8",
        "cursor": {
          "ref": "561ce006-f521-42cc-9b37-faf6f2e63105",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "83d3c2a6-c7a6-4aed-a1d8-75771bc92882"
        },
        "item": {
          "id": "9decd209-215b-4a7c-ba21-a6042971e9f8",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "a9ff7472-3e1c-4343-b560-066a8933dc8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18fc8e42-2ddf-42ec-9246-fc15f5e86970",
        "cursor": {
          "ref": "dff2a3c4-99d0-471a-8188-230baead902e",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "4823cba1-cff2-41d6-9f3b-a33e8ad99654"
        },
        "item": {
          "id": "18fc8e42-2ddf-42ec-9246-fc15f5e86970",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "80ae762a-dee8-478a-8a4c-6cd70358729a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7a2866f-7ee1-4e32-a586-89ee4f34c42e",
        "cursor": {
          "ref": "32314996-3585-4d4e-828a-d2ae23202346",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "35a10ecb-d42c-4124-9876-cb0b7435eb52"
        },
        "item": {
          "id": "b7a2866f-7ee1-4e32-a586-89ee4f34c42e",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "0b3e7954-0d84-4b2f-9c0c-7f6e4fc7c75f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "353e179a-7c5a-478f-8a67-0d4641792969",
        "cursor": {
          "ref": "b68f330b-bdd1-4dc7-b0a6-093569486004",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "c8b63f97-dfb0-4e15-be20-d9aded3acdd2"
        },
        "item": {
          "id": "353e179a-7c5a-478f-8a67-0d4641792969",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1aa20818-4a7b-4ca1-a574-a8c329d128c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "184ab83d-9787-416d-a5c4-c8d249a12287",
        "cursor": {
          "ref": "987fb10e-a02d-49b8-8a6d-b4551db1fd8a",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "6c81f2da-d567-4033-9125-340cb508b01b"
        },
        "item": {
          "id": "184ab83d-9787-416d-a5c4-c8d249a12287",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "20545fa5-8078-43b7-b7ce-ba0100fb9d95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d724bc-6cfa-4115-a66b-d19a09f6482d",
        "cursor": {
          "ref": "84be562f-a74a-4253-9ff7-0899eec298a1",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "da455e8f-5f35-4f75-accf-c181e7c5d454"
        },
        "item": {
          "id": "d1d724bc-6cfa-4115-a66b-d19a09f6482d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "8f29404d-d8cb-4128-94c1-e0c30e0aa153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0842b662-5ef1-4e79-98bb-e4f50fe57e92",
        "cursor": {
          "ref": "1e27fc41-ec3a-41de-bb2b-4802bcdd1289",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "6f05f7e0-6353-4441-ae3b-d5aedf04f77d"
        },
        "item": {
          "id": "0842b662-5ef1-4e79-98bb-e4f50fe57e92",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1e9235dd-ca10-4b9e-8efb-bf2f21489f57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bb943ce-74d6-4028-b757-25e8c187a0a7",
        "cursor": {
          "ref": "8c8c708a-9f17-4e7d-87eb-427f2d136022",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ea0d75e6-73ff-45d5-80ef-a549c96c6d11"
        },
        "item": {
          "id": "8bb943ce-74d6-4028-b757-25e8c187a0a7",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "35ddd323-4306-445f-8b34-b435fd9cbe85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d15595c-69ab-423a-a74b-2451b00fe955",
        "cursor": {
          "ref": "c7e2a283-eecf-48e8-b9c1-bbea2400d23a",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "02bb3ca4-7cb1-4401-bdfd-b3e961f11fc1"
        },
        "item": {
          "id": "7d15595c-69ab-423a-a74b-2451b00fe955",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "72a7c03d-aa99-4050-baac-258b589eeefc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7f109e6-22c4-4b9b-8f58-1f38df036cd3",
        "cursor": {
          "ref": "7e344b3a-852b-4903-abb1-2d87e1164f7a",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "6c8a75e4-7e9a-4f50-a6bc-0c2d95de22dc"
        },
        "item": {
          "id": "c7f109e6-22c4-4b9b-8f58-1f38df036cd3",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "225c0ae4-f734-4f64-ad6d-0d02b0ec74a5",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "5c129b0b-9002-4759-8a7e-ada6747482a4",
        "cursor": {
          "ref": "3ac72c91-145b-4021-9cf6-c10741f48844",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "0da1b181-2235-43a4-81d6-6ef3c2b67eef"
        },
        "item": {
          "id": "5c129b0b-9002-4759-8a7e-ada6747482a4",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "e86c8c47-e96f-41e3-959b-8a2dcd5073db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f652bc4-c872-4078-9a63-e4dcad56bdeb",
        "cursor": {
          "ref": "c08f0d67-a5bb-49cb-aae1-42358e295172",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a7d8f367-62f1-48a9-8162-5b0358460d44"
        },
        "item": {
          "id": "9f652bc4-c872-4078-9a63-e4dcad56bdeb",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "77db310f-a43c-4a3e-9a2d-570ac9024b7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24d3715d-76e1-4c94-9deb-114bc671fa68",
        "cursor": {
          "ref": "588a863f-b692-4bf2-8509-d29502fa4122",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a02d83c5-02da-46e7-a480-c48d3d77f859"
        },
        "item": {
          "id": "24d3715d-76e1-4c94-9deb-114bc671fa68",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "aa2494bd-7d6e-4b55-b8c1-9503655173f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c65d60e6-a3ac-4714-853e-4ba3051f5939",
        "cursor": {
          "ref": "365fdc6b-79e7-44a9-9d52-10d45f58a0e9",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "18b030f0-de9d-426c-b047-7c4dfa67d80a"
        },
        "item": {
          "id": "c65d60e6-a3ac-4714-853e-4ba3051f5939",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "c2602ce3-de45-40cf-9b4f-e2230bfdfb58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa570cb8-1097-4db4-92d1-beb4b92f2a04",
        "cursor": {
          "ref": "e6b779f1-120a-4794-bea1-999d604f9b0a",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "84fae58d-48ec-4e0d-9a1d-491b4ccb3675"
        },
        "item": {
          "id": "fa570cb8-1097-4db4-92d1-beb4b92f2a04",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "8e607bb2-c597-486a-bf58-6f9b557aa368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "652c1746-5571-4ede-b0ca-b33c2137b065",
        "cursor": {
          "ref": "23f22975-2e46-4bfb-8c83-8318c9faee5d",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9c09f19e-3bc9-4336-8ac1-2ca8088eb5ab"
        },
        "item": {
          "id": "652c1746-5571-4ede-b0ca-b33c2137b065",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "323b0662-dff2-4d85-9a2d-ee5dbc273651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3df89f2-7fc2-415e-8d25-7ea468b1ec6d",
        "cursor": {
          "ref": "9684adfa-b11d-4894-818e-507c5e9e0c09",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f48d85fb-2062-47a0-b17b-bdb3c747a86d"
        },
        "item": {
          "id": "a3df89f2-7fc2-415e-8d25-7ea468b1ec6d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "b74a0c1c-6b98-4015-9858-93df379452f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9281a9bd-0144-4c91-a310-5964bf5ea480",
        "cursor": {
          "ref": "8e194f55-e443-4038-a9a3-12fb8b625ff9",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "9f1d9024-ddb9-4eff-b6e1-001a78ab2dd4"
        },
        "item": {
          "id": "9281a9bd-0144-4c91-a310-5964bf5ea480",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "99482d81-36ae-4939-b610-c1121643802b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18cfb265-96e4-4b69-b790-eedf2542bddd",
        "cursor": {
          "ref": "d1eb33f6-1bfe-4f57-b9c7-1cb07bba203f",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "34e95f25-a4a2-4c2b-96cb-34c5b2ef03a6"
        },
        "item": {
          "id": "18cfb265-96e4-4b69-b790-eedf2542bddd",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "02e4aa06-859c-4282-97db-ad88422565df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eff005f-41b0-4703-a3be-92c5ac0cf252",
        "cursor": {
          "ref": "f6e0fa32-c5d2-4cb6-bd98-536edd9c3af1",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "48bb84e9-547e-426d-b6b5-4c36138260a6"
        },
        "item": {
          "id": "8eff005f-41b0-4703-a3be-92c5ac0cf252",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "4f751b10-d554-4ba5-bfea-2e8d1cc56950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b7b80ab-c349-4c09-b6da-4de3f3c28d64",
        "cursor": {
          "ref": "0ce0e44c-8d3a-46af-a06c-a54bc2dd7806",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2d17a244-bfcf-4ae3-b04f-ed9a969bb34f"
        },
        "item": {
          "id": "5b7b80ab-c349-4c09-b6da-4de3f3c28d64",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "81dedb65-cbd4-44c0-85eb-9301ba69b836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5016b268-9709-48b7-a254-9b80f0f1a58d",
        "cursor": {
          "ref": "d0450f67-c84c-452c-8599-caa66f6fcabc",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "4a24fd83-21ad-4399-915e-92ea3660e92b"
        },
        "item": {
          "id": "5016b268-9709-48b7-a254-9b80f0f1a58d",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "174f556c-f833-4c00-9158-025b0822ec65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4262496c-4fa8-4059-b5d0-f75a6b56ea55",
        "cursor": {
          "ref": "b9647b8a-7e7a-4a37-a19f-925542417433",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "85331f31-f1b4-4d22-91e8-d4b1b7591ed5"
        },
        "item": {
          "id": "4262496c-4fa8-4059-b5d0-f75a6b56ea55",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "87d089de-d4ac-45d3-9d35-7cfc2693b2d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f413bf8-f642-4dc5-a6c5-b163de0c3908",
        "cursor": {
          "ref": "06ec5df3-b917-4452-b67d-2cf77d6082fe",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "fb916b2e-8225-4fcf-bede-e4dd63d6cecc"
        },
        "item": {
          "id": "2f413bf8-f642-4dc5-a6c5-b163de0c3908",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "79945162-ef57-4bac-9602-f23f8a298e50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e978bc8d-05b5-4972-8a9a-5e3ee8c46446",
        "cursor": {
          "ref": "a52dc9e5-db07-4d70-ad36-3a9f1eadfd32",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "331b339d-cf07-4689-b054-f39eaf425870"
        },
        "item": {
          "id": "e978bc8d-05b5-4972-8a9a-5e3ee8c46446",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "1ac31829-57f6-41f1-9389-8190eff978e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3745322c-a9f0-4834-bb92-ea51ffa39580",
        "cursor": {
          "ref": "55117ee1-1b78-46f3-a443-9f692bd9444c",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "b5c81743-564e-4971-bcac-b423d6ed9333"
        },
        "item": {
          "id": "3745322c-a9f0-4834-bb92-ea51ffa39580",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "144f1ed5-653e-4ad7-b5ae-42a412f139b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "414f6e47-592e-4245-a274-355194c0ae9b",
        "cursor": {
          "ref": "92ff0e22-564e-49bf-9172-ac8774aaabfe",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a616cdb2-ab48-4454-8afe-617281248ded"
        },
        "item": {
          "id": "414f6e47-592e-4245-a274-355194c0ae9b",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d6b467f5-4681-46b2-9616-68ae6514ab0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c6b8c1-df94-4207-b28c-dcc86547bbde",
        "cursor": {
          "ref": "dff88a4c-d60a-4181-8142-ff3dacfc625b",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "3b4ff5c8-c40d-4bc6-a040-13304ad96cdd"
        },
        "item": {
          "id": "36c6b8c1-df94-4207-b28c-dcc86547bbde",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e56350ba-9a51-4434-a8f9-4d3047d3102c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "354c5cf4-72ba-402f-9c7f-033dc4b60db4",
        "cursor": {
          "ref": "976d61c7-e26a-439a-ba61-fa4e300406e4",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "90a2c1eb-e7ac-4f54-a05a-3e0b7aee164b"
        },
        "item": {
          "id": "354c5cf4-72ba-402f-9c7f-033dc4b60db4",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "1f7e636c-ae69-4cc0-8754-3053cd328ccd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "471168bb-1fc5-4b2a-a15c-5233886377e7",
        "cursor": {
          "ref": "eba3b996-a37d-471d-abe8-7f05ba326034",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "be0e2b4f-c56b-41d5-85c9-553b48e5a269"
        },
        "item": {
          "id": "471168bb-1fc5-4b2a-a15c-5233886377e7",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "bea15aec-90e3-4c9c-a37c-e9f3a300ae31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a467a82-0b54-49b1-aacf-39a71186e4c6",
        "cursor": {
          "ref": "57e9068b-80fc-40cc-9d81-7388fa278882",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "a01ca55b-14c7-441c-8d70-54004abec456"
        },
        "item": {
          "id": "0a467a82-0b54-49b1-aacf-39a71186e4c6",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "84b3bb34-bdb7-4ae9-9d62-0ddef7a2bcb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad338fb9-3117-46ba-b337-a313b536822d",
        "cursor": {
          "ref": "ab5cd4eb-22d5-4b5b-83e4-6b717c1d6909",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a8b2f41d-637e-4740-96b3-cfbc3f858abe"
        },
        "item": {
          "id": "ad338fb9-3117-46ba-b337-a313b536822d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "47925550-9108-4502-b845-3e4c98e1e3c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e92f0a58-031f-468c-92cc-aef12c7f74f0",
        "cursor": {
          "ref": "351baaa4-1183-45d4-bbf7-4a381c17141c",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "80f44241-dd18-4b68-a37c-f99f6eb03f07"
        },
        "item": {
          "id": "e92f0a58-031f-468c-92cc-aef12c7f74f0",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "8a451cb3-d409-469f-8dc4-561eb8cf08ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "941a148d-6c8e-4035-96f9-9766b7a59c32",
        "cursor": {
          "ref": "2a762a8b-2df0-44ac-9ed5-ff18e8b170cd",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "49e50188-de6b-410c-9708-b7545e58b37d"
        },
        "item": {
          "id": "941a148d-6c8e-4035-96f9-9766b7a59c32",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "6250b96c-9a7e-4c77-a097-5f7040d66f77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 149,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7c3e47f-479e-4f85-adc7-6c70795c56d8",
        "cursor": {
          "ref": "d36f1c2a-a229-46cb-8396-879af5543201",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d9bef2ed-346f-4a62-81a2-37c25a3c882a"
        },
        "item": {
          "id": "a7c3e47f-479e-4f85-adc7-6c70795c56d8",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "4e7cee83-5aa8-44fa-9801-baa2516c32cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caad2621-1f80-4227-82f8-0aa4b265fd4b",
        "cursor": {
          "ref": "57001c8c-9c0f-406c-8c3b-648c042d8584",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "90b99ff6-b9df-4e29-89fa-17709eff4c4d"
        },
        "item": {
          "id": "caad2621-1f80-4227-82f8-0aa4b265fd4b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "bb453615-c9e1-40e2-80f6-de5b71870d59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "957efbac-0927-4022-94a6-0080fddbce3e",
        "cursor": {
          "ref": "cbbe6734-c592-4769-8d87-85e4f0c59ba5",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "187af69c-6834-4a4e-a504-18534efc6201"
        },
        "item": {
          "id": "957efbac-0927-4022-94a6-0080fddbce3e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "9276d447-39c8-4942-a6a1-54c5b58d1b70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1423dd5-a8a8-47f3-88e4-2c48b20ab419",
        "cursor": {
          "ref": "6ba38c04-3bd7-4211-96b0-efb76e0b42fc",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "30f9b37b-5208-49b0-8667-826c242e97ad"
        },
        "item": {
          "id": "d1423dd5-a8a8-47f3-88e4-2c48b20ab419",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "0dae566d-a9e8-429a-a787-1979ed201350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5c92b37-0c12-446a-b92c-e4bbc4847c6c",
        "cursor": {
          "ref": "e18bfecb-e32b-48f5-8bfc-7f315a5d76c3",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b8d6894f-491e-47a3-82d2-3349fdf93a8e"
        },
        "item": {
          "id": "c5c92b37-0c12-446a-b92c-e4bbc4847c6c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "34fede1f-65ef-498f-bf04-dad67a6f8452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b4d2c68-5080-4456-b1fb-f3e571ac5751",
        "cursor": {
          "ref": "c66c4788-fd28-43ac-9f67-ae6c4d30141e",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "300cb35f-32b4-4f6a-a94d-268802ca0056"
        },
        "item": {
          "id": "3b4d2c68-5080-4456-b1fb-f3e571ac5751",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "583cc89d-3dcc-4a46-b4a7-931f10cd4622",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "0d8a34e5-6be1-4757-938b-3c5478cbeea8",
        "cursor": {
          "ref": "ab4881d0-282e-4b7e-9d6f-08c69b74ac17",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "845fe3b3-670f-48f0-8716-f46c5505389c"
        },
        "item": {
          "id": "0d8a34e5-6be1-4757-938b-3c5478cbeea8",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "1b43ba6f-34db-4670-ac2e-703cafb8baa6",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "6d1b4b92-a690-4c90-b345-9fdd69b1ab65",
        "cursor": {
          "ref": "fafaa818-7a60-4b97-b20f-8ba3c00d2e52",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "3f171aaf-a8b1-4d29-9c49-f616636c6fcb"
        },
        "item": {
          "id": "6d1b4b92-a690-4c90-b345-9fdd69b1ab65",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "4c53f585-905d-4d37-af45-164e3a7a6fa6",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "e80cb7fd-6730-4a09-8724-c7bb8ed5a994",
        "cursor": {
          "ref": "f44c9675-d050-482c-9e35-5b34d54a6472",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "57c0715d-ac58-4050-bb06-7d7c063477c7"
        },
        "item": {
          "id": "e80cb7fd-6730-4a09-8724-c7bb8ed5a994",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "1757c224-de85-475b-ac4e-86c08dd9157f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1615b10-f8ac-4e8e-b8ca-8e6bde1fa6bb",
        "cursor": {
          "ref": "72d08818-4f89-4229-84e5-7c486ba5f8d3",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "9d983354-aa32-49f0-a0e0-8fc74b695704"
        },
        "item": {
          "id": "b1615b10-f8ac-4e8e-b8ca-8e6bde1fa6bb",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "2f152c11-fdc1-40ad-b63e-278eb93bc58f",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "0e328c44-e4c0-452d-a180-8bab83f8ada5",
        "cursor": {
          "ref": "0a0200ca-a7fd-4ca4-9db7-8fb632057e69",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "40458264-fb79-4832-b5fb-1dbc1d7d67f2"
        },
        "item": {
          "id": "0e328c44-e4c0-452d-a180-8bab83f8ada5",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "ee749eb9-c136-42cc-b103-c3217eb55c3e",
          "status": "OK",
          "code": 200,
          "responseTime": 201,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "d43c1d66-df30-4bbb-81e5-64ea8412287c",
        "cursor": {
          "ref": "9247eb30-d97c-42c5-af1f-f0be41fef35c",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "6e34a726-2f88-4b95-adec-b2dcc514ad73"
        },
        "item": {
          "id": "d43c1d66-df30-4bbb-81e5-64ea8412287c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2ea46ea2-e039-4007-922e-c111d0de9852",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "ca1b890e-5b12-4b48-a698-68a44b431ae5",
        "cursor": {
          "ref": "84f48347-04a0-49e0-8d5f-9d9a4af65d60",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6ddfd3c1-e6a3-4101-8f0e-b82517195cfb"
        },
        "item": {
          "id": "ca1b890e-5b12-4b48-a698-68a44b431ae5",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "55cb8fef-24b1-4874-a7fb-bd4e4d21330e",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "1dbd5214-1fdb-4d62-9a40-6e361a735aaa",
        "cursor": {
          "ref": "22506eb4-a77c-43df-9d08-6917cd3a7946",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "46292134-9fe1-4db1-ba4f-f668f0bb63da"
        },
        "item": {
          "id": "1dbd5214-1fdb-4d62-9a40-6e361a735aaa",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "16aabeab-d0ed-482e-9a65-46a9c1a08dfd",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "49fe0b5c-4f5b-4246-a122-4a8262cac979",
        "cursor": {
          "ref": "54c54385-2214-43ad-a4fd-388830bd63ea",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "65cd1f28-492d-4f62-9abb-2896d792485b"
        },
        "item": {
          "id": "49fe0b5c-4f5b-4246-a122-4a8262cac979",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "9cb77b23-4fc8-4c38-a5bf-ea571e345cee",
          "status": "OK",
          "code": 200,
          "responseTime": 155,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "923d0c24-9d35-446e-b40c-d51653bfac3f",
        "cursor": {
          "ref": "00265356-b5d8-4ad7-b0b2-d4f729fa0f2c",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "4c015e6a-0bf1-47ac-9e4f-b6d81d6db2bd"
        },
        "item": {
          "id": "923d0c24-9d35-446e-b40c-d51653bfac3f",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "a71fb149-d682-46a9-be38-b7b5350b5786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278c9d19-4f16-4069-8e29-004da4d497c7",
        "cursor": {
          "ref": "b48959c2-fdd6-4d7c-b591-57ab925e67ab",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e994de03-d165-4606-9693-73a407a8decc"
        },
        "item": {
          "id": "278c9d19-4f16-4069-8e29-004da4d497c7",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "4627c1ac-9c88-4c20-b8fb-8c59255467f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "812872c9-14dd-4deb-a863-e2c1f118ffb6",
        "cursor": {
          "ref": "2a6c6875-0df7-4e71-84b1-b3962b439051",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "8b7ab207-89fe-4f41-a9fe-799b3ad75536"
        },
        "item": {
          "id": "812872c9-14dd-4deb-a863-e2c1f118ffb6",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "ecbc6c69-657d-4f59-9617-177f9c2d134f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae7045d-669d-465f-802e-b1dbc8a98d60",
        "cursor": {
          "ref": "e28e468a-efa5-465f-83ae-413bdf654822",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "64db53fe-5bed-4c38-91b9-ecb07e028df6"
        },
        "item": {
          "id": "dae7045d-669d-465f-802e-b1dbc8a98d60",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "b56f3e5f-b865-45ed-8b73-4f4d40d2b4b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c41865f-f30c-4240-8129-8c5a1a1de380",
        "cursor": {
          "ref": "561d924d-56f4-4bd2-b5ad-971de9d93a59",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "dfb00d09-028d-47bf-a18e-1f5c4e2334e4"
        },
        "item": {
          "id": "6c41865f-f30c-4240-8129-8c5a1a1de380",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "4c578a71-791c-4ae2-b6a8-833f39278222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8acccde-a932-43e6-9c3d-10e918af8782",
        "cursor": {
          "ref": "c3584219-13e7-47b2-a53c-641d4750a79b",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "9475c59d-5245-4a43-805b-dae9739ff0dd"
        },
        "item": {
          "id": "e8acccde-a932-43e6-9c3d-10e918af8782",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e13b917a-3015-4bfe-bed8-9a99df62dbb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77185e1f-b3a1-435f-bc02-3e883def6ff0",
        "cursor": {
          "ref": "b797c06b-0c40-4100-a241-39c18adc2b16",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "ee48856b-f6ba-4636-9d40-0aff0bec3068"
        },
        "item": {
          "id": "77185e1f-b3a1-435f-bc02-3e883def6ff0",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "1c9340e4-3ef5-4aba-b457-4e3f3a1f773c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4490a81d-96bc-4bcf-8162-2a0fa23902d1",
        "cursor": {
          "ref": "9168b5fd-c592-46e1-b99f-bea41dec4a20",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "3006f5fa-5a6d-4a8d-9114-01e6f40a981a"
        },
        "item": {
          "id": "4490a81d-96bc-4bcf-8162-2a0fa23902d1",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "eff6f8da-3347-46a2-8c33-abf5ec984235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd1fd4bb-afce-4529-b92b-215cfc31ebf6",
        "cursor": {
          "ref": "db45d0b2-b3dd-4723-9eeb-eb005ff69933",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "12f86c94-ff02-4a9e-bc39-bcaf89d1c75f"
        },
        "item": {
          "id": "cd1fd4bb-afce-4529-b92b-215cfc31ebf6",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "451f8717-559d-4e54-baae-5eb366bd3fd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eccdb560-a28e-4f23-8566-4ac8fb994191",
        "cursor": {
          "ref": "dc2926db-237b-43b4-b73f-ba7390e44221",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "742d3160-ad0c-43bb-adcc-5266bb0205e9"
        },
        "item": {
          "id": "eccdb560-a28e-4f23-8566-4ac8fb994191",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a1cefe53-d378-4206-ad5d-e02fd6a0b891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11c761f8-2c57-49c4-8f7e-a88c3ae1bf9b",
        "cursor": {
          "ref": "dcb5680e-996b-4e23-b3f5-b75f277a1f84",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "6f0c2d94-d777-4e6b-a2ac-b125487a3c99"
        },
        "item": {
          "id": "11c761f8-2c57-49c4-8f7e-a88c3ae1bf9b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "7dc2a9b2-97cb-4c67-9499-f9093981cde0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4639e77a-8c3d-4f71-8168-9a33eb4b8fce",
        "cursor": {
          "ref": "fe4ccc01-f6d5-4d34-b234-d803e9321e58",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f3711956-304c-4311-86ba-7d414df7e503"
        },
        "item": {
          "id": "4639e77a-8c3d-4f71-8168-9a33eb4b8fce",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "71bd4ea6-ba8a-451b-a179-5101a68fd2aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2f9e700-49de-4bfe-9c16-07dc26afc02e",
        "cursor": {
          "ref": "2c8653a2-f250-4d41-90e2-aa5b90467029",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "78ea1466-aa09-4253-9f0f-aca667a657c1"
        },
        "item": {
          "id": "a2f9e700-49de-4bfe-9c16-07dc26afc02e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "1a89bb48-496f-492b-93ef-218d4dd081e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "410e8e64-75e4-4481-815c-b769dbd947bd",
        "cursor": {
          "ref": "e4265d3f-9e66-40ca-b153-d5f106bd86a4",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "3df3907c-eb96-413c-9fb1-ae84b656eb9c"
        },
        "item": {
          "id": "410e8e64-75e4-4481-815c-b769dbd947bd",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "3c0939ca-3b5a-4f96-a551-828021ba7873",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "a2714373-95cc-44e9-8fc9-cf0cd6287acb",
        "cursor": {
          "ref": "84107376-5b17-4596-a1f0-c353a386faf2",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "68de37e2-d34a-47fd-ab22-74adf7a59450"
        },
        "item": {
          "id": "a2714373-95cc-44e9-8fc9-cf0cd6287acb",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a172b060-fcce-4551-974a-b8f87b1dd397",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "f0e09813-f6fa-4c8e-880d-58b2f08f7e7b",
        "cursor": {
          "ref": "78c17330-a80f-4b01-9112-ce97e04d2c23",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "faeef404-e2b0-4a5a-a283-a9a355cf2b57"
        },
        "item": {
          "id": "f0e09813-f6fa-4c8e-880d-58b2f08f7e7b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "6b0b17d7-bf4f-457e-a81c-ea000703a776",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "fc1fd000-07c7-49b9-8cae-38e0b9714c6b",
        "cursor": {
          "ref": "d77e5c0a-fcc5-4f75-94dc-cd8ece0f8a1d",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "8be0fd36-f598-4569-b0b8-9cd21f7f9391"
        },
        "item": {
          "id": "fc1fd000-07c7-49b9-8cae-38e0b9714c6b",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "1002622f-dead-4210-9ee7-36bfeb4aa182",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "29a7b4e0-97d0-439a-931a-e4ba3dc87eaf",
        "cursor": {
          "ref": "fe901ef7-e504-4473-aea8-fd991abb78a5",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "200094fd-60f0-49d1-a5d3-d3e73df9f09d"
        },
        "item": {
          "id": "29a7b4e0-97d0-439a-931a-e4ba3dc87eaf",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "14e530f2-67ab-41ec-97e8-e3fee3094931",
          "status": "OK",
          "code": 200,
          "responseTime": 105,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "28a529e4-f9f7-4137-a067-30f281803d9c",
        "cursor": {
          "ref": "92af521d-e644-4bbc-bd30-665d689993f4",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "cb483a0d-3ed5-4272-9feb-ff2af89a5c5f"
        },
        "item": {
          "id": "28a529e4-f9f7-4137-a067-30f281803d9c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "4e20ec58-da1c-42ec-9aae-1bfe5c95a899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "707252ff-65a3-4222-b3ca-963b53741010",
        "cursor": {
          "ref": "c248acbd-79f4-49d5-902d-8d1b53086003",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "c3c5e8da-deb4-4d92-af74-5d3bf53910a2"
        },
        "item": {
          "id": "707252ff-65a3-4222-b3ca-963b53741010",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "333ee6bf-1a52-478c-a3d6-51a732366f59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e103dd9-91e5-4a14-9b63-43afed696f31",
        "cursor": {
          "ref": "5fafcf50-863b-4d3e-8396-54177b104d48",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "16c86af4-0b4d-4d3e-8224-a98438739de9"
        },
        "item": {
          "id": "3e103dd9-91e5-4a14-9b63-43afed696f31",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "6ebd6f31-6048-4e92-be44-215546b87406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fade8fc7-e3cb-42d6-8a12-dba00396befb",
        "cursor": {
          "ref": "eb836256-db6a-4a66-9252-a7c6e076271a",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "2129897b-16d9-4734-aa33-93865a201e08"
        },
        "item": {
          "id": "fade8fc7-e3cb-42d6-8a12-dba00396befb",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "411825d9-d57a-4212-900b-6da3340b6053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a6ba01-894d-43fb-bdce-01a7e7a11603",
        "cursor": {
          "ref": "e6f65237-1931-4014-a293-2be400fa8d5d",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "83d2df57-63f0-41d7-a042-746510152f4b"
        },
        "item": {
          "id": "18a6ba01-894d-43fb-bdce-01a7e7a11603",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "6f165927-c7fd-4385-9a29-ce864e7224c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db8560c1-b838-4d6a-8675-952a73ed1ce6",
        "cursor": {
          "ref": "28b7c857-6263-470e-a914-9be527e93077",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "174ea9ef-8dd0-453e-92fe-fb7cb478bc53"
        },
        "item": {
          "id": "db8560c1-b838-4d6a-8675-952a73ed1ce6",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "ca50caaf-0801-489d-8729-0adabc1808d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cf824da-ba89-4c46-904f-e5691a1d8ef5",
        "cursor": {
          "ref": "33680982-9072-4d6e-8ea9-6547cdbac46f",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "64c299dc-1d12-4b62-93fd-a5f4e076e441"
        },
        "item": {
          "id": "2cf824da-ba89-4c46-904f-e5691a1d8ef5",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "318c5998-92d8-41a8-9fc9-db18103b11fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03c9c997-cfe8-4fac-aee6-5ce0b15b5e6b",
        "cursor": {
          "ref": "12abe10a-455f-4d90-9990-fb6890e2d448",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "bef9fad9-710c-4b4c-b2f2-8882150ac829"
        },
        "item": {
          "id": "03c9c997-cfe8-4fac-aee6-5ce0b15b5e6b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0c788fd9-0737-4552-94b4-aa1e791c7030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21c31935-2573-41e6-9cbe-29fb2da24eff",
        "cursor": {
          "ref": "80cbd8d1-c7fe-494a-af8b-ad572ef8413a",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "66fcb925-7779-4332-b8b2-fcafcc2d6078"
        },
        "item": {
          "id": "21c31935-2573-41e6-9cbe-29fb2da24eff",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e157c580-0ac9-41ef-9f64-675c858e0d02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e18dfdb-93b2-4744-a3cc-ee65877ba1fb",
        "cursor": {
          "ref": "be928757-e405-4156-931d-2f581c35b99b",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "bdab7211-dc8d-497f-9829-e900620daded"
        },
        "item": {
          "id": "9e18dfdb-93b2-4744-a3cc-ee65877ba1fb",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "afa23d58-ed59-43b7-945e-e8a155ded17f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6666bd5c-0ffc-40a8-b9f8-33ea9e12d8e1",
        "cursor": {
          "ref": "7d27ddd6-f6e2-490b-99c7-9dd371a340a9",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "e87334d7-e050-47b5-a487-043d14985903"
        },
        "item": {
          "id": "6666bd5c-0ffc-40a8-b9f8-33ea9e12d8e1",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e9e0ec44-91a3-4c67-b0c7-10d3f10ef065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bbe1561-79d7-4ad7-992b-a5007ee6d6ac",
        "cursor": {
          "ref": "e09f5cca-a2c2-4147-8d11-bb1e465617f6",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "35a3bd4f-427e-42c1-b9ec-6125433232ae"
        },
        "item": {
          "id": "8bbe1561-79d7-4ad7-992b-a5007ee6d6ac",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "69a49b53-3076-4908-b0bc-32e081cdaabd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe5aa379-d947-4e82-b8e6-44caa3d3aaab",
        "cursor": {
          "ref": "b003b351-d1be-4a25-8f0f-653af28d0122",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "d2218f1c-0f72-4160-b4a9-9c757598c360"
        },
        "item": {
          "id": "fe5aa379-d947-4e82-b8e6-44caa3d3aaab",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "dd3e3c47-1154-4064-b894-a049e583159a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f6f3738-0ef8-429a-8d5e-a97d364ac2a7",
        "cursor": {
          "ref": "2074d1b4-cb95-4383-832c-86bf53b90a74",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "e4098a2a-1128-47a8-8eb8-3a69cca0143f"
        },
        "item": {
          "id": "0f6f3738-0ef8-429a-8d5e-a97d364ac2a7",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a64dbc3e-86c4-41f0-8fe3-427ba3138cbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e7e080-cbb1-4d1b-b58c-c1bc27806abe",
        "cursor": {
          "ref": "964c12e1-946c-495c-bd9b-c836749f8dc8",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "e87ecf84-7067-4711-baab-83480907b3c5"
        },
        "item": {
          "id": "28e7e080-cbb1-4d1b-b58c-c1bc27806abe",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "49e39936-9edb-478b-9d86-036dd1544c72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64a2c726-3a9a-4989-b9f3-8b5157dffe06",
        "cursor": {
          "ref": "c3d89cb2-758b-4f83-9284-626ab1b06a3b",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "1ea7cd60-8908-40dd-91e1-8b6f3b7b80d3"
        },
        "item": {
          "id": "64a2c726-3a9a-4989-b9f3-8b5157dffe06",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "e4c7ffcc-e636-4b03-93a0-03af176b26d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1beeeb49-806d-4972-a4ec-b9a27360e508",
        "cursor": {
          "ref": "d4a0f3e1-1094-401e-b461-fcfdde5dc818",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "6c94f361-4e72-4c26-a114-5c895c76f30f"
        },
        "item": {
          "id": "1beeeb49-806d-4972-a4ec-b9a27360e508",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "8345e4d3-e8b7-45b8-b82e-9f3230a28aff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae4bde7e-c201-4133-bd07-3354661e3ae5",
        "cursor": {
          "ref": "0da79d3b-9b4f-441e-a3e0-8d171ac912aa",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "d017ebbd-88de-4e68-bbfd-22fcd2b96548"
        },
        "item": {
          "id": "ae4bde7e-c201-4133-bd07-3354661e3ae5",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6cb16908-590e-42f6-899c-e4ca8291c4d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c99e337-6c4e-4d04-b2a2-adaef8c2f19f",
        "cursor": {
          "ref": "18503f68-47b7-4a18-88ce-4ceb1a325576",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "384d9f68-e12c-46df-bb13-da6c43caa163"
        },
        "item": {
          "id": "2c99e337-6c4e-4d04-b2a2-adaef8c2f19f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b73aaaa5-057a-4c3b-ba1f-20b858ab337c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2623b2df-cec7-40e6-8967-b2e1cf2e63ad",
        "cursor": {
          "ref": "d872e7ee-189c-4ed4-8f3c-f5adb74a5034",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "32375971-a522-45b7-98dd-c5244b0f2464"
        },
        "item": {
          "id": "2623b2df-cec7-40e6-8967-b2e1cf2e63ad",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "3f484cc4-854c-4c9b-b9da-a23719bf4e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4eb4b07-ff3c-4a71-834f-c321d51f74c7",
        "cursor": {
          "ref": "8d4304b0-7e43-4db4-a3cf-e2a21de225f5",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "ca0fbe3f-e4e0-4ee7-b781-8d834265d5c2"
        },
        "item": {
          "id": "e4eb4b07-ff3c-4a71-834f-c321d51f74c7",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "4dea7097-5143-420b-8530-f703a3e4dcb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eac4191f-66f7-4595-b429-e71e5d06be0c",
        "cursor": {
          "ref": "bf9134b6-88d5-4d0c-a096-0e4701848fd6",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "642349e1-26d9-45c7-a40d-393804e5935b"
        },
        "item": {
          "id": "eac4191f-66f7-4595-b429-e71e5d06be0c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "bfad1e4b-2e44-4f02-adba-53d4b8427d4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2426b787-cf72-47cb-ac8a-80c3cf58efe4",
        "cursor": {
          "ref": "da0a13d8-3e50-442f-8cc8-054ce08e2cc2",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "89652ac0-9a6f-4a74-8b80-cdb1baf89039"
        },
        "item": {
          "id": "2426b787-cf72-47cb-ac8a-80c3cf58efe4",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e1ad67d0-dd14-427a-b642-774688156df7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aed27d21-a5b4-4bc7-8382-8b990dce1213",
        "cursor": {
          "ref": "783658ac-5c49-423e-9d3e-8f4620711e66",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "cd76c9a9-c547-4c33-bee1-d7fd14969d4f"
        },
        "item": {
          "id": "aed27d21-a5b4-4bc7-8382-8b990dce1213",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5e798f4c-2f2a-480a-8450-278dbee46a0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2bb2d80-8490-481e-ab49-32909607a98b",
        "cursor": {
          "ref": "20b9bebe-e96e-47f2-80cc-ed6d3a4eb5b5",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "233ad848-5aab-4879-a8bf-130f159a271c"
        },
        "item": {
          "id": "c2bb2d80-8490-481e-ab49-32909607a98b",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d90ad0fc-c7ed-4517-8230-8980ac92dd78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae2f4c91-96e9-4104-b3e3-80e87c584ed5",
        "cursor": {
          "ref": "a956deba-3fab-4e84-b287-9897a5b78700",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "c7ef678c-253b-4913-8bcc-289f40e7d495"
        },
        "item": {
          "id": "ae2f4c91-96e9-4104-b3e3-80e87c584ed5",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "9b884a93-b0b9-43d7-af46-037217b74aae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef7cf1b-91fc-49fb-b056-d274d95a1f12",
        "cursor": {
          "ref": "c4e02e7a-d4de-45bc-aea2-25f495662ec4",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "a772c712-9c72-4a4c-b25d-b2d8cc211ce2"
        },
        "item": {
          "id": "8ef7cf1b-91fc-49fb-b056-d274d95a1f12",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "bfdae23c-5544-4148-978b-b972566d8f20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ec24216-fcd0-479b-bb96-8c9ff4cfdc4d",
        "cursor": {
          "ref": "c0e1f92d-1146-4da1-9aa5-5381af2c52f9",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "a1adeb71-acf0-4e41-bdad-9d86c30d8baa"
        },
        "item": {
          "id": "4ec24216-fcd0-479b-bb96-8c9ff4cfdc4d",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a8bf9206-3835-47d0-8c11-6e119c4e9540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5377110c-b9df-444d-89f1-5cff083227f6",
        "cursor": {
          "ref": "fbc518e9-3bca-43d8-97ed-ba52db16249a",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "6735303b-997b-4871-a37d-bf0bef1d6bbc"
        },
        "item": {
          "id": "5377110c-b9df-444d-89f1-5cff083227f6",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "33941cb6-faad-4345-bb8f-46087879121d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "834d81e8-a8f6-4e31-bf3f-ee2f016ae632",
        "cursor": {
          "ref": "fc24df3a-09fb-440b-8263-2eee58205ca3",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "137c5fc7-1682-4f4e-8d8a-f0974d0f0743"
        },
        "item": {
          "id": "834d81e8-a8f6-4e31-bf3f-ee2f016ae632",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6574a0df-553c-47eb-bcf3-97dc36be6607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f3cda57-68f1-41aa-afc4-0cc256634d57",
        "cursor": {
          "ref": "84db1cf8-1568-4779-b938-cfafd59961d3",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "b18f1e12-9a8c-4e9b-baeb-64290ec67df0"
        },
        "item": {
          "id": "5f3cda57-68f1-41aa-afc4-0cc256634d57",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "d08b1a01-bed3-4300-917e-78624ce12501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f3fbe00-461d-4431-b7f0-075b32abbc84",
        "cursor": {
          "ref": "21dbfb79-57b7-4bb7-8aeb-f35e2a0694e4",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "71cf3c3b-85f4-4344-b0b6-306c859c74cb"
        },
        "item": {
          "id": "7f3fbe00-461d-4431-b7f0-075b32abbc84",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "c3875f91-db2d-463f-af11-0b0fa38f1961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0df4e520-4905-4ae3-b04c-068c8a2f4d9f",
        "cursor": {
          "ref": "5ed7a7ba-ce2e-4153-9270-b0f171ae8f19",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "13e5967f-9f25-40d3-a2a0-4c010d8fef56"
        },
        "item": {
          "id": "0df4e520-4905-4ae3-b04c-068c8a2f4d9f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a13844e5-9209-4181-b742-ce2147d8ceb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38ec0115-af49-4e33-a2c7-905a5c3ffbe3",
        "cursor": {
          "ref": "ed5b60ab-ab54-4eff-8d59-652e93b9a854",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "98ae24c4-23eb-4227-9d41-3a435cf9c683"
        },
        "item": {
          "id": "38ec0115-af49-4e33-a2c7-905a5c3ffbe3",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "4383d62e-3d26-4dc3-92d3-19b16d24d8bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32c07a0e-2be9-4af4-bb12-32bd03cbe363",
        "cursor": {
          "ref": "5d21979c-326c-4bd9-8451-59f7d02997cc",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "3a19a67c-7b2a-4347-b40a-7265c3d66295"
        },
        "item": {
          "id": "32c07a0e-2be9-4af4-bb12-32bd03cbe363",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "5fc24b3c-7d4e-4547-b679-a2f405c57711",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b5f8c73-f007-40fc-b392-b7b9d8ecbfc7",
        "cursor": {
          "ref": "aadd3f69-fc1b-4bf3-872f-dc955649d614",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "ac6b6932-a916-4dce-9b0c-586f93ffe06a"
        },
        "item": {
          "id": "3b5f8c73-f007-40fc-b392-b7b9d8ecbfc7",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "de4c750d-5d52-4dc5-8f66-d74974cc038f",
          "status": "OK",
          "code": 200,
          "responseTime": 319,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "30091739-7032-49d9-aec3-17d68eff294d",
        "cursor": {
          "ref": "e6e042f0-8886-4d9e-be0c-02aea3ea0dad",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "b701cf2e-32e4-48d9-8c38-829c337b2b7e"
        },
        "item": {
          "id": "30091739-7032-49d9-aec3-17d68eff294d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "8759d99f-39eb-4d96-9200-0720410a0953",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fce7fbf-333e-4f53-9847-a1b01dd984d3",
        "cursor": {
          "ref": "846a24a4-2ca4-49a6-93ad-82df0b35e8e0",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "1cf841b1-e4d5-4e0c-88f0-ce3d3bb5a376"
        },
        "item": {
          "id": "9fce7fbf-333e-4f53-9847-a1b01dd984d3",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9923b46d-5dae-438c-8177-f68b8c1dadf7",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e261de0-eef3-4aff-b91c-b8ffed227cc0",
        "cursor": {
          "ref": "5c2136df-9535-4080-8243-1d3f508ea094",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "458dba9c-d1bc-4b0e-bd2c-e10d321afee3"
        },
        "item": {
          "id": "3e261de0-eef3-4aff-b91c-b8ffed227cc0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "df61a686-a3f6-4eff-b3a7-ce85a5c579d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e261de0-eef3-4aff-b91c-b8ffed227cc0",
        "cursor": {
          "ref": "5c2136df-9535-4080-8243-1d3f508ea094",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "458dba9c-d1bc-4b0e-bd2c-e10d321afee3"
        },
        "item": {
          "id": "3e261de0-eef3-4aff-b91c-b8ffed227cc0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "df61a686-a3f6-4eff-b3a7-ce85a5c579d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfc4d6da-9a1b-4c9d-b4d6-04fd7367d35c",
        "cursor": {
          "ref": "a6685cf2-2099-494c-96d3-848d722d4fba",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "e4f3b548-8dfa-4f85-9203-238e6837d131"
        },
        "item": {
          "id": "cfc4d6da-9a1b-4c9d-b4d6-04fd7367d35c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "01051293-037d-48e9-83e3-4aebabd23cd4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f6c4c61-53fb-42a8-940c-f5859116889b",
        "cursor": {
          "ref": "6911b766-c105-408e-a30a-52011fff58da",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "5269d871-7759-4b74-8773-f5270c194924"
        },
        "item": {
          "id": "8f6c4c61-53fb-42a8-940c-f5859116889b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f5bf2c95-ff03-4f90-a90f-a436cbf982f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}