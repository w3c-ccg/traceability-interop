{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9fea4cce-37a5-4cb8-b746-823539b8231c",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ce5c53b3-6a7e-4427-83c8-76eb192484a0",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c6ed7657-597a-413c-941f-5abd17fdb551",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "094a110b-e143-4e68-8afe-ab3fb3266eb7"
                }
              }
            ]
          },
          {
            "id": "64b81b83-fe69-4b33-bcaf-07e42a27cec6",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fcdf8392-30af-4ee1-9a56-300a31978ef3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d7756277-e5ab-45f7-9156-3a8a630e0f69"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "64e2f3e0-89f6-4577-b984-9eedc2231249",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1ab0c353-9802-4270-b4b7-21b937b1340d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1ce69061-a64d-4af8-93a5-d326b84db909",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "82944880-51d7-42d2-93f1-6f3e00292600",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a74832ef-72b8-49d9-88cc-afb6d69d09e9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e8b3496e-6368-4a0e-87d0-bac5d798cd16",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "83883f0d-7dc7-4e81-b4fc-93fb453efa89"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ebb8f34f-0a3e-4601-8f0e-70fe36817361",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9be724f9-268d-4220-8f32-aec55c063fbd"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9314f0e8-e281-40f8-b536-6c21cb44a089",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "d314c2c1-fea0-4add-9c93-c13bdd5a2a15"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1f54eaf7-adf0-40fa-8e65-2f8109cf272a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "64294ac7-dafa-402b-9ff9-3a106e8750c6"
            }
          }
        ]
      },
      {
        "id": "fd6713f8-8aed-4bcc-9d09-58ac90018d82",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "5675cc6c-8b84-4013-a47d-51a05dae1fa6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ae1dfc3c-29ac-4e58-badf-5165d3de36af",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c27ea592-cd48-436f-9dd7-2cfd63cd38f1",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05a07924-c567-43f4-9bcb-0634273a1ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ea111cc3-fd96-4256-b941-16dd993a2cd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2947b802-b04d-486e-b158-af92c563499c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b19f2a2-a705-475b-8cc9-423b3c280444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a9f627cf-8bc4-4670-ad0d-98239f273a48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eee96bf-5ed1-49bd-8ca6-2d1de3e6e072",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4be2eaea-8e50-4b15-b2d2-bbdd7da94ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c22cba3c-dc30-4f47-9069-bb9bbdc8e0b4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e405ec44-c5c8-4aaf-8601-15bfdd55d180",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6786c760-1fcf-4a17-b4ef-347ef6265473",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40aae5a6-e2ae-4983-987e-eb9787888c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4174a693-7607-4eab-a994-e1c3e7ad2bdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db79137d-ec7b-4c10-8e5f-18525f9f5e3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "191ef7a7-0b18-4445-89c3-7df3453511a6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ee73a207-6a44-4cd7-baff-8abf3e5f1344",
            "name": "Positive Testing",
            "item": [
              {
                "id": "32a9f5cd-9b6c-4f75-9005-5a2cda757b77",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2786376f-8cdf-40c4-8c36-114eb88f5ae4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c8621d4c-2154-412f-a799-c49378f3889c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5052d31a-f990-4c57-acfc-01f3eeaf9e4a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "462fe05c-a11d-4821-a509-6cb580c3679f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "930653a0-ba11-446a-a3e3-5492c416616f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7617175e-ca56-486e-baa8-0582b1520a93"
            }
          }
        ]
      },
      {
        "id": "4fd0a6cf-dd43-49ed-b464-aa29d2e4a38a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "03c99212-4e4a-447a-a74c-8f4c65110d4f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "227bd06b-1d2d-4a8f-9808-aced600f0634",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "73c3c7ee-5425-465f-b675-6e8eb600d510",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e19fa602-78d9-49f5-810c-394c0ed2ff71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca2d8ecf-8a2b-45ce-8c36-b4a82a968b63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22486583-bf9e-4f7a-994e-859540239b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9cc78ba2-e74a-444a-afa2-e973cb096c9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b059ef-0294-4a9a-ba36-e41fb586f7c3",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be130771-56f9-4c40-83de-f51f55e361ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5455a8f5-f5a5-4dc5-9282-d568af8e7828"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "048feca6-802b-4fef-8ca8-22ca3c753cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "51600b08-797b-46c3-b041-ee71bfefe4cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e9e3cc7-1a2c-4752-8dec-02d4d50682f5",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9944926f-e1d9-427a-ba06-0bb0ccdec6ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "855b638e-6d05-47ea-94dc-996516d48e3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dbb463e-9d57-4a6a-9b0a-3c9ffd37de7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a34331e3-6092-47da-8014-9dc65d530dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "194b15d5-7f64-4bd1-bf00-b774018fc482",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85eba20d-e1b3-47c5-9d55-d3f3dff8890f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c3f7c38-c990-4a28-95d8-a950dcad5c0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1ac94d5-d8cd-4447-b996-dd7e2f2f2374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7fc33312-ebe1-41db-8471-d89dc0506aeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39c5e069-5b69-482b-b191-1b9da805ebbc",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0239ef27-9af5-44fc-8b19-d93c8ca05515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e6f6301-6c3f-40b0-aa8d-abeef624c3ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00cc5fda-f33b-4ce6-99c4-21295af41a80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a0e52522-4556-4f1f-ba05-8472a61c182a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "013949c3-0dac-4710-a3ed-fce0dc32c5bd",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2829cb13-6e39-4841-913a-67032c115ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e29a30f8-7e45-420c-85f6-c0a04a4eeece"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e87ed04-e58b-42d5-a92a-338d2478bf80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa9c918b-ae54-438e-968a-cde1b5b5849e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc0e5e4e-f062-48eb-b6da-19183d2423ce",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c74c72-c864-4f07-84e1-e363c35941e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfa9c547-17df-443a-977d-9a9a45b6b5da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "392bfb32-295e-4242-b9fc-9f664d95ef7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ead295b7-de82-4a77-82bb-6e87be16971a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e0ea97a-d65d-4110-b119-8151d52d6baf",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da495f02-2a46-40d6-9b8d-6e20c0196788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ada80a37-cb83-4eaf-aec9-baf662d5a23b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7253a84-5768-42e0-be03-129724f0941c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "82b47451-977f-4953-8fec-22d19bd7733a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edba4d1c-993e-446f-a41b-1167974c3ca6",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f28a4d-8587-4801-9715-514fc93463d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa760e5e-0c17-480b-be85-e72a719a364d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c788093e-c55e-43c9-bbf0-bfadb1014388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6fa4d672-716a-464e-8956-2deb8eabff33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "350c421c-17b1-43cf-b732-1d65f5c4ac34",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddbcd83f-c71a-48f2-9694-dbcc9270fe75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "962929ec-21f5-48a1-8d0a-0282bb62f84d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f7fd18c-2f80-4024-bb30-d8b434a67a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c92e887-7fcc-4818-bb84-eab1526b1f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b535d24c-fd62-47d2-84cc-2f0996d6f2c8",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd1d85b-62ce-4cee-b513-b8a48a2f0b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "745ed735-4bb0-4696-869f-75502b69da63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b5619ef-9ad9-4bf4-b3ec-771e9705f0de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2cd81e20-f664-475f-aa3c-a7da31f9f429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5a7a952-cf36-4d0f-9d3c-01b7a2d33ec7",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b8f4b7-9052-48f4-85ad-637b906f3954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3004d6dd-3c3e-485e-942c-e8485a57c6af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a29ba567-796c-4a29-93d9-ba23fea2513f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4dc5a46-6443-48e8-a163-c8564bb4258d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0be049da-a5f3-49b2-9d08-d2977c9e81d1",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac40b90-94a4-4751-8769-87cf80e4d151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dc86fc4-bf4f-4841-ba68-dfb81874ac45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01d2da09-f652-4ece-9dd2-0377c905ebd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "867e27ba-4bc9-49c1-a8bb-a6d7c34aebf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cea36bb-a899-47e5-8d12-35d0edbe7cb3",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd4791e-a9e6-4d2c-b5e0-f934488bbac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "586f68b0-a7cc-460a-8bf9-614cd49de90e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1ea41f-12f0-4ba6-86cf-8247a3d4a388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "759d4a96-0bba-4c2c-9c8f-3d4d473dacfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5eb2a00-0dd9-4cf2-9f8c-ae04606d188e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9abf578f-ecd7-45b2-9dd3-5350871720f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec841ad6-aa5c-45b3-8539-2fd7b9a278a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "116e3369-0cc2-4b02-b93d-7ab9a4cb1281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f7ea5bfb-de9a-41b7-a8ff-5a41cff29e94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edb127c6-ed65-475a-a122-2a51e1e6bd87",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5599ba8-81dd-4de1-8250-8fc325ffffaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38246935-4b12-4cd7-aaec-ba812d130836"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce0fa8a4-626d-4dd5-ba93-c6484ad68ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a18ddb3-b260-46d6-b901-187e54dd3cc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8673a1-075d-431f-abea-142f6a37690c",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9bf77ee-ca65-439e-ba74-b7a2cf69680e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e5bdcb0-49fa-4fa4-8555-15a2f9735e1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c3779a2-15e4-477a-8de8-674ecf3c6f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "69914357-f1a4-4016-b053-2a176d63c7bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df984d7f-ca84-459b-8020-b8afb38bb63d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac5f21de-a45d-445c-bd40-4af6df1aba56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad63ea3d-97f6-4ff4-ad37-188173a96c9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df28c800-87d3-481c-8f93-7ac7fb6b52b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "16ba9a55-b70a-4a81-935b-c2e8d2cac159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7f305f8-f74a-4acf-b898-2c5a93a0f455",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01cee22c-efbf-409e-bbb6-a52c24846ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99ac1183-cb5f-484b-b957-1d04fe2001f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a703704-1fd1-4d1f-ae84-81731dd46b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfe8837c-eac3-4330-bb03-f9c613a1946c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3a4dd36-61ef-4ed6-af67-741127907e3c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c852c6-abb4-46da-81a7-8732ba188889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30f1bb00-488f-4ad8-bd45-9feecd5ba927"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c52691-959c-41c4-bfb7-d4fb3cd80d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "62cde445-a64d-44fb-878f-92c51c98cc05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c4ea5eb-2d2f-480c-bcf2-542e25cc6721",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1721c637-182f-4aee-bd32-bc13c59d739c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9321313-c925-43f7-9946-17a43739a1f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cad3cc27-c0fe-48c2-813a-349cc7e23dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d4b86f0-6d75-4b81-9195-56e625ef5c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f18b7f3-d8d5-415c-bbc4-319b0ea4c571",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd1e4516-515f-4c6c-9766-13f233984a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bba690d-dec5-4873-b547-8c7fd0d0ad74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca357f0-4691-4edc-87b4-f096bc6e58f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "453efd66-af78-4a02-8a96-925959898eb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9fe3242-567b-4f18-bc45-c885e40f845a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e8866ee-362a-4caf-a5ad-f3269bf23126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67a7f32c-1104-4a42-a3e9-71a76b041284"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f7dbefb-c2ed-4174-8674-71b676ce50c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e8c73520-de2f-4c47-96bb-b7019c41c7af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74d1e4a0-4652-4e92-8899-269561399779",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6617d89e-fce8-4628-9dc9-68677f58e0ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf78e953-a9fe-49b6-a8ad-e3cc776fa460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61f30dd6-68bb-4ad4-a5ec-c28bbf19d6ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f50e57dd-e572-4106-a39f-e86c8d44c810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f453b501-aa20-4ac7-bfc0-76017a3e3ea3",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a307ff51-8fe5-4131-b84e-a932b7a51643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0cd1597-d2f2-4e42-a920-61c04b1ba50e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c3c037-2cb1-4b46-98c2-722574a8f223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bdf5522-ffb7-44bc-94c9-ddf1fa35fd02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af1fa90e-e592-4d50-a416-94fdeaf6cada",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a70a87-c801-4106-9de0-92e7b05008c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cdc9668-682f-4470-a27f-a3c0177930ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b196fa2-9d25-4446-b8c0-5490119ea37a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "efc12e7e-d5e7-4da3-aebe-b92302230bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c2927fc-5793-40c5-9d2a-6d19f8aad77b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8cfa8c5-a5b6-4387-b0ac-b1d019bd725d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "706f2e77-fa33-462e-8695-2547b04f33a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06ce5ccf-51bb-4648-9567-174564da55fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ffed847-4058-43b8-8b0c-460e2dbb58a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278c50f0-2356-4564-8ec2-ea1413862193",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0778ab7f-568c-4069-a043-d5cb25b682f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a14ea669-5c99-4d88-b5da-337ce6ea8c67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "324027d6-98fb-4d5b-98d5-28a635e6ba46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ff685fd-0be6-4713-8b20-817ac65d2549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64bfd79f-a752-46cf-9e78-2c43264966a4",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f50630-d62e-40d2-9122-31727c998736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15a86d1e-b9aa-4e12-b720-136748a3a176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d216f81-4b09-4014-b082-e6a5c9ea1c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a9f0541-c484-4688-a242-53a804d51fd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2788278e-ba56-490d-9916-d35546f82dfa",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d38909ce-7010-4b52-9123-58c915d6d9f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60593635-0e40-4958-b62d-c27c8a522d3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6e734f8-1694-4164-8559-24acd3ee44d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bcf911d-16fc-4ac7-b44e-8558df0781d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c52a2e58-0f22-4ea7-a613-c5336973a3f9",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "455b7980-3c75-4a52-94cc-2a8dc707e865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c750f83-959a-4b2a-b936-299cc65900c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b76d7bc-f274-4002-8a31-11feb8a82d41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c95a5fd6-2b67-458d-b0c7-ea487300d89e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eb7884b-0f60-43b2-8a63-cf0c153f53da",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74ce5094-76ed-49fa-bc9f-5ef638612100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24c8b8fb-7f2c-4ce9-bd37-ab980d46410a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7ac10b-a1c8-4b7d-9d3b-abbecc2a629b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a3f4892-8c55-4bb7-894b-225af83612f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "044e94b2-1e1c-483d-b450-2b529105711b",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c0dae9e-dc7f-484d-873e-210eae33da71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b86c4427-49c0-4724-a7d0-02e2ad3b2892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df3f8e56-c602-4a2c-a662-c640f695e662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f273dfa5-b8d0-4fbe-aae0-a924eea7d657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c410d696-02cd-49a8-9252-ebdfc9c99c21",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae843672-8f62-4e33-b5e5-776c119ec505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84b82755-4591-4682-97dc-a6bf4a219df3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "872c61c3-8ee4-4631-b7eb-bd985da0e27d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ecb358e-4509-479e-8cca-4ab7eddec2cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c66d65b9-7b9c-4bb2-bddc-e1edde81c3a3",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "965d39e0-5f89-43f2-951b-f2ac605500ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "499f2813-d3c3-4087-a9a3-e3ce342cb20e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc64af2-0cef-4ffa-ba5d-0668e00b3778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "439e65d3-fdf1-4f33-ac43-ac71439f2441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa25759-b8b3-437f-8d9b-8464fbf607b2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7294bca4-71ac-4f91-b424-0629d8b4ea30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f80abcf-3f43-4d8b-9fb8-eed245259b3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "351349cc-cdf2-4804-bf52-d3dff7bf8243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "de7945c3-0c34-4d57-9378-b48cf505bad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e232985-614d-40e8-ae53-3c662f28a04e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ee570ed-b17a-44c2-adaf-e280c1e16458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f701eee-9d2d-4e79-8a67-c5fba51eac14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af94530-4b64-438b-a1cc-46c87a2b3d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "43ee910b-d7fe-4efb-aa57-106148de3192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b9b3e81-4774-4cfe-9268-a24c21b255bd",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9082a93-f7b1-4714-9f89-9a1dbe79958e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87ef00b4-13ff-489f-8d62-856d4d6f0a84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a3d0917-3a59-4176-9147-8541d297c7e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "32f4a15d-951a-4b2e-9b98-33b3a74001af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77a56f0e-14cb-41c3-936e-d8661069827f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "390091db-6864-405c-b96c-9c1616fedce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f3989f3-1e20-48f1-9c52-7ebb2d9b7222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e48512e-e919-4698-a620-1fd0cf3e250d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3036e93a-f8cb-44c6-85df-fff74eb006ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4d55bde-abc0-4e10-bac6-b37e80d28cbe",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9eab487-ce07-4dcb-922f-30dca80867d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e01171ff-ee6c-4f3f-8d39-d1d1466d5965"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73684058-cf5f-46c3-8c50-e23270057a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ccfda451-a517-45eb-b345-3002fc7bac1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ebd314-03d6-489a-93c6-7a4fce823c1b",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e397d03-313f-4341-88ca-ce460db69ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eb7568e-3c8e-4064-b8fd-274832852437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d7c5758-c1ae-4e31-89af-f2ee11ec1b87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b80798e4-e4bd-442e-9afd-c2b341d75bbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ebe24b1-4528-4eb7-8667-a8c2402ec606",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b628f54b-1878-4ce3-9d17-a87fb3abc8e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ede621e3-527f-4987-8a75-c7baa1f9862f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c19ff695-0fe7-413d-bc30-b51d684b54b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "6a4f35da-7cf5-4fed-9702-2cfc9fc642cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0411ac35-7d48-4ec5-ad34-00c146133d61",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccffcea6-18e1-4d42-a426-d59f570e8a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "becf033e-cc2e-4b68-8680-0aa90db70171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13204ba3-d272-4004-b94d-8c7f6367fa43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "58852f3c-4c78-40c3-866c-81f0c330befc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f0dd97a-9106-4c62-acfd-83d74bb44a56",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f47916fd-25de-4dff-bfde-2358559ba9e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0982188e-a074-4b77-9473-273a22a5b5c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81078e38-eb6c-46ad-b5df-270cf718bc27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8486fd5-4fb6-4a09-92d6-624992631f3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37323e2e-815f-4a12-9ffa-16038f07c9b5",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3deaa9f6-72f8-4ac2-9d21-420556c84859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c9c46a2-989f-447e-996e-44ccf75d8cdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fd2d0f7-15f9-4831-bf1d-015cd10c4af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f1e8640-6a67-42ab-b075-76b58932b1fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74b9012b-874b-47fe-b228-330923842267",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de2c1f7-9ea0-4d7d-ada1-8e270a5df123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33c0e1c1-55da-4d4a-a88f-0c4b6e52c60a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d69980-bf8f-4ac0-bd9a-94e72d6e3bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4eca3c46-be03-4872-a62e-e0aa339cabf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7e2f0b9-6875-4f80-b83e-1b0916e772c7",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aaef45b-7826-437c-94b6-9613c432c793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdb79a77-5d75-4a0b-a47c-2e2a98f11c0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e747f44-72ae-4b0f-8ae9-78ba206850b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "30f567d9-6745-4117-a2c2-dc813fe959f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee16919-880d-4d19-9a85-cc9c46a10bb4",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "170b07d8-6c25-4249-b3ff-0ceb203959a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aefc7ae8-8958-4a0d-9aef-e3cdabc8eaa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "451bc88e-5cb1-4f09-962c-7a0bdc361c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "17ae38cc-9d6f-4418-98cb-ee9b77e7fb04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b40569f-18fa-42be-b7dc-e690625de926",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95984c90-0fee-458e-9c6f-06766cc0de8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e93bc791-6be3-4b2d-ad82-7fbb61b26bf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3954f954-6b72-4dd4-8d11-677459426f8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "27375a86-6dac-4fe5-a98f-5720cb02eda7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "500f8e6a-0474-4684-8436-c1a81b690b2e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a02af8fc-821d-497a-8f43-3f7baddbde27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6daeb64-f99f-48af-b996-6194dcb63c07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88b226bd-b60c-44cf-b6f6-fba127f9a512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "501e9066-0fa1-4ef4-a696-da63229cefb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2bcd35a-c030-4dfd-9336-d311b8baa3e0",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22c1fa89-61fd-42ff-96a2-bb6beefa76c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bf56de1-edf5-4630-b5c5-9e0569c72bfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb4dd5d-2ceb-4ee7-9593-f07663b3b8f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bac1a15-571f-4e64-aad3-da25622767e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a863698-ba1a-41bd-9486-dba68df34ae8",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da74aa48-1525-43af-993d-7c33c4a40fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a5aed6f-256a-4e41-9c61-049b15338cb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2796c787-c308-422b-ac92-33bf30e6a8f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "349c1618-d931-4be9-9a58-bea646811db5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "550d66bf-2e6c-4f91-a719-d5e4c0da4cd0",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f05906d8-ef3b-40b8-8527-18985feaf467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5f81eec-7a88-42c6-8a8c-0c5f4cf07262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa3a6e22-54d5-4412-94d7-32a0277852b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b18b1b7-3e81-4c4e-a454-47e95365ceb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b4cd48-e091-4568-8f3c-b573406c6724",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d98107b6-50df-4c7a-8b00-4243d216643d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1ea71b8-6854-4a07-a61e-e7fd0feae8eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc8d31a7-4ede-4216-b771-d6705e0d98c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "25f894d3-d381-472f-933b-67410bdce0f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6244f4ff-ddd7-496f-8bc4-475ae4091ae4",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c786eb2-a594-4d7f-92e4-687fc42df520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e553dcf6-12b2-4da8-927a-478d2ef0b12b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e49a427e-f969-49eb-9aed-86a58241a789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "39bebd88-83a1-4068-bbe8-9395bebe40ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9800c347-efe5-4c0a-8522-2e0d13471df4",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86a1dfa4-e968-4c72-a987-85a32655b96e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b26c139e-8199-4d6c-a330-531f2e62b556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ca9c9fe-ac2a-4a78-962c-34e70bc3adf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "483a722b-52e2-4c3c-b2a5-27bc6d144503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "967480ec-d5a4-435e-9651-4cc8c54aba3e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e0bb84-6c5a-4a97-9d4d-51ee270bd5bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7cfe16e-e838-424f-8c89-30f384b199f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b1288f5-ddf2-4dda-ad8f-7168017ee5e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f92c647-1fb1-45e5-a3cb-8728f82b754d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "933e38e4-9166-4f71-8e9f-8d8fe302849a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3faa37-260b-4ccd-9339-75f8848164f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fe517e1-01b7-46b5-beff-8817e4a07606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68475968-b67c-4b60-a770-486143fe816f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7ada5fc-301f-42e2-9710-dd43e8026384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a883a54-f014-4006-93bb-64e4934765e4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff0b1ed-54f7-408b-83e6-8ac37fa4689d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c6651cb-967c-47a3-8c0c-674454e62896"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "842f3146-8002-4492-b81a-8b0a87be04bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "03d75633-560a-4b82-9727-a80a29870161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e60c4a4-d6c2-42b8-ba49-6043e5b40f72",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a16b01d-8dfe-497d-b8b6-920a7e00179f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7526e195-687e-4375-a225-bc8f08cdb319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffb8445f-4073-4f9c-89dc-d417285c97f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "438ba47a-c9f7-468b-9684-e31645cf2d07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ace719f3-160b-4b3e-b6a2-4c959cb8c526",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b12f25-6951-4196-8b43-bc97eb05fa36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf2a185c-e17b-4d17-ac6c-bab86ae03fa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58f79fa9-d008-465d-8e47-ad337f6e5be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "dcc5af7d-05dd-472d-b6f1-2661c09f2c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0340bac-eee4-44f8-97be-6ba6cd74e195",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f540363c-7a35-416b-9f61-6eeb6183a882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66b6e7f0-31ee-4a40-956b-fcacabf6b288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4567ce21-0b39-42bb-9568-4c11efb8fb9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "43b14647-5641-4f60-9fca-50c67deb39e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d607f74-3a6d-4883-a457-39189789d995",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f5d4f27-2c7f-4b24-984f-b85ce679a0c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18284753-d603-4229-b45e-bcfd443b64db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28ff652b-93d8-44cb-8872-562188957d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "490194f1-762a-42f0-bd51-89c2e46808d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75370570-f875-48ec-af5a-a709447f0570",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d294b1f-f59e-4744-9302-494ebf821a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6177b2f4-1db3-4026-869c-057624ce0c1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ead87b32-2be4-4b96-9489-5bd1ac38f925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b02e419-1896-47ee-b9e6-42a645b09f44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6825b7f4-2850-4d05-93f1-916e3cd2b490",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79134571-fdad-49e8-9b55-c8816bf62362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a32478e0-fd56-4dec-8aae-8f483774d9d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "604c32b7-166d-4be4-aa43-5b4584d0fa9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c3c864f-d3c7-4e38-a4df-6d960b1d10c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "857a4aa8-6a94-41ee-bde9-2d740cf83a3b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb33eda3-725a-4a52-b7f2-0d3d8992a959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d555c5c-943b-4efd-88b9-0d8951531d45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3aca5cf-88e5-4a61-b5b0-7f04693324f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "20663de8-1b47-4e78-9710-050131c03f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e91dc75a-0661-4c2b-a129-998314fde57d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d995f9-3bab-4d64-9a08-58f8854933b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46879061-31b8-4c24-b7f9-0a596e1f1dc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "717a4509-6218-46f8-82ea-e45c8341ab1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f8eccb33-f580-4edd-a27b-3df7f04efddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4544b908-b9f2-489f-8343-96c796195f91",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86dc098d-769e-4f4c-a0d9-1dd34371b9ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be2e5c5c-71c9-4b5f-9fae-a49b829db30c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d228699c-55e1-4a5e-9487-02def7c73971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3470ac2-e091-4f41-bfb6-d62cf024b9a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f51d62b-ec68-4713-a7e6-bce06b380fa7",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "209ad8db-bbb3-49f7-8821-1c703038ffce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28b67ef0-ab19-418f-bbdd-e6d013c1ab29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe9d0712-a0c7-4e5c-9a7f-800f2b88c663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3767a36e-7438-4c06-8633-86779c9c8f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0467d8a1-c3c1-4559-92c2-cab2b2b72373",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "462a9923-d371-4a70-9966-32714e28c2b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a86a6da5-71df-401a-9df6-259a7af4883f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c07a2e2c-c852-4988-98cb-89c3c59645af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "feab0743-39c2-4053-a682-be2f8b859e47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92b23726-6aeb-4c5e-b5cd-f95cd763ba62",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf784be-08e2-4eaf-9c33-e6cd6dd77921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15727f5d-be91-4f45-9134-859a80eb1b98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "738af1f0-d569-48aa-bf05-ba8a5918879b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f169dac-fa05-4a5b-b3de-60764824bf4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad15c2d3-2597-4a1c-a244-595538a04468",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f218c9a8-c45c-49e2-bf8d-3a2dcaddf07f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "543ca406-eab4-4e21-a035-1ce79812e5ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d7a211-97c4-4a78-b54d-1e3471e5df0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2890125-7e93-4837-93f9-41e32b168482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d472e5-94f2-4a37-a481-b87b3f4c9152",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b53d7c19-e605-4a43-8287-2932538f3f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41f8c81f-0f28-48cb-bbfb-54cc509d35ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5b90731-ded6-4978-8268-8dccfabf2ba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3207c4e7-eecb-4957-bb06-3f756f66f121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "754baf3b-55c4-48c3-8906-62d6724814f4",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edd8b901-5cfd-448a-822d-0791c05a38c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "477fe496-0c72-4213-b7bb-d6ec7f290f9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b86b7bf-c2b9-4dae-a7e9-9824ca5483c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "393111c9-e716-40aa-a49c-ca0ff0dd0fb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1684c22-8811-43ed-97e7-a94d4d1b658b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0eea96a-fae8-4813-94ab-f6cf6964fee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c2bcbe5-206e-4418-825a-59b25bfe2ac6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01410329-1241-4195-94b0-3bc3da53c494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "181bddd7-90bf-4b4a-95ed-4d3730fd20d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4dfd00-0bec-4ddf-a1a1-1764f321bfc1",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1edcf46-5c5c-4832-a1b2-c5ced29a71fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4382b4fa-dcc3-4155-ba3c-071cdd7b470f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d279248f-b429-4bbb-911a-70c8b31e00b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8cd9d91-a572-433f-b699-a8126c97c529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdc7db5e-ee40-4564-8cb3-276de66b242b",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ccf4e03-bc27-48ec-90a6-abadb07df939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2585efc8-1155-40e7-a209-a4a12f74320e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f825a89-8928-4048-be9a-64621848f938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb16ab51-82fe-4a03-891f-88659bdbf26d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18eba949-d8b1-4233-9679-49be4516652d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c11d9bad-0856-402d-a24c-3ed72ad83ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92119eac-32b6-4829-a462-3e1b38f76247"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a1ee354-7414-4f02-9fef-500db5669be8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "10799625-0cda-44bf-a02c-92f51adb2620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dce864d7-dd2c-42ef-b079-0d4904acb5ba",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb6703d3-839b-41dc-a14d-8e6d74ea5c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fe6f98c-3603-46ff-a794-9a16931c20f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08056235-33b6-4116-aa63-56bf211ef3f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0b50397-d969-4e44-bef2-ec41b0fedebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d65f56-ef9b-42c1-b1a3-b770594039c9",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bacc855-1719-4b5f-819f-ef3a96fe3cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ae1298e-1ef1-4d3c-ab03-961b686589dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c360d6-8fc4-4b12-9a75-3f47ec733d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4becc5ef-532d-4285-ba29-c49c33b31152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0380988f-a8e8-4782-bd11-b3fad74abe2c",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e542478-a232-41a6-87ac-c76d5635e4ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c43feb8d-0138-41a9-b5b0-04e4818b42d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b154ed5f-1741-4388-b9ef-1e10890f4383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "67d4feb0-ad29-453f-bf51-faae3212ec8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fda7027-7d93-4837-b08b-98300a9cd0dc",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02fc29d6-9a88-4475-ab35-719093b97676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d685ac61-0e83-485d-ad70-dd55ada4ab0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8844ff6-a910-47d9-b58f-97c6d4a590ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "95dc2fb4-7fd5-4c20-b18c-6499807eb961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d14304e3-93e4-42f5-b9c8-e38371d478b3",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "878c150e-b29b-4755-9e33-0b72c1c39d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b2dee17-9f5d-4e52-a571-e00e92e0c50f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c673a0fd-b22e-438f-b26e-4468f6eebf59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b303af2d-d1ab-4623-b426-2ce8a0cf412c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2999d466-8901-427c-aa3b-23339769e64a",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d73dc7-a103-4525-9ee3-2e09ebd94de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62be1801-9b94-4c66-bed3-b03e6a901a4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15c19492-31aa-4e7b-a8df-33e6f0d8ee09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "01cfb81c-dee8-4855-8194-b8d6113a1a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "818c57bd-af64-4451-b304-05a9e992ad45",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "754c5e98-fbc2-4113-ad76-2811e4a898cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "033a50c6-35e0-46bc-92d1-c912373facfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aefbfe1-618b-4779-95ce-9309a401afcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b82f34f5-25be-464d-9186-9c0ebf22653d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b92b86a-efaa-4f70-b104-48a3f023cbc0",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29cc9768-9916-40b1-836f-0de3e20a0d0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07fcba17-c966-4d3a-8ddf-47d78787b630"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f0572d7-78a7-44e5-874b-e2cf36a7b48c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cac23294-1890-46d0-b3ce-abfbbb4f288d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b39d52e-166d-47cf-a0f2-ba762588fa5c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a058b76-f5fc-45ad-8ad7-7220dcf8f6b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b22c2e0-cb4d-42f6-b97a-d0873e3c68b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508a4f08-ebac-4759-b5c0-169201aa9dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c09abfd-1d86-4f23-9921-6e3addb8c6fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87ccba67-7686-4aaa-98a1-7e107213c061",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c295d5e6-e498-405f-bf74-ec67e4b70600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef8003f6-9fb0-4e8e-b582-70efc246238c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b255ca7d-61c3-41cc-a2c5-199249f0bdef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c966088-a103-4ee8-b794-835fc61653a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a523186-10b5-465e-a581-32669d7031a6",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f180284-1041-4326-bebf-55e6076f0bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b6f0a92-8c82-46d9-9495-640cedb0b791"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f98d055-9254-4730-9974-e6ebc1af8109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ccb1ac3-c28f-4490-8fdf-b6024355ad2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4510e5d-088e-4079-aee8-afbee2e0bd15",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "006d0caf-657c-4629-8532-02e445879a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f923c2fa-283a-4dcb-87c6-4f8449773341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33021b1b-438a-4d9e-a93a-e1799281eac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d8c9015-dd86-42ef-baf0-bec2b7c4c8b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b906205-df50-47a7-8462-15a65f682adc",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d827dad7-8a7d-4ca5-be5f-748635f94418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a45bb43-5516-46ee-9b68-bda883649f08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2449fa1-184f-449f-9047-c2837e11c9db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "af56f22a-4487-4fee-9310-8bf6a798a76d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2a74e56-c588-4b8d-b070-7c878b7251e5",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15cf8d35-a2d0-4d2c-bfd9-cc0aebc0af97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1ccda413-8084-46f9-bb83-41afd441d47f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6facc20-76e8-4beb-85c5-6c135579dd60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "13c0f713-fa46-444a-8a88-c03c9cc61fe7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c2c972d0-ceb3-404b-af60-bf55fef1c06d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8fdccfc3-326b-45be-a4fd-2cf7708334d3",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f3e0e8b-a564-4235-93da-646d433311ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b5a5466-7eb9-42a7-aa12-fc0034d4e8d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bc4bee9-12b5-4da4-937a-828144560078",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d22c832-7211-4bac-84d7-60d4a267f56b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bceed7bf-e013-4eab-a05a-5db847e404e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "067a2403-70a0-4cce-afe4-75202d32b536"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "70f51091-37c0-430a-a336-763e10663171",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "158a21b5-83e6-4e93-bb07-cb9a38951429"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e5962ef1-2b71-4a73-b1a3-fc349290bbfe",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6206ab56-5689-40e2-b390-691994571e69"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1e4ca0e4-8377-4a32-84e3-b843d99907c8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "70a27fa9-ff7e-4702-944e-027266113d20"
                }
              }
            ]
          },
          {
            "id": "78ce5237-3c87-4160-8d58-999b8bc19a9f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cd67f488-041f-4338-ab4d-2c2747e1bac2",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "9e17e767-c8dd-4ca7-8d60-90caa514dd61",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91b7cd8b-92f6-49c3-9d14-f680a5ba198f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b81a5634-444b-4e56-9eec-91b8eec1c198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc7fbeb8-eb9b-4acb-bd8f-f39175b5f65a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c05d4fd-2659-4547-ac7d-d56bfb60a85b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8b891574-5a80-4fa1-8b0d-b6e3721507cb",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab1d42ef-35d5-4c1b-8e55-9cf1d00c9d8e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0cef22c4-5730-4cd3-b668-4114188ec7d5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a9666d5-a3f6-4a07-8551-05b51ee577ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5b903c33-34de-4814-9505-711b489712ea"
                    }
                  }
                ]
              },
              {
                "id": "150a82b6-6a2f-4e26-b363-8ab29e62c82e",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fbc63b19-b363-4839-a0b5-f31b3077bc5c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f1c95a0e-b801-4458-82e5-b4dce83921f4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8e9b77f9-dc8c-4858-93d8-457b5a4e1d8d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "de7c26e7-8d91-4fb7-a521-f8ee5d4340de"
                    }
                  }
                ]
              },
              {
                "id": "89ce1587-40c2-42bd-a256-f5dd8fe44b48",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9a1324f-301a-4525-8e63-10524b4fe48f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dfcf85d1-bc35-432a-a88b-2a301fb71db3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df7c367f-79c3-4f76-8b84-a1b0f54c24df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2ef493c5-2e5c-44b5-86b3-5258e41353ac"
                    }
                  }
                ]
              },
              {
                "id": "c0b10abb-f5ce-4acf-9810-6fac1e56254a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3bb35bd-e61c-43ce-a1f7-026b63bba038",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "603e97ee-a6e4-4992-9ba7-0f422ff3d2b7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c36d0fe5-4bf4-4a65-b6fe-0fb6e0ff31d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "195e0a1e-55f0-482e-a922-824d97bb3624"
                    }
                  }
                ]
              },
              {
                "id": "924e0fa7-ac0e-484d-9566-17f7340f6306",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f1460562-2ddf-42cf-ac5f-a6c40276d15f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "80f58319-28d5-4198-a1a6-96d7eee97ea1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5cf07323-0a14-4653-89f4-3397fdcc3828",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e8c03229-edbc-4636-90a1-f215439419b9"
                    }
                  }
                ]
              },
              {
                "id": "a0688b94-7967-46d6-a720-a510ad3a7bac",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "01dd84b6-256f-413d-9137-149bb0dab67f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "90d34054-d494-4c26-a324-861e173c69df"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a1c2a11-dc91-4cd4-8961-6cc5c94aa904",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b54b32e2-9181-445f-9e18-c3daf18b4b64"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "184562f9-caff-4f98-9ac7-d42a6b03316b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1e9d1c85-08db-4028-880f-8b8aac341c23"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6473e38d-4121-4761-90fc-2e010fbd2d74",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "46fb0d0f-c3d1-462e-ad71-b29f41b9a07a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6bdfe4e4-06d9-4e62-a22f-d9c15e07520a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2f0f6018-11ce-42c1-be79-1f293e38925a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eb091876-1922-4360-9eea-3b90bc9248a0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "57466064-6088-4577-a4c3-df0daae042e3"
            }
          }
        ]
      },
      {
        "id": "14d1d7bd-52fb-48dc-95b4-335175dc2d1a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2c2dcf86-5da7-406d-95ed-71ae78f6f5d9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a60a344d-9f33-4bdd-a391-cd7e788e29bf",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "db95e1b3-f48c-40bb-a0cb-896a37bb376d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c1fd86-5be2-42b8-8f6a-36ea36325cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f8578ce-7d58-43a8-bb5a-54b7a35e7e0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e210c96a-f1c0-4b5b-beaa-c5294f668422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5952c93d-0a04-4296-a989-b107be4b3198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "889f4758-e95b-4b29-b5b2-20d013a9ad58",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee8957a4-0832-400b-9db2-518fc1e23b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f4d8551-b933-44f2-9bcb-06aa39c52e9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0872ea36-1367-496e-a55e-7240d7a8b583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2560706a-657f-451d-9a4c-6a93c76c4ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c4e4ecf-97a8-495f-b3d4-bc89a5672416",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8003a8c9-e695-4544-8093-cfc3aa243e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9e425d9-50fb-42c2-be81-81b80ced44bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d990c339-fa9a-4ddd-816a-e7decdb66ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d73ab06-2a41-4a30-8c08-a8d97c6ff7a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1779c88-5ce3-4461-a272-c8bd506187bf",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae41433-0aa3-4197-be30-305367f5c383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c9fba8e-e1d2-4c2a-8426-77f572bbb5d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf4a46f2-2c62-4f38-ae2e-65eae96040da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6318b198-4d07-49df-9ab1-4f73c750039b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e380298f-390e-4862-b0ba-b1716120f58a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb72016-221a-42cd-a00e-f431c514793a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd92529c-10bc-4442-b5e2-444b51d9c974"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c38ebeb1-b807-4ee4-bdb2-5ef952fa47ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "92c6724a-c95d-443d-b9ae-bc547a77e7fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e6360df-e9fb-4923-9168-bcd2f48c61a2",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc18a3fa-2093-4756-843b-7b1db7f7783e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c385a135-0774-40db-aba9-24e73887c2d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60ea21aa-3b30-4fe6-bd35-cf4f997ce33a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "db2af09a-0067-4658-aeb9-5210950654a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0245f45-d244-4060-bc09-d207a54c81eb",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69aa321f-e266-4953-b707-95df7bce410b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31d0dfe7-ae99-4e5c-a5f3-8c2a2bb181b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c939d2d1-bd09-4e59-bb08-df3a98c68080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad098a6b-bec8-48df-bb96-e67d6e5c5267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c974f76-3579-4f5b-b16f-efbb94575057",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d95bef6-4c2b-4b52-9657-dfa8cdafbb30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b510700-9d9d-4601-9daa-27e2835fba1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2011962-3b78-4a57-bf9e-79a33c9588c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "72bc27f6-9207-46bf-8c7e-4ab46ab54cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a55a6cd-0310-4704-8e63-babc92aa67d6",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cda3a96f-266e-4150-ae48-ba0d2a14a95b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70418aca-6978-4cc4-8d9f-7807a388665e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0304d1ab-0af9-4141-9299-2dea4a38c76c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d13077a-dfd2-4d99-a826-2574947fd282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf88b58-2103-4b9c-9e36-1be8beb4f72f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5eef2d4-c665-4949-8e93-cc4f2300542d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "649420e4-1b04-4f69-861f-1da0418c0572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dfb83b4-9546-40e2-8ea9-89dcd7511efd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0274c4d-e233-46fc-a227-62dc8a6202bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "252faba6-09bc-4701-b6ae-148ce26df09e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18f9afcc-3f27-4184-a8a7-382831c69102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20abf3d0-ea23-4a0e-948e-96b3c36abdd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e9d15c6-3f45-47f5-b6b1-7ffb99444bf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "fc02b984-2d44-4c2e-82b3-73043f504bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b01f4948-b983-4c46-9903-5c359cab97ae",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "055ab392-93d1-4cf6-b299-21b36c7a01f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "809901a4-d5b2-488b-804d-0512542b0065"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff0e2587-dc0b-4a28-81e0-0d30d2fe5506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "658cc512-7f2f-4a10-b2f9-3f98e75007a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9348f315-29b6-4fd7-a247-ca3bf0f045a8",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cdc8668-e4cc-4b5a-a28d-cd84cf7daee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20a1770c-8663-40e5-8569-725424ff8516"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab30aaa6-11a2-4923-a3ad-e6b8c425c93a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "28e53794-ef9a-4905-ae0f-577649a0fe9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "609e428f-75bd-4778-a85b-6d790d443fee",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c12dd309-5db9-4125-a4f5-886103c71a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50e98810-5de4-4717-b466-095162f41c74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8645b59-4ea6-4c6c-af46-4a98d69c39c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a030f6c0-c665-48e9-ac54-5f8843ae6425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d9ec888-d696-4ce7-a8a7-1647dd92a05e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20ede44d-b6e0-491a-b6df-d4c5592d0fb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b695153-df9b-46ce-b53e-3211a25a7060"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e6f0430-e9c6-4b2c-94e2-62413021717d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cf62c21-3204-4116-8b9b-07c89ca23b3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8438798-f9a5-40ed-84c8-6b79a5e33e4d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85308a0f-4961-4dd1-a506-1b8360f15d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bd01bf6-f8f0-48f9-844c-b05b86e1bb30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e8e706c-2cef-42cb-b211-a90385b3842a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b23cf678-2d72-4363-97f5-7fb46945cacb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d0077c-8d62-4c84-b292-08998072ed82",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f7c7d9c-ce8b-4c35-a953-9fcf7fe9585a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f0cadfd-a639-49c1-b390-2424a1fcc810"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f686126f-b954-44a7-b90a-91f33fd257fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f5e2b56-74e5-4e8c-b7d7-bbd8fa846d74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e2e9d4-f9e1-4476-af79-0f1bb4538b73",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "087187f4-2d75-4b20-a4c5-ee0a8272deca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdd7b55f-619a-475e-8921-857f9b4737a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a08d447-811c-4595-839f-3efa2d7b9377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "00d64850-235c-47cc-b6bb-dd320a66fd0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff4823fb-3248-4ee9-93fb-9c46e717c79e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b48d90b1-9476-424c-98c0-c52e38b1223e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abfd2f50-7a7c-4748-9544-7902242167a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec48d656-f407-470a-be47-52485f6bbc47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d001a71-f2ff-41ec-922e-801d6c56e73f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c43700-1eb1-49d5-968a-a0e82ade51c2",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feefc031-73ca-4f82-8d17-08eadc749221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6083586-8c0e-4dcb-b8fe-5f6a4932648a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a40c94df-2c14-4b46-b5f5-4385e9f6d2f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b66a9bab-fd1a-4bdd-8136-30fa32bdc4df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd2723e3-dcba-4559-b5ae-f10819bcc00f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c16815b-b25b-4f5c-bf60-55de50e13109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01138264-6e20-4fbb-a361-0ecbc05e0356"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "917d73f0-a780-4f6c-b4b6-91c201e14651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7c875e0-d9b3-47c9-b606-c1d522a2caca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bac8c06-91fc-4f33-a52b-c75646cb55f7",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03548380-de3d-4373-ae2c-5453ad67a074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c71ca74a-247f-41ae-aa53-624d3b14ed71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0893182-9403-44f4-93e1-99ce85e734e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a32b682-7e07-4b3d-9cee-eb158159bc34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d8ed92-080d-4dfb-a6c4-228434020c1b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f34c0a-f662-43bd-a2fe-fb20b7371cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fde26f5-94c5-4394-9f70-15b887626ee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cad14255-c8fc-4c6d-b5cc-eb8006993bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ce872b0-0a2c-4588-9ba0-74af5e27ffbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92d4d6ee-adae-4fef-98c9-ea7f967457e2",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29474f5a-3464-454c-affb-56f928a8ee02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12d65874-f24d-4131-a3bd-80de12586524"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "391b24a9-bab1-40b6-9edf-4b829a6f3b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dcd0bb44-ae40-43fd-a5f2-f8f9d46313d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99e635e6-0a43-4161-81bd-0000b31bc756",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3135257e-bbde-4f2a-98a9-5431717294f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c9f484c-81e7-4141-a652-6ec6aaaed70e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59cb91b2-f0fb-4176-8474-18bb3f28289d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62fed08c-50bb-4507-9465-30230b7bc6bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99c257de-fbef-49ee-ae53-4d301a570a8b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0e8a812-c877-4a06-922d-d6130f35c554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e55277d-3051-462b-a211-e79dc5876568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5071e3c6-680d-452e-a84d-f24473301620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d6a7060-d697-487f-8f9a-fdedc71953f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3005b498-b01a-4216-9833-58acdfba277f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e77ee22-179f-4fce-a8b1-a44c9886d38a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d3e7282-4e79-451e-9b77-97eced5a02fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d9c67e-f6a0-4743-af24-0e95cefb7090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f62a2e57-ad37-43a6-a918-c625e2c9a7b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31744bdc-b15e-423f-a792-91faf9a17f94",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "743415ba-0825-492b-969c-649c37585581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2167f8b-92f9-4892-b53b-613dd0cbdfae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6500509a-e8c6-4fad-ad3d-bd634e5520ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b5916d4-0ea7-4fa2-9401-e7a0e3991c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edb7f1e5-9c1c-437c-a0de-54e5b76c4e13",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d65200-ac98-40cf-bc28-a5004a0d48c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f7d4281-3924-4ea8-b98e-f06ae825cb0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b1eb469-6feb-4b7d-bfbe-51011e946243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "85aae33a-f2c7-4f82-99fa-c91bf0f8d1fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79c0f615-7509-4983-8785-e562322a61e1",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "012258d9-2c18-4bba-a0d1-26f10126d5b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "651acc7a-38a5-4502-a984-0a7e7a41ae2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba0a3a0e-a8d2-49e8-b0cf-ee017f0da411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cb829aa-4ba3-44f6-b76e-d8317e92299f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4beb70a-bfca-407c-bc96-d959fef8e68c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "430aac9e-965b-4bea-9d81-c430367c37ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b54900d0-89a8-4390-8986-345d3f191374"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc90dd9e-7f26-4936-b829-8bffd400c1b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e600ec33-7cfa-416d-87f3-c05b60af68eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb21100-53bc-46ef-bd22-ef44ca18f0b1",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb74650e-15b9-4017-8d60-f2fa93156237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f701aa7-b630-4322-8a7d-8650e148b55d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "825b8c28-98ba-46e4-a1b5-13db32bcb9f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed2d3af5-ce32-44e8-a6f5-1a6ec851c954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ae4f36f-6a67-4025-b254-a8da5adb0e12",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0870dc8a-0912-431f-8fad-a6290434916e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53fea88e-6a97-4354-9440-f43dcc06fdd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7b91fc4-aef1-41f6-bb7b-58f8b37ffa10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8bf0443-4c84-41f8-82f6-ac098aa54ff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ea7a5c-0ba3-4476-acc2-05cca454cc93",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d6d3059-fbb5-4035-9a6b-80802f504ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39b4e076-5964-4bf1-a7fd-c8f6cf456551"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13e867b6-2c05-448e-8faa-010f0814f59d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "44b6157d-d4e2-4874-b70d-07c414e6da1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8334f74-9519-4dbc-94b8-05a1a01271eb",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "076255ed-6e9b-4180-9e57-26774ced135c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df16ff80-ea79-44a6-930a-1f11bd07baae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61ba78bd-7e5d-49fb-b6e0-022f082bc62d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "12e21d03-fa5e-43ab-8902-30bd09525cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37fd00f5-6963-4bf4-9ae5-53f2da0bc404",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f129a2f0-b09f-4288-adb8-18328468973a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ddb047e-7880-42fb-98be-db7781b0bc7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e90058a-2276-43b7-9ad7-7605409d3460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9877c572-e2c6-4ca0-9ac6-0693127f2685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b99dc86-14d9-46de-8d9e-7c3850f3ceff",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af323f46-1204-4c9b-aec0-6e35589f4237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9643631-f0d5-45cd-a0f0-8142ec8462ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02da9b05-e687-48dc-b22c-b5616bc3cf9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b91dddbf-42b8-4260-9633-14ee3b53c947"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "26d7b01a-0b54-4ed9-bbc6-4a116590cac3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c9201c76-1a15-418c-8be1-5dea2eed1b3f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9455bbb8-7161-44db-98fc-39e8f3ee5868",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5b6d47ac-0676-4406-9ff6-04fdd152490d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8a80f7d-b171-4e32-b911-895bd3daf22c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cf680d6a-f1e9-47ca-b3b7-55ad2bfce92f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4be87aa5-b021-4792-9e41-78b0a117d948",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b1c02105-ceaa-48f1-b611-d3ac915e1c82"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "db321cee-a643-4559-9ec4-530ef2284ddf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f2d40749-a4c9-47cc-843a-7a34d903b246"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ba350814-ad03-4fa5-9e1a-1ffad2b5c5b1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7beab929-1b4b-4494-91b0-47111fea4904"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "911c7c05-c8bc-47a8-9335-41a93a91d808",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9ef60eb5-ed16-4901-8ed5-ffce27e12817"
            }
          }
        ]
      },
      {
        "id": "14da2272-04dd-4f29-8fcf-64347831e353",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ff10259f-f7e5-4a1f-871e-03406db5aaed",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0dbaebf7-d8ec-41fc-8432-b979229704ef",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fdf8508e-af1d-4292-9a3b-d1045f6ca53d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "438c78fc-77a0-413c-8b61-ba3021287d55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e30f2253-542e-4617-9804-bbff67c4e6bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9afa96c0-a433-4d4e-8b45-bc9ebb8ae215",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f8144a7-215c-422e-b86f-8251e0b8d43d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33363fbb-35d2-4235-aee9-bf449208f3f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dabbe36-32b3-4792-aecb-a212348a535f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e27e15d3-fcf2-4d04-b6ae-18e55b0b925d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32420528-48e5-48e1-8e05-eb89c5374a9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba576665-8b1e-4b42-8350-18cb9e291dc3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d604f81f-b67f-4c56-82a4-61914768bfdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2b6d796-6b6b-4f76-aedb-ad0acb1f47de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad374c63-e055-44dc-8ba1-e0e3f02664b9",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd98b8c-e380-42ab-8725-47c1c4d24320",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b51ce3a-5dc8-477a-942e-c5e24fdbe49c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02218495-6889-409b-80d8-32177cebad67",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b453e66c-8693-425e-a282-f3c9b0681987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "081e778b-7d7a-4436-ad57-7f3c48cb9dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38534142-6b7e-4af5-ba34-ec7cd7e8a635",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f812dc8-eea8-4314-8038-72b818a3a2a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b32cf36a-370d-4379-ba0d-145ce6563074"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2067f597-ab61-4699-b0d5-df4c74dd8af0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "400abce4-39d7-462a-9762-779612d9ad03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59dea915-d6fe-44c4-9083-a4eb7385b19f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d6cdce5-a327-4bff-8175-de9687fc35dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "706a9c16-8c03-4ac6-9976-d97f73a0b836"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15cf1e31-7a52-4e17-ae92-295ca3c4558d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb0aaa95-d189-40a7-9bd9-f4edeb3f899c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0175a52-7565-41d1-8dd4-9e5d3a8593f8",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a5ed222-8b80-444a-9d6f-656bb3b1fbcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "faa5943e-c08d-49ba-ae89-cdb630b1dea1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4e07419-fad6-4653-9bf9-2f8c5d01dc69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2604ebdb-d9e0-49fa-811a-54b2dbbeec82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d9c2942-7329-4587-9d17-cd41fde34f8a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fd09bf3-fa2b-4b4e-bbe0-d4dfa5e31bac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8db478da-6f5e-4cbf-865e-5f0c78073b7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d719c97-f86c-4270-85fe-21b82ec76712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9e14acb-419a-4165-a87a-3c159812f5a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "887d1f72-fe0e-43ad-a7c7-004ad4f3f916",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63302942-c234-4065-a8c4-8743d439cadd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ff1d9ef-beda-4e07-abd8-5bde49a2dda6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d9300f-b836-47dd-9db3-5e3599c1dd76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3a38a0a-0800-429f-b992-7209a0c51679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fcb872b-ecba-48ce-92be-27dc3525817b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7345f9d-09f7-4d60-a328-57f32b55bd71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b44f209a-c12d-4d1e-a4fd-9563ed0c4ee0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af3e58e-63c4-4d5f-82ed-331eafabc99c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb794804-ca99-4d7a-be77-1630a2a1954d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0f81737-0cdb-4b71-b362-2bea5992936f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e35ea57f-8994-47be-ae06-15c73807eeaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e12b94fd-9bf9-4f1e-a529-c21fe084dd19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc1c7f1-2b83-441a-b51c-5d4dc35e5e1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83897a6a-7e2a-491a-9270-1c49027ade9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2086b37-d0fb-40f3-8cc4-43c641a75ec4",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52edeef0-999e-4149-b59c-7abd2f7ceb4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09674406-7a1f-4be0-9b68-43ea1ca1d5cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7d0a9a-3910-4fe2-af3c-c133ef9bec9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc97eb93-7e07-4294-ba12-5a3a16d42645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd5bf8f4-796e-4535-83f6-084de34ed6fa",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36888052-fea9-450d-9200-4c5cae4c6766",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73b6d872-1a39-4298-a4de-901aec63f577"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36af4658-4461-40ea-94d3-070702621268",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c815da3b-0aeb-4acd-b064-81a00ce4b1fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b6f8c28-3243-44ad-8f66-1d126c3f2af8",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb1cafca-db19-4c51-afb0-4c1efc8a60e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9848431f-f961-47f2-b0a4-5f9b58da7488"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6b43267-f248-4bbb-a785-3a16f315442f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fdbec41-00f4-4c86-800a-adb1dc94084c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8658bd14-f5b4-4562-876b-150dde4de5ab",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a3c9b75-62ac-4955-9b65-8d59ef9288fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c49269fa-47c6-48cc-8802-a9c298e865a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "891b4694-7bac-4b29-a980-7c2ab678e7a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4c8d78a-234f-4598-a069-c6612a768d02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb7b1a1e-502e-44ca-ac27-5e58429d91f5",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca415fb-11e3-4215-bf6d-74a05c0114a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31a1ed3a-945c-48cc-9aac-bb88fda45a3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39ffe721-5cdf-4b61-bdcc-5003ddbe2004",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bf8ce01-7cc3-49e0-889f-5f2ceef70a1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9885cefb-559b-4b99-80ae-349fa3d38a12",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f1283fb-15e5-4449-af0e-b2e5e9cab436",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17438729-0d97-45db-a6f5-866da7369835"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ed5edb-05d5-4d0f-a270-0630f4ea1fca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0afc3861-f7be-47fb-908e-3e02bf8538a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b34e268-19ad-4b33-b112-28be3b0dcd1c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "850763ec-b704-4297-bde1-70461a6fefb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aece842-8fb7-4ee2-8d2d-a38202395b84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "389092ee-1b38-4d41-ae73-a0e57e01e955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62320cfb-3e8f-4f45-a11d-1d875ca9bb1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72bba501-61fe-4799-9a75-538fe8eae393",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b81fa0fd-fb3e-4ee2-809e-54bd0b51ba30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4a72ae3-1c5a-42eb-9ba4-7bbdc397778a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93dcb656-0a25-46e3-a29b-68830db3fe87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f379d27-c407-4be1-92f5-9a5c11655612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e30da69-6fe2-4847-88f2-93895a91a942",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "385e6de3-e0c1-4413-ac50-5870db2ba935",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9556f50f-d9a6-404f-adb1-aa8c9640c5e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7169530-35dc-4911-9c71-84dda26c3795",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33510525-e5c4-4e4f-a2c5-3871c4c95331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8027fbca-9b39-4f73-8140-5227863aecd1",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a11ce3d8-bcb5-4e56-9f94-5964df073399",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcaa7aed-19a4-4352-bc63-5850d41841d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "630025b9-00f6-43e8-b722-bb0f09b75bff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24eeed15-3080-4171-8e5a-8f4149243651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "684c6fa4-2f42-41c3-98c3-ac13875c7267",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "558ae74a-919d-4512-a28f-4888fe3df06c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1066788-bf17-4b7b-a7b4-ff47fef0b643"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9821312-3a95-4fab-99a1-2cee06b84e17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e6f8e1a-d0e8-4aab-b530-7f959298912b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c5c1a1a-27ed-4093-ae0d-76384aa12b8e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46e1780c-4347-4186-b4a8-aab86dd02542",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d4ae28c-e2f6-4657-aca3-467dfbdcf952"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c16f98-ddc8-4fa9-bacf-9c1976b9a307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59bd548e-ecb2-43b7-8ba7-c221c9dda6bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1690c1d4-6710-485f-bc96-1fd69a5239d9",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "854838d1-8513-4318-8f60-eccb571980b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e7a1d5c-c4de-472e-b8e4-79c630b2b4f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "957c8f2a-b24d-468c-a771-ff138e94fe80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ec32334-2ed1-4afe-9d08-13f8ae863773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8014109b-81c8-445c-8993-fa2bc74e44bb",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edc0ec8b-6a03-4954-ab25-5c38a30624fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79be399c-6b0e-4d4f-a178-15b8112a9621"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e41d0b7-4ed8-4860-b1f5-a9a87183656a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21f763a3-b61f-4a60-b392-2a0a9f011452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637a8e6a-b58d-4b49-a886-64c70320ba61",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dba4ef14-fd25-4aff-b8b0-94fa09a090f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "040717d6-65b8-4988-aab2-b2287e9075f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aabe2a2-3d44-4caf-82e4-e4ee6e698698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef74449d-b304-46a3-85f5-9493549c32d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6290f45f-283d-4b69-adb8-09b4f79cca75",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88db698b-421b-416f-9b66-3efa45c56544",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73eab7f3-5c29-4562-9028-32648fc0ecd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c17d6a6b-c94b-4414-882e-5b396d47e242",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67fbd2f3-ebb2-447a-85bd-41596e9868aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71a41ff7-b165-4929-894d-c79c79b05372",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59bac76d-d0be-4653-9ee6-03976f5ce350",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f08bb678-ef7a-4642-96f2-83331fed529b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa43a2e-19e6-49e2-9341-4832d2287d84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d18b6833-7cec-4158-ade3-91b45a13131f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa098bdc-f379-44bb-8e80-ec894ca02538",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "424a8e30-f59d-4b5d-b28c-8af19c5fe03f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96f309bd-a24d-4db3-ac66-0bc7c622397f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ce869e-c899-4bf3-b30a-57e283088c42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96fdf5c4-e571-420e-bc1b-86dc748c8989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee00c36b-382a-4973-b5bf-1f3331c4c102",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b41d5263-4471-4362-b10e-2a6069c34d73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "696f5c85-4cc1-4dba-9980-314d2c14bf9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2249d736-a3a4-41c5-b69d-0ed78b814af7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01d50b8d-1e8f-4652-bf42-8eeaf36f414b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c14cff0-1a26-4f68-b63a-c262b10c9244",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09bb4a52-5cc8-432a-94d7-0905a5ff16fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecc79c3d-d937-48c5-ba67-0fa8ca351e16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "990db4be-41b9-44a0-8ea0-315c76eaa190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adcf7fdb-cbd1-4809-83d4-fbdafd224864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea4b9150-f31d-4997-a57d-213087853783",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf591516-bd4c-489d-a85b-09bf797577c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "531cb591-fadc-4c06-aa1e-16c157dc6fb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda444bc-49b0-4af2-b471-7d5464a51cf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41abfc2e-d7d1-48ab-b9bf-2ae6b2dfa2b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b9dab0e-f232-4443-a991-ae98668d3f22",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ca1fb9-9061-42ec-8d15-ad947abe341b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a411a7c-8ecc-4931-b062-eb0787e2c3f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef02d0bc-96dd-49e0-bcc5-d47fe2fd7d06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1efc6ae-6e48-4245-a3b1-e67e592d6b08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3185a32e-325e-4b3f-aaec-8ff4e0b34841",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81a1cf08-eda4-47d1-b20d-d465c2c959f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0b45858-323b-4ca1-a345-317fd17a9309"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f2d387-9b5e-4590-8122-1ae4f743b147",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de5f39f1-5ea1-427c-841d-48d08a633d9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0ea133e-78e0-412a-a84c-f8d146becd07",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30c9f066-f65f-4c83-9bda-63f496c27349",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf367db5-9581-4f21-8f5e-c791d4cd68b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86756fdd-e268-40dd-a8d1-e22e43caaea9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1c10148-1428-4add-b7a6-c6551f9e99f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "874d4c40-45bf-4ae8-aff9-a638a0371b86",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b95111df-6336-4956-b56c-a289cc5de7ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80df1a68-b6a8-4421-8ef1-a0375017bfac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3679415e-879c-4ea6-bea1-eee2dc55d06c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecc217c5-da08-44fa-9585-f5df298bd573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "092b3fa6-5bd3-45d6-b7ab-7f99dadaf30c",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47fdafba-a407-4d5b-a961-238e8babe0ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc96773b-8170-4a20-a548-796b6400046c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b3a9972-45cf-47c6-8807-6ef84f6c8695",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed35fd3e-5e06-4bdc-b856-369527a4672c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8797f459-23ce-469f-bfaf-c5dcfc37c0ae",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeb1dfbb-9cff-4a3a-bea7-e1362da95f06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcd89c37-477b-4d16-9822-9ba52e211787"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1858205-be83-4f93-bfe1-535b6d7d8022",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97b1ba6e-fac1-47ac-a96a-3c461dd36bca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77c59335-734d-4c2e-afc1-310ca3bef4f7",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f074f3-2d22-4ce6-877d-8d5e01c6c47f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06454e60-426b-46f0-ae72-7a94dd71672f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce68679-f21d-45f7-9313-99869abfb02c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dac16f73-2a45-4135-b265-671e7c6c5c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca7057c-34e6-4503-b4cc-a3ecc9f1b87a",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3cf0e57-0a43-439c-9e2b-c3980343717f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b232138-fe05-4c31-ac68-88ae0ee0e3ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f94896e-f23f-4a49-8658-2f72537ef550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28b12165-0698-44a8-b6db-bcbd108d3bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1179b9fd-1242-436c-ae55-18ce914845ce",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8beec728-d625-467d-9bc9-7dfb21d8fca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1d29ea5-a406-4ba8-b5e4-74ea18b7ba5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd69d823-4823-431f-84ff-17c1cc70f169",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9e09baf-01f0-4c57-8ca3-97c6650fe6d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6961e94-65ca-40fe-8d6f-868b9853dda0",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9441cc73-93d8-4d5c-8164-5ede1615bc9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a846b1d-9e02-43e8-b604-52102bd1ad14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01013688-399f-4dd7-93bf-6042edcc5ac8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec798055-16f6-4a1d-9d20-095b9838f4ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c24108-f4a7-454b-87c8-c52028ca6936",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af5f024-5c11-4048-91ea-3e0325887c91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8597f4b3-dd7b-4741-92f6-3d3a4461f3ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "592c3b05-94d8-4642-87d0-c713660ba924",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81f72051-2495-47ae-a195-b26b79504706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c93ac1da-c2d1-477c-9d9e-eff9835c2f8a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af663a3-38aa-448a-ac17-b5ab6c238dff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c910e1a5-b885-4843-815c-c5a483a1a216"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d44909a0-3893-47b2-b4ca-a43e9d97fdf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67104b2e-0af8-4ac0-9aaa-c5eb3ae975ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f11d00c-0ae9-4963-92fe-270af2e29d9d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fdc07ed-e290-42f3-9124-b43d84c91cca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "428bc078-b8ac-451d-a7ab-b82cbc7157d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee9c9bc-a0b8-4a92-83f8-b0d6177b3d74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cba5f77a-d3a4-43b3-bf0c-846e3e397723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cca3271-a087-4986-a8b9-33524b8baa0e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9114e689-91c3-43b1-a62e-6b8b5c75f8ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c0678ca-e554-4546-8d26-15e3c33bc5b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a2fce9a-957c-415c-8d17-a583dc892b09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1623d0c4-ff0f-4a2c-9bbd-6e9a78edd233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c796a70b-abd3-4419-81bc-ad119181659c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b91407ab-f415-481d-bfb5-28e3ffdc957f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bba12331-2959-4910-99bc-81ec52bf56f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8e4ee5e-289e-4b9b-bd50-fd9c73d3b9d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f36d434-5878-4c38-8645-fad9b768ce96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67446ae0-ab03-49ee-89ce-8348144bf11e",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0693f363-9c7c-43d8-b6cb-417b10df1fd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9065d542-9666-4363-b2ca-1c6c86f17b84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef1d6980-f852-4ace-a009-f1eb273cb083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c504b5f0-7ed8-48fc-abba-ffd47cbcb418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e0715ff-930a-45f7-ad5d-ade210922a5c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e7c111-5362-4552-a052-fb203370dc94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b98928b-7416-4799-9bc0-af36859d44cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c015f84f-1500-4213-9f9e-790fc36166c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "113a8d45-a3df-4172-bf00-08b66a151170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a174145-13ea-45f0-a1a7-1d7bd8db740d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "296969be-a138-40a1-a875-ee87fd9077a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a07b32b-1e9b-49b4-9af8-25131be3cfa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c393db1f-1aaa-4ca1-aeb8-ceda3642783a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f14bd1a4-8ea8-44f6-ba63-498d4f595b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37fb1cb5-97af-4979-8afb-b762ed0d637d",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e588beb-0cd8-4db9-b30b-eada6aed41b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6fffea9-03b7-4f77-a905-c71bdda6127a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5080635d-7182-44a6-85ad-92919e9af7fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5e87797-3d14-4826-b6aa-3ac9cf993af7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "909e2a2f-5d49-417c-b3af-de9ad80a658b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a312ee-d541-4fa0-a7a3-bb84e2f49fda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8a6f48f-bd7a-44cc-a16f-9cc582d4a49f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33067fb2-f665-4304-8cd9-757adcf9fe2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8df21db-2e7f-4d13-a07f-c4c02bbc6f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "920c57a7-6901-4aa4-9adf-b78ea58fc814",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50f88a1e-7cee-4160-99b6-3c1300450539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "006f0eb4-9c6d-4532-b6ce-83fdda3238b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ef222c-6314-4f8d-abf3-5b5ed1950bc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "116c710e-1fe1-4a9b-819e-b17cac9904d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bab6e4b-ea02-4e0a-a017-288116f72308",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "708408b4-e206-424e-b2c3-fe16e5c672f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "150e7a21-4e1b-4d6e-aab0-ae3a339af995"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f777aa69-6f35-402c-ac56-fc7f58d51195",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d04a2161-2b44-4537-a8a0-d59b2769b179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1cabe7f-e37e-4046-87f2-a8d7b5c001b5",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbcc3e10-b2ba-49a8-89db-2eb9f88214ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aeee9ae-3751-43ce-b09d-542d6dd08c58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1781b731-fced-4b69-85c8-d1e8458b188e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c89fd573-d81f-46cc-a561-0b821f84406e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f28d83d-3894-4e63-9fe8-64fdbb594dc8",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45918e63-e2aa-49c0-9273-7c6369d93c9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25da0308-f040-4600-a2d8-b21292e8a6d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e26ac803-0091-4022-8583-6da92a12fff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56454f7c-3809-4b9e-b0e7-4832bd6a6bcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "878808a2-6a57-4e38-9625-4a0f6f8b39e9",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "540dadb7-9fac-468c-8da1-341d711cbf07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c1e5f1c-2470-4783-aa26-d9c9662ed656"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53da8345-c602-4fd8-ac47-d959e66a17a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ebfc5b5-9479-4e34-99e2-d5dfe6bb559a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebdb8904-f1c8-427f-b741-d8ca21f02b77",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db83a398-5427-4bcd-b7df-f72d5cdf28e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76eb92a8-0ad6-42ed-a341-52d017732219"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2bda1ed-cde3-49d6-ae2f-24b220538c9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb1654f1-948b-4b6e-a2c9-c9bdbc544a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5a12896-63c4-4f54-b588-30d9f5fe8934",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1de49b98-5525-4e00-8ef5-a03cedb6406e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f803d1be-2b85-44d2-8a58-52883a001c91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6810ce35-9f01-409c-a6eb-a556f45e8d3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36e919b9-d520-4631-9a4b-f81ca38d0fb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dec3182-6e1a-481c-9109-5cc6712adaf5",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0da688a-3397-4000-b76a-d9ce10993bc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f23dcfc-3745-495d-aa3f-e9a34dc749ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0070a3a-f52d-45a0-8282-148e6b3d4b11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48094115-b5e6-4212-bb42-41246318cac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01a92262-f636-4f43-9790-4745e46568be",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f7236ff-286f-4917-9c1d-bbcf80801213",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68a72368-204b-4581-9085-cb30edd28545"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d0b613-6b4b-488b-a1a7-9a05a200f4d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adc67358-687a-40e9-a807-8b2bd2cdee15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62914aa4-f184-4c80-b651-d946a44d6fc7",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "541394ed-1b75-43c9-8e3c-a3bb602ed318",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c82c0e4-742b-4628-99a0-418dabd04374"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb08f09-cf9f-419e-8134-ab5d5cb6b204",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4c0598c-548e-4b03-9f9d-7561708fdc4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8748c630-6919-4d05-b362-aadbb703c90b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9fc5538-9c27-4706-8a22-b55051bb5064",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d140927-29f8-40b9-a86d-10786ae5fc32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e50177f3-a7b1-4fc7-bcca-89bf39edc3f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e744d81-9ace-4dbf-abb1-a17086f20d4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "449b3bd1-0cd7-45ee-81e4-0403484dd050",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "458659a7-02cc-422e-91fd-49def5715a4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9de72f4-4e7e-4749-9335-0d2e9b73d976"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b46f9017-9155-4af2-8081-534abba1447a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce26a2f6-8965-44c8-8a86-71e6e3ba14bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d62a17-b118-4e4c-b78b-2f39a9ef3ffe",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30c1a302-c1d9-4cde-8c7d-db2d9abaf59f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21b66688-f2d6-4f0c-b097-149947b0b37f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e87d06-9e45-46a7-9640-3163bda82b3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00fd001c-2129-490c-8fed-806cb6f665b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813893f4-d79b-45b1-a47b-95b8fc22da9d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa8bf3db-0311-4cf3-ac7f-f92b50c2b811",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8d67978-6add-4716-9209-e30ac38b2d7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf2b90de-5ebb-406e-9244-fcd331bfa463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "551fac83-0ab9-4ed2-b3ac-5dfe859a56f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de9cd7b6-c762-4a3b-bf7f-e80b28ba0a1d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d30566-cd76-4cb3-97c4-72fbf56fcada",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52316c1d-f5d9-4f6d-b7a2-fe590d13d2b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "962d1ecc-45b1-4867-a335-00b47bf70039",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b758c36-f89a-400f-9e5b-c157264aebae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "874a9863-4e12-423b-bc86-fd79606392bb",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa4b9a47-cdd3-4b8b-88d4-a8923665a228",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9a6f946-4dc0-4002-b9e0-e956b080ed0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c697803-c187-457b-9cdf-b5ca9e84ff16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "325664d6-af9a-439c-9b7d-9d595eeb7a8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0abb578-082c-4a0f-b33f-b2cc972894e1",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9d63846-cb8f-46b5-aa35-e52495d2672b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc19faa9-75b3-4d32-bebf-2f704b88e302"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1570ee03-5c38-4c0f-b6cd-726f5e133fcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f37a2c48-d693-4ce5-a026-8983c593af2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ca1ab9-64ff-44c0-a190-f94aff063067",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc8490a6-834f-4c51-8a64-597f5202cc4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "584717ce-936f-4717-b1bb-0f8c8c36398d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "415a2832-e6ec-4701-8517-2ea1f5ddba78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a85a767-e22d-472c-8610-e479e22da04b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a1e38b-77ec-4e8f-9144-77f5daac34c4",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3330c91b-6aed-4a14-9f20-bc1b068b32ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12d9a897-6312-469a-a858-d91433cf377b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee93dc65-5bcd-4b4c-9fd9-ba33eec7c7b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "056ac00b-a0b9-44a2-9097-b744a53e9fd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3385117-f69c-47b9-bd61-92977c3dd071",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "158a1069-dbf0-499b-a26b-f5a4ddf23d11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c26e610a-9989-496c-b7fd-c40452d4b451"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7110493c-f59f-4b9a-a037-bbe168f00082",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a76c067d-1f41-4d49-99da-d87327dd32c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ab7c69-00c4-430d-88bb-e63d302d8b1b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "117608d6-48ff-48d4-a972-9ff43965704d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b12bb0cd-2fff-44b4-bd6c-1703bc78833d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d795c5-8d6d-4c3c-80e1-54ef44ced3cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a90e613-8457-4a65-a6f4-2191a5406b6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66bbc67f-d470-4ed5-b0d9-e74f49605bbc",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af82e9c1-cf51-4a0f-b867-bf0f55bafb9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b375967-c5ac-4667-95be-d20c959456a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ec64bc-1184-4755-99d7-ac1e035e97e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b194778b-0f67-4546-88ba-bfaf6d592bf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95770483-2536-4e4e-a060-7cdb420cc3cb",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2b45160-c937-4eaf-953c-f6d433c935c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27849af6-b995-4c00-90f8-18cc424d4859"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce1b2158-8e6a-4498-af80-2e76cab8b274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1bf85b3-57b3-40eb-a93c-54fbcded204f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc925e1e-a655-4035-8e10-19892dd9c315",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "118a7231-2e5f-4f96-bdb2-a24370b1074d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aeb1eb2f-ac03-43e5-9113-3b52ca593cc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bc77ce1-5962-497f-9caa-e6fe8d679c0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5726da4d-77cd-4ac2-b61f-86a7af2f0ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5663ba02-810e-4451-bdac-e4b1cf892b22",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f8a5a3b-bcc9-4cdd-ab5a-6402e40d9c75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cff5b32d-864d-4276-b5cd-56e5f00a7779"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a4d5293-35a2-4cef-b6c7-0092e46380c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ed53630-15d5-42bf-bcf6-3c4194daef36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4dae42b-3d5f-4be2-ba80-1874392ba1a7",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f255fa0e-009a-4ddd-aca7-21c00990f799",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a488fa6-ca26-4221-999b-90f03c163b13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a1b44d-e0e4-4062-a300-25dbdd51c7ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02c43b2a-0375-4262-a33f-d1400cc8d9d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "281228b3-6931-4608-92d2-a075af516c79",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caa56d24-7f7a-4573-951b-1c613dc086f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2095993-a7fc-422a-9b6f-7abd6479b29e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b610ebf-6ade-48dd-8e5c-ca11cff686e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd5688de-d20d-4491-b00c-0b38e660577f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc63cdc9-2803-489d-93bc-890daa61ac57",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4acaa756-df64-49f6-98ff-b4b5bfde2695",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea3230e6-d12e-4da1-807b-5f19badfdb7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c793521a-7185-4bf2-82be-c1c41133eef5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1abc5015-8ad2-43e6-b477-6a2443d6f91b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dbc1aea-b8c3-4ae2-b455-d0619ddeec7a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc0dc8b-5b90-4926-8aae-a82370022bf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29589d78-7408-4c27-a2c5-10a0e6b60e7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aed641a-f400-495f-baf5-15375ea97608",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dfaa96a-5e5f-4265-ab46-4df07618a32c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e445afa8-a5e5-4a93-b011-04ecd045ccbc",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94715a8d-a182-4358-ae08-1892b2ef1cc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea7962a3-c8ab-43dc-bbe3-1484e5ea10d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f22a2aa-2aec-46e0-a69c-e93c15dd49e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e464bf4a-0ae9-403b-b591-aabb0f69df98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "060889d2-9e99-4d74-840f-b382816fd7f8",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76e64eec-d4b3-4340-ac68-d849b8cf39d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "779d8f38-9d34-4d43-91a0-8a93ed98b018"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc9811f1-c72f-4a30-be5c-953c1535ce2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85c9bcc8-87f8-4f49-8109-5e1ec0f6df03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91de31bc-1a54-4297-950d-e4c7b2b1fb51",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5584ffa-235b-4c05-b0ca-3246974cd92f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f313b6c1-6322-4e96-837a-1c80abef6643"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d63fa1c4-8f53-40f2-b596-58b548e41039",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3720cdf8-132c-4d86-84af-2af34baaec33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c12c4d-ca70-4de3-865e-349bdb0c519b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e1eb78b-7a4e-4257-a79c-3898a1a115b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fe42851-dcf8-48b7-afd3-5af8e682aa59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "325eb7ff-64ff-4f63-92bd-e2ccc32d4b3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6b6a4ad-4b1e-4725-8d64-0012f9f4849e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c52ec0-608d-4bdb-951d-237073395bb9",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3182e09e-0e06-4551-ad4b-313a09565d47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e9b6266-dc13-4244-95d1-b771cdbf2289"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6649c7ae-d722-4330-a895-06d3f17742e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e04d7836-eb4f-49e8-9edd-90f6031d82ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c07691d0-3163-4d59-aba0-175b109830ae",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf1680e-97e3-446b-bf3f-dbaeed01181c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e0f2b03-11ba-42a1-9656-997d6f576fdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71772d2d-25cc-47c5-b027-e8c1afbd37f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f2815fa-59fc-40a2-b905-7b3ef06949d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51de2901-87d9-466f-a8ec-2e2752a7d988",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7963736d-1a99-4941-b755-2b392ea97f33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91ca79e7-689c-4a31-b6fe-c4fdbe07c805"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a2ba6af-9ae5-41d9-8dcc-e825ba7898e4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "554edbe8-b4aa-4c48-97d8-78b7b0deb254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed4b9edf-4c0e-4a73-bba3-60ad7fe4c900",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b06c58e9-6e72-4dcf-969d-b19b75eb31ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf6d12d6-0ec1-452d-860d-27f6d571cfac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c4a97be-f6bd-4a0a-9e75-4d9f7b41e72b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1be489ce-898c-4148-85a0-33ef06c86f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd5e9678-fa28-4394-942e-f33dd56b9c75",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "785476d4-8d6a-4c80-bc18-55f83742e1a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50ab9c54-a4d9-422a-a3e5-f52556641f82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbd78f49-417f-4022-8043-6fcae6e7b724",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff335ebf-5266-470c-abc4-ab48ac8b84ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd985e6-c7da-4994-a3fd-5a89ec0382f0",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "622b01a5-5f67-4572-8013-2a0d74138442",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5a444bf-0b30-4fc6-aa76-81339c891610"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e87546-46f3-40cb-8897-9c700dfc0b8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c92afac-3575-427e-88d4-cf702390f79e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daa71dd4-0308-4d85-b69c-8fa9af514584",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5889e91-b75c-4e57-bbe8-ff70f15a3d0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53e6db9d-bb83-4bd3-99b2-c715b5985e3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e10a6b-61b0-43d5-aef5-a615fb2dc862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af8c0ac7-4f9d-4b1b-98c9-cf4f8f4b122d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9a4fb80-25c9-4595-8f35-6903a3e15973",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6ee5282-1757-43f5-a929-e00524e75a9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9acde2a1-481c-4923-a105-bd0c4290753f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c2631a-18fd-4b3a-a7c0-140f83423f34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "108eee85-9ef3-41ca-96d1-3ddcf97b146f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56043b16-20df-4847-b8db-39aa69ca79a8",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c512e8-ccd6-44b9-b7ea-09b3a884031e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7330bb2f-7489-40fa-9d72-038d3a5b1675"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f4e711-34c2-499b-b85e-2f6f50b1c7bf",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5791dfba-0253-4746-ad78-4714e3ed8f59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "978b0749-bb33-4158-b06d-e427479e42a5",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4922d9ef-0d3e-4cc6-ae9d-c68014adbafe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97d28b55-597d-4c28-9804-927e91f630e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cf4e75e-11c1-4d39-8c59-107df0f3faae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d50d1bde-4cb7-4a32-aa66-868ea18c94d7"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a94b783c-140f-45ba-912e-665407ebd4cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "63d51b48-49ed-4127-b287-e33db48d277e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b844726a-a61f-4a15-ba4b-41ee44539dc6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ee35abd4-2b79-42ed-92b4-4d4733b197d7"
                    }
                  }
                ]
              },
              {
                "id": "dfe6f3e6-a0bd-43d1-b874-4109df030af2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f46b5ee9-1b16-4a18-b9f0-f56b1b5629a4",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76426b37-50e1-4da0-825b-47bffb81ba3a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "10f22da1-66c8-4142-b7a1-233c608f2368"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a92d839-5457-414b-8e0c-1aecb24cd4ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "abbb422c-a0fc-4626-aca7-ffba8c6268a4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f7d17868-5fab-4e1d-a9c1-2555ec8e339a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7f5e76e-f104-4cc2-b30b-6349fab21196"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "359cb650-9a10-4c35-8009-d9397c1ca4e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b7c8a47f-bbd9-4031-8eaa-76a9ff192298"
                    }
                  }
                ]
              },
              {
                "id": "31963e59-bca6-4060-b9b1-5ce4ec3b3ed1",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "ef76f0ff-20cb-4a35-8a30-8c956c00f094",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86428b14-5da5-4b3b-a2fe-e1aaf4cdbae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "fce4ed36-3337-4416-b860-76fce61b94e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9336e7b0-d24e-46c4-bff8-c70e61bc3577",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b3b8cd4-ea46-43b4-8869-dd12b329f9f6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cf7e661f-737b-41fe-a129-f10ca728f14d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4f8fee5d-977a-4e96-98dc-c2aeb7d88aec",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e04a406f-90c0-405f-951f-14062d135531",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "68e6b638-1a63-4383-ad7f-da1f5fac879e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b797411c-66ef-4ba0-8f87-2935229bd49b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aae1b756-6d79-439c-af56-e2fac0dd75eb"
                    }
                  }
                ]
              },
              {
                "id": "f760e4bb-4d9a-4725-9f47-4f4a1199b023",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8427a226-afd0-4646-b114-d116599994c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "fefcb347-e71b-4ab9-9406-5a604fba9ddf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e22302d-4abd-4184-8210-a8ca909c339d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b78a202-0f3d-4fab-b9b7-2b4eefc67dc1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0cc46585-1555-4091-8074-b354ca4c5645",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "dbe2a11c-b265-4d0d-a0bd-3633fd90996e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "50f939de-0166-40f1-8f00-aebe61ce1fbb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "17d7b0cc-3148-4f01-b6c7-e0f58f6e9270"
            }
          }
        ]
      },
      {
        "id": "8e6451e2-aa1d-4730-8164-0ff0238f825c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "5c7b843c-5dc9-40a6-8e65-fe67d02d0a02",
            "name": "Negative Testing",
            "item": [
              {
                "id": "002cdaad-a2e6-4863-b999-6188f9ff3938",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "42bdc6d8-4626-4af2-ba11-1715ff5b5675",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5659b44d-071e-4824-a01e-730bddd3febe",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "00415e71-5e5e-4741-abf4-64cf61f6265d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b3a9c68-22c0-48f0-a84a-479fe99e9d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b2d4838-36c1-4589-ad27-d856aa626529"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d7847dfc-74d3-4f1c-b0ed-d7e71247ce32",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7b79fa6e-702c-44bd-b2b8-4ae55366f278"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9024439-0df6-4201-aaf6-67abc739b31b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c28b5d67-f932-46e0-a563-aeb9181b65a2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d6e4c271-0de5-4d32-a44d-b75cfdf1e836",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "21c57ca9-9538-4e4a-878f-19d51dbec861"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6ae97376-b0f2-4783-abb2-c58c7798c487",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "66fd879c-f235-428e-b7e3-066e99e4f03e"
            }
          }
        ]
      },
      {
        "id": "af3c0ca5-3962-4c96-9e81-058928de8a10",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "84cc86b0-fa33-455f-8f5a-a96c08668b56",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b7840f78-9667-4781-b084-effddf727a80",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "100c2b97-69db-43e0-894a-37190cd30aaa",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ab46981-13a7-444f-b3b9-2769a65b1bb8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bec28014-cc6b-4da1-bd7e-3ac11e3285fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96616bb7-1602-4534-89cd-b54e1cd6e047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "986389ae-bdac-4a60-8042-e8c9563892cb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8fc45ad-5787-4d4f-a982-df39cf1dec26",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1ed644b-387f-4f8e-875d-0d16dcfa7eb2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2cb57a54-5911-48fa-906a-33a414966c72",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ac3b6741-3362-424b-a494-7d46d4ec7784"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c44ef46a-1325-4acc-95a9-4182bb4cf187",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7df4fab2-b3cc-4a0b-a896-a86f04ad8b82"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fc6826ed-c831-4cdf-9557-be01dd95786e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "95801980-8a8d-4a3f-82bf-22e88986ff82"
            }
          }
        ]
      },
      {
        "id": "677aed03-ef54-4e4e-814e-2d9dfa24b05b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "984853d0-1547-423c-b049-807fa944f7c5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6e555165-1371-4dab-8cdc-596edc35b8f0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c99e5909-9cdb-4dbc-bafb-62c877421a40",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab3571a-894c-461b-ae4e-3c0341d89723",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a05d8319-680e-4b3c-b773-1663b1a17e22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f485a188-156c-4869-8ebb-13c4c4f579a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "56ae951c-816c-41bc-8880-5775080cd19d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f934ef9f-61c2-4a21-8d36-68b3406cfd4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55c85426-756d-4337-97b1-af0dfe24a07e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "88104a07-2ae3-4e60-a460-1ca0d73e2b85",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3f99cf2a-43a1-4d79-bec6-2ad499bdbd58"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7761c797-0cd8-41a2-a85c-b2101faeffc8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5b0cb664-58ec-457b-9a23-ad9c47487a1a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9f19de59-657b-44b1-a206-4c0f5506685b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "edb919a2-659a-468b-ac68-69d9c1d1d7c3"
            }
          }
        ]
      },
      {
        "id": "5b210d4f-3976-4890-8c20-f06f56ad3cb7",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6a2c60b2-d88f-4c66-972b-60cf7e5554ad",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "55936b33-99b4-4e7d-9d0b-16a2534e1682",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "99df5600-afb6-4837-9f02-35842c2792ff",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "99769c70-d0cc-4ee8-979c-c3e4728d1519",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0c689ca0-4399-47ff-bbfd-648bc2344c1c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 113.51190476190477,
      "responseMin": 5,
      "responseMax": 700,
      "responseSd": 78.52562427514005,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1717461463395,
      "completed": 1717461500460
    },
    "executions": [
      {
        "id": "ce5c53b3-6a7e-4427-83c8-76eb192484a0",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4f00efba-ff5d-4f9b-ae41-6c19414cc234",
          "httpRequestId": "a140d4d2-dfb0-4375-8826-2f5d1fef444e"
        },
        "item": {
          "id": "ce5c53b3-6a7e-4427-83c8-76eb192484a0",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "ca4b9e96-d2fa-4140-8e3a-9c4b615ed8ea",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 0
        }
      },
      {
        "id": "64b81b83-fe69-4b33-bcaf-07e42a27cec6",
        "cursor": {
          "ref": "44b20d95-e118-49f1-93d4-39dc86588455",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "daddcb52-3e69-428c-91ae-0d20bd19c1a2"
        },
        "item": {
          "id": "64b81b83-fe69-4b33-bcaf-07e42a27cec6",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "c542ed33-f5c9-4943-b1c4-9e5e465bc363",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "1ce69061-a64d-4af8-93a5-d326b84db909",
        "cursor": {
          "ref": "a63158d9-09cc-4321-9b0f-0a790476b8fb",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "864e52fa-e937-44c3-8bea-a3b1073787da"
        },
        "item": {
          "id": "1ce69061-a64d-4af8-93a5-d326b84db909",
          "name": "did_json"
        },
        "response": {
          "id": "41e97c4c-fe49-4a31-bbeb-eb71f7d3372d",
          "status": "OK",
          "code": 200,
          "responseTime": 439,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c27ea592-cd48-436f-9dd7-2cfd63cd38f1",
        "cursor": {
          "ref": "e446b479-10d1-498e-b900-b01fe946e7b1",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0d5ca720-91a1-4f2b-8572-2656fadc721d"
        },
        "item": {
          "id": "c27ea592-cd48-436f-9dd7-2cfd63cd38f1",
          "name": "did:invalid"
        },
        "response": {
          "id": "09163796-059d-4909-ae20-e9f1467d7fba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c27ea592-cd48-436f-9dd7-2cfd63cd38f1",
        "cursor": {
          "ref": "e446b479-10d1-498e-b900-b01fe946e7b1",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0d5ca720-91a1-4f2b-8572-2656fadc721d"
        },
        "item": {
          "id": "c27ea592-cd48-436f-9dd7-2cfd63cd38f1",
          "name": "did:invalid"
        },
        "response": {
          "id": "09163796-059d-4909-ae20-e9f1467d7fba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2947b802-b04d-486e-b158-af92c563499c",
        "cursor": {
          "ref": "953c2580-d05f-47d6-8252-2076a4f56468",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "591635bc-ffc7-4422-91f0-ecdc8a3d1cec"
        },
        "item": {
          "id": "2947b802-b04d-486e-b158-af92c563499c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "4581e4e0-5cf0-4c54-8f89-75c2b4401796",
          "status": "Not Found",
          "code": 404,
          "responseTime": 196,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eee96bf-5ed1-49bd-8ca6-2d1de3e6e072",
        "cursor": {
          "ref": "b23b246f-1a6f-4193-bd10-78b300ec73af",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "46570369-ba15-4e8f-a0b0-3daa3d3b65bb"
        },
        "item": {
          "id": "3eee96bf-5ed1-49bd-8ca6-2d1de3e6e072",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "1ec471df-b544-411a-b0df-f95b1cf4a959",
          "status": "Not Found",
          "code": 404,
          "responseTime": 85,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6786c760-1fcf-4a17-b4ef-347ef6265473",
        "cursor": {
          "ref": "23bb0992-2893-44e9-af48-7fe54f29a3f0",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "209de5e1-0e60-422c-82fa-4748722d6b35"
        },
        "item": {
          "id": "6786c760-1fcf-4a17-b4ef-347ef6265473",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "3f8ca18f-da5d-4908-ad0b-b86060fab59d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32a9f5cd-9b6c-4f75-9005-5a2cda757b77",
        "cursor": {
          "ref": "cbef891a-9982-4fd9-b91e-5276d55735db",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "61272756-16f4-4ed4-8d71-931a618d8b5f"
        },
        "item": {
          "id": "32a9f5cd-9b6c-4f75-9005-5a2cda757b77",
          "name": "identifiers"
        },
        "response": {
          "id": "5c8cca83-95f3-480a-b946-37ee5d81be62",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73c3c7ee-5425-465f-b675-6e8eb600d510",
        "cursor": {
          "ref": "d9e7f527-ef10-4eff-9a85-2e358648b501",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "35aba8d1-3836-488f-9550-afd705242216"
        },
        "item": {
          "id": "73c3c7ee-5425-465f-b675-6e8eb600d510",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1082ca1d-58a4-4e88-be25-fdd5d984f37d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42b059ef-0294-4a9a-ba36-e41fb586f7c3",
        "cursor": {
          "ref": "34a4e88f-a7f4-458c-a321-2d4ebb20d4a3",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "50439dfc-5786-48ee-9f05-5356478291ff"
        },
        "item": {
          "id": "42b059ef-0294-4a9a-ba36-e41fb586f7c3",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d8ebf0f4-a3f7-441c-95ca-852e48579e20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e9e3cc7-1a2c-4752-8dec-02d4d50682f5",
        "cursor": {
          "ref": "e50952b2-7bcd-4813-86ed-c96c787cc7c2",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "04f80469-59c0-4233-a08e-447f888fdf3e"
        },
        "item": {
          "id": "9e9e3cc7-1a2c-4752-8dec-02d4d50682f5",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "770e9cf5-4759-464c-9b38-59c943381dea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "194b15d5-7f64-4bd1-bf00-b774018fc482",
        "cursor": {
          "ref": "d4091f68-f0e0-4f4c-9ebe-3ba07fe16b79",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "124a9cc9-4d0c-4695-ba44-168850d4f2a5"
        },
        "item": {
          "id": "194b15d5-7f64-4bd1-bf00-b774018fc482",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "f7b05fbe-01e9-4472-a12c-cbbe9ff6b18c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39c5e069-5b69-482b-b191-1b9da805ebbc",
        "cursor": {
          "ref": "2e4710b2-8568-4424-830b-8978bd264eb3",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d90971aa-071c-461b-8a6f-f9daba8b0600"
        },
        "item": {
          "id": "39c5e069-5b69-482b-b191-1b9da805ebbc",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "1915e55a-5adc-41b5-b828-461d238e6701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "013949c3-0dac-4710-a3ed-fce0dc32c5bd",
        "cursor": {
          "ref": "631adfdc-3c77-4a0a-910b-6f114abce708",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a3f845b3-6c00-445a-ba43-33682477c863"
        },
        "item": {
          "id": "013949c3-0dac-4710-a3ed-fce0dc32c5bd",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "6eedebb3-9534-4879-8a60-c8f521fdb6d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc0e5e4e-f062-48eb-b6da-19183d2423ce",
        "cursor": {
          "ref": "66439932-d5cd-4e12-b4c1-b57c0897fa4e",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b49cc1a7-82dc-4984-bc6e-830fb09add1f"
        },
        "item": {
          "id": "fc0e5e4e-f062-48eb-b6da-19183d2423ce",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "8c9d234c-dc56-4540-a253-61e9f2a9c69f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e0ea97a-d65d-4110-b119-8151d52d6baf",
        "cursor": {
          "ref": "7f12b28f-7991-4d99-b298-f43ef0a8a4e5",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d0dbe6f8-2397-43cd-a0fc-0d417c007d9b"
        },
        "item": {
          "id": "9e0ea97a-d65d-4110-b119-8151d52d6baf",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "a4f29dd9-08cb-4d8b-ada1-9682810d3d91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edba4d1c-993e-446f-a41b-1167974c3ca6",
        "cursor": {
          "ref": "200cc4cb-dd4b-417c-a72c-d1fec5df69a4",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "be32a115-7fd3-4c12-8e04-cf3b19c101e1"
        },
        "item": {
          "id": "edba4d1c-993e-446f-a41b-1167974c3ca6",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ce0344a5-0af0-4593-8826-071448f3b76a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "350c421c-17b1-43cf-b732-1d65f5c4ac34",
        "cursor": {
          "ref": "4aa4494d-83d1-426f-8e33-2e881f2e8f85",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ecdd24f9-bc97-4a36-a9d5-48af19be57a5"
        },
        "item": {
          "id": "350c421c-17b1-43cf-b732-1d65f5c4ac34",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a4504612-cd50-4b64-a6c5-341fdbf2e828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b535d24c-fd62-47d2-84cc-2f0996d6f2c8",
        "cursor": {
          "ref": "36eb0060-5084-42dd-a219-afe2a5d1771e",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "5025e8bc-3e62-426f-ac96-265469fd8e58"
        },
        "item": {
          "id": "b535d24c-fd62-47d2-84cc-2f0996d6f2c8",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c93fa8a2-4842-4dee-8f3d-aebbdfdaf241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5a7a952-cf36-4d0f-9d3c-01b7a2d33ec7",
        "cursor": {
          "ref": "59bce125-9825-43a6-a425-5ec822a7ae03",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "35215190-0f43-4da4-a74d-7665bb043733"
        },
        "item": {
          "id": "f5a7a952-cf36-4d0f-9d3c-01b7a2d33ec7",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b33d43f4-0417-41a5-a302-76839b5acbb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0be049da-a5f3-49b2-9d08-d2977c9e81d1",
        "cursor": {
          "ref": "7c507c8b-df9e-4033-968f-e045430c557c",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a57b91aa-3b35-421e-a62a-9e39519c878d"
        },
        "item": {
          "id": "0be049da-a5f3-49b2-9d08-d2977c9e81d1",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "8eb98dea-b722-46d2-b1de-a8a5d81017cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cea36bb-a899-47e5-8d12-35d0edbe7cb3",
        "cursor": {
          "ref": "86b41f5f-8fe9-410f-96aa-50fb445c9f81",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "5f221c6d-50b5-4fa9-bfc3-8741f41ef785"
        },
        "item": {
          "id": "4cea36bb-a899-47e5-8d12-35d0edbe7cb3",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "3a04992b-1fce-49e0-92a5-bdd8959bff23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5eb2a00-0dd9-4cf2-9f8c-ae04606d188e",
        "cursor": {
          "ref": "5853d332-e39f-43a3-9fe9-27b91cdcd568",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "567e6372-805e-4585-9c2e-05b7c4a3adf4"
        },
        "item": {
          "id": "f5eb2a00-0dd9-4cf2-9f8c-ae04606d188e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "f11dd2db-2999-4cae-a479-f20519e6e170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edb127c6-ed65-475a-a122-2a51e1e6bd87",
        "cursor": {
          "ref": "cfe6ebb2-b99f-4ac7-9079-0fea2912703c",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3a7d0dd2-fae3-45aa-8a83-bea7a3c58fe4"
        },
        "item": {
          "id": "edb127c6-ed65-475a-a122-2a51e1e6bd87",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "66eeb7bf-4146-4237-a8db-f3eca778f964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e8673a1-075d-431f-abea-142f6a37690c",
        "cursor": {
          "ref": "cdf0476e-5769-478b-a674-07a60e2953d1",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8f5e5a3e-2f64-4a89-9c39-285704d78bd3"
        },
        "item": {
          "id": "4e8673a1-075d-431f-abea-142f6a37690c",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "74925cc1-820c-4e4e-930c-b1ba8be47b6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df984d7f-ca84-459b-8020-b8afb38bb63d",
        "cursor": {
          "ref": "05a8415e-5f45-426f-afc4-706717e57f29",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "4d7b3941-8ca9-4f81-8335-3e2686cd14a6"
        },
        "item": {
          "id": "df984d7f-ca84-459b-8020-b8afb38bb63d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ecdfd617-7988-4db0-b4f7-530c3915ccf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7f305f8-f74a-4acf-b898-2c5a93a0f455",
        "cursor": {
          "ref": "5df45040-4344-4b7c-ad4d-8086e9fb59c5",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "0e92eed7-03e3-4bd8-ab70-c6c9053af150"
        },
        "item": {
          "id": "b7f305f8-f74a-4acf-b898-2c5a93a0f455",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "82ae1130-0b78-414d-bf46-eeceee5c640e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3a4dd36-61ef-4ed6-af67-741127907e3c",
        "cursor": {
          "ref": "9dc0589f-c943-4674-8002-7d52ef281d4d",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "58fcc5be-cddb-432a-ab68-8fec0caae9e9"
        },
        "item": {
          "id": "f3a4dd36-61ef-4ed6-af67-741127907e3c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "6bcf35d1-1c9e-49fd-b377-edf5bf67ab0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c4ea5eb-2d2f-480c-bcf2-542e25cc6721",
        "cursor": {
          "ref": "c0b3b1e8-11ea-422a-89da-8990d125830d",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "1298b530-1fcf-4a60-8d9e-2d55c28fcfc3"
        },
        "item": {
          "id": "7c4ea5eb-2d2f-480c-bcf2-542e25cc6721",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "f4369010-03ba-46cb-b66f-957f6154c56c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f18b7f3-d8d5-415c-bbc4-319b0ea4c571",
        "cursor": {
          "ref": "4c7a10f6-8cfc-40bf-b586-d2735c9855b7",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e0e5ee24-db2d-4718-ae8b-46505a25ff27"
        },
        "item": {
          "id": "8f18b7f3-d8d5-415c-bbc4-319b0ea4c571",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "325e3c33-74ce-429f-9c18-c4c5fb137277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9fe3242-567b-4f18-bc45-c885e40f845a",
        "cursor": {
          "ref": "f35876c1-c833-4da4-9cfe-75fac17255f9",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0a3d0a30-44b9-47e6-924a-28d0c3f11f66"
        },
        "item": {
          "id": "c9fe3242-567b-4f18-bc45-c885e40f845a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "71cf2866-9ceb-410e-84d1-ad4a6ed7b7df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74d1e4a0-4652-4e92-8899-269561399779",
        "cursor": {
          "ref": "ffa93c9a-b797-4cab-8fce-2df6c0979a8a",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c008ba65-2bf5-48c8-a50b-be7d9f4030de"
        },
        "item": {
          "id": "74d1e4a0-4652-4e92-8899-269561399779",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "69163c6f-22cd-4a4c-ad06-28306afe414e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f453b501-aa20-4ac7-bfc0-76017a3e3ea3",
        "cursor": {
          "ref": "f4dc4ca9-a57f-4f78-a827-eb20cb3e4ce4",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c1b86520-58af-4258-90b1-913160899db9"
        },
        "item": {
          "id": "f453b501-aa20-4ac7-bfc0-76017a3e3ea3",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "10be99fc-0b91-4bba-b1de-e697d6dd8d16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af1fa90e-e592-4d50-a416-94fdeaf6cada",
        "cursor": {
          "ref": "8b631c4d-efe2-4f69-b65a-5d7e4a255db0",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "6961f0a8-e7ae-47f3-9952-31b5e31115a8"
        },
        "item": {
          "id": "af1fa90e-e592-4d50-a416-94fdeaf6cada",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "acfede55-d783-44ac-b076-5ee4ac49c779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c2927fc-5793-40c5-9d2a-6d19f8aad77b",
        "cursor": {
          "ref": "8c42fbe1-c73c-4c98-9bc5-71d553153c2c",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "bf809ed8-2973-4ce9-9b85-e8af21c575fa"
        },
        "item": {
          "id": "8c2927fc-5793-40c5-9d2a-6d19f8aad77b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "2bb1e6d3-5a68-4c6a-b8a1-fd7058f9c79f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278c50f0-2356-4564-8ec2-ea1413862193",
        "cursor": {
          "ref": "332751ad-b1bb-47e5-8714-198944034fe9",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "eaf9f726-4850-4e6b-aff9-ad0166a48131"
        },
        "item": {
          "id": "278c50f0-2356-4564-8ec2-ea1413862193",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "d40b8911-2bb7-4d74-baf7-8b338bd2f5bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64bfd79f-a752-46cf-9e78-2c43264966a4",
        "cursor": {
          "ref": "301caa17-989b-4940-bc69-cc888cf513ce",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "3c84e3f7-642e-4b0b-bd2b-bd164a24be89"
        },
        "item": {
          "id": "64bfd79f-a752-46cf-9e78-2c43264966a4",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "29939321-76d2-4a6a-bfc2-b4b5546bbd43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2788278e-ba56-490d-9916-d35546f82dfa",
        "cursor": {
          "ref": "252443ed-2e1b-46af-a6a8-ad05ddcd1790",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "57a350cf-5088-40bf-9f81-8cde0403d722"
        },
        "item": {
          "id": "2788278e-ba56-490d-9916-d35546f82dfa",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "5f27f02a-063b-459c-84c7-be46d0fcb99a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c52a2e58-0f22-4ea7-a613-c5336973a3f9",
        "cursor": {
          "ref": "7d6a3148-9832-4f4d-96d7-4797676b1eba",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "62ad9507-b3ec-4c9a-a472-bca4fb0384d2"
        },
        "item": {
          "id": "c52a2e58-0f22-4ea7-a613-c5336973a3f9",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "114d07cb-2c4f-4956-bfca-611b9c8cf967",
          "status": "Created",
          "code": 201,
          "responseTime": 700,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "0eb7884b-0f60-43b2-8a63-cf0c153f53da",
        "cursor": {
          "ref": "32268d72-c752-4d0f-8689-b5316ac65d15",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b1f77a4a-84bc-4027-9b62-c10c82a81032"
        },
        "item": {
          "id": "0eb7884b-0f60-43b2-8a63-cf0c153f53da",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b1922619-f1b9-464f-b83e-52f777f53080",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "044e94b2-1e1c-483d-b450-2b529105711b",
        "cursor": {
          "ref": "2e6a5feb-9885-4ddc-855c-0696092ed4ca",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2ec8cbf0-da00-4ca0-ab39-99f1d21c6d36"
        },
        "item": {
          "id": "044e94b2-1e1c-483d-b450-2b529105711b",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "371274a7-8d7e-4ccc-92c8-3fcf2026a4c9",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "c410d696-02cd-49a8-9252-ebdfc9c99c21",
        "cursor": {
          "ref": "660a47a4-76d6-4863-afa1-eec5754f7b50",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f3ef1c12-9310-4722-a5e8-6cc46c73070e"
        },
        "item": {
          "id": "c410d696-02cd-49a8-9252-ebdfc9c99c21",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "d4269956-8e11-4d28-9891-92622e2bdfe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c66d65b9-7b9c-4bb2-bddc-e1edde81c3a3",
        "cursor": {
          "ref": "d2cb500d-a39f-4ab4-80b8-8f23e30e54ad",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ff1c4dc5-54cb-4bbe-a0a2-75f8fd290fdf"
        },
        "item": {
          "id": "c66d65b9-7b9c-4bb2-bddc-e1edde81c3a3",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "a59a1dc6-88df-4c06-af99-5e9e52de1bf7",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "3aa25759-b8b3-437f-8d9b-8464fbf607b2",
        "cursor": {
          "ref": "f939a778-5979-4e5a-85a3-7c0366d2c117",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "fd44f4ef-7de5-4eb5-ba07-e182fa6c8a44"
        },
        "item": {
          "id": "3aa25759-b8b3-437f-8d9b-8464fbf607b2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "4561d8f2-9ba5-4d0a-87c4-f1cc2e4ad316",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "7e232985-614d-40e8-ae53-3c662f28a04e",
        "cursor": {
          "ref": "f1c1af79-647c-4f69-b2e0-97a687c94d77",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "12799c30-9907-4f71-958b-a0a0a1cc39e6"
        },
        "item": {
          "id": "7e232985-614d-40e8-ae53-3c662f28a04e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "171e5b47-d7ff-404a-be0b-6858759b5c1f",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "0b9b3e81-4774-4cfe-9268-a24c21b255bd",
        "cursor": {
          "ref": "e39f031e-6059-4332-ab22-e3ca95f57d92",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b4aa4f9c-82c2-4cef-b406-3d2673d1530f"
        },
        "item": {
          "id": "0b9b3e81-4774-4cfe-9268-a24c21b255bd",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "ae910df9-f17f-4fae-9f1d-a5700ce3bbb6",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "77a56f0e-14cb-41c3-936e-d8661069827f",
        "cursor": {
          "ref": "2c1911fb-76ac-40a5-b528-971f129c0b9f",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6ae800a6-584e-4106-8bb9-73074bf564a3"
        },
        "item": {
          "id": "77a56f0e-14cb-41c3-936e-d8661069827f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "830e7307-7cde-458b-9ffd-2af72d703a90",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "b4d55bde-abc0-4e10-bac6-b37e80d28cbe",
        "cursor": {
          "ref": "473c21c0-e24f-48d1-a970-4723345866bb",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "420acb06-0bab-413b-9dba-6699c32077b3"
        },
        "item": {
          "id": "b4d55bde-abc0-4e10-bac6-b37e80d28cbe",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "5f5369f3-b067-4c7d-a2e4-27628f36c541",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "a2ebd314-03d6-489a-93c6-7a4fce823c1b",
        "cursor": {
          "ref": "fe07f628-f459-40f6-8d9e-95b96abfbb5f",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e8185e93-0e90-4864-82f0-529947705fb9"
        },
        "item": {
          "id": "a2ebd314-03d6-489a-93c6-7a4fce823c1b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "2c32fe9f-eae1-4223-9fde-41e6e060bc3d",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "5ebe24b1-4528-4eb7-8667-a8c2402ec606",
        "cursor": {
          "ref": "10011a77-3f3e-4fdb-8914-f94465f555a5",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ef4407a4-a7e2-4f20-935a-d9e908f63088"
        },
        "item": {
          "id": "5ebe24b1-4528-4eb7-8667-a8c2402ec606",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "2f4a89b9-405d-4245-9d49-a6eb684454d2",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "0411ac35-7d48-4ec5-ad34-00c146133d61",
        "cursor": {
          "ref": "53253bb0-9e2b-4eda-b63f-734550907390",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "a1407221-6da1-4929-9b47-89d89656da9d"
        },
        "item": {
          "id": "0411ac35-7d48-4ec5-ad34-00c146133d61",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9964251d-ea8a-409c-827a-d686edc53d9e",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "9f0dd97a-9106-4c62-acfd-83d74bb44a56",
        "cursor": {
          "ref": "8d2ddac5-55c0-4a71-a774-8f2b575b4d2f",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "cab86dba-d967-4e7c-8682-f84eae2e9fc8"
        },
        "item": {
          "id": "9f0dd97a-9106-4c62-acfd-83d74bb44a56",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b532493b-4333-4f27-be00-6b8fb82593c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37323e2e-815f-4a12-9ffa-16038f07c9b5",
        "cursor": {
          "ref": "adac946c-7a77-407d-a76d-0c0edf6dd22c",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "ffe390e2-d986-4a55-b7d1-f548cca1a0dd"
        },
        "item": {
          "id": "37323e2e-815f-4a12-9ffa-16038f07c9b5",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4bdf15e4-89be-4288-a302-efc4be7c7e36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74b9012b-874b-47fe-b228-330923842267",
        "cursor": {
          "ref": "5136b2f1-d37e-4c43-85f9-237f0514a542",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "491744d6-3878-404b-8cdb-b47756fd54a1"
        },
        "item": {
          "id": "74b9012b-874b-47fe-b228-330923842267",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e72bac0b-4e33-4800-b50b-08119e0f8065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7e2f0b9-6875-4f80-b83e-1b0916e772c7",
        "cursor": {
          "ref": "efdda6be-2eaf-4024-a312-8a40e1469391",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "03ee5575-2945-4713-b714-f756ed857389"
        },
        "item": {
          "id": "b7e2f0b9-6875-4f80-b83e-1b0916e772c7",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "91a9fe40-b8d7-4a83-acab-d564b93ae1c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee16919-880d-4d19-9a85-cc9c46a10bb4",
        "cursor": {
          "ref": "9e53d8dc-2730-4eef-9a5a-cee76bfe7c27",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b3a5b885-0ecb-4536-91a5-0550768046d2"
        },
        "item": {
          "id": "eee16919-880d-4d19-9a85-cc9c46a10bb4",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "1e437145-4bec-4991-b4d6-72a1fa13c542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b40569f-18fa-42be-b7dc-e690625de926",
        "cursor": {
          "ref": "f7fe0d2f-007f-46ad-a231-36ee42b7005b",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "63980d77-9116-4559-bf73-df11ac6c8453"
        },
        "item": {
          "id": "0b40569f-18fa-42be-b7dc-e690625de926",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "057e1132-9410-43f2-9827-af0a5637e2d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "500f8e6a-0474-4684-8436-c1a81b690b2e",
        "cursor": {
          "ref": "20ed223e-d1bd-433b-a720-1253c5367b34",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "309e141f-ed38-455d-8b37-81e3f0af09d8"
        },
        "item": {
          "id": "500f8e6a-0474-4684-8436-c1a81b690b2e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "989ee07d-8ec3-4998-a4e3-60ae3b72f4fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2bcd35a-c030-4dfd-9336-d311b8baa3e0",
        "cursor": {
          "ref": "c386cfe7-de92-4adc-acf8-bdfc5a84f1b1",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d46fb322-b5ca-4703-a027-761204b90eb6"
        },
        "item": {
          "id": "e2bcd35a-c030-4dfd-9336-d311b8baa3e0",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a95e87ad-46b5-41dd-83ca-54ba79ed8c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a863698-ba1a-41bd-9486-dba68df34ae8",
        "cursor": {
          "ref": "eb6b0784-8df3-418e-a1a1-ce552f88582b",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "89eeffac-b199-4dd8-92f9-0c4aa4e14ddc"
        },
        "item": {
          "id": "3a863698-ba1a-41bd-9486-dba68df34ae8",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "bc8af884-7254-4b3f-b6ca-713bed4539ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "550d66bf-2e6c-4f91-a719-d5e4c0da4cd0",
        "cursor": {
          "ref": "198d65cc-8231-4a31-a44b-2f9f907eb4a0",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5af89b1a-8a53-47d8-a1f6-b7d189fd2a06"
        },
        "item": {
          "id": "550d66bf-2e6c-4f91-a719-d5e4c0da4cd0",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "dfa0df21-231a-4d79-bdd5-a1c21446f603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0b4cd48-e091-4568-8f3c-b573406c6724",
        "cursor": {
          "ref": "3badfa07-c1f3-4494-8296-8ae8e8da784b",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "6eec59c5-3a5b-40a5-9f64-716ee109e15c"
        },
        "item": {
          "id": "b0b4cd48-e091-4568-8f3c-b573406c6724",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "3ec57f07-c8aa-4c1f-82ab-a0741a7217a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6244f4ff-ddd7-496f-8bc4-475ae4091ae4",
        "cursor": {
          "ref": "578c8da4-6466-49bb-8664-0f47aa17f72a",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ae9a628d-139b-49bc-82ae-b05ed1ba6d75"
        },
        "item": {
          "id": "6244f4ff-ddd7-496f-8bc4-475ae4091ae4",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "70b27416-5dec-44b5-a178-c10d00e547f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9800c347-efe5-4c0a-8522-2e0d13471df4",
        "cursor": {
          "ref": "987c5d27-2b38-4d9a-833f-d7a1ce0fa5a6",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b4c97947-d16e-4900-a0c2-21e6fb0eeff1"
        },
        "item": {
          "id": "9800c347-efe5-4c0a-8522-2e0d13471df4",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "c95c18bd-2e35-4f59-9b95-c6a0da56632a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "967480ec-d5a4-435e-9651-4cc8c54aba3e",
        "cursor": {
          "ref": "35887f2b-6dc9-4a67-99cc-13a833279c53",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "f8b710d4-30c4-4a5d-87a8-4c0822541923"
        },
        "item": {
          "id": "967480ec-d5a4-435e-9651-4cc8c54aba3e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "80913c87-8f81-4cb6-b0f0-25d34b94b6c1",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "933e38e4-9166-4f71-8e9f-8d8fe302849a",
        "cursor": {
          "ref": "451f2d6f-928f-4076-bbe5-6859de0b0ed3",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "99f34632-0d46-42da-9c30-c62c0de01baf"
        },
        "item": {
          "id": "933e38e4-9166-4f71-8e9f-8d8fe302849a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "1d11c849-2d6d-450a-bbbb-43dfc530167d",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "3a883a54-f014-4006-93bb-64e4934765e4",
        "cursor": {
          "ref": "59f7e81d-175d-4b7e-b6bc-d42a8e8248ee",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d2fb123c-371f-44c6-ae61-1251c6177136"
        },
        "item": {
          "id": "3a883a54-f014-4006-93bb-64e4934765e4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "2c838076-cf19-416f-8247-df021036a4fe",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "6e60c4a4-d6c2-42b8-ba49-6043e5b40f72",
        "cursor": {
          "ref": "7b00d287-f6b6-4098-a3fc-9c790061003d",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6181fd29-5aaf-4060-991d-ef18761cbceb"
        },
        "item": {
          "id": "6e60c4a4-d6c2-42b8-ba49-6043e5b40f72",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "45bb9a24-83de-4013-9266-6fbe3487df0a",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "ace719f3-160b-4b3e-b6a2-4c959cb8c526",
        "cursor": {
          "ref": "fe90fc69-7dea-4b2a-99d9-442890d5d136",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ca109209-2e5b-46d2-a047-66a87c7cf97c"
        },
        "item": {
          "id": "ace719f3-160b-4b3e-b6a2-4c959cb8c526",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "7103d95b-921d-4d94-80e3-582e970a5ff4",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "f0340bac-eee4-44f8-97be-6ba6cd74e195",
        "cursor": {
          "ref": "58e5b98d-3e8c-4313-bbce-64486aaba9a0",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "38a575f7-2cc5-457a-aa78-06596824084d"
        },
        "item": {
          "id": "f0340bac-eee4-44f8-97be-6ba6cd74e195",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "896ee968-0f2e-44f7-8e6d-8f96df5f84d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d607f74-3a6d-4883-a457-39189789d995",
        "cursor": {
          "ref": "076d4f0c-f31b-4db7-bbcb-cb41cadc4f49",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "8697bff2-ee71-4a88-8de7-ca66b0665a11"
        },
        "item": {
          "id": "9d607f74-3a6d-4883-a457-39189789d995",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "1bd6cff3-7de7-4bc1-833c-72bd9cdaf298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75370570-f875-48ec-af5a-a709447f0570",
        "cursor": {
          "ref": "4aadd525-0363-4539-a699-1ac63a0b74c0",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a57be3b1-8cff-44ac-8cc8-60d3a104e196"
        },
        "item": {
          "id": "75370570-f875-48ec-af5a-a709447f0570",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "65267bd1-f4bc-4b43-934c-0228c2f48cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6825b7f4-2850-4d05-93f1-916e3cd2b490",
        "cursor": {
          "ref": "56e90741-5df0-48a8-92ac-7665eb3fef97",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "aef9e5ff-d846-4863-a918-d346a446e8dd"
        },
        "item": {
          "id": "6825b7f4-2850-4d05-93f1-916e3cd2b490",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "31f67492-4142-497f-982b-1589f0e9d9b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "857a4aa8-6a94-41ee-bde9-2d740cf83a3b",
        "cursor": {
          "ref": "4e2705ff-1005-4d3f-b2a6-ea25a26bcf22",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "8c17fcf3-52a6-47cd-a79a-2f655537475e"
        },
        "item": {
          "id": "857a4aa8-6a94-41ee-bde9-2d740cf83a3b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "05ccef80-6149-44cf-8926-3a11cb4fb3ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e91dc75a-0661-4c2b-a129-998314fde57d",
        "cursor": {
          "ref": "fc15ff45-c4f2-41e8-8543-93b31b36d74a",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "8eb786b0-238f-478f-9042-3d9f1a80ab96"
        },
        "item": {
          "id": "e91dc75a-0661-4c2b-a129-998314fde57d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d459ce06-8a5b-4108-88a7-de05f9b8d280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4544b908-b9f2-489f-8343-96c796195f91",
        "cursor": {
          "ref": "88e45ec9-7c34-431a-9b34-41fb87951bab",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "4dfe15e4-d551-4e0a-a9f5-dd54a7239436"
        },
        "item": {
          "id": "4544b908-b9f2-489f-8343-96c796195f91",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "135ce08f-b6c9-43d2-85f3-53be9b35b02d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f51d62b-ec68-4713-a7e6-bce06b380fa7",
        "cursor": {
          "ref": "27fa29ec-1dd8-4bfa-b6e6-2399b686579a",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1760bf8f-a06c-45d2-a41f-c82f8e33c558"
        },
        "item": {
          "id": "3f51d62b-ec68-4713-a7e6-bce06b380fa7",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "7114ee26-3695-48fb-98ee-8087e5000d20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0467d8a1-c3c1-4559-92c2-cab2b2b72373",
        "cursor": {
          "ref": "d4cf08cb-2a6e-4bfa-b40d-25c7bf37334c",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "56753e6e-2c17-4b40-997f-4f916e008496"
        },
        "item": {
          "id": "0467d8a1-c3c1-4559-92c2-cab2b2b72373",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d9bbebfd-fa11-46d5-9b3e-6722e7c61ce5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92b23726-6aeb-4c5e-b5cd-f95cd763ba62",
        "cursor": {
          "ref": "0387bb1b-b890-4bed-9dba-a6915d89cb88",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "7a7b20ab-ebb7-4890-958b-0d43b6aaf1b4"
        },
        "item": {
          "id": "92b23726-6aeb-4c5e-b5cd-f95cd763ba62",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "87e63e03-b9a5-493d-9b45-b8f0565c3333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad15c2d3-2597-4a1c-a244-595538a04468",
        "cursor": {
          "ref": "156a7872-0e6b-4d7d-bc0e-25beb3562aa7",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "63054da7-cef2-4601-bae4-e314bbe94560"
        },
        "item": {
          "id": "ad15c2d3-2597-4a1c-a244-595538a04468",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e216fbf5-31f0-4c96-b8ee-e78e502162f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7d472e5-94f2-4a37-a481-b87b3f4c9152",
        "cursor": {
          "ref": "51859bdf-faa5-41c9-8a86-0b66709f8d06",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "86e15d4a-ad60-4afe-af3f-07ff974caa04"
        },
        "item": {
          "id": "d7d472e5-94f2-4a37-a481-b87b3f4c9152",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "d86446c3-5360-4de3-a886-47055e95fa8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "754baf3b-55c4-48c3-8906-62d6724814f4",
        "cursor": {
          "ref": "815b6cb0-c2f6-4cda-ace3-aa9192aea550",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "bf06f1b9-3733-4977-9d53-d2fe928986e7"
        },
        "item": {
          "id": "754baf3b-55c4-48c3-8906-62d6724814f4",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "1c6a19f8-6af0-4330-bda3-4e3fd281eb91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1684c22-8811-43ed-97e7-a94d4d1b658b",
        "cursor": {
          "ref": "a9f04fcb-cfe0-4968-9d47-292d260fa43e",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0d672546-8b42-477a-8e70-5d7a6122d0ef"
        },
        "item": {
          "id": "c1684c22-8811-43ed-97e7-a94d4d1b658b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f36628e5-d0d1-4df8-8a20-d7654b977400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4dfd00-0bec-4ddf-a1a1-1764f321bfc1",
        "cursor": {
          "ref": "3dbd24f1-2d6b-4b3e-9008-856dcc504bdc",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "93faec5c-6b66-475b-810d-b89fc2a5aa28"
        },
        "item": {
          "id": "bc4dfd00-0bec-4ddf-a1a1-1764f321bfc1",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d3d8b3df-9745-490d-bbf3-58ff1788625b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdc7db5e-ee40-4564-8cb3-276de66b242b",
        "cursor": {
          "ref": "fe2a41b4-5d9f-4fa3-9045-5ff83b01088f",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9f040a71-58ae-459a-8937-47dd7e3b6039"
        },
        "item": {
          "id": "fdc7db5e-ee40-4564-8cb3-276de66b242b",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "9fc950ab-57f9-4a24-a2a4-521f2c619f00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18eba949-d8b1-4233-9679-49be4516652d",
        "cursor": {
          "ref": "206c579f-d222-4bbf-aede-04203b1a7b01",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "9bfb05ad-9994-4014-bd34-b37d0975acc9"
        },
        "item": {
          "id": "18eba949-d8b1-4233-9679-49be4516652d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "96342e46-a223-4fb2-a15e-d47e1ce9b4e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dce864d7-dd2c-42ef-b079-0d4904acb5ba",
        "cursor": {
          "ref": "567f4e5d-c0d7-4185-baec-3d9fd156f8dd",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "559c301b-fa2c-43cb-a103-933552f07019"
        },
        "item": {
          "id": "dce864d7-dd2c-42ef-b079-0d4904acb5ba",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a5012dbd-90f3-4b54-bad2-8d51ab60a7f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d65f56-ef9b-42c1-b1a3-b770594039c9",
        "cursor": {
          "ref": "2bb2f5c6-c045-41c2-b680-6669acc9200a",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "2ab922f3-693c-4014-a3be-aa02dbc7aedf"
        },
        "item": {
          "id": "69d65f56-ef9b-42c1-b1a3-b770594039c9",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c1a5ad17-6a3a-44fe-8574-a8d6e6a76895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0380988f-a8e8-4782-bd11-b3fad74abe2c",
        "cursor": {
          "ref": "13f4aad0-27da-4b42-9b30-8410c4a1521e",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "bd1d0b29-18e0-4cf1-86c9-047a2715e443"
        },
        "item": {
          "id": "0380988f-a8e8-4782-bd11-b3fad74abe2c",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "302a1517-4046-4011-84b9-5b456a097853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fda7027-7d93-4837-b08b-98300a9cd0dc",
        "cursor": {
          "ref": "31742fa6-4722-44a7-824c-9313a8649700",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "3757c869-2e9a-46a0-9c94-1a64c6597f35"
        },
        "item": {
          "id": "7fda7027-7d93-4837-b08b-98300a9cd0dc",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6d51e06b-323f-403c-9688-2da7fef640e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d14304e3-93e4-42f5-b9c8-e38371d478b3",
        "cursor": {
          "ref": "483ad300-7a06-44d0-bebb-f7ccfc27cefb",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "c290a394-f9f0-48d0-b251-1680c8976e20"
        },
        "item": {
          "id": "d14304e3-93e4-42f5-b9c8-e38371d478b3",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e4ecbed5-c085-422f-901f-02b12c5b118f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2999d466-8901-427c-aa3b-23339769e64a",
        "cursor": {
          "ref": "7d0137cf-8b34-4001-adb6-c37092f76fc9",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "3e7a59d8-4736-43bf-af7f-2a8aec2d2c1e"
        },
        "item": {
          "id": "2999d466-8901-427c-aa3b-23339769e64a",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "3cd1f8d1-db71-44b6-a9ba-2a9394aeb30a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "818c57bd-af64-4451-b304-05a9e992ad45",
        "cursor": {
          "ref": "a738a8d5-bd41-4411-ac59-c99b1ce8ff4d",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "e82e457f-f2e4-40e5-8ea3-446acab79a29"
        },
        "item": {
          "id": "818c57bd-af64-4451-b304-05a9e992ad45",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "5b7afe20-d136-44d3-ac82-8529a56d627c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b92b86a-efaa-4f70-b104-48a3f023cbc0",
        "cursor": {
          "ref": "88d41172-d2f2-4f6f-b3cb-43b7d7833d38",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "bf061904-f550-4164-82b2-619b407575ea"
        },
        "item": {
          "id": "0b92b86a-efaa-4f70-b104-48a3f023cbc0",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "772395cd-0503-47de-b14a-84a6309b599b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b39d52e-166d-47cf-a0f2-ba762588fa5c",
        "cursor": {
          "ref": "c00e2c17-f8e3-4736-a77a-58d6652cf716",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "717da07e-d386-4973-a987-2bc26527abe3"
        },
        "item": {
          "id": "1b39d52e-166d-47cf-a0f2-ba762588fa5c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "efca9583-7cae-4f7a-b7e0-9fbb14444544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87ccba67-7686-4aaa-98a1-7e107213c061",
        "cursor": {
          "ref": "35ad8aa6-3664-40f3-bd1f-767744f82e0c",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "bc5da184-1ddf-4a5f-b363-bf7bbd82a1dc"
        },
        "item": {
          "id": "87ccba67-7686-4aaa-98a1-7e107213c061",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "703ed09b-b5a6-42da-ae4a-e878cc4007af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a523186-10b5-465e-a581-32669d7031a6",
        "cursor": {
          "ref": "0b770741-0593-4a42-b564-21ec1af9c6da",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "447fb88e-9e3b-4a47-b304-8ff5ab1316ff"
        },
        "item": {
          "id": "5a523186-10b5-465e-a581-32669d7031a6",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "735b1148-7a8a-4d3a-9ecd-880f0e3634de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4510e5d-088e-4079-aee8-afbee2e0bd15",
        "cursor": {
          "ref": "79523349-9c06-49a5-a9e5-421784bb8e95",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "6bb639d5-f161-47d9-8fc6-d26252245e88"
        },
        "item": {
          "id": "f4510e5d-088e-4079-aee8-afbee2e0bd15",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "db24987a-9a0e-41ef-be87-f04eec19fdf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b906205-df50-47a7-8462-15a65f682adc",
        "cursor": {
          "ref": "6fddb689-1e66-44f1-b6da-4964474f95f4",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "ef7653a0-b231-4b3b-a3d9-81f3df6b487b"
        },
        "item": {
          "id": "6b906205-df50-47a7-8462-15a65f682adc",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5ca17e49-5e7c-4f48-ad23-5fcbdfb7dff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2a74e56-c588-4b8d-b070-7c878b7251e5",
        "cursor": {
          "ref": "84f4a715-6a69-401b-93d5-b0b45670e43a",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "135bab03-8706-49e0-be36-cd870c27904d"
        },
        "item": {
          "id": "a2a74e56-c588-4b8d-b070-7c878b7251e5",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "1559dde4-1b43-45dc-abeb-e0140be731cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fdccfc3-326b-45be-a4fd-2cf7708334d3",
        "cursor": {
          "ref": "26989bc9-157c-4f4d-9e0f-7a0d51eebcb5",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7219a328-4b18-488c-800c-0970fc277a62"
        },
        "item": {
          "id": "8fdccfc3-326b-45be-a4fd-2cf7708334d3",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "199b718e-bcc0-471f-ac72-e21898eff390",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e17e767-c8dd-4ca7-8d60-90caa514dd61",
        "cursor": {
          "ref": "2b64fd01-2a92-4039-96da-fef233f5f179",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "9e4d617f-04de-47b0-afbc-9620c58d99ac"
        },
        "item": {
          "id": "9e17e767-c8dd-4ca7-8d60-90caa514dd61",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "11a78a3a-ee34-4d18-b8f0-b18daf321736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "8b891574-5a80-4fa1-8b0d-b6e3721507cb",
        "cursor": {
          "ref": "40c392bc-cdaa-406d-9487-15aaaf150e66",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "6322dfbe-f970-4692-9baa-17d5126fba99"
        },
        "item": {
          "id": "8b891574-5a80-4fa1-8b0d-b6e3721507cb",
          "name": "credentials_issue"
        },
        "response": {
          "id": "972eb027-206e-4297-a808-e92e39a05ea7",
          "status": "Created",
          "code": 201,
          "responseTime": 329,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "150a82b6-6a2f-4e26-b363-8ab29e62c82e",
        "cursor": {
          "ref": "3deb5e3b-3721-4559-88f2-0a00cc97bc53",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "4d157159-ddb4-419a-97fc-eea46f351459"
        },
        "item": {
          "id": "150a82b6-6a2f-4e26-b363-8ab29e62c82e",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "9fba7a57-d916-460a-aac5-324d886fa0af",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "89ce1587-40c2-42bd-a256-f5dd8fe44b48",
        "cursor": {
          "ref": "c898558a-53e6-455f-acc4-0cad3222c143",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "cbc0b619-1ad8-4c40-9e37-2857a4d918c0"
        },
        "item": {
          "id": "89ce1587-40c2-42bd-a256-f5dd8fe44b48",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "86a7b0c3-25d5-4dfb-8428-035bd2b7582f",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0b10abb-f5ce-4acf-9810-6fac1e56254a",
        "cursor": {
          "ref": "064ed30a-af0e-4f79-bcc2-4c45b5550538",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "aa906a05-0831-4ec5-8820-f2cb878007b2"
        },
        "item": {
          "id": "c0b10abb-f5ce-4acf-9810-6fac1e56254a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "763d2830-244f-469d-9668-345e481bd8c4",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "924e0fa7-ac0e-484d-9566-17f7340f6306",
        "cursor": {
          "ref": "239108a2-bb08-4d43-a522-c441fb95d2fe",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "b513aab3-ba7a-45bd-9140-7a14c4460c3c"
        },
        "item": {
          "id": "924e0fa7-ac0e-484d-9566-17f7340f6306",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "19de8189-ec3d-4081-84cc-d9de83f97d6e",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-06-04T00:38:02.304Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-06-04T00:38:02.304Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "a0688b94-7967-46d6-a720-a510ad3a7bac",
        "cursor": {
          "ref": "28ce8d7e-6b79-4149-815b-1ff5fee57af6",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "942159ac-4b8c-47db-b22c-82767d82e5d9"
        },
        "item": {
          "id": "a0688b94-7967-46d6-a720-a510ad3a7bac",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ddfc742c-bed1-495e-b3ff-f1980d4209e2",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db95e1b3-f48c-40bb-a0cb-896a37bb376d",
        "cursor": {
          "ref": "1dd9c92f-419c-4568-b625-12d1bfa19e36",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "1d00fddf-56ed-4f6a-b3ff-49c4c173af1b"
        },
        "item": {
          "id": "db95e1b3-f48c-40bb-a0cb-896a37bb376d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a8422197-caeb-4a3b-adae-7075111b4762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "889f4758-e95b-4b29-b5b2-20d013a9ad58",
        "cursor": {
          "ref": "1f084c5b-3997-42ec-91dd-f00a26ed6323",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b6543295-9f2f-4ea9-8e09-650d6bf86707"
        },
        "item": {
          "id": "889f4758-e95b-4b29-b5b2-20d013a9ad58",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "2f490782-b04d-4611-90f1-2878404b5a15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c4e4ecf-97a8-495f-b3d4-bc89a5672416",
        "cursor": {
          "ref": "37344241-7c51-4866-a50c-96733fba0c9f",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "463ae013-f02d-4ecf-8f8f-e66fc92c7aef"
        },
        "item": {
          "id": "2c4e4ecf-97a8-495f-b3d4-bc89a5672416",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "12c3bd54-73a0-4a31-a25d-da605ac050d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1779c88-5ce3-4461-a272-c8bd506187bf",
        "cursor": {
          "ref": "40be4a2a-3532-416f-89ed-35ce1e6dda34",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "8a90f8f0-54aa-4661-9f3a-cc13a15781cb"
        },
        "item": {
          "id": "d1779c88-5ce3-4461-a272-c8bd506187bf",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "006cbf19-e3ed-446f-94a9-b4176edc8263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e380298f-390e-4862-b0ba-b1716120f58a",
        "cursor": {
          "ref": "e18fa1e3-6ca6-4280-9faa-574c6f29b7c7",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "90877aec-2b25-4944-b3f5-5a15b2b4741f"
        },
        "item": {
          "id": "e380298f-390e-4862-b0ba-b1716120f58a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "84f4a727-4756-4739-b12d-a2a6de283537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e6360df-e9fb-4923-9168-bcd2f48c61a2",
        "cursor": {
          "ref": "c8a65e67-53c9-4ead-b780-3c5580a266a1",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7eb2eb1b-ee75-4f07-8722-e3e98d7411a9"
        },
        "item": {
          "id": "3e6360df-e9fb-4923-9168-bcd2f48c61a2",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "4f999de8-5ece-430a-bcfd-c028a37350c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0245f45-d244-4060-bc09-d207a54c81eb",
        "cursor": {
          "ref": "7ee07e12-aa38-45c5-8b9a-197fc220f41c",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "cb166062-8c9a-4be1-8da9-bc22d3fc5a38"
        },
        "item": {
          "id": "e0245f45-d244-4060-bc09-d207a54c81eb",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "9d85a134-60d1-4e7b-94f5-77401c5fe390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c974f76-3579-4f5b-b16f-efbb94575057",
        "cursor": {
          "ref": "5507f951-4e3e-46d0-a0ce-df0057684f70",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "1866b2ca-87cd-4487-9104-8196c09a8a93"
        },
        "item": {
          "id": "5c974f76-3579-4f5b-b16f-efbb94575057",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "789a212f-76bf-4229-ace2-7fee002eb99b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a55a6cd-0310-4704-8e63-babc92aa67d6",
        "cursor": {
          "ref": "0ec50dd2-e720-45ff-95d0-c846169bdc61",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1ad79b3c-bfc3-4813-a544-935df26dfee3"
        },
        "item": {
          "id": "7a55a6cd-0310-4704-8e63-babc92aa67d6",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e500f56c-5581-4727-abe2-b2a934eb5943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf88b58-2103-4b9c-9e36-1be8beb4f72f",
        "cursor": {
          "ref": "2b33cf25-e507-4520-9104-dbbbfa8b43b0",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "81e21072-88ec-4f68-9467-7d345685a6eb"
        },
        "item": {
          "id": "cdf88b58-2103-4b9c-9e36-1be8beb4f72f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1dfe36ba-866f-472e-8639-f596da9432d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "252faba6-09bc-4701-b6ae-148ce26df09e",
        "cursor": {
          "ref": "344079fd-419e-4de6-a0b2-e08d13237cea",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d6a71521-a95c-4bbc-8653-3b0388c7c6f2"
        },
        "item": {
          "id": "252faba6-09bc-4701-b6ae-148ce26df09e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4995b9cb-70b4-4d54-a72d-832a7fc05985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b01f4948-b983-4c46-9903-5c359cab97ae",
        "cursor": {
          "ref": "0d1a0025-6c97-4dde-8f48-f35dc0b5812d",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "61d1d788-a45e-4dba-87b4-b771fc355fb1"
        },
        "item": {
          "id": "b01f4948-b983-4c46-9903-5c359cab97ae",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d13c6206-e952-4fb1-98df-6595851addd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9348f315-29b6-4fd7-a247-ca3bf0f045a8",
        "cursor": {
          "ref": "3490919e-3e50-4771-af99-1dbd995da822",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "ea21ed59-4485-42ce-8871-6725467d9dae"
        },
        "item": {
          "id": "9348f315-29b6-4fd7-a247-ca3bf0f045a8",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "54b25d6a-9890-42b0-9d43-c483aea8fba6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "609e428f-75bd-4778-a85b-6d790d443fee",
        "cursor": {
          "ref": "ff4d68d5-29e9-4357-a394-b2db571ce1cd",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "313fd342-1d2d-455f-9952-93e4d9078a2e"
        },
        "item": {
          "id": "609e428f-75bd-4778-a85b-6d790d443fee",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "13a327c1-cb3b-46a8-b3e4-824995f2e07e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 112,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "4d9ec888-d696-4ce7-a8a7-1647dd92a05e",
        "cursor": {
          "ref": "59dae0dc-353a-4d78-83d4-f8e912d37ecb",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "42ff877a-70c9-41c5-a237-15c1f5a18ea0"
        },
        "item": {
          "id": "4d9ec888-d696-4ce7-a8a7-1647dd92a05e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9adcf771-aea8-4964-972b-a3d9f94764e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8438798-f9a5-40ed-84c8-6b79a5e33e4d",
        "cursor": {
          "ref": "1cd32044-3672-4afa-a4e1-576e789f35cb",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "13badaf1-e568-4547-a544-9a7ff6339b4b"
        },
        "item": {
          "id": "e8438798-f9a5-40ed-84c8-6b79a5e33e4d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "23f4c466-d507-400a-9d71-3bf19dd1ab40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2d0077c-8d62-4c84-b292-08998072ed82",
        "cursor": {
          "ref": "0a7a01ce-fbbd-43e3-b1e5-072068e34348",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "0c31cd66-0e03-4ebf-85ed-5e2a06c92344"
        },
        "item": {
          "id": "e2d0077c-8d62-4c84-b292-08998072ed82",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5b2582ed-2f4b-411b-b3fe-1eac088b034d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9e2e9d4-f9e1-4476-af79-0f1bb4538b73",
        "cursor": {
          "ref": "d38411fa-0516-4023-b887-129273cfa7b9",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b1a2128b-6bd7-42b3-b494-6c384d3cb9da"
        },
        "item": {
          "id": "f9e2e9d4-f9e1-4476-af79-0f1bb4538b73",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "849d7db5-eddf-4d37-bd94-15c086d5f278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff4823fb-3248-4ee9-93fb-9c46e717c79e",
        "cursor": {
          "ref": "f88c6210-5609-41c6-84cf-2136d1057f7e",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "5f1e5cd8-342d-408a-ad64-5efc83cb248a"
        },
        "item": {
          "id": "ff4823fb-3248-4ee9-93fb-9c46e717c79e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6a50ebd9-2461-45f5-9148-168f8ccd66d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c43700-1eb1-49d5-968a-a0e82ade51c2",
        "cursor": {
          "ref": "c4fb89da-7d1d-40b3-8f9c-7c1018a3f896",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "8d65e996-5b45-4cf4-bafd-ffb928b256b0"
        },
        "item": {
          "id": "b2c43700-1eb1-49d5-968a-a0e82ade51c2",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "29fa39f4-342b-4434-b61c-6b666eb0bf96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd2723e3-dcba-4559-b5ae-f10819bcc00f",
        "cursor": {
          "ref": "f217c1bc-6cc9-4c61-a4c9-26d8ad9e8755",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "615c3cce-6e0b-4f79-8a82-32ccf5ca55e6"
        },
        "item": {
          "id": "fd2723e3-dcba-4559-b5ae-f10819bcc00f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "de85ac18-70c4-4aa1-a10b-40f55220e1e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bac8c06-91fc-4f33-a52b-c75646cb55f7",
        "cursor": {
          "ref": "8c46649f-77b4-45d8-ad8d-189d10221353",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "eaf8f5b9-b0f8-4f94-b21a-0b17b2710e10"
        },
        "item": {
          "id": "4bac8c06-91fc-4f33-a52b-c75646cb55f7",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8931661a-58c7-4e79-975c-2ad576575f3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05d8ed92-080d-4dfb-a6c4-228434020c1b",
        "cursor": {
          "ref": "5ca01596-ab34-4df9-9a06-7ff01b93e3d4",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c49b90a6-4099-452f-b6b8-62a29342a91c"
        },
        "item": {
          "id": "05d8ed92-080d-4dfb-a6c4-228434020c1b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2c30950d-c59e-4e81-a09d-56dca74bbc9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92d4d6ee-adae-4fef-98c9-ea7f967457e2",
        "cursor": {
          "ref": "6434b646-301d-406d-8b35-69744b8ce01a",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d885d09b-494d-48bb-abf8-cc1f47a57488"
        },
        "item": {
          "id": "92d4d6ee-adae-4fef-98c9-ea7f967457e2",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6cc724cb-6572-4d32-8e35-77b5d0ef4367",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99e635e6-0a43-4161-81bd-0000b31bc756",
        "cursor": {
          "ref": "343a4201-fed6-4f37-9c53-020cae4e6678",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "be893596-8d85-418b-9d44-db20252e5502"
        },
        "item": {
          "id": "99e635e6-0a43-4161-81bd-0000b31bc756",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "9bcc6445-5d9e-4a2f-910f-6c2b80c672ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99c257de-fbef-49ee-ae53-4d301a570a8b",
        "cursor": {
          "ref": "ef5ced7e-1cd5-450c-a982-a24a8b6a2edc",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "199a97f0-dfe4-4d7f-ad28-e1c12b5348bc"
        },
        "item": {
          "id": "99c257de-fbef-49ee-ae53-4d301a570a8b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "59dc038a-f558-4d9f-9983-ac8601d354e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3005b498-b01a-4216-9833-58acdfba277f",
        "cursor": {
          "ref": "8f52658d-671b-4fda-890a-f09102e33537",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "2bb4494c-88ac-40d2-99a1-654008fd0b99"
        },
        "item": {
          "id": "3005b498-b01a-4216-9833-58acdfba277f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "afea61b8-7363-4e8c-a57c-e679973be79b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31744bdc-b15e-423f-a792-91faf9a17f94",
        "cursor": {
          "ref": "cd2ce9fb-4e54-451d-8b5a-e097948c99f1",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "1168f4bb-4920-42e3-b386-c1f5e5cd8866"
        },
        "item": {
          "id": "31744bdc-b15e-423f-a792-91faf9a17f94",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7fd7ae1b-6bd7-4ecc-abd3-19412f4c9b58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edb7f1e5-9c1c-437c-a0de-54e5b76c4e13",
        "cursor": {
          "ref": "defbbb46-5394-44ce-9be3-ec71fbf4a285",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f1829b8c-8ac5-410e-b93a-7b3ce8af1335"
        },
        "item": {
          "id": "edb7f1e5-9c1c-437c-a0de-54e5b76c4e13",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ae913a0b-8b09-4034-8ae0-996536fdf782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79c0f615-7509-4983-8785-e562322a61e1",
        "cursor": {
          "ref": "b583126b-0b91-4a35-8632-93e10585389b",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "3f19f6c3-0fb4-4b03-a38e-bffa5f4bc584"
        },
        "item": {
          "id": "79c0f615-7509-4983-8785-e562322a61e1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "80a199e1-fd05-433b-8ba7-d0a4aec57cd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4beb70a-bfca-407c-bc96-d959fef8e68c",
        "cursor": {
          "ref": "49e8980d-aa6d-466d-865c-98157f7e10c4",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "49df20c1-db60-46d2-87bd-f520b926c6fe"
        },
        "item": {
          "id": "a4beb70a-bfca-407c-bc96-d959fef8e68c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f533b166-2e67-4770-a5c7-64ea46f60884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb21100-53bc-46ef-bd22-ef44ca18f0b1",
        "cursor": {
          "ref": "71ff6c0e-d408-4ee0-b170-adb28625703f",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "abf33742-5860-42e3-beab-fefa56d1929d"
        },
        "item": {
          "id": "7eb21100-53bc-46ef-bd22-ef44ca18f0b1",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "22149169-664d-4371-9081-e926d70a738b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ae4f36f-6a67-4025-b254-a8da5adb0e12",
        "cursor": {
          "ref": "d42fc88a-dac9-4fda-94ff-b7307bb81938",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "7e7902e5-dbf8-4d9b-9429-a84d98f3fce0"
        },
        "item": {
          "id": "8ae4f36f-6a67-4025-b254-a8da5adb0e12",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "6fd48c3c-bd7d-4e38-9b91-f564d4e96bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ea7a5c-0ba3-4476-acc2-05cca454cc93",
        "cursor": {
          "ref": "eaadc3ba-42f9-46c8-951b-833a22ea2151",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "843e43b5-e3b9-49c8-8475-9ab9bcf0cb29"
        },
        "item": {
          "id": "65ea7a5c-0ba3-4476-acc2-05cca454cc93",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "092f9495-ea5a-43b8-8cbf-79f21aba310a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8334f74-9519-4dbc-94b8-05a1a01271eb",
        "cursor": {
          "ref": "b7d4aeed-5052-44d4-9852-a2302c8a6cb6",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ca843f7a-1ebd-464c-8457-d41a1efef04a"
        },
        "item": {
          "id": "f8334f74-9519-4dbc-94b8-05a1a01271eb",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "507929de-244c-496a-a260-858160ec4228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37fd00f5-6963-4bf4-9ae5-53f2da0bc404",
        "cursor": {
          "ref": "da4acf93-b6c3-43c9-a49e-8ca85857daa7",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "32aa4894-7196-400d-9f16-0d1b4896e604"
        },
        "item": {
          "id": "37fd00f5-6963-4bf4-9ae5-53f2da0bc404",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "31b30834-8447-4119-a50e-62136f4d82f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b99dc86-14d9-46de-8d9e-7c3850f3ceff",
        "cursor": {
          "ref": "0174f23c-f5b6-4e82-8ec7-7be59dc05785",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "de16d59a-6fe6-4025-861c-bd6459abbebc"
        },
        "item": {
          "id": "1b99dc86-14d9-46de-8d9e-7c3850f3ceff",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "f0fae527-25b6-4d19-82a2-c9b14186b665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9201c76-1a15-418c-8be1-5dea2eed1b3f",
        "cursor": {
          "ref": "8f29aaf3-9343-42c0-b3bb-c95fe949f2f2",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f1a4a42c-dc8a-435b-a947-62146a71913c"
        },
        "item": {
          "id": "c9201c76-1a15-418c-8be1-5dea2eed1b3f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "efc307d4-4673-44c9-9d77-edd9ebc8f478",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdf8508e-af1d-4292-9a3b-d1045f6ca53d",
        "cursor": {
          "ref": "be074471-6fa4-480c-a20e-7665d3b2f053",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "74283bcb-6303-4525-b544-7b8760de1521"
        },
        "item": {
          "id": "fdf8508e-af1d-4292-9a3b-d1045f6ca53d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f9332b50-75b1-4165-afd7-684f467d60c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9afa96c0-a433-4d4e-8b45-bc9ebb8ae215",
        "cursor": {
          "ref": "aed2ab54-1b4f-4c73-a1e1-f853c116a5bb",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f3d8feff-0009-44b0-aced-2374b9b10e6b"
        },
        "item": {
          "id": "9afa96c0-a433-4d4e-8b45-bc9ebb8ae215",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "e3124b7c-12a6-4ac3-88c8-1a97274e29f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dabbe36-32b3-4792-aecb-a212348a535f",
        "cursor": {
          "ref": "85141bb5-f988-469b-8978-85683b454d7e",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "89e28317-f3b0-42e1-9e9a-3353664d97d1"
        },
        "item": {
          "id": "9dabbe36-32b3-4792-aecb-a212348a535f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "41c1df7d-37c2-4edc-aa88-41dd4219cf62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba576665-8b1e-4b42-8350-18cb9e291dc3",
        "cursor": {
          "ref": "1a72128b-8f20-4b4b-b8c9-0af415b9d920",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "f5398a66-06df-463a-8641-231fc526d075"
        },
        "item": {
          "id": "ba576665-8b1e-4b42-8350-18cb9e291dc3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "398577c4-9b1f-48d7-bb98-5fc56c8d2548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad374c63-e055-44dc-8ba1-e0e3f02664b9",
        "cursor": {
          "ref": "1d40f8c7-104b-48a4-81f5-9173150b9fbb",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "84d95d1b-ee99-4b0a-aaeb-6407d98457e2"
        },
        "item": {
          "id": "ad374c63-e055-44dc-8ba1-e0e3f02664b9",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "22d9fa0f-42bd-4c81-bace-36bb84d7770e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02218495-6889-409b-80d8-32177cebad67",
        "cursor": {
          "ref": "85b5326b-1b68-4b0f-a408-2b49c8555abf",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "460d8d2a-735b-486c-ae69-8092eeaef236"
        },
        "item": {
          "id": "02218495-6889-409b-80d8-32177cebad67",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "7a11c80d-ceb1-442c-ac8f-fed7655f7a1a",
          "status": "OK",
          "code": 200,
          "responseTime": 157,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "38534142-6b7e-4af5-ba34-ec7cd7e8a635",
        "cursor": {
          "ref": "6aa56cf0-0d32-446f-a217-a9e41e10bcaa",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "f1f0a93c-6db8-49e7-bd3b-6e2fac746011"
        },
        "item": {
          "id": "38534142-6b7e-4af5-ba34-ec7cd7e8a635",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "42915caa-e4e6-45c0-87a7-4ab01fdcbdf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59dea915-d6fe-44c4-9083-a4eb7385b19f",
        "cursor": {
          "ref": "50468b44-eee6-4e02-a7dd-a8a7f4ca0dfa",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e19ac91f-6116-4d3a-8abd-96270c88074d"
        },
        "item": {
          "id": "59dea915-d6fe-44c4-9083-a4eb7385b19f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f5bed8fe-bab1-4e43-b8be-73d52b6dbbdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0175a52-7565-41d1-8dd4-9e5d3a8593f8",
        "cursor": {
          "ref": "edd0590f-a597-402f-adfe-d254df538f03",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "4113e852-ce42-432b-8827-45cd13999807"
        },
        "item": {
          "id": "b0175a52-7565-41d1-8dd4-9e5d3a8593f8",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "44d19f04-77ef-4f8a-b6d0-f42ada910ab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d9c2942-7329-4587-9d17-cd41fde34f8a",
        "cursor": {
          "ref": "f64770d1-bf5e-4f55-a24f-796456fa0874",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f737741a-a59e-4c1f-bed9-73c6feefc4b4"
        },
        "item": {
          "id": "5d9c2942-7329-4587-9d17-cd41fde34f8a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "baa8abac-b079-4d60-a664-b028b5d0859d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "887d1f72-fe0e-43ad-a7c7-004ad4f3f916",
        "cursor": {
          "ref": "41d07fcb-8937-415b-afc3-1f3458d6ee35",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "a5d3fc59-b863-4b86-919a-9e347ea40ea2"
        },
        "item": {
          "id": "887d1f72-fe0e-43ad-a7c7-004ad4f3f916",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "1197e83c-1f75-49be-821e-eed97c6ba0cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fcb872b-ecba-48ce-92be-27dc3525817b",
        "cursor": {
          "ref": "32cb2530-b690-4f12-8901-558a2c1ab54a",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "cc1686da-ddb7-4fb4-85b0-719cb821bf1d"
        },
        "item": {
          "id": "9fcb872b-ecba-48ce-92be-27dc3525817b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "61ae3dce-2a96-4c9e-9efe-188e2e4273ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0f81737-0cdb-4b71-b362-2bea5992936f",
        "cursor": {
          "ref": "f7599473-4f55-4ed4-9c22-179f7985fdc5",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "92a6128b-a329-4af1-a6d5-ce85e3dc3460"
        },
        "item": {
          "id": "a0f81737-0cdb-4b71-b362-2bea5992936f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "68b201ed-5a2b-4866-933e-a4028362d746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2086b37-d0fb-40f3-8cc4-43c641a75ec4",
        "cursor": {
          "ref": "acd93c48-b355-4ed8-85c8-f49db0944b0b",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "d385225a-917f-48ca-8728-d93c344a5180"
        },
        "item": {
          "id": "b2086b37-d0fb-40f3-8cc4-43c641a75ec4",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "eeb00228-afa6-47bc-b0ed-4327a0b1b920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd5bf8f4-796e-4535-83f6-084de34ed6fa",
        "cursor": {
          "ref": "727b4eee-4420-4480-b0df-688ed899092e",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c0868ec1-ec9b-413e-bcff-e0fbd574e8d1"
        },
        "item": {
          "id": "dd5bf8f4-796e-4535-83f6-084de34ed6fa",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "7861f15e-0478-4fd9-aaff-6d6ef6601433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b6f8c28-3243-44ad-8f66-1d126c3f2af8",
        "cursor": {
          "ref": "7ffc8033-c9de-4a4c-98f3-4c7b8e9238e7",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "110dfa15-4445-4f99-84bc-2599505da252"
        },
        "item": {
          "id": "5b6f8c28-3243-44ad-8f66-1d126c3f2af8",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "cf5665f5-0566-4be8-ac3a-a4f4a6ad86ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8658bd14-f5b4-4562-876b-150dde4de5ab",
        "cursor": {
          "ref": "90a68550-9fee-4b39-b707-7fec2755a8a2",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "63c19865-e0af-42be-829b-67be4ad5f60b"
        },
        "item": {
          "id": "8658bd14-f5b4-4562-876b-150dde4de5ab",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "5c669ded-6d13-4717-8ed0-fa5dbb5b9135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb7b1a1e-502e-44ca-ac27-5e58429d91f5",
        "cursor": {
          "ref": "7315a75a-b0b9-4fce-8232-9fdb64a88a85",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "3ff36c5a-267c-43d7-9658-8c9e36367a0e"
        },
        "item": {
          "id": "eb7b1a1e-502e-44ca-ac27-5e58429d91f5",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "5bd9f971-7374-4da8-8043-a115effdbd62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9885cefb-559b-4b99-80ae-349fa3d38a12",
        "cursor": {
          "ref": "62074f7d-54b2-4590-ad21-a6709fb6da0b",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "840daba3-4132-4fb9-a12a-89ebeedcb82d"
        },
        "item": {
          "id": "9885cefb-559b-4b99-80ae-349fa3d38a12",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "97ed39a5-d810-44b6-8d57-a2345fa0c389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b34e268-19ad-4b33-b112-28be3b0dcd1c",
        "cursor": {
          "ref": "5514592f-92af-43a3-b9c8-8c67f3264d5f",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "5322fb57-07d6-438e-a9f7-4420043cbf8e"
        },
        "item": {
          "id": "1b34e268-19ad-4b33-b112-28be3b0dcd1c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a5b4d38a-6a25-4d60-ade5-9d833cbf3d1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72bba501-61fe-4799-9a75-538fe8eae393",
        "cursor": {
          "ref": "1f220980-0499-40c6-8bee-67ef8eaefbad",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "826c5a8c-3d1b-4491-961f-7e5adaaf4fe2"
        },
        "item": {
          "id": "72bba501-61fe-4799-9a75-538fe8eae393",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "ff5b9ff5-3695-4240-84a9-4a2d5f8b2921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e30da69-6fe2-4847-88f2-93895a91a942",
        "cursor": {
          "ref": "208dd160-c90b-46c6-afd9-709018ee6044",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5a03b6cc-071c-4285-a073-4f496958395a"
        },
        "item": {
          "id": "7e30da69-6fe2-4847-88f2-93895a91a942",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "0df438eb-5d1d-46b7-b45a-e0a98ca6b729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8027fbca-9b39-4f73-8140-5227863aecd1",
        "cursor": {
          "ref": "14667d71-a8a4-4df8-adc6-99e425014ba1",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "df56cd6c-fcd3-4010-ab9b-0d8e898e21b6"
        },
        "item": {
          "id": "8027fbca-9b39-4f73-8140-5227863aecd1",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "babbd070-ea83-4876-9d25-abb674b679cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "684c6fa4-2f42-41c3-98c3-ac13875c7267",
        "cursor": {
          "ref": "dce4e068-b4c8-4773-8756-fce39e30a602",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "1ec90651-98a6-4656-acea-95111c5ebe28"
        },
        "item": {
          "id": "684c6fa4-2f42-41c3-98c3-ac13875c7267",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "9b84eb96-8735-46ea-8b30-6cf494d0968c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c5c1a1a-27ed-4093-ae0d-76384aa12b8e",
        "cursor": {
          "ref": "b32e6168-3af8-44bb-ae67-3ea7f37fe88f",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "8f957ded-5796-4101-be51-ccc1fcabb8ae"
        },
        "item": {
          "id": "9c5c1a1a-27ed-4093-ae0d-76384aa12b8e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "8f434987-9606-4c4a-b245-08225524673a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1690c1d4-6710-485f-bc96-1fd69a5239d9",
        "cursor": {
          "ref": "b9c9478f-7936-4640-95de-4cfb019840f9",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "9def421a-1f8b-4447-ade9-92a3743d0fac"
        },
        "item": {
          "id": "1690c1d4-6710-485f-bc96-1fd69a5239d9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "55dc0d4d-8b8d-4771-87fd-7aaa9c08bb76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8014109b-81c8-445c-8993-fa2bc74e44bb",
        "cursor": {
          "ref": "882327e9-bc2c-4e12-9b67-2d5396e646bb",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d4067d99-5bdd-498a-a37e-7f464df36154"
        },
        "item": {
          "id": "8014109b-81c8-445c-8993-fa2bc74e44bb",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d63e0fa4-4eab-47f9-99c1-9fd10ab331c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "637a8e6a-b58d-4b49-a886-64c70320ba61",
        "cursor": {
          "ref": "21bdd25a-f53c-4757-a178-70963908e165",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "01c6caf1-6bc8-4d51-837e-37476da2322f"
        },
        "item": {
          "id": "637a8e6a-b58d-4b49-a886-64c70320ba61",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "bf9a04d0-930d-48a6-bf32-2aac6789143f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6290f45f-283d-4b69-adb8-09b4f79cca75",
        "cursor": {
          "ref": "5ba52936-0fd2-43a4-9efd-c5fa10ab3176",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "70f26e00-8b30-4fbf-b28b-5ec7e11ba8ad"
        },
        "item": {
          "id": "6290f45f-283d-4b69-adb8-09b4f79cca75",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "3d600f9c-60b3-43e0-bbde-33ebae6dd167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71a41ff7-b165-4929-894d-c79c79b05372",
        "cursor": {
          "ref": "40bc0d6d-4157-4caf-9f5b-c411d212b6f8",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "7e1b22a4-5ce1-4aab-b3b3-1b36760acab0"
        },
        "item": {
          "id": "71a41ff7-b165-4929-894d-c79c79b05372",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "fb5f33f4-2cf1-4f6f-8a23-32ce15531ce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa098bdc-f379-44bb-8e80-ec894ca02538",
        "cursor": {
          "ref": "4b25b090-d2bb-4690-8e0d-e1c1c10b1df6",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "84b625b7-98ab-4e80-bbe5-3b3d90a19c64"
        },
        "item": {
          "id": "aa098bdc-f379-44bb-8e80-ec894ca02538",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "8a00da38-ffc0-409c-b3c0-8f9b62f95c1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee00c36b-382a-4973-b5bf-1f3331c4c102",
        "cursor": {
          "ref": "3b32bb99-05a7-4108-acea-ad41f86a010a",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "33944d87-2c8b-40d3-8c35-e376f9dff7b9"
        },
        "item": {
          "id": "ee00c36b-382a-4973-b5bf-1f3331c4c102",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3fbbed35-0d7d-4701-a1c7-88217f5265f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c14cff0-1a26-4f68-b63a-c262b10c9244",
        "cursor": {
          "ref": "153f698c-fe70-436c-8c2f-ec94107fac48",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "97baf15b-aeb1-482d-978b-d673f1b2adb5"
        },
        "item": {
          "id": "2c14cff0-1a26-4f68-b63a-c262b10c9244",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "558c7a0d-6024-4608-b119-f20c197b1e91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea4b9150-f31d-4997-a57d-213087853783",
        "cursor": {
          "ref": "0e1c8e78-cb1c-4fc3-9a13-00fba00a7e83",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f305a25d-3956-4a1c-8c7b-7cfa7d150b2c"
        },
        "item": {
          "id": "ea4b9150-f31d-4997-a57d-213087853783",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "380018d4-f744-4c75-969c-4b4c70bddcb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b9dab0e-f232-4443-a991-ae98668d3f22",
        "cursor": {
          "ref": "397ad476-79fa-45e6-9638-9cdaf244784c",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "27297aa3-62e4-4a7f-84d5-e0030de0897e"
        },
        "item": {
          "id": "8b9dab0e-f232-4443-a991-ae98668d3f22",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f9fcdeb4-59e5-4e5f-935d-5296a6fcc232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3185a32e-325e-4b3f-aaec-8ff4e0b34841",
        "cursor": {
          "ref": "e5aeebed-67d7-490f-9b73-6ff2150db0a1",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "38a6de59-3c37-4972-929f-02aa57ccec98"
        },
        "item": {
          "id": "3185a32e-325e-4b3f-aaec-8ff4e0b34841",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "bbd6ef1f-8bb0-4fc7-8e3a-3be959bf05ef",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "f0ea133e-78e0-412a-a84c-f8d146becd07",
        "cursor": {
          "ref": "60e6624c-b08e-4ed6-b8a7-151eee93149d",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ead43c42-e731-42c6-82ff-8fb7fad4bd30"
        },
        "item": {
          "id": "f0ea133e-78e0-412a-a84c-f8d146becd07",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "08513f65-86f0-4b55-b16c-20c93de51948",
          "status": "OK",
          "code": 200,
          "responseTime": 161,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "874d4c40-45bf-4ae8-aff9-a638a0371b86",
        "cursor": {
          "ref": "f929abe5-1012-4f6e-b58c-205d0d792393",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ce8ead88-162c-4ee3-a02a-bc1cb6e1486c"
        },
        "item": {
          "id": "874d4c40-45bf-4ae8-aff9-a638a0371b86",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "31d1d2e1-2b24-4a46-96cf-7295d97d79cd",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "092b3fa6-5bd3-45d6-b7ab-7f99dadaf30c",
        "cursor": {
          "ref": "513e66e4-2320-471f-9eb6-044f1b2acb3b",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f4f3c542-a937-4caf-b050-663e1ee30e5c"
        },
        "item": {
          "id": "092b3fa6-5bd3-45d6-b7ab-7f99dadaf30c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "6da3d443-8346-4c2c-a574-a00a649ecdfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8797f459-23ce-469f-bfaf-c5dcfc37c0ae",
        "cursor": {
          "ref": "57ef4963-3d51-480d-bbed-4f2a3bf43f31",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "fb2ad4f8-84e6-4caa-9e35-47c79661c1ea"
        },
        "item": {
          "id": "8797f459-23ce-469f-bfaf-c5dcfc37c0ae",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "639552ea-68b8-4863-8105-f24eae446615",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "77c59335-734d-4c2e-afc1-310ca3bef4f7",
        "cursor": {
          "ref": "b285b462-3ce2-45a4-a966-22ad33e221d2",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "37cd5663-8312-4913-9b88-4c07e3672e6a"
        },
        "item": {
          "id": "77c59335-734d-4c2e-afc1-310ca3bef4f7",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b1310f09-b3b9-4f44-8f63-b6a50370ea38",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "eca7057c-34e6-4503-b4cc-a3ecc9f1b87a",
        "cursor": {
          "ref": "95963692-b458-46f8-be50-119a8e1676cb",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a46f193e-796f-443a-8de3-b0e888a5619a"
        },
        "item": {
          "id": "eca7057c-34e6-4503-b4cc-a3ecc9f1b87a",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "076aa80e-6c9c-4a6a-bbaa-4b0b052fa70c",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "1179b9fd-1242-436c-ae55-18ce914845ce",
        "cursor": {
          "ref": "2fc952c4-0370-4c87-aa4c-29ecebf06715",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "8ff9fdbd-5471-40ef-8c04-041c6c235376"
        },
        "item": {
          "id": "1179b9fd-1242-436c-ae55-18ce914845ce",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5f94ea99-cd95-4596-b4cd-beb826e7e214",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "d6961e94-65ca-40fe-8d6f-868b9853dda0",
        "cursor": {
          "ref": "5276bb5f-f4d6-453c-8c47-9a3ee0d56005",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "b18ace82-ad0a-43d7-a213-0b9915acdfc1"
        },
        "item": {
          "id": "d6961e94-65ca-40fe-8d6f-868b9853dda0",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "735a4e30-fe14-4523-9476-6725baad4af8",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "24c24108-f4a7-454b-87c8-c52028ca6936",
        "cursor": {
          "ref": "1c0376db-0867-452b-949f-2bf011860dd9",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "378264c5-4d00-4374-bc23-4a937f2c6022"
        },
        "item": {
          "id": "24c24108-f4a7-454b-87c8-c52028ca6936",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "2e22d0cf-f174-4454-9bfe-278b15e2daac",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "c93ac1da-c2d1-477c-9d9e-eff9835c2f8a",
        "cursor": {
          "ref": "4f783d57-b67f-4683-9d9f-2f6273605e8a",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "72eec5f1-48ee-43f0-a3c0-3c27ea072554"
        },
        "item": {
          "id": "c93ac1da-c2d1-477c-9d9e-eff9835c2f8a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "d32ede18-7038-41fa-99da-b5cfd738ccc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f11d00c-0ae9-4963-92fe-270af2e29d9d",
        "cursor": {
          "ref": "5d38a393-2148-454f-9d73-34d600893ec6",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "7442ef3f-e6f2-4f9f-9342-3e1a19852558"
        },
        "item": {
          "id": "2f11d00c-0ae9-4963-92fe-270af2e29d9d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "02469436-0f6a-410e-9855-81eb840be234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cca3271-a087-4986-a8b9-33524b8baa0e",
        "cursor": {
          "ref": "46aae91e-eecb-4316-b2c4-502b717cc138",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "02d12295-1dbe-4bc6-942a-0990b18aa48c"
        },
        "item": {
          "id": "6cca3271-a087-4986-a8b9-33524b8baa0e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d99f22ca-0577-4af1-9b1e-bf95cddde044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c796a70b-abd3-4419-81bc-ad119181659c",
        "cursor": {
          "ref": "6c907f6f-8de4-45a0-b56c-309d53a080f4",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "3faadae9-af25-4d5f-91c1-c7610b4d83a9"
        },
        "item": {
          "id": "c796a70b-abd3-4419-81bc-ad119181659c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "69912ebb-ab4f-42a5-9159-57aa5593fd9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67446ae0-ab03-49ee-89ce-8348144bf11e",
        "cursor": {
          "ref": "87ffbfad-2097-46df-a6ac-ba19beec324b",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3e8dafb7-9a2f-4a3b-a44b-49d934159895"
        },
        "item": {
          "id": "67446ae0-ab03-49ee-89ce-8348144bf11e",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "54e29959-f479-403f-80b7-2b4e6ecea5a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e0715ff-930a-45f7-ad5d-ade210922a5c",
        "cursor": {
          "ref": "b4007e9a-23d6-4e8c-a14e-4dc0c5c4dc86",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "3fe9704e-8492-4251-a111-091505f3525f"
        },
        "item": {
          "id": "7e0715ff-930a-45f7-ad5d-ade210922a5c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e394354d-2dd8-4d07-8f52-7861b0a737fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 157,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a174145-13ea-45f0-a1a7-1d7bd8db740d",
        "cursor": {
          "ref": "25c0e793-445f-4b8a-85a4-ea5d0e3a4c65",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "90c97978-c97c-47eb-8e01-12b2f84318d9"
        },
        "item": {
          "id": "4a174145-13ea-45f0-a1a7-1d7bd8db740d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "529a297c-6ca0-49e2-b205-c2c2f5836ef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37fb1cb5-97af-4979-8afb-b762ed0d637d",
        "cursor": {
          "ref": "786426ac-c352-485e-a715-a537510175d5",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "db9d5203-f530-40b8-a1d3-3373b3ba5518"
        },
        "item": {
          "id": "37fb1cb5-97af-4979-8afb-b762ed0d637d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e4f32822-13d8-4e17-81e4-f3c2ae3055d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "909e2a2f-5d49-417c-b3af-de9ad80a658b",
        "cursor": {
          "ref": "218233b1-d715-4954-a3e8-96770d2ece57",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ccb1a044-85ce-4841-9c79-fa7ac8e8a559"
        },
        "item": {
          "id": "909e2a2f-5d49-417c-b3af-de9ad80a658b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a951b4fd-f587-408b-87a3-b06e5d4a396a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "920c57a7-6901-4aa4-9adf-b78ea58fc814",
        "cursor": {
          "ref": "42ce0d54-8ec9-4da3-bfb9-6d77ea598120",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "9c115740-580b-4bde-8c4d-f995a288fe50"
        },
        "item": {
          "id": "920c57a7-6901-4aa4-9adf-b78ea58fc814",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ebaa4af1-d38a-4ee7-966e-aab5bf46b5ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bab6e4b-ea02-4e0a-a017-288116f72308",
        "cursor": {
          "ref": "62443c23-9f60-4c82-95dc-f066eee1af04",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "7456a184-d9b1-4f5b-a2e4-a9236871fa9b"
        },
        "item": {
          "id": "1bab6e4b-ea02-4e0a-a017-288116f72308",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ec3974f6-6533-44b2-882f-76079c5c511b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1cabe7f-e37e-4046-87f2-a8d7b5c001b5",
        "cursor": {
          "ref": "4072053e-d6a2-45a5-99f9-ebac8e1110a6",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "9642cb04-5f77-48e9-b16d-af2719ec49e2"
        },
        "item": {
          "id": "a1cabe7f-e37e-4046-87f2-a8d7b5c001b5",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a3ff02cf-67ff-4d29-8926-437cd7b3f9f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f28d83d-3894-4e63-9fe8-64fdbb594dc8",
        "cursor": {
          "ref": "5e44fc4a-dbc3-43ec-9b9b-74bc4b61cd6e",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "9f818d0f-a0a6-4769-9b94-9eb69ab6b852"
        },
        "item": {
          "id": "2f28d83d-3894-4e63-9fe8-64fdbb594dc8",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "6bd1a377-12aa-4e50-bbf2-6afecb8b7655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "878808a2-6a57-4e38-9625-4a0f6f8b39e9",
        "cursor": {
          "ref": "ab608a21-3578-4a1f-b067-26989e31040e",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "3453c02c-26c1-49e9-9001-fdf5d74ab892"
        },
        "item": {
          "id": "878808a2-6a57-4e38-9625-4a0f6f8b39e9",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "26c00a28-e062-4fe0-9ebf-e8fe89f1888e",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "ebdb8904-f1c8-427f-b741-d8ca21f02b77",
        "cursor": {
          "ref": "86bebe55-ee5b-4150-b4bc-883eab5f9c9b",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "a20f5771-c009-41a6-be93-5b12fcefc7a1"
        },
        "item": {
          "id": "ebdb8904-f1c8-427f-b741-d8ca21f02b77",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "85208927-1da2-4ada-99cb-fdacfd3fc7d3",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "c5a12896-63c4-4f54-b588-30d9f5fe8934",
        "cursor": {
          "ref": "8beef17b-78c1-4b89-8786-765626ca9cd8",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b75fdbc5-f35e-41f1-a4bb-e988a6e0960d"
        },
        "item": {
          "id": "c5a12896-63c4-4f54-b588-30d9f5fe8934",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "d97f443a-44b8-4635-af83-0e69131554a1",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "0dec3182-6e1a-481c-9109-5cc6712adaf5",
        "cursor": {
          "ref": "f96fd1fa-e68e-4570-8dbb-512330db08da",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0c13aebf-a3c9-495c-ad00-1e73db4d5f08"
        },
        "item": {
          "id": "0dec3182-6e1a-481c-9109-5cc6712adaf5",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "efefea01-dcbd-473b-a7fb-0f86aaf4f34c",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "01a92262-f636-4f43-9790-4745e46568be",
        "cursor": {
          "ref": "fac7e6d5-e99b-41cd-9906-ad14a1186c0f",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e4d0abe2-d5cc-4e13-9074-b088a1d943e4"
        },
        "item": {
          "id": "01a92262-f636-4f43-9790-4745e46568be",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "5aa1376f-cdd2-4364-a58d-80847668473d",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "62914aa4-f184-4c80-b651-d946a44d6fc7",
        "cursor": {
          "ref": "7981eaaa-f431-494d-a995-71357e63f1a2",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "60fd464f-90c9-4ce5-80c2-36b1bc86d765"
        },
        "item": {
          "id": "62914aa4-f184-4c80-b651-d946a44d6fc7",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "78271096-53e0-4384-95e6-fe531b30a154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8748c630-6919-4d05-b362-aadbb703c90b",
        "cursor": {
          "ref": "8b497f00-4151-4c78-ad36-ca355d72ecb4",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "c0065211-f7fa-451d-8a92-f5d95ca9275b"
        },
        "item": {
          "id": "8748c630-6919-4d05-b362-aadbb703c90b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "26177923-11d5-4339-a7b3-5bf91ca5759f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "449b3bd1-0cd7-45ee-81e4-0403484dd050",
        "cursor": {
          "ref": "f6cfb9ba-08b4-4cf1-becc-8f3191cb8c34",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "47bd7c9d-8a4d-4cfe-a613-44e2abb2e127"
        },
        "item": {
          "id": "449b3bd1-0cd7-45ee-81e4-0403484dd050",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "721be39c-be5a-45a3-b316-201809cbe2c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0d62a17-b118-4e4c-b78b-2f39a9ef3ffe",
        "cursor": {
          "ref": "98916b55-9dae-4aed-bc29-bceb9a0e4e4a",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "525b6e34-9107-43f5-b03c-64cd12196720"
        },
        "item": {
          "id": "e0d62a17-b118-4e4c-b78b-2f39a9ef3ffe",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "191756f2-1216-4ea3-996d-664f80438976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "813893f4-d79b-45b1-a47b-95b8fc22da9d",
        "cursor": {
          "ref": "5d377c61-97f7-42f8-af17-58e665d28895",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "d9ac67fe-7427-42d6-9088-6c1bf16484cb"
        },
        "item": {
          "id": "813893f4-d79b-45b1-a47b-95b8fc22da9d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "576d25a7-8d52-4583-a33f-1a9ee88ab9d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de9cd7b6-c762-4a3b-bf7f-e80b28ba0a1d",
        "cursor": {
          "ref": "2f4bcc6d-60aa-4558-a80f-6c840f8a3949",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e36bf97e-69a0-469c-ae30-417fce871ec6"
        },
        "item": {
          "id": "de9cd7b6-c762-4a3b-bf7f-e80b28ba0a1d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "3d54fcd0-47ed-4480-bac0-30940f8a41a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "874a9863-4e12-423b-bc86-fd79606392bb",
        "cursor": {
          "ref": "9ce6c55f-83d9-4e75-ac9b-1923b794d85d",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "4ce37579-3cbe-4e54-a036-e7e5c451338a"
        },
        "item": {
          "id": "874a9863-4e12-423b-bc86-fd79606392bb",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "6523f16f-8de2-47b1-a6e8-29df2832046b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0abb578-082c-4a0f-b33f-b2cc972894e1",
        "cursor": {
          "ref": "093f5869-bd78-4664-91bc-3f8f8341d1d9",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "67a3e915-0666-45de-b1d9-467f8874c9fd"
        },
        "item": {
          "id": "a0abb578-082c-4a0f-b33f-b2cc972894e1",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6b9c445b-0921-4ecc-8f33-815d60b83b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4ca1ab9-64ff-44c0-a190-f94aff063067",
        "cursor": {
          "ref": "45805675-f617-41ea-9430-eb30c4e6cb0c",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "5da090fc-2481-44da-b271-78d41fbbbe31"
        },
        "item": {
          "id": "d4ca1ab9-64ff-44c0-a190-f94aff063067",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "9e80283e-b0f2-4934-a2da-4240c97e9aa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a1e38b-77ec-4e8f-9144-77f5daac34c4",
        "cursor": {
          "ref": "a5a2c8fc-18a6-4927-bedb-e37433b8ab98",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "73def4ab-1add-48f4-8046-add03cd81dd1"
        },
        "item": {
          "id": "d1a1e38b-77ec-4e8f-9144-77f5daac34c4",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "98472efa-a0df-4ccd-88e2-ee1cea7d0420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3385117-f69c-47b9-bd61-92977c3dd071",
        "cursor": {
          "ref": "3471f0c9-a734-49c5-94c7-d9534306d477",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "0f2991e8-d045-485c-b7c1-e76bebf502ae"
        },
        "item": {
          "id": "e3385117-f69c-47b9-bd61-92977c3dd071",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "8591fdd6-92f6-4b2b-b127-a077bec7ecea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ab7c69-00c4-430d-88bb-e63d302d8b1b",
        "cursor": {
          "ref": "35b1c74a-78fb-48b7-8749-5997dd952dd7",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "04f04cb7-f12f-4223-b648-0ef5fbce7637"
        },
        "item": {
          "id": "c6ab7c69-00c4-430d-88bb-e63d302d8b1b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c3ce7b9f-b05d-48fa-88d5-ff41bd1578f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66bbc67f-d470-4ed5-b0d9-e74f49605bbc",
        "cursor": {
          "ref": "96cb9bb3-15de-41f3-8060-cb01287072ff",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "70a327a2-a953-4130-b8c8-faf419d4d5b9"
        },
        "item": {
          "id": "66bbc67f-d470-4ed5-b0d9-e74f49605bbc",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "321f1dca-d0b8-4a0c-82b6-356cdce591b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95770483-2536-4e4e-a060-7cdb420cc3cb",
        "cursor": {
          "ref": "3c2874a1-5018-4548-9234-04d8c191dff7",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "2314c807-adb9-4e5f-9b1e-2a7d460334a6"
        },
        "item": {
          "id": "95770483-2536-4e4e-a060-7cdb420cc3cb",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "07e91642-b2da-4b09-b150-eaf66cc0e2cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc925e1e-a655-4035-8e10-19892dd9c315",
        "cursor": {
          "ref": "44583c2b-998b-43e0-b052-24a45d74d1dd",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b6baccf0-1485-4441-be71-8bb069ef4843"
        },
        "item": {
          "id": "cc925e1e-a655-4035-8e10-19892dd9c315",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "98d00f55-45e6-4df8-ba2f-d3b33c5c306e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5663ba02-810e-4451-bdac-e4b1cf892b22",
        "cursor": {
          "ref": "7391c8c6-f96e-4b65-9b1a-d1fc3abf3ebe",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "dd0aa176-2e0b-4f83-8193-21e04f390adb"
        },
        "item": {
          "id": "5663ba02-810e-4451-bdac-e4b1cf892b22",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "cf8bbc46-6740-4cea-a4fc-8ec7158af17e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4dae42b-3d5f-4be2-ba80-1874392ba1a7",
        "cursor": {
          "ref": "63e163f1-b052-476a-87ae-ed1aa1849153",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "01373ab4-b7d3-4ad4-b9fc-198e4ce3bb31"
        },
        "item": {
          "id": "e4dae42b-3d5f-4be2-ba80-1874392ba1a7",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5630edc3-2f58-4250-8a91-2e9310eb2a2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "281228b3-6931-4608-92d2-a075af516c79",
        "cursor": {
          "ref": "2ef868f5-c3a6-4bc9-95d5-ec42d1a95e86",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "53df4454-6f5b-4e2e-a21a-6c51ae6e4b28"
        },
        "item": {
          "id": "281228b3-6931-4608-92d2-a075af516c79",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1ae172a8-a48f-481d-8420-c383ddf7446f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc63cdc9-2803-489d-93bc-890daa61ac57",
        "cursor": {
          "ref": "a020e92b-9a04-4f34-844c-6f421df26a1a",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ef84b682-d227-4784-9240-d8738399a4ba"
        },
        "item": {
          "id": "dc63cdc9-2803-489d-93bc-890daa61ac57",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "630e5f34-402c-43ab-a0b7-5073f0aba73c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dbc1aea-b8c3-4ae2-b455-d0619ddeec7a",
        "cursor": {
          "ref": "21f138ef-9843-4a79-a162-a3ed989797f1",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "412b2de8-3c39-41b6-9df9-a4eaf0c13045"
        },
        "item": {
          "id": "6dbc1aea-b8c3-4ae2-b455-d0619ddeec7a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "a32cbf74-a73d-4bde-b1d0-b776fc69c4d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e445afa8-a5e5-4a93-b011-04ecd045ccbc",
        "cursor": {
          "ref": "a89a76ed-70e8-4f39-b95d-266357b0cfc9",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "203ddff5-7db3-4ad8-98f2-908ef03d5558"
        },
        "item": {
          "id": "e445afa8-a5e5-4a93-b011-04ecd045ccbc",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8d45d2ee-c2ad-4d51-8595-af5978048926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "060889d2-9e99-4d74-840f-b382816fd7f8",
        "cursor": {
          "ref": "89c9619e-a8ed-4586-a04c-0f3f4a9ed422",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "51540bba-698c-4a20-96b3-794a24a9f9fb"
        },
        "item": {
          "id": "060889d2-9e99-4d74-840f-b382816fd7f8",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "eab04f4a-881a-44a2-b118-a4b0772beaaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91de31bc-1a54-4297-950d-e4c7b2b1fb51",
        "cursor": {
          "ref": "07ee5e65-71bd-4591-881c-ec2e7a2a1af8",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b3bc5a85-a25e-4265-8e30-39a212bfdbc7"
        },
        "item": {
          "id": "91de31bc-1a54-4297-950d-e4c7b2b1fb51",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "974bb4c9-2fa9-4b81-b2f6-fee7afad3b3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c12c4d-ca70-4de3-865e-349bdb0c519b",
        "cursor": {
          "ref": "d03c42f3-6eca-4c98-904e-a56bc0da8580",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ced8cfa6-0d8b-49a6-9851-b9b186f71675"
        },
        "item": {
          "id": "82c12c4d-ca70-4de3-865e-349bdb0c519b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a6b57595-cb4a-41bf-86dd-29f0b034f06a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c52ec0-608d-4bdb-951d-237073395bb9",
        "cursor": {
          "ref": "023b6584-67ab-4981-b65b-4137f6e37107",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "4e4ae803-81b4-409d-9d59-9de93b671382"
        },
        "item": {
          "id": "23c52ec0-608d-4bdb-951d-237073395bb9",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b7c7452d-ea89-4a19-9041-adb4627b0fd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c07691d0-3163-4d59-aba0-175b109830ae",
        "cursor": {
          "ref": "1db5bdef-b0c5-4682-ad70-e4c25e4759f4",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "89387b95-c1ed-4918-b135-bf15d230f146"
        },
        "item": {
          "id": "c07691d0-3163-4d59-aba0-175b109830ae",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d9fd10f8-f7bf-4bf5-9084-1438ec700cdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51de2901-87d9-466f-a8ec-2e2752a7d988",
        "cursor": {
          "ref": "85488fd2-6603-42c8-a762-0dbc9b6ab4ec",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "fdc45a87-b44a-4a75-bf75-c344f7368edc"
        },
        "item": {
          "id": "51de2901-87d9-466f-a8ec-2e2752a7d988",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "28186d43-6f2e-4e40-aecd-c9de6e3c51f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed4b9edf-4c0e-4a73-bba3-60ad7fe4c900",
        "cursor": {
          "ref": "cb19188c-3733-49bb-9c74-a29c36b488cd",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "9576ffc4-a883-477b-9fa2-770aeb6c9a36"
        },
        "item": {
          "id": "ed4b9edf-4c0e-4a73-bba3-60ad7fe4c900",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b0f84e36-e804-4582-9b6a-467216409bda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd5e9678-fa28-4394-942e-f33dd56b9c75",
        "cursor": {
          "ref": "94c64011-6086-40a2-989c-dbe17054493b",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "ea9e3db1-337c-41b5-b28e-39a01121f090"
        },
        "item": {
          "id": "bd5e9678-fa28-4394-942e-f33dd56b9c75",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "56a6173a-0aee-46bc-9de3-67299253bfe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd985e6-c7da-4994-a3fd-5a89ec0382f0",
        "cursor": {
          "ref": "10744df4-980a-459d-86e8-56dbe3d192b6",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "aca78bc6-8596-4080-bc4d-cdd9d414b569"
        },
        "item": {
          "id": "efd985e6-c7da-4994-a3fd-5a89ec0382f0",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "72765f6a-f4f0-40a5-8749-559a1bdc0296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daa71dd4-0308-4d85-b69c-8fa9af514584",
        "cursor": {
          "ref": "966b2873-c591-4983-a0ef-84269cdc977b",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "c288cd55-e916-477d-ae47-8efac130cf0e"
        },
        "item": {
          "id": "daa71dd4-0308-4d85-b69c-8fa9af514584",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "426b9fa8-feae-4448-ab7f-c02ead11703d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9a4fb80-25c9-4595-8f35-6903a3e15973",
        "cursor": {
          "ref": "793ef0e7-e7e0-4ccf-97a9-3fd55d5e80e8",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "82cc5fd5-3d66-4fba-a82b-93c2133d8989"
        },
        "item": {
          "id": "a9a4fb80-25c9-4595-8f35-6903a3e15973",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "2b55e590-caa0-4081-b2bd-82529a461b59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56043b16-20df-4847-b8db-39aa69ca79a8",
        "cursor": {
          "ref": "d920c2dd-af61-448a-9f68-156291cb5b7f",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "42589083-f63e-4ec6-b3fe-9f2ea87e0ef6"
        },
        "item": {
          "id": "56043b16-20df-4847-b8db-39aa69ca79a8",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "31a811c2-2047-4918-b914-8473b9b2537a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "978b0749-bb33-4158-b06d-e427479e42a5",
        "cursor": {
          "ref": "669cfde2-6638-4de9-ad5d-63c80af42f32",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "34a50dc5-84d4-477a-9a75-c7d3d060154e"
        },
        "item": {
          "id": "978b0749-bb33-4158-b06d-e427479e42a5",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "deac22b7-8c2f-4932-b39b-f80bad33085e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f46b5ee9-1b16-4a18-b9f0-f56b1b5629a4",
        "cursor": {
          "ref": "65aff853-8ac1-4130-a106-b5553f5bfb2c",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "2f9a6a7f-9691-4e0f-8578-50b1a7854be6"
        },
        "item": {
          "id": "f46b5ee9-1b16-4a18-b9f0-f56b1b5629a4",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6cbe8b92-51fc-4bbf-9b34-d048ca633ca3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef76f0ff-20cb-4a35-8a30-8c956c00f094",
        "cursor": {
          "ref": "7cc2bed0-9066-4276-96f9-81f9ee70f3c4",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "3adec948-109c-4520-b9e9-e6f16f753438"
        },
        "item": {
          "id": "ef76f0ff-20cb-4a35-8a30-8c956c00f094",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "4d7ed6d9-8ab4-45b0-9f74-d972b96386d7",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "4f8fee5d-977a-4e96-98dc-c2aeb7d88aec",
        "cursor": {
          "ref": "ac0e87b4-f7d9-4930-a81f-82cded865639",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "3f02699c-28a3-4069-8fb1-5a30788c69d6"
        },
        "item": {
          "id": "4f8fee5d-977a-4e96-98dc-c2aeb7d88aec",
          "name": "credentials_verify"
        },
        "response": {
          "id": "85a3e80f-f569-459e-a830-bf6b47e95b07",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f760e4bb-4d9a-4725-9f47-4f4a1199b023",
        "cursor": {
          "ref": "d26c15b0-0e7d-4ddb-8091-093ee32ebdb7",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "213d5cfd-0275-44ae-aa88-61d849950cba"
        },
        "item": {
          "id": "f760e4bb-4d9a-4725-9f47-4f4a1199b023",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0c862694-0cbc-4b43-8d6b-485710b99d8f",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "42bdc6d8-4626-4af2-ba11-1715ff5b5675",
        "cursor": {
          "ref": "5f849451-d7cb-4729-83c8-43fb2a815721",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "03954048-d4b8-44c5-9f7c-32fa2e86ce58"
        },
        "item": {
          "id": "42bdc6d8-4626-4af2-ba11-1715ff5b5675",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5553828c-3364-4ca0-9e97-2fde1f532bb9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42bdc6d8-4626-4af2-ba11-1715ff5b5675",
        "cursor": {
          "ref": "5f849451-d7cb-4729-83c8-43fb2a815721",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "03954048-d4b8-44c5-9f7c-32fa2e86ce58"
        },
        "item": {
          "id": "42bdc6d8-4626-4af2-ba11-1715ff5b5675",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5553828c-3364-4ca0-9e97-2fde1f532bb9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "100c2b97-69db-43e0-894a-37190cd30aaa",
        "cursor": {
          "ref": "0e409cbc-2021-4909-b303-3de75a890ddd",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "91ccc917-973f-4438-ba5e-6b5d1156a7a8"
        },
        "item": {
          "id": "100c2b97-69db-43e0-894a-37190cd30aaa",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "700f0211-6b9b-4280-901e-dfc4e744a771",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c99e5909-9cdb-4dbc-bafb-62c877421a40",
        "cursor": {
          "ref": "c12eabc6-dc16-4c93-8616-1e9e09caeda4",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a2caefd2-566a-4374-8b88-cdcd0b98f128"
        },
        "item": {
          "id": "c99e5909-9cdb-4dbc-bafb-62c877421a40",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b461b6ce-7347-42a4-a6a7-cb0b988c9f72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}