{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "28c5d1e3-be92-4f98-a34d-95240e9f3b1c",
        "name": "Clear Cache",
        "item": [
          {
            "id": "f7198735-c3bc-4cea-b3c5-15543681e9e0",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "37b6dbdb-5e3f-4e5c-bf75-23125660097f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c0fe578f-548a-4ea8-b6dd-fdc6679736af"
                }
              }
            ]
          },
          {
            "id": "4f11f0c4-c54b-4879-a2d8-1a7282fa823d",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7dbe8dc1-ef82-41bb-bee4-736c3ca38162",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9399bb0b-a4f5-45cb-9dd3-8d70d13ef295"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1f84517a-8e86-4f1c-ab09-6ce5a6751bf0",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "68eab64d-a691-4e2f-ae31-852601321379",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e703b83b-d6c4-48c3-aca3-e4d51f5862a1",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ec759c3-1c2a-486b-acbb-31c792673925",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c8eb63b0-b4d8-48ea-8c79-b3c431b6e211"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "30d819fa-8471-4621-9727-ae1860ec80cc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "135e0993-b234-4bc9-83bd-f2191e96ada3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "898fc37a-4988-46e9-a9af-3655db80d9b6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e8dc0e41-f5bf-4dbf-afdb-c7cd4a4ba799"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d681c6df-4888-46f5-903d-556784731fd2",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "22b8d25c-5943-4ae5-9e0a-82abe1c88166"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "80ee58cc-b094-4e2d-9a45-25f8a8bee545",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "07dbf39b-b405-4866-9b22-36febd78aa81"
            }
          }
        ]
      },
      {
        "id": "66247b11-6393-4b0c-9f01-dadee16f4903",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "0d50d760-b860-46ce-96c1-f4c7b7c45d81",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7684aade-c79a-4501-a335-395d95bb813c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "26533a28-ace1-4257-b1ff-928093a34c12",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe61990-f1ee-415f-925c-881f375d8ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "26ee8f84-3025-463f-8a76-9a94f1d26af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "587f98de-2d59-4cf4-a20b-c29d85ff3ec2",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26359993-4752-4429-ae5e-16cadd422530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d2109e0-611e-4d55-b864-8cb3c044aa9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89965d9f-7dba-4227-bbde-07fc25e1bff8",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d97fc13-7aa7-46c5-ac98-6e86357696cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec8c0b02-7195-41e5-b23c-361fbb83b0fe"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "613e26aa-5ed0-4c93-8c27-f29bbcc79ed4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2217623e-7aae-4f60-b024-4ad4f3d77b31",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e0df6f5-ae17-431b-91a7-ebca77845554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "121b04a9-c8bb-4824-aeb5-5b90bcda5b99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2f295f6-6441-4189-a1fc-e6866249fdbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "162464ad-a860-42db-b22b-0d3b55ce0c72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b69494f1-45a4-4a7c-b5f4-b237d073ddad",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b38f3366-e6bd-4e9e-8700-4db63b233ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bd579193-9dce-4564-8803-445757db151e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c5529f-eb5b-436f-8ae1-ab90ecc21412",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "b53eef0b-110d-4978-a421-3bf8cb500862"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0eb7c028-d1e9-49df-a4aa-feefe848af43",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1576c9b9-b17e-4121-a582-422e3c46b41c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "90d42a5e-161f-439a-afc3-2db5c84b6b6e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ad8e581a-9a20-4b23-807a-09a415ae9170"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "17efa426-a933-419c-ad53-d820e50460e1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "c9ff3c00-3534-4a3d-aedb-59fcc772795e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "778e03bf-89ad-41cc-808e-588a4aab72e6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bdd5af53-f24a-4989-95e8-3e9a4609c9ef"
            }
          }
        ]
      },
      {
        "id": "d7d24fcb-5920-40b7-ab3b-1f0ee84184c0",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "6670c30e-7b96-4c8b-9729-b5741bd71bb8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b5fa6091-cd4e-463f-a907-dc72d7a8cbeb",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ad192c73-7758-4d58-bf5b-b55d04651d37",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9fadd2e-699f-423c-bcf9-fb0c54518aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d92fe51-9527-450c-b226-728e6cff8507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f134d0a1-4f0e-4db0-9653-4875e0e2cc17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aaa873eb-a0f3-46a8-bc2c-c173afa449c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14fe23c8-0e78-40a9-9b46-b0ada6813dd2",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdd850f5-8815-49ac-8158-ee0a6b70cae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e00b382-df93-4f08-86fe-6e2ce4b02cbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17d61663-71e7-400b-8c57-7fda568eed01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "80f4f56e-aea9-4922-b9d4-c9db901e3f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "841b0b4e-1e8b-4448-b44a-e2154702c235",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "810622a7-4781-45c5-ba95-2c6e577aab9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffa875e8-85da-41d2-abbb-b90a25e41708"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ccd60e6-dfbf-4039-b976-56f263ea0e74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "765d2aaa-1f93-48b7-9b89-4d563f142893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9a690b9-0b25-426e-9695-e1771a15bcab",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca966940-c3b2-4e6d-b9fe-f247561e5f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22fa463e-2049-4088-81c7-964d49e53482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c177d9a1-9df9-4a86-81fc-b8bfe43133a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "696f131d-b29c-413d-bb52-adc02372655b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973fff01-b7f0-4cd1-b16f-a8fbc8e53e6b",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfaee457-30ff-4229-9179-235f2530ace4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9fcfbff-7977-4f67-be0b-56b0e1459998"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c444414-9cbb-4840-8f53-e0ce8f1fcc6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "17d87079-a469-408f-9d9e-8076dea75161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d9641df-3182-42fa-93e0-f1e44fb9f293",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f7fa18a-8cb9-4f17-b16c-3fe7f01076fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f9ff780-41cb-47e8-9bd8-bc13263e5545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "815e3e29-05d2-4264-8d0d-3930716e6575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4aa81c7c-30ba-4e24-8c42-3b00f209e5da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5efdc8a-b34c-4568-af39-76ebea13904c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db62f4e6-dcda-4074-9510-5ccf068124d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "621cfc1f-6f81-4936-b7ec-83ce1c2421c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7620cd57-f033-492d-984b-0e9bc1a5c6dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38de6da2-02ba-4f40-b7b6-62a1acba747a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f6d27e2-6976-47ca-b991-6980c918516d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09498502-afe3-4d6f-a8ad-87be4cb769b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3099bfa-3fcf-4566-a007-872fb802f871"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a18ab3b2-24d1-4563-b6fd-563f6021c1d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ccf9e90-6e2e-4362-8388-187c611bccf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0019b10-523b-41bb-b501-fe6ece3e1cfe",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d84dfcbf-cf6e-4b3a-a2e5-1e4c4fed56b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26b93bcc-c877-4737-9479-9ef23bfc7e89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7be050c6-7427-489d-9c88-78af35cee260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b56542b-c703-4647-a3c7-c3432547baef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13758128-d697-4180-9153-f553d756b3cc",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c2bcf8a-fd12-486e-99e1-5516fa1f0d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "748d2b03-643e-4cdc-bcef-bbe892eb22c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5297234-c5e2-4b20-a24f-8bb54fd632fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a079400f-1b6c-4986-80f3-5c33f2c03c43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "310609f8-8379-4914-8498-fb90159e416c",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c036863-e9b2-4beb-9a59-ac8184953601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1b7277c-195b-4e07-a989-c790c642c4ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee8b1d4-f7d3-4b39-9459-88ddab985e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0933ad5b-959f-4c67-8d92-50f64bbe63ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0633e486-b300-4c3d-8070-94c3cdf5606c",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c4d9064-c743-430b-a808-31f86a319b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b1d9f9a-c22c-466a-ac7a-217b6b0cd3a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af145b6-5fb1-4878-95c7-6604303e9437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "846115ee-78cc-4fd9-81fa-9be6a3f98135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01109af2-57c8-45f6-a392-b77a2d7009d5",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f329e7ce-03e8-4d87-97ad-fdd20ccd3342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7f83e59-2540-43a4-b9d2-27073bc686d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35c93fcd-5df3-40be-8a03-de34c9d82841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "52e9d9d3-5fb8-4ac3-b7a3-a927c70ebeb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b0cb5e-71b3-45b6-a00f-125e2a42fb2c",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92afaeda-ef04-43fc-88f4-28e90a4b6efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "331a9fff-661a-4e2b-ae90-b9154866e3f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "912d0840-3c5a-473b-82be-50e4bb158ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "9480aab1-02dc-47f9-9db1-588675c457cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab1c3175-1068-4d5b-ae92-0ae6d8a26de8",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e25cd614-70f3-4823-beeb-345099151dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acffe2b1-96b8-4180-a5a0-0015219b5aae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a409ff-cd28-4b40-aba7-394f9dd193b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7f7ded7-ec12-4905-be6d-78cc9c24623a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a7ae149-3446-4229-8294-a6cfe40e8686",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c1b33a6-735d-4159-a979-fd951477a305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fff33ee0-ada7-474c-8042-54394f1ed625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968cd439-d799-4d2e-b329-1025f0621407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41e5be8c-4a2c-4d20-a274-1e018347c03b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "977968a4-e24c-435a-945c-daeafa11dc4a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59493aac-8ee7-49f1-83c0-e4c620fcb16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b333ecca-6029-4e20-9253-462520d8b9f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02286ec1-acba-474b-9d2f-154fc5b5db83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce8909d2-f790-4ad3-a16c-19ca877483ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34927ba6-3aa4-4f4e-83fc-e4f9294b262a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "286e71d4-7b11-4a87-bc6b-34cbdec7c964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "730d0bc1-e9d3-48a4-a222-7b3f7d130f41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82b790b9-e67e-4ba6-8784-aef44d8442c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dbdfc723-2c9a-427b-ba7d-105b8d981fb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "265ee020-14c9-4fb3-820b-4b8ff149e751",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf9e740-9b53-46a0-b2a0-e9f9d5c00494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfffa592-ba10-4019-b0cd-0747e18bd28b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b4d33d-ac58-46a0-a4a0-a36135470ba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce2205c4-bd81-4234-881c-fa65083b70a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5325958b-e2ef-411d-a71f-07f82a0a7410",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddd4d00d-269c-45bb-add0-008c1921af5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ac139c5-8dcc-4ea9-a68b-3926d2d3c39e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3354bd99-63ac-424c-867b-29a7fe9410df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c536737a-653a-4316-bd3d-67a2207e12a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21394516-a35b-4935-b70d-38e4cd31226e",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b130e267-edbe-453c-8743-77e0843deef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80108226-1314-4028-bf83-2c70f0060589"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b690a4a-2135-4dbe-a56e-201e3a79a312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d184abae-574d-4644-8604-8ac5a6db62e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0df992b-e9d6-418b-81a2-bff9f59b2016",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c4dbe12-f6b3-459a-bb0c-6d415ca91ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fa65c1d-5fd7-4b38-8905-9b86c792b27c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "634096a9-8398-4533-835f-84fa0d500712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f606493f-a7f3-4058-8477-f4d5670ab25f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4cba291-7e6b-4329-bc67-5f7f949f71b6",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47358cfd-18ae-4027-ac7a-1f15cf60e078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be752fd4-e72b-47da-bec9-79b9b5ae2747"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d42ccef-c17c-4dbb-bc54-ce1aa449ac11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c87c14e-afd0-4fcf-90a1-a22940afefcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfcbba1e-f3ac-42b5-b6c4-6c3232f644bd",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db6af443-4be9-41a0-9662-d4b6a4ddec11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c10ef68-98d8-47b4-b016-478896f910a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d52c92f-bcae-439a-bcb4-2307a8263a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "11619f97-3e6e-4e73-8e87-e6f8a94db8c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7e8ce4c-6aa2-4e7f-9f91-bfce284afe4a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c1856e-9f8e-4809-a3c7-7d52faf24910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dc93721-ff1d-47e4-afe9-b1a48bc7919c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "962f0e36-9bd7-43c6-ad8d-b91cefea3c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b1de5a53-c511-469f-87e6-cb6bd6f717b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd7ba8a-d2fe-459c-8335-c92fab68d766",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65fd8a94-6273-49a1-8b72-5decc9e7c1c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf676652-7e45-4603-a3fa-3eb782ac0db9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b363fd4c-689c-44a5-b35d-364001c390df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6f373f5-8d4f-4341-a6ee-0099864a2d96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ae7523-190a-4357-aea5-52b723489085",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7fac86-7e70-4351-97f4-5d57bbfdf399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c3a6680-ef43-4a9f-93ae-c53480da9ea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c79bed5d-bc23-4aea-86c0-858dfabff0d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca9e4d4f-cd91-44e9-895e-38d727dbea36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f7b54d-7d12-4f18-8a64-088c3eaa8061",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92681767-08d8-4d44-bea1-a42c173a9fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80289412-205a-453a-af23-0bc4aaaa7883"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1435edb-ee48-4a85-bfee-3811cbeeff1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ece4cd9-cd27-4937-adf5-a7a85d38f9bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c853722-81b4-49a1-919c-17ba66bc4681",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d0e9b16-9c4d-4297-97c2-b3374a5a0821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eea28a23-b205-486a-9d5a-8f563df29324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2876fbf4-d924-4249-abb4-a27001737d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a40edbf-a00e-4220-ad48-f645c04bd80c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41c0c7d5-ee2a-464e-bb8d-9291dcbf44a5",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ed5447-ce85-4cb6-a5ae-8b05801fa1c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "246b76e2-2d7a-46c2-a346-c9ff86193359"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b393e4dc-f0ab-4444-9ad4-2e612273900f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c6b9248-8ed6-4fc0-8a6c-c5d0f8778f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8132587-b5dd-4277-82aa-8052dda53077",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23e56104-e557-455f-b82f-e50c2dffdedb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17521819-ecf5-440f-9d5e-0c027fa720ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ee3b873-bea6-4efa-b3bf-a554f66c9afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "56ddafce-08ec-42f6-9076-a089950811c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce6049d4-4b72-4f8c-b0db-7ad67d5a47c4",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91660170-b2e3-49b1-bec6-f2c35cb3d68b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "215d3c0c-c30f-4f79-a4f9-6bdf1ad46cc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac662f2-9b3d-400f-822e-9d595bf43aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "379187e6-be4f-4952-ba23-8ed2e5e99e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7966dbc6-c05d-4888-8b89-f94f349b6340",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a02f62-7347-4c0b-930a-dcb7851418ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42af3c39-b2a8-4618-93ce-8933741118f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc1ef76-725d-4dea-a461-ff6fef43ca12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ecff17b-3eba-4816-a69d-c9201cd86025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f888477-73e9-4a98-9f0a-4cfd71398620",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0dba9a4-b4d9-45a6-bd3c-a87f161302e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a295eedb-9fb0-4b15-b4a0-89ed544dc2f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c71840-1d7e-441f-bace-78ab308ed853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ef710cc-18d6-4665-af09-62bde3a74876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2d95c37-94da-4b3a-8582-c3043264b3b9",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a837e9a-2dbc-4c2b-acaa-a6de667bad0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b696fa8e-79e4-4af9-a8ff-6dfe60b245ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e2e421-3b32-457e-9590-99a7fb146de0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f63d8af-297a-4ff6-b56c-31e7c3769e5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "286414da-ef75-44e8-8921-cbf42ec3f89c",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c6e0d6-0ad1-4c6a-b25f-2179f696ce44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be8995aa-3fc0-47f9-840e-73961e9fe44e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45576e85-d1e6-4a52-9f2b-f07c8d95268a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a81749f5-a341-4ba6-9b33-4a71a03c9f38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd6c86f4-3d66-4c61-9235-8ee7d4b7e54f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "611d3b77-278c-48d1-8473-5f9b31b0ad7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "451ff0d2-eff5-45be-b0ac-cd70d1e431a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "959ec28a-a41b-4f4e-929d-4d914cd4c8be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "7b6d5c0a-d53d-4835-a2ce-03017a561659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a5e991d-15be-459d-8d56-ff0c76f36546",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e4672d-acb1-46f0-be8e-a81355a18580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "57788934-c169-4a27-9d9c-f6973dca6eb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aca4198-0962-48a5-af8e-53e81a1019ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c4d433e9-1111-4945-af6f-7862d288e58a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c01b42-5b04-4ecb-880c-297cf8b3277e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4194a79-823f-40dc-8cd3-8dc5a8dac653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62e6eb48-2202-45c8-9485-0ebe28a22cce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0286f5ca-9842-48bd-81e6-8ccb96583dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fdddb12-5ea1-40bf-9ecb-98c5e390cdce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b334ba8-3e69-4ae0-a6e9-3ec21f408bda",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f01f67-08b0-494d-a7e6-494bcd8d9e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5521721-5011-4e82-9507-f4e25e75f1ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b532b962-0497-403a-b458-05e7d877f8ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5832cf72-1bf5-4a5c-ad1d-9a6608b08a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc12717a-7295-411c-9c0a-e2c24c13bb09",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bad3810-87b9-40fa-9c85-ce5f666489fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f070fea-b392-4cd0-89fc-93d4963ecf4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34143435-79c2-423a-be3c-8e753845ee2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8a2d98b-706c-4649-8f71-ea80322b56bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe638433-75a2-4eba-b1fd-071d0370ad5e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcad53f0-8238-4134-8ad0-de3d07ce93a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05e73fa8-40de-4d50-a4b8-cb07cb28630c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d01fb19f-5c2b-4f00-a89c-29a81ad31525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9a74291-798b-4801-b168-b8b1260d9ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9fb3f27-4081-4643-8beb-22a9bfca95e5",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e8f619-8a27-4e65-8f74-4b45f5ebc9bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "845fa894-83e4-4a3e-8c06-b1ce45326ffc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "464a38b9-0c60-4559-aeb3-9dd57ca0a2b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0935f28c-3dcc-4472-9c39-ab5ff67fb9b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bb5eb67-7cf7-4752-a4a6-995bdaa4899a",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a07f56-ae50-48e0-9115-af52460f73b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4bba791-7aa1-4423-a54c-1bf6cb18c046"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c178065a-217b-4446-abee-0042189631c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c5e81a0b-0968-4333-aaa4-6afda1c2b7a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8315401a-c1e1-4a8a-95f5-1e0860ea3af0",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8564756d-90cd-42c4-9c5f-94132bdf8f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39862fae-4eb4-4e71-9db5-59b58967c35c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c3444c-02a3-4dfb-acb9-a3dcaba9cf16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8fd5bb1f-93aa-40d7-bf5f-6b94b82fda12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cc64c54-e1fd-4a33-a71b-61156ccaf0e3",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed62a77f-1c8d-44b8-9d22-44e11b61e1c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38be0f41-a008-4572-8e4c-1dd41b475b94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9d62e69-03b1-4d5d-8775-fa56c13e458f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec4ca0f3-805c-448a-a76c-060480127dc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5b90c6e-1b55-4d76-860e-7c16355870f0",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e52842cb-4bde-4e90-98c1-4413a032787e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e0b6031-2fc1-4208-8695-5648b652e78f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f867b344-b785-48a3-bda4-3652569264d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "35a57e07-4c75-4b79-8a2a-d9a5e2600fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f71dd99-e0e9-4936-b8c6-e7e86ea24209",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11aa9efd-a63a-4cc6-a27a-3654650493c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e6d6143-4885-4e49-a9eb-4d8155eb2878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ce04ed1-52f9-458e-b739-aeb50ba4a25f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cadd41c-c276-4284-976c-7dc6b3edd628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f71cc22f-64d5-439f-b5b4-6d042faff6c3",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "053cd819-db46-4a01-9d2c-f5f8eb55adf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10ac8e57-1ed9-4b57-ba79-3c425e42d849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dcc4528-8b7b-4256-869a-9442a534f61f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7616b82-bd33-4ce7-8df9-bc1083f06554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ce46ef-dd42-4d4a-9ab6-4092ec3046c0",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec46626a-f3ed-40da-91c6-9435671088e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3fc9c2c-93f4-4ad7-ac16-b15da5860de4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc769b72-7515-4f84-8468-c18b4c3fc457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "75718345-d27f-4728-a0ea-3a2c711942ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c14ad885-5bcf-4f37-be29-2d75994829cd",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49ca85c1-24b0-4092-9c96-25158e2353fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0c8b5d8-0846-44bb-af78-1ae610105115"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c29a457-9af6-4275-b89f-175ae6edc65d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b2b5755-6d9c-43f0-9842-47b3b968695b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b4e7ee8-c6b0-4070-b411-683c85c5839e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64615c86-1a41-4633-9fd3-54776544c275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6acf12a-7485-4e15-a0b9-c0c1d60a87bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d53eb7e7-8a90-445b-84ed-71972307b054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2c6ab4fc-56f0-40b9-bada-85795d292245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a117a22d-05d3-4e59-8ebf-ee3d640deab4",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd9c65d5-c004-45a7-ac46-cc01c3e26481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59613f38-b0dc-4b72-bbac-f3240c46f0bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b6e0b40-3902-45c5-b2db-4361c782cfe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddb02699-ff03-46d8-a2fc-c9ea8d6170f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da02b890-5c51-40b4-9d5c-3d1156a83d43",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecaa6acf-df56-4e68-8fa2-c77967e80587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "812462bf-6368-43ab-af0d-74bd298933b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c719cc7e-04c3-46d0-a9ae-0023824509cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0286e8a3-717d-409f-ab39-bfcf6169377a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca8611a-e828-4458-a29e-b1b3e717aa8e",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35261215-bbe0-4655-8f69-07a5a7d69bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a78863b-a7ea-41dc-90f0-5a8d8c942039"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e42d63-549a-4594-aa8a-f3a28892e044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3ec6ded-679b-4f25-ae6f-df8155606274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "687c6f65-9866-49f9-9bcb-67b9d439405c",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "087d4de9-6b0c-4baa-a7b1-c70daf977817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8465fdf-ab6b-4d8d-9804-7d7c9e7527e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bafd1073-cf82-44be-85a5-189beb90af0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ce6af45-42dc-43d2-baff-2fae2dc2ff38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc5fb971-fb3b-4c79-bc14-25d5c6b1d9b7",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6843e45f-b6b9-4dd6-8abe-e4fb51b72fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e534696d-e891-458f-b6b5-dbd31a237456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7098d524-4c2a-4d2c-b3d4-99e29ff34e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe642c6a-e270-4cc1-bfd2-b6749461546f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e306391-df1f-4c73-aa3c-47dcdd5acc81",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ffddcd6-6299-40db-8bbc-a7906f91740d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fccf873b-f21f-4253-bc37-7833b0fe281a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c57999d-2afe-4f02-9289-1082739d29d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "1003655a-a88e-478d-8ae9-b83a9cbfe8eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f92545b7-2146-49f2-a8bb-b73aaafecec2",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7420b67-b417-496d-b5eb-58c6842f0711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b38b78cd-48fc-48dd-82c5-51cb113bdc02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05796c84-9ab7-41d3-b878-f1f3900612c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8746b738-fb23-4cd4-aec4-511cdf1e0cda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ade0c861-217c-47d0-8c7d-c1ad5a915617",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4952d24-a792-4599-8385-4b01068fe914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb21aba2-e269-4f29-af56-f2b025dec2e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4603a927-dcd9-4603-988e-57631214dd1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "25dea347-e12e-4429-ba1a-472f16f5ef7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c13d10-c945-4c08-89c8-c6f977181684",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6824aec-e5dc-4b29-a978-c96154582d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79b3369e-2c17-430b-8c14-5875828dcd94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "788aee01-b097-48ba-af42-d2f763b9d7b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8756d58-3a0f-4f57-bd7b-b9e37e0fa69c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbfdb034-9353-47ac-b3ce-2c6ebf131a06",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84807dfa-a594-46b6-a3d1-a3e43d4dbb49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0954bdb-fb92-4e9d-8b8a-1db3b29d4aa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13b418c-3dc4-46e4-bb87-0e6e14daf0c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "37e59c19-7e30-4307-99db-86dc4fbb9237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9897e12c-954d-47dd-b9d2-da68b81ea24c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f8e821-e3d8-4754-84e8-49b74be5245e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e73c9bf-3fe6-4c95-b3c0-2a46676b7d3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49008268-79eb-4942-80ad-2b43698bde9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "315eb205-5b8c-4a28-99d6-ab59664fa5e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a0273b4-930d-4e7c-9c0b-5770b5457735",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a5f0260-972b-421d-ad4d-14e19fb134ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dc9ac84-dad4-4959-9fa3-567fd47046c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e88fc73-755b-4574-aa6d-4356f4f0ee84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "19f7f82e-c4b3-4d4e-8af9-33e20144e778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f97218f0-a5a9-403c-b1c3-6b76fb7e6b41",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efd10996-acf7-4e2c-8237-243aa06b7282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5372be4-b086-42d9-86aa-1ec181eb6a7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1127b39c-e0d3-4c2c-8797-44b1a7ab5d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "14b04320-fb97-4b1f-8ebe-ed4e3c6c76fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5deff52-0b7d-4369-9ce5-6d00d0b108b7",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edaec62b-c5f4-41cb-9771-f22dd14d1aa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8da05c5-b8ec-4609-9e92-2c24d01283bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c12e4702-1e7c-4ae1-bc54-cd267f805d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "89ff7745-d7e6-4706-acdc-717feb90bb47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a93e177-9816-4b17-b9ce-46aaafbc40a4",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4549ae2a-f3c9-480b-bfa1-b4a6f38dcb3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "864e412f-a940-4b60-9c23-29a3f3d4439b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93213048-349b-4211-b28d-2efa884d2332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f034264-9ed2-4638-a216-b1f45f651446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a7763f0-0c52-4245-b1da-b65cc2b452ca",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1dd4def-08af-4281-975e-c8099020fc11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "324c1b20-0129-4173-b7d5-c3cc59ee2e38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "366e5546-99ce-48d3-8879-a982c8a81fdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e0c9e17-4ce8-4185-967a-f4700d5d3d87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc7d2c0d-aa64-4bc6-bad2-e363b909265a",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "945b4ee1-c958-408f-ae0e-c36fc5001edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f130367-9493-424b-b7ae-3d2cbe54376a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e9ca5a-3074-436c-9952-02d9bff67f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dece70bf-3563-466e-87d1-9d6717589243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c04ce68c-0069-4dc9-9e5f-35ccac9f6d09",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdda12fd-e2dc-4981-8413-dd09289dc2ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f20118e3-9b19-461e-8930-2618a62472bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "204d74f0-dc08-4793-b18a-3a8cd4f4acb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8e0e774-71fa-4ea5-a04d-543a52ebbf5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1478850e-6a40-4afc-b7f5-c0a98e184564",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d4ddf82-447c-4f61-b8d4-36e4c411e157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d422b399-02c1-4045-8c84-a5766da93651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdc7432c-e90c-4578-8fae-4fb13618c6b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5daef03-fb60-4051-a46b-2dca25e5ee5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e45933b-150f-4876-bbd7-0067b108bf36",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5ced4d-1f2b-4505-90d9-de4b57a70816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cc19b8a-4502-4e76-a92c-1d525660d571"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c722a8c-7b4d-4a26-b9ed-9b4852083ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5231a2d-b052-4e0d-aae0-014950a1aa2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "176d3fac-f96a-48fa-9cbe-f8628d88d6f2",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "769485f6-eec3-4cd2-8604-3867468c750e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e9a7c80-a713-4149-824c-59265bd2a87c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f628621-b5b2-4462-b00b-7506d885cbc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c709f327-3777-4ac5-b27d-78726d76d3fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4aae3cd-95fc-45eb-bc70-395cf47d208b",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ffbbe27-3f5b-4e5f-8684-634b8b014a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7e55867-0a6f-477b-b028-ebfb03b19233"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b492284c-f599-4893-9c47-16416494ba03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "78905773-f526-4bc7-bd6c-fbfc74da4101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e41a58a-6439-42ff-beca-61538ee78c83",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9454165c-b75c-412b-883d-34075dff037a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99eb5702-37f7-49e5-a475-7493830c439b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fb12212-4b9d-4cf9-a7f2-7d5206a47552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "892c263f-2766-4489-9f6b-2b513db6a253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "711e9586-8a1f-467a-8513-e1b77a885d79",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d6f87db-eced-4b1a-bfdb-98192b919c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "945d9050-1e2e-4e66-9e48-4881e922b746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2984d997-65f1-4a88-a5ae-da92e4584138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5841109a-f54f-4d0c-addd-0ae73fb40ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e3892ad-3693-450d-921c-800b50cdc7c7",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cd3a5b0-59c9-48dc-9823-0fbe0ccfe9c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "117d8f0e-490b-431d-ab7e-af86d69d9e60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2007e8-5b22-42eb-bc09-217f16b39d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3e4caca-c3fc-4e94-9a8e-e5ed03b6f469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37bf776f-72cc-4847-bff1-f39417e222c1",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea2e9192-5abf-4d13-9dc3-376f834e999a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5015b23b-891e-4e99-8348-f5efe2671e9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "654b9b2e-3582-4845-9b3e-c31186e1ff91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "33aa7084-69e2-4a85-9418-94c77bf4c173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "283097f3-f9bd-4ea2-ac61-c81405a042f2",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "495f16c0-2f55-42d4-938a-f14f100bbfff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10e55fc3-4b0c-4657-ad1d-f2004a768b6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b3fffa0-e716-4dee-b4d2-e90a67557d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e119832d-8818-4f39-93bf-5ac373040b48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6ed0756-fd42-47da-accd-c2ceb004fd55",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf764241-5137-422b-af88-308406e38733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89f61ce4-05c3-4981-8f9c-78fffb3bb400"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c329c97e-633b-4893-a379-65b3121f5f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "880bc3d1-7df9-4ef4-995c-174423e47cf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b16503da-f3b1-4eb1-af20-30741f946218",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "107989e0-52f6-485c-98c7-851ac0b1970d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d1a446e-aeba-4f67-b99e-45463726a855"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdbb42d6-2b10-40a8-92a2-ba81ceb0553d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "89c59883-f259-4396-ba79-770802d940c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c368e475-110b-4bd5-ab17-373ebb8d7f4c",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c64348-0ced-45cf-ba0f-dbc02a91507c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d994e40-73f5-4212-bc6b-38b336ca62a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c86c77da-b62e-42a9-9c6f-8956ab50b9f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e933d0a8-4c57-4a99-b082-bafac51a6120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce448c62-efb0-4eaf-b551-5c3c1ddcfccd",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9031f4e-844e-4cd9-a768-d57c54ca1a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feeeb584-b53e-42ce-9abc-46bfc82de485"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66014a36-b0bd-4901-bea3-a93bb60a69fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b625d62-b72e-4ae0-aaed-7eddd3fff6df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1dcb79-1a3b-4c2f-ae7d-2a87d9507291",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ece59c-ffe1-429f-8bf4-005de153e85c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "813fd050-626b-4fc2-b4f6-68ee83371039"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d59807-4065-476e-b379-e29594457638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "424e39b6-2a5b-4063-9cac-3ef3519c3ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae98c54-cf2d-4ca6-93e7-846c2a9b608d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d47c38-13d9-496c-a662-04005ca1b00d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d28974b-3ad2-473c-b260-724e58cd3631"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4ec56c9-9229-4623-bce1-44faac452139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d390b31-5b9e-4fc4-a95a-de018df1d18c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "768e2847-a069-4d6f-9c0d-7fa04107bfd6",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9612e6e-9812-4557-822e-66a1207a8ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cba0c3a5-b967-470f-8c4c-d97393c7d6a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec4ac02-d2f1-441f-b11c-0df5e9a37e79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9be3879-3928-4b93-9943-ece3a47d4724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edc7bdd8-5e97-4255-a787-1716d7c5c76b",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f0485c-da60-49b3-a771-38b6f8339b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c6b1b01-751e-4ea0-b131-192e1f63667c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90304eb2-8043-4edf-84cd-775f1fdd6401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fb0079cd-483d-46b8-8176-3310c98a7d20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ef69a6-c2e1-4196-a127-50927a522b9e",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "979baf6c-4165-4e2c-8ad3-ce56ed85d61f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9063582a-4a1a-4373-bee1-dc3a50ba99cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3580fd9e-d6c3-473a-a074-ac8c9e7f154d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2b1ecb19-0657-4cb2-a07c-0d4aa4726d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc5e248-b3d1-431a-8d77-fba92cc28fd6",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f118658a-36ad-49d4-ab56-fc07a0919f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f6c8394-5deb-47f0-b671-09724f2a44e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a45378a1-d976-49cb-bc06-d64e0a10eb13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f10a540-1997-466c-9704-17559ccd4a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ba79b24-4bcd-49ae-a1b5-a27cab7af796",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f750bbd1-a5b4-42ec-ad1b-da1b8e89de80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c06ccbe5-712a-4ff8-8040-70247d672c04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dde3481-d7e4-4955-9b92-360e7f6c5dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4937c88-8954-4710-a4f6-5da24daf9aa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39fe496b-e0a8-4263-bddb-2de59acfba7a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "989ed860-2d01-484c-ab68-c12a69f07d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e925d5e-20b8-4229-89e8-447c1902773e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0dcae09-92d5-4946-94fa-924f8a04ef75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3eaff999-72e2-48ef-b470-c35ae58a4e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1349cca-0c11-4d18-8639-270808c85329",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb7bbf0-40e2-4ed8-aac1-07f4986dd459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f26a09e-b25b-41a6-9d75-3bfb26010bd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8032783-5636-45c2-86a0-ba741cb87f32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1937cef8-3bb6-4235-95bf-a8d995375744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "448386b9-bb73-495b-b900-02165bf971f1",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac5242e-0c61-4239-b3ee-70895d95cdcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d36ed57-6cfc-42d6-9372-04272727799e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7b8e5dd-6762-4751-a539-b55ff42c496b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c779f01-48f4-4bf7-b257-dabbfcf7a689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef8e4faf-7973-4779-963c-684da74c3865",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50ece00-c4a1-40bf-aa15-386f32584745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9e18d235-7e00-4744-854b-ec707e3dc9f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e9060c4-1573-4f46-a22d-9c88e1bbc298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e1119eb3-119b-4505-87af-c13737909469"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "84e21626-6726-4d68-a3de-6c04677b89ef",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "43b37aea-87ba-4071-86a1-a61474457d57",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4436b10e-3176-4de0-8c44-8a221b2d473e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c05b7908-24c5-4484-8769-b5182306ba7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfccd158-5cf0-4176-9ddc-bec650c7843b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "4a08dea7-0bc2-4a89-8937-22b6c6bc389b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ae5ed3a-6de6-40b9-a79a-de8f67c50780",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "895e4831-bd2d-454e-8755-66fd5ffe2261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce90ca9a-9820-4320-8b31-2e7c681f46c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa45e214-8185-4371-bad1-4f283e699c0e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "2ec6ce8c-f30d-43a8-8dd5-e58f796e7ae9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6ef94271-6f21-494b-9e5c-5049a460be80",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "373ed8cc-7ed3-4156-8b95-ec5192e1bce2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ef9f0bd-9e27-4fee-9bf7-b443d012f440",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42dfc144-8d56-4c53-a350-431fbe364e3a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d67259bb-95e9-44ba-9d3d-890e6697967e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c8ac76e7-c4cc-4712-8226-5e2e3df9b347"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8cbe90ff-ea51-4dcb-bcc7-60d65fcc66e9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d4e06a44-6ba0-413c-8036-21304c262247"
                }
              }
            ]
          },
          {
            "id": "f25d576e-6175-422a-a92f-53d5a6ef16ea",
            "name": "Positive Testing",
            "item": [
              {
                "id": "24b6b0ac-c2ae-4bde-ba0e-7a40b90eba64",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "525db5e6-378d-48f2-be4d-9fa512ddc385",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "676a9ae0-31e1-49fc-b3fe-520976553e6b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "144f636a-ac4a-4c6e-ab43-162f4deb7fe4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c99cc7f2-1bd4-45fa-8e35-08369fe00ccb"
                    }
                  }
                ]
              },
              {
                "id": "fe3bf216-bfd0-4958-8d32-a4b2d2ddfe69",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b898283b-a22e-4da5-b7da-1f309ec0d1c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aab61dd8-2776-4d00-9e62-49e36e3fc13e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "441cc3d3-3a98-4f9c-b42b-92b9d9c0960f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bda97c99-2cf9-435f-92d6-328f4424274a"
                    }
                  }
                ]
              },
              {
                "id": "d5376553-43fb-471b-86bf-6eda48acfd1c",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2acb5a77-72a2-416d-9e21-0a50f02b75a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dce8566e-2288-4a98-9b8a-85330f2d927e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9cc3dcf5-7bfe-4301-9a4b-6b681497fdbb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "6b287bb7-63da-49c1-b877-ca655319f901"
                    }
                  }
                ]
              },
              {
                "id": "b290d8d3-93b4-4d05-a52c-fd2f93901a92",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "93f2d04a-ac1c-43ea-a32d-1b2639b9900c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fcc38ce3-feba-4672-af15-b0759d8625f3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33ec8e88-ce12-4ecc-bbe2-08e0c46320ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "07d8ca78-6100-48c3-a692-6d4cd84efb8b"
                    }
                  }
                ]
              },
              {
                "id": "a84035bf-38f5-460c-a30e-4a719261df61",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "280330fb-8712-484d-a0e1-b7d324bc1c6c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0102a4f6-159c-403d-9974-fd4d3c0a3aad"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a4a40ca-045e-4d33-923f-f9e064597a3d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "35cafd08-7444-410c-8b0c-a0b4cc3cc8ba"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e8647050-0a07-4459-9351-aa12a1c0878a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d69035b4-2934-44f3-8fe1-2f5dc29ffb80"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f78c28a4-84cd-4f84-be92-74d2bf5df7c1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e7c55e6a-c066-4c11-80ff-43d2c8c0896a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1c00d5bc-448d-478a-9577-bcb4668d0166",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "3aa61110-ca5a-4f85-8d41-0523c6a316cd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "257c59a9-468a-4c86-ab28-95197cb5ba63",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8680c73c-9307-419d-863e-1cf676310efa"
            }
          }
        ]
      },
      {
        "id": "a6d319fb-0dcf-4051-90e3-cd73ddf50c2f",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "7bf19b1c-41bd-48c3-bd9a-fed021cb0668",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b883c523-c3a3-43fc-b32b-198d22857450",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "74ba61a7-0d56-4fff-ac6c-9d7209b2f417",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec8e2d93-48e1-47be-a9a8-5f53c0fd8bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10c6e4e1-3042-4ce8-9a6d-4d93a519b32f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bb49ae4-ad90-4967-a8c2-4a5d0db78517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ecc51541-58ab-4efd-bc61-6e0edd3997e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f87d894-be05-4361-adc9-508900ac0c7d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d241483-9f1d-4b0f-a0e9-a8252f8f5f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09505f8e-6e11-49ed-b0a6-98ae7ada04f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91960c93-f631-475a-b1bd-6e4843164b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2709c44d-c0ce-4bfc-b17c-a9147f603e18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14f04a2d-1417-4ccc-82b1-6f7e9856c825",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "990d1659-d752-48ed-af78-4318fbd91ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b671f27c-b354-4662-ab6e-86ac878d2460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "561afe57-f70f-41ba-b7eb-54c3811763e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "df4632e9-45a8-4660-89a5-9f015ae6d0a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7921414e-e679-4959-946f-a456dc993595",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90064cff-7841-439c-9937-54462a61506c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c339b30d-d02f-43c9-89f4-3132116fe034"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed49d77f-ea99-4091-ac88-e2bbfe842aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0275b15b-862e-41f0-be24-6eac11c861fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "452db141-a4fe-430d-8014-7a82257d5809",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6592a8b8-dab2-4d8a-b952-02a7a2f5d476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "002708fb-212a-4c19-afc3-8cbb799abe00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e934e3ea-0d79-4096-b837-b624daf67c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7073469-209d-4306-8bb6-f6e1144110fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd1cd696-bd38-458a-88e4-dc27ab850b72",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f085dc2-3405-4376-9a5e-470506615656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4b67a82-7aca-42aa-a020-bb6a20b3b594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f259ddb8-78d7-40a7-bf7e-729343ff4879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "07abad5b-1362-476f-8d0d-a12b55a114df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "227a2dea-4c02-4b8e-8b3c-588180347865",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2587a25-6d4e-451f-ab72-084526c72362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c31ebb91-b112-48ca-b2f5-b4f1c6506f0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68384fe9-75d3-46c5-a970-09643555475b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1636b46-c0e9-4b6f-943a-0a5c857d14d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e53ee43b-02f0-4e0a-8def-ee227c212348",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5dd261f-4b51-405e-b8e0-b3392788c6b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9c204f4-fb48-4335-8945-7d7f53386892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39bcda04-75d7-47bc-a66a-f687ec497ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "adb100b4-c12a-44ec-9832-a6f97555d99d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd89bd4-5501-4380-a476-eb0008dc349a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f56c3d21-9a90-433e-82b8-96c3d239904d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51c43d4f-b6b9-42c9-813f-a9150751830d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56de8ff3-d391-4e4c-8fa2-f3f1239f01d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "45f5b5bd-f6c9-4ac1-b50f-9b0f476c36c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ad8411e-7a38-4e69-9ffa-3f9f519f9008",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89799fa6-fb98-4985-872d-0ee0b459a5df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "920009b5-964c-4563-9724-58a2dcd97f8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02d45765-6a06-484a-9728-bf4bd3156ee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5bc3ad9-2ad3-428b-9b6d-2c41d4ed3ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd1ea7a9-1c8a-4ef1-bebd-a34db4f13666",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0906411-bbdd-4d9e-8305-99b3b572d2ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cf83441-d764-4af7-a1c7-ab0a2fb5b7f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c817df-95fa-4288-be59-1f0bcf612727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "920e7cdb-2a3a-4086-b89e-be6a67a1d717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b4c0988-cd56-4f0b-8f0a-1641542e5a73",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc152961-a249-40d8-8ec1-bb0f96059efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a656426-ecb0-468f-b47c-ef9601838aa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82298db8-52fe-4b44-b559-505c0d68080d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3a6f1a4e-b4a4-4a53-9709-2601862530d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d17e156-d1d7-4e5f-8116-2c809cd95d0e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd079348-6796-48be-9583-be6db8f97be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23e24bf1-118a-48c1-aa3e-2c39f0b8f30e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc748f1-ff9a-4e54-8869-73ae9fcfa4ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ede23630-d40a-42ca-856d-e7bb05a4d04b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d8c1977-f696-4a7e-acdb-00cbafab1386",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a2767b-1043-4fd0-9213-31bf5de77cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff1dd9a6-b23f-49dc-8c27-9a0df0584945"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e23b9a2-8a59-4252-9484-0b3533e899a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "74677108-806f-4f8c-b114-87d5f8247fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c8dc36f-6ed2-4421-909f-b8b148508a01",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a36de87d-f9d1-46e2-a688-6dd086eb739c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61b016e8-05cd-454b-9ff3-77422a2ae482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c1c897-48f8-435f-91ee-7330796b19e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b3fb87e-f1eb-420a-b8ad-339d86823d64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc716378-5e3b-42b3-811e-d75df23a1286",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "019f3560-36ea-45bf-82ae-869c0129de0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdcfadd9-4293-4b2b-97c6-e431b73c154e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25bf150f-e78b-4c08-8be9-1a6987917cf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "411e956a-4394-40d2-851f-252d1f78ff22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c77a6274-e813-4389-a090-f8176b6ff0b8",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22b25350-f27e-45e5-9315-c87cfb8398cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "766621ab-8bd0-4075-8b42-5e78bc33f95b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "783bef9b-1f09-4f03-bc97-2bb273794f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "49e3c9c7-03fe-4765-b34d-a71c5bbf9c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9348dcd8-23f5-4d55-b247-fbec815bbb74",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e714f2dc-05bd-4bd8-8edb-8a67f5b50b5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34624b9f-9971-48e5-a62f-00dbba0fd1f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "322dc7b1-e9a2-4ca4-b979-6046c2bdc040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b9cf25c-8c4f-4fae-bed0-459cdacfa82b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afe86ef6-95a9-41d8-8a24-5615b55301d9",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "526f343c-0cf7-42cf-ad41-147a30e89612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7eca69f-0a15-4566-bf21-4d25da430905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25793e2b-d112-451a-bf12-a7f9c0d1f51e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05d35115-d2e1-4caa-bd56-da13b696f8d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b18fa7e1-e994-480d-b1fe-b48ab8b34448",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b20e1762-6ad1-4ca5-b122-0ce1da59e6b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f5d72d6-792e-41d5-8425-0490b1f52e1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0efe256-49db-403b-be2a-cc7962c6a630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5ed73df-68d9-4e5d-a81a-a265e5ed203e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9492a15-2692-48cb-84ee-ddf051f0fb3f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b6b373e-5bb9-41bb-a4e0-581a71077c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea743a93-9d31-473a-a435-a30fb90d367a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b565966-0174-41a2-857e-f209098ce479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39140e5d-0f27-4f8a-b7bf-a06abb0f16b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78faa23b-12dd-495e-baa3-7a2adadac0e5",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4c5c4ab-1700-467c-8e8b-6310363ad04e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b3aea66-9963-42b9-8cee-6525b60461ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4dc84a1-f361-4138-80dd-df695346cf00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7137d9c9-bac4-4261-b418-faa3ad1c9a52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "868de6ee-dc7d-4003-85eb-e007de12aec8",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "310b157a-4403-4028-a332-5d73b484c839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8204528-8109-40fe-b38d-fd0cf2962236"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a64f8c3e-c215-41cb-9556-c88b98327629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fa42f80-68a7-402c-ae6d-2a75352e2cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bfd01b6-860d-4e9e-998a-ccde204808a2",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a0065fc-96c4-4f67-a299-9366ab17dc93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2f51a13-8cc1-460b-aebc-73f8de64c9f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0738f5a3-004e-46bc-9f78-4c07767357a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8663b9e-236b-4ee1-ab6a-f3e4d95538fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40300c6a-a676-44b6-8f07-8f74c302a271",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d27e5a36-db4f-493f-8031-acfcfe14606b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ae99cb8-ea11-4992-bf91-e206829cb4a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61f02e27-942d-4f23-985a-10c8e9a3b020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f2d2432-138f-462e-b039-fb3fef787592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "304d9558-e031-4812-ad56-c15a24263597",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65d5f838-b380-421d-893e-99d0d0c0389b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "676986b9-c681-43f4-b5e3-de257a895502"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e0b77d-e680-4da1-ae10-bc94e9d92a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a09cf86a-f13f-4bf8-96b5-db3e956d43e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f18abd9-e39f-4829-9f8f-029f6aeda934",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e00e8e-8f84-4840-8376-5013c2377a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19e23f62-2032-4d09-994e-70bb1ef11a05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e3912d0-63ea-40b1-aa94-2a07d09cc6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87f50343-2d61-4a90-9f91-2ca7cc3ad109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52eedbdf-0ba2-4c49-90af-2cecbc81db30",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21818c5e-5a06-437b-85e5-2d1e2130849a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e543067-1d1f-4756-93d0-f3993d44d739"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa1286c5-5025-44dd-853f-15a562bfb046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ecfb893-8208-4daf-9bcb-1e088b5db88f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f353ed64-6f97-43c9-aec9-c1dc4322b26e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c969ddd-e531-4ba5-a262-5f14f8a93054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee6d0201-699e-4b8b-88e3-1d2be96e3008"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d9fd80-01a1-4b0b-8686-93ec0ef6613b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "169beb67-d333-4213-9edb-d83ddf593a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e662c36f-a9f0-4a34-8fa4-a634695d65e8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a525451-3bbf-4d38-8c59-550f957743f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ec3153f-d114-48a5-855d-91dd585f6d2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5428709e-ccf9-49ca-9c1a-295e4e336c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf66fecb-a2c9-4578-8eb8-f380a396e697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb3b387-0242-4f80-8d06-6cc40112f582",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f0ad381-71f6-41ad-b2a0-9955755ad115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1397056d-9da1-49b2-b989-833590289cfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ef35b54-bb0e-476e-aeef-562ed05e21d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "028d192d-a33d-4007-b7cf-52d966a8ae2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10bb518f-5f86-4c41-8a78-399f6dd87a9b",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa5289e-53fb-4941-a195-389f6c7e65e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb2d6d4-df54-4679-a3c5-065701bcd338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caef1156-4b09-49b6-93d8-cdc99ae262b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70910582-c3a9-44cf-8e6d-e1d5950a9cea"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9c0546e8-42dd-40d9-8a19-8d660e0723e9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "642f8292-b216-44f7-9e3b-182ec5696b89",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94a82c61-7483-4db2-986f-670b095e85fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd109be9-ec9a-4c09-bab7-cfefd9b6a7b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f84db5e3-14f8-461d-b361-133218351303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "701e51fe-9793-4b61-9078-b800a7f2346b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8771a18-5f9a-424a-b610-9694e1aa8e86",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d62e8ece-2b48-4d73-9b6c-d09f09b1faf9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "fc930dc1-0843-43cc-b9a3-108c93bd720f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "289b3bb4-2de2-42b9-aa21-bc63c31714bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0e45db3a-cbe5-46f2-84d2-a2a677b10bde"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c3ee4fcf-b434-4ca9-ac1a-c8af6c3ec9c4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ffc6585-1eca-4f0b-80a8-e07d8328723e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d32fbd38-ebeb-44fa-af83-90e102020355",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ff596de-cbaa-44e9-9217-b8fdede6534a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0dfb22a2-564e-456c-af04-29fdf37a49f8",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4de2d680-6d96-4d18-b8cf-1d8f55587dee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2c156e11-dc59-4000-b732-7a463a8cefff",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4069f460-54ff-4cbe-97c2-60d5856c6a9a"
            }
          }
        ]
      },
      {
        "id": "a82ae66b-dabe-4176-bce2-174ba3ff4c25",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "3f238cde-71d8-44b1-84b7-3a8309c6b1c8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8b28e2dd-ec5f-418b-8260-f430eebf08b7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1cbe63cf-9bd8-4ec8-854e-1dad12cda09d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e5676d-806e-4289-bb17-e1d3e8348456",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c783736-400c-4ee2-9bc7-6f745615ab38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e8bfc78-83ff-4a65-917e-dd0d26803525",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "888a5ead-d56f-4f87-bebc-91b0396e0af0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2973b33-906d-464e-90b8-ebd4f64c419f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af7d58b6-8e44-44a6-97b0-46ffce0a5bc6",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3295cd41-f808-4229-8263-abbec011fd4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c091d05c-3284-40ad-a242-17a0e7abe7a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6ad4217-0cba-4566-8a11-d36bb142fcbf",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7eaf06b-2c54-4ac8-9867-645e69377e74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab614bf3-7b84-41ab-b76f-c4c6b43549ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c39fb31-5f81-4313-9e44-7af1e05f44e5",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe558f1-1552-4ea6-bc86-fab31fee2631",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "346be05f-6e8f-420d-b393-c8c7cc738fd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a68677a-fdfb-4771-8e6b-c3b940f7270a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c19a1f0-b583-440c-9e74-770e1e31a91e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffaa214c-fb81-4bfb-86d5-b3e635fd0c2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e327f971-d6f7-458a-9b09-fa4b01e8c4dc",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83ade68a-a1fb-4f5b-84a2-0f5019e870f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8253aa8-0779-4bf7-8876-669480f37b38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f58961e-5f7b-4d19-8e85-74d6b4888b68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c892b4bc-52a1-4efa-808a-155ed17d4faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f99457cd-92c3-49c5-a01c-e1f41c354485",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "755b44a3-8c6d-4c42-9bc3-cd7fe27eee27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10407fb7-4c90-4784-b890-edc76bd2397f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8362d372-a906-4c48-80b9-25e9d65ab75d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2ab3db2-f21a-4119-afba-35c302f309b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f448002-42a9-47d9-bc0b-7b55d87601da",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba26775c-21b9-408a-a586-5b5cdbb4efcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cba7a82b-b8e4-4aa7-86b8-661676c12072"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e651421c-0f1f-4489-b6a2-5171e3cd93fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "377f818d-2702-4455-96f2-142d2ab74897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48153453-e256-4258-acce-cdb99347bb74",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb0e4e9b-cb56-4b99-b250-8d44fff945cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "548a437d-16be-4ddc-8920-992a9a017c39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d4d9f5c-a637-485e-a87c-9c56aaa82abe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68ba7d26-f6be-49d5-b46b-13555c874a86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95a78c31-259e-40ba-8520-18ceb281c8c4",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21de3069-bde7-4942-8b1e-79211d034985",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76d8985c-35cf-46c7-b9cb-30b5091e1b73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6e916c9-33b0-4740-b0f6-f616de78f709",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab3e9030-540c-40a2-9d86-6e032ebfcd24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "476fa0c5-f5af-43dc-97e9-a6baf0d22853",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aacccc26-07d2-4fc9-9693-e2e2032b0dea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b76d6cf-747a-401f-baa2-5afcc1e57ffd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f681f068-3813-45f3-86f6-bc25765bc87b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7427133c-6a8d-43b0-817d-8309c4ec4936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6b15b41-b032-43f8-812a-d1bb4e1aba5c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44ab9153-a798-4c0a-b126-d8656632c7aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33ba3672-a73f-4ca9-88a2-3b06579ef8d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a99f11-ebd4-48a2-af34-c4e827357f86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0607b60c-bc0a-4eb7-9361-b88741e817fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab137858-50af-4e9f-bec9-dd6e8b48f09f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cf975cd-8903-4c57-9179-9affad96be24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89a75ff2-00d8-4825-b69a-841ad6a4c953"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c88b1d15-eb66-4153-9561-6c5dce8829e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b5c3964-07ff-4526-9e02-d29973aa133c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d49d8e0a-535c-4ba8-9459-f231fb9a7e89",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438c129e-dde6-4fa4-8d8e-d6978b0c55ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7737eda-72cc-435e-9408-cec69652d301"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "218492fb-4207-4642-9e7a-9137b1a989f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "886b8773-6992-4108-a5ef-1213eef08d0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fcfb965-499d-49be-af41-7955e2d70988",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bb7baf3-10f8-4ce3-8b14-19ea5790e029",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3406452e-c3d2-4a8c-8b58-b3b162d6efea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d3d0ce8-b547-45e1-847e-006b8a593dbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88aee6c5-ae0b-4a0e-a047-d1aa8e06fe14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8eea0a1-2908-46a7-bb85-0728fece142a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886a92da-91fa-482b-8599-f1dcae66dbac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed138eb9-bdb6-49f2-9dda-8bac3ca02a8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "853a120a-1b73-422e-84e5-21b1994654c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48f4d817-97e9-41bd-8f10-8c79fe7e7423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "803241ff-0da4-4b1d-906b-b19d7cd209a3",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a35e0a0c-59bf-4aad-b0d5-27b41abcae0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb2dbc7b-9121-4248-96b2-392e5e29399b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e514efef-7ce5-4d42-ab3d-f9c03396a2ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0db1a9be-a36f-4565-94ae-a4a87d299092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ebfe4d-3514-4662-bba3-b677a9aa821c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3851093f-3538-4970-a2b4-64219b05aa55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5af0aa4f-a842-4443-a71f-66a44f9b4c72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58f8d4c1-bc00-4d39-a4bd-3e2bae7563e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19dc01f1-5fd0-4619-88c2-4bfcafef42f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d21df74f-402e-41a1-a9ea-191b97053941",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ab41b8-4810-465c-8218-513ae64c149b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db38d0d7-ee7b-4591-b32d-00dd4fbef760"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "621286ef-f81c-472d-9dda-d2cd92576c82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f16cf3ba-29a2-4b19-8abd-d3969388bcc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eaeccdb-a2f5-49ec-a4e2-418547431572",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4edf404-69d2-41d3-9e75-678f6590ee6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24c06603-0c58-4aae-ab78-35e13863de5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de6bc387-150d-4ed6-8e47-a2e617bcf4c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06ffeeb5-789c-40f0-bf11-be7edc19ecc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38054ef7-7364-42cc-9f04-71f060840452",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d1137dc-be97-4339-9e23-1dc3e4dfb767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dcc3498-a89a-4175-96f7-610b34a9adeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00b24488-49bd-4e94-a567-b2f15c5f0091",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca107ecd-fc9c-40bb-aa14-fa63bbd43f3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5519ab2a-9ca8-4ef0-830f-5ed0c60ff751",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2234344-81e2-4ac8-bdb6-f21bbd6001be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88078ebb-eb08-4c37-8e69-a5f6e1a718a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d33d5a-edd4-4862-b5fc-7e57da1a9da8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b537b7a-2901-422d-ad16-ba419a0a79ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a460377b-f6a7-4dac-a685-59bda0233cb2",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95025eb8-6593-40d9-96d2-7c91908f904c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e646f3af-53de-438a-997f-bab3cb069b4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b5c120-88f9-4227-99e8-4e7a864af9af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce41e2f1-b155-4c4a-bf4e-dd069010e78c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f2c02c-dd12-403b-ac35-e6e17fea291c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d41314-ec65-47ba-8f11-045b17f4da09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c0c09fd-68cd-4ebf-ab72-44e3909eeb4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ac53a6-0e47-4279-be83-4774945563e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66088abe-53b9-40b6-b708-58b1cada2254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0cc3b82-e006-4c91-9f18-0ee5ebd300b9",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e435a03e-f935-4a7e-963d-1dac21717edc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15681ffc-5789-4b0e-b82a-b55a926136bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "913276ba-222a-4338-897e-2864c67405e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59e019b2-4b91-49c0-9334-2cfbe395a725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632864da-9f1a-42a1-bdbe-86ca5edb7b44",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "356aa3aa-f153-42f8-b043-d7b908ac6f78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38ec355b-edf8-4688-b87a-9ddba283eb3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f187384-4fb0-4a27-bc0f-24c7645331a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df0f98af-cd06-422e-ae81-b8b8e5595c06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baeffcb3-065d-41fb-af37-49ece0eb3be3",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af16826-b485-472b-88a1-1097b09c1815",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5383f6e7-0ffd-4415-b949-a4baa280a981"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d406d21-88bc-401e-b6d7-ec8302135a40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b09e063a-3f02-42b1-b2fa-24c2337e4b6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f38c3ee0-fa50-46b2-97c3-3e4bc18e5cf1",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10b8acdb-37f6-4bb1-a998-5bac5897407f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "463c8247-f721-43d7-9c6c-cb221023eac5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cfb6d38-a322-42c1-adf1-775c357d9bc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9cc4739-a5b2-496a-bcc8-29d4331e9fc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad6de78e-1002-4e85-b032-f9371b7eaa5b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb20173a-7048-404d-9696-ea93f1c8720c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a1057a4-08dc-4b99-b392-f4b5a6ee9160"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a455f0-dd63-429b-80c6-5b7e67327f97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f480859c-a019-4780-987e-1a4278853492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99aa218c-f4b9-4b5c-8859-73f2190bbb6c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccf88440-e2ff-4a8f-8a44-0be0601eab54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d19b3c6f-491d-4170-8228-e96bc52920ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "472b03e5-b822-4c66-a518-f6517e1652fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc7554de-9bee-4d29-8dd4-4194111f3757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b40c015-9488-4c1c-a331-3442eaff13f6",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ee5d696-9cd2-434e-830d-2dc7b387828c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66b0a62b-98c4-40dc-882f-9c1640054897"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3706ed-656c-4199-a1f6-610d7bfba713",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62a59d2f-6fd2-4733-8189-903d2fe92554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3700b7d-fb20-4d10-be24-6e223f4c5b57",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48528d8d-d845-4cf7-a02e-d35df0c76f6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "313cbd1e-1419-4f3a-976a-d804272ff8d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd65f487-3146-42c4-a420-cc84230eb09f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8f1b4e7-85f5-4e75-8a59-5dd3b81f2706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4761d16a-9a64-48d2-bd59-67c483781a3e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca5ab18-025d-4e44-aecc-975e6920f3d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f582d104-cd2c-4366-a665-96d289b7874a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b40c65-d230-4657-826e-4a94e740cf3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0486c35-2ab8-42e6-a3c4-310a03a3ee72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be41abc4-d977-47c5-8c9f-924f8d1f8e36",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de81801-3b7f-48a2-836a-d19a18615548",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03b6a412-2438-4207-b596-02d30d02287d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f223cf9-0ee8-4de0-bd5c-f8e2a49c1204",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f320577-0ebe-43e2-837c-a468a7776efe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88f26da4-6e7d-4bc7-ab66-7c23e9a23616",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a96ff3e3-3c6c-4873-b918-749cdce98f1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5b431ee-b53f-4d4b-bea1-a426146fc1c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9f69967-6792-46f2-ae6c-87084a569824",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "894131ed-2be3-45bb-b216-1fdbe15f4d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f73a37e-76db-4967-8787-b7233120d23f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f4c907-3f67-4624-b503-5e97118b2fa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e25d54df-9286-4fc0-aa58-f34430a287b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac78cbb-c79a-4fdc-a771-3461767917cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d65a2b3-445a-4d23-a94c-0af1a68d8436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b477daac-ce7d-4c57-80f8-2cf46bad3f96",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37e477e3-d03a-4360-8e3c-c56252829892",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18cf2ed7-02f9-4c9c-9da6-9544a47e921d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f80c7e18-7f72-48fb-895b-ba50a338a8eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbcae6d9-2279-4dbc-8113-779b09597b1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8882fa1a-96c7-45e7-b54f-8a316f52a0f3",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f63a3119-85a7-4e71-9291-ad24afe73678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83ada8c6-8648-4d70-8f3d-3c08105d13f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e0aebaf-cdec-4c41-a46c-a09e040bf989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d68867df-e8ae-4ef9-b3bc-01490c0e9f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11511f0b-1ac0-428c-9e55-2db2471a30f7",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ef942d-d8c6-4991-9e06-dcad32178220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b60f061d-71ba-4589-9d41-cdaef30aea02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9533e48c-0d6b-4649-8640-49cf592c6627",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "121fd9fc-de4b-4d48-b463-ab7936e364d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42983962-1720-4bb3-b855-cc08807072bd",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78a7d516-37e4-46aa-854f-5262a2a9131a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f289839e-5ff6-4e4e-85e6-85398e9be0e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa0355f-bd4c-40b3-95cc-215ac60159bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9fb7c41-ad15-487e-ad47-d0f9d347f5b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f99219fd-dac5-48c9-91c7-fce17eb7d8c6",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "473705e5-c9b2-4561-86ed-61863443e731",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dea7d00d-7e73-4b6b-b452-412875bc31e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eb0ebbe-9283-4c8d-9d5f-f2dffe9c5561",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39d1abfe-63a1-468d-958a-9e4bcd3a906c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "589f393a-a671-4d06-89f4-cd6bda060001",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "213fc609-ff0b-4c72-a11d-6297e6bf0298",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e24c785-ef65-4da5-8659-dbf718306809"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba10c77-5b04-46e4-af34-74243aa54ad7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4249eaa8-2ace-4b6d-bbbe-0b4e2658e6d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f5e2773-af7c-40a5-b031-77682b06cf9a",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc926dad-5b30-41b5-82ca-71f7814f91eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "793638af-0123-4e8d-a48d-6c83ac930d62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56d01da7-1abc-4843-8fbf-a07308fb53ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c941a7bf-ef86-4bec-a54e-eb0d174d95bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "011e8c72-1ee0-442d-9bcf-f0626946d57d",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04534893-8140-44b9-8ee5-e6c87f16ebe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "198076e6-0aa9-4d4b-b2a2-e2fa670f3bda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca8cd5a5-9845-4e0f-abab-9fed4eec78a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccdd1350-9415-460c-8bd3-83a2e0822e5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d7fca6e-df0c-4e00-b4d3-7681c41649ca",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1afcc0-3974-471c-b101-70b2cfd38f09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f7ffcf1-a854-4bbf-8fe3-eb2b63a5b5cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "659d5b68-0d11-4d66-b499-f0d7033d1c7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3462e16b-808e-4912-8392-a40797ba1a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b7acbe9-a04a-48e7-9d15-f9574fa54a3a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd6be1c-34fc-469c-927e-e008590068d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d99a548-421e-42a2-b00d-9fcd8c15094a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca5ee10c-1cc3-4798-ba10-074fd87d25a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6f1366f-5908-4e11-9e59-9f995b2b4137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ac2ad24-874c-4e82-954a-875bab503bdf",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85f89435-4913-4612-bcff-82d6cf700cb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cc3e862-d788-4623-beab-dd5982d99da5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b260a223-01e2-4ba2-b7ff-ee30027e4b75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1984f04d-7c2a-4edc-bbde-e0e1c6621386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03f699ea-f6e2-4099-92e4-8c2bf9872b62",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a61ffcbe-c71b-42a6-a1b5-87944de17d68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2e81fa0-bc53-48db-a7d0-d849d6983e83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea16d1d7-46ac-47b4-8ad3-efa96f1234d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e005b047-182c-49c3-9ad9-97fdce5093f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1f42da4-fa35-463c-8aa4-030353d4409a",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e3c0e6-dc2f-488b-8b26-d8b6d6ff4cb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "268bef11-1d90-450d-909a-0ac15662fea4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ded59a-ab56-46b1-8eff-a0006e440ffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1606cf57-cb41-4096-b2c8-f7a4768886ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35f975a5-ca1d-40a4-b583-408176caf174",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d467c27-cd29-4377-b973-6740e47aabd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f4e6239-670d-42b9-9ab4-9c3e7bd178b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3567dc3b-be78-42b0-b23b-487f99769eba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "717f6f4d-e71e-491c-90e5-9f3fc907de60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f5baa0a-8d54-4147-8d0d-09fa8da8a193",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e70b81c1-4021-4514-99e5-f8f126562cac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fc52fd7-1720-4d55-a2fa-25102622207b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "742fe75d-f5b3-4cce-9fa4-bc196eb76cd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fb857f4-8ba9-4ef3-af1e-b549a384fda2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64510e96-9fbe-45a9-806a-af10842cda1f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3500f23b-3ca0-406f-8ea4-435e30b5b78f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3ad7461-5083-40a8-b257-0f43e7d94001"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f69523b-742e-4c24-aa2a-9c4377f3d8cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63a6eee6-72bc-4d88-b922-a110538986eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf5720a-35e3-4f1e-a7ea-be1352a50a31",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24466b89-3d16-4d52-9948-8a478dd7f01b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "758c79c9-1c5a-4260-89f9-1938e42ab711"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fbe1b14-b1c3-4cf8-b7d9-4231002a1f8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf571b22-d9fb-472b-8858-ffc1e490e28c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "014b7ec4-b47a-47ef-8f81-43cbe0e338c7",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92965b68-0dd7-48af-a429-60c03b83073d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3739e8d7-cd7e-4449-a740-a7552a07e9e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0207ad26-9f86-4bb0-896d-637ca40f216a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86076010-ccd7-460f-952f-6d6c8db34943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8266f10-29e9-478f-a5e9-fbd702e37181",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8994251-9481-446d-8cfa-ad2f8b94395a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0027e236-ddac-4f3f-bb2a-56d5b087fbc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d2c7d7-2b29-44a6-9390-7eb56bbc6506",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df63de87-5a88-456a-98c0-7cea415a65ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5313ecb6-2fcb-454b-a762-6018978e2860",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c454b2-3f1c-49d5-9fb2-490f1c1f548e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fd19831-4726-436e-8ef6-840a3f72882f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e3dd75b-3089-4694-9695-fb582a349729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45d8ca59-b276-48ce-8513-10310c186853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f988ce1f-2b47-4ade-9c98-4dc9280d61f8",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6f8cbd5-f5b1-45c2-98ae-19090d2ab97b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d81b3ba-d6be-4ad4-a669-3259978da0a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4b4960e-5a7f-40ad-9e2d-a92eba6ec6e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "746c5998-d0da-47cd-99d6-2c4ab54b24bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c9837d-88e0-4de8-bfd4-6a4e635071dc",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be0609b-c726-4fcb-bb99-733e10e461e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bac3312e-2318-44a9-af59-b3153ef9aaa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43c94d0c-7d77-4f4b-8c73-adb1d1f00503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f35c722-39a1-46f7-b9b9-8e7e74489180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc285eb-3c16-4f38-be23-6f070001f5dd",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "265c2ef7-e610-40fe-8bd4-f71a51291755",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23efd3f1-e947-4dcb-8dcf-112dca10fe4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c166fd48-5b81-471c-9e10-dfd67def33a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f12fe26-628e-4f9b-a77b-b3060ac428f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56ec79bd-f861-4b18-a216-5885acbdd5fb",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d37d2f-3b31-4dc3-8bb0-bb56a1278784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95a82fb1-295e-4e73-afb8-7bd79151bf51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d02d5d-f522-4553-9f6f-52d254395bf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd96beb5-9e63-4c6b-a46a-4e6bd40b5a6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71708909-fda7-449c-b691-ffda11755e16",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c6e06bc-53dc-4e1f-a9af-40f817afe2ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4af61e56-5169-4a4d-885c-01a3a501ddc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "956878c1-78cf-4193-99aa-17171eed045e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de43cdb7-d4a2-49c6-bf00-aa5a313ba475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e173744b-b4b6-4478-9b2b-96dd9452d1d7",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccd8627f-9700-4719-ac9a-0abc4c63c784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "816ef363-42a8-43f3-ab8b-0203aa7cac56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4f98fdf-0cb0-43ef-948c-adf462c960a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48a846eb-1bfc-4111-8511-40a6ae6032cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5be7045b-a349-40f5-87f8-534a5916ebe3",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "236d231d-68e1-4f8b-9b9b-c9bc3dcf6ff2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70f1e098-7bb4-47ab-93f5-748e75da4e4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da35a73d-16d1-47da-bf35-9534679b0600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a5d017e-6f56-4f97-9574-c55214e47a2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "344e34e3-ea08-409e-934b-b1f1ceafb451",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f156e3b-f5c2-47cd-b1e4-42827ca5e9ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "827170c6-ace4-48db-8427-e63a1b9d7b59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe2dc55-138b-40b6-af13-1d05c4cbafb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "418da57f-7aec-4bbe-9697-0f7a5fc0f53b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e1d1d1-4dfe-49eb-b048-e929a3a8e081",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01c8894a-d8d3-46a3-8e57-27c499de0069",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e15cc23-2cc2-481f-9307-81551daa352d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a439026-2c1a-4461-bcf5-40dcb6a15a17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2928d698-21e9-4099-b860-a8fb5837fa00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d303aa52-b03d-4774-902f-62424dd123f6",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a17bf428-1b44-4d91-a5bc-5bf344f1d2da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5764e41c-ad2c-480f-910a-a44363c8b449"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7dc9d96-3616-4914-b3e7-03d288d657da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f04543a7-6967-48ca-a68e-b1688dac942f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18d664ec-5e1e-4d4b-aa44-ee1c2eee23e9",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a8191ae-2dad-460c-8a77-bbe74b210c70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20fa0b9b-5971-40af-a3b5-0551be06f00e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "678a5fef-c6ca-49bc-992e-b4f99fd86619",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1e68cb1-5938-419f-bc57-57eecf350d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54cf2391-81ca-482a-ad0c-bc5cc6411660",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "579434eb-604e-4383-9b47-c07833697c06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d75839a8-8169-4695-a089-0f1361d35a0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "237105b5-628c-4948-93a5-3a7db180f165",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f774fb2a-b44d-4e37-b663-6e6064bf8b9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c3d1b0b-2ed8-41c6-ac11-a692af94fe25",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e54c8a-03fe-4102-ab7d-e9ed0b81c225",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "018c127c-2777-4fc6-ac0b-9aad01bf23a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd10165-b12e-4461-aaf9-52c4c2dadfcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfdb5750-4958-49d8-a463-d1c5350a3b78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a88bdfb-bd50-4286-8520-87374cfe73f4",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd94766f-c27c-4a19-abee-aa45cd0b5aac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fc53dbc-70b7-4105-acf9-5af81a2c4c71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd922d69-e82e-4805-abd2-2b52942697e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd5c9d14-4127-4d40-b39b-a9f2eb488e88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81309cb4-ab6c-44bf-858b-55ef054f6653",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a2d7a6c-8d66-41fb-bda6-33f0458bcd04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b6de791-735f-4e08-8eb6-6accb5ef1683"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f742e54d-76ec-444d-974e-fdce5410668b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8faafc3f-03aa-4acd-995a-45cb04a05074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1994c37-c95c-4190-b916-ed9a38723887",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e082046-29b5-40ee-b2b6-e48602e584b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c400fff-816e-42bc-a35f-0eff82c1aa46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee318492-95f8-4b68-89b9-3f10db863d27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5200c95d-2997-4789-9e78-2d65753f889d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a89e10-e557-4cd8-a85d-6d98cfa1fee1",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f55291c-30c7-4501-b907-c80dd0a34fd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c3d5607-0173-4f30-8688-9de47eac0b12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd6dac4a-cea0-481d-a8e4-9d969c4db18a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc89e363-1343-43eb-b558-64fc2385dfab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ab345c-0122-4e97-bfb0-230fad09ac6d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b7f5d12-e0f7-4ae5-b423-0740b6b2d931",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c58dc168-5170-49d2-b617-8296aaffed9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2630af31-2158-4f29-88ee-427f13becfd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "688cd267-9229-4646-a339-16ae313dad6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c77172e5-a506-40f6-b16e-9411affaa24f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c94c48c-0903-4c2b-9792-d673f9031f37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d244ab64-c9b1-471d-b16b-21c201a58090"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab60ae82-0706-48fe-92d9-f56263bb318e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9475229e-5f03-4855-937d-f4a4a2780547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "802128d8-4113-4b3d-8c80-b041ead4b21a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "205c53d2-46be-4874-b722-aac86b96d3cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73a3cea2-71bd-4500-b7cf-3e3df4488538"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e59ccd49-baf8-4e16-b0a1-975947260c16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "327d23cf-c8d3-421c-b90a-58da0694cd7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b3420c-0cd1-4ec4-b290-e701b6323da7",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa5a76f9-a2b9-4aa0-b920-7a47e1de7d6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bafce0e4-9ce4-4a78-927b-d427008f17cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a6716c4-df49-48b8-ae84-a0e1c3bb1dd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c59f8f3-1c2a-4e7f-9ee0-f9a28590cf93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07345ae5-ca30-4777-aa68-846af1664edf",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58bca97-6e44-4419-b63c-652f7e10e3ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51ef5cb1-8697-4138-ba87-2a0ed783579a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86de547d-9cef-4df8-b3d7-046d59b72f19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4d1adfb-4c83-4add-ba04-246417bd143b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f141ffa-cc70-41c0-b311-9f4ba9008f57",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c24469b-e0b0-4bf4-bde7-20a5f65fb18b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "616fab9a-0caf-4cde-bcf2-57fc13455c4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf2babf-af84-46e0-818b-cc662c972e17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c761bb5e-d6a3-46af-b491-1982c76ec9a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5276661-18fb-4d86-9c00-e05e61ec27e6",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1198e0e-2ee9-47a5-8ade-5dea5fcccc8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91053f78-7d9b-436c-8cd1-acef0644a50a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6130f30-ee67-4550-b0d8-72395b0979b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fed99151-4670-4a59-8008-dd4fe2179bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e4e2381-bc8e-4d64-8797-b33c90bd4010",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceeb2cf9-fa52-42e9-8704-36bf1be208c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45c9bae9-3efd-4f7f-b746-2804438aa63c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa4cdff2-1765-4686-8e00-70c6abfb0deb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07044755-2476-4845-a6a8-846cf5043fa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bd74696-b388-4136-b027-45f3fe192dbb",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddb2dd33-7265-4441-832e-7948e6e55604",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4504a846-e712-4aac-bdd9-4faaaca5a43b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ede615-894c-4c41-95cc-e9559238057e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f084d183-6fcc-41f4-ab3a-d42778793e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "722aa007-d521-49d5-9f42-c3ea50421e09",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2e31256-decb-428a-a3f5-3e20f4ff6e77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a13850c-f810-4f4e-9f0b-bae4d274c49b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b126280-6e42-447e-b696-4c50087a3515",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81c7e568-a87d-4b93-aedd-2bd6d9855cba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e3406d4-bc88-48de-aa2b-521cbe684eb3",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25db20fc-04be-4efb-aaab-7dd2efe82d76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f28ef728-ff7e-484d-ae1d-d0997f74462d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd3caae-fa30-4c30-a6eb-9e20f12db338",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c81b957-d1b6-463d-b59e-0f5159f64fc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d394a63-ae3f-4bf1-88f7-372ffb3c7ec9",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "755c71c2-cbe4-4f9f-bce2-8b4f837ae049",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5da5baa3-7939-4bcb-81f4-7bbece56cd49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e61f3fb8-c53c-4c3c-9ca4-a185e9e2f315",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "185bc5d5-dc84-436c-aa63-53a5bb1ce210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92361e0b-e214-4d66-a89b-5d75b8ce7ffc",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57dc1d8e-0dff-411a-8bf1-ee3e117c0098",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13a599fe-d570-428a-a5da-3cc56274a13e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e59b56-6ee0-46e8-822d-befd9b1d446c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f523892b-6c18-42a5-96c1-e0bd0d572f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba8acd30-a80a-45a2-a127-5e09aaf081a2",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d7a38d-80bc-4661-adc7-ecd21568b3e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e9ff286-24a0-4ebd-8f39-ea5ded85d2f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a44eb8-ce03-4cb4-846c-a0d76ac48115",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c05dfc04-bfb3-4bbd-bc80-cc9d58b5c189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01c84c06-6a92-4a60-8490-8e7335b16851",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d777e3d7-3eaf-40bf-b641-41dea39aa37a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c641c623-1745-4aa5-99c8-9665d291ff24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aeb84ae-eb71-44ad-9f71-1e27bbc4cc02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6b1dcc0-a31f-42d5-b2d2-27c0c3a4e1ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3772041b-cb36-407a-9ad2-ed7b3b9f3614",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85b47af1-6f3f-4df7-88f5-3dbec0bc9ff8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7bfc58f-32b8-4c1b-a8c6-087787c6b7a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14bda5b6-c3eb-4bc2-82a1-72dd9e7c62bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c593a71-3af3-4cb4-9f31-bd8a882a8de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37f56ea4-b4e3-4ab9-b128-67243159e75a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90e4686e-aa23-4442-aa8c-0e778d26fbe2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82f3c9ca-184a-4ad8-a815-72aee14bbc8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a38b716-5acf-46e4-8ca3-1c87760c0279",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec1033fc-bd8e-4a61-8163-91bd16db464f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "196add27-e390-472a-9c87-7b6e06ec4aea",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9497f0b-e2dd-4592-81be-5141b91c0273",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00861375-d51c-4dae-9372-1e4c8c57af95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e93ef29-9c37-4a5e-bc4a-d13e136c1d7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "835d8f4c-4207-4ccc-84a5-2f23a61b5c09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ea12b0a-0c72-44e3-a816-a9ddff047733",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bd88d7f-2686-4e08-80c7-36f5e12e15c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51e33de6-b296-48b2-8fbf-07f09cfda3ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41accdae-3c7d-4c67-8851-7e44ea8986fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92ccb059-fa35-4c84-bad5-3bd47d69ee97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f9ea364-51d3-441c-876a-78fa7663fd97",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f0e677a-2bc6-4b0d-854b-6b89e88235d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d24f17d0-c2e8-41b9-9f91-93e4df82e7fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc1d083-0263-4ada-b058-cbff68ce96c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0878a97-1a44-474e-bc53-dda5990da8a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c7b9e79-254a-4a90-be95-11bcabbd909d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a41c5e78-8f95-481c-ac83-65ade10f0039",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33b1e5fb-e322-4a08-943e-ec099fd28336"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa8e8e9-d6f8-4723-bf6b-aa301fc9a9a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeb49f09-b7cf-40a7-99cb-68f2c7854f53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf75ed9d-acab-4292-a167-d7c045dab710",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b32502-af58-4c57-abfb-ee46b4cc2f61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98739f75-c79b-4e0d-8395-4000a3579662"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e4698df-bca3-41b7-a4cc-4f9d892e30e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4a27f7b-fb01-4e2a-963e-84f154e36a1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02df9925-1efb-44ad-ae0f-21a106219a8d",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e67972a-8903-43dd-8c0d-db44f0f7574b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a39b79bc-2886-40d2-91fe-2a5d3f671ffa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8352d6ef-6860-4cd7-b756-202762999892",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36a6fe17-9df4-4e16-9489-5a0f4bc59153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa1d2d7-b9f0-4bc7-820d-4e55772cbfc7",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee1f17c5-bd81-4f01-a9a5-f2c58573fa79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bfaa14e-275c-48fa-979f-b34f0a214912"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2902f332-2be5-40f3-86ed-b43989a7e68a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a68caca-fcf4-4149-a417-b56a91cd78ad"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a39418c-ff71-4019-9389-b55ce73a4d34",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "12d2e8bb-6f6e-4537-a300-b30741234b3f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab4fa430-6e76-44f4-9512-b0dc29eb8967",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0ca3ef2f-eed0-4bde-a54c-04dffd5dd9cf"
                    }
                  }
                ]
              },
              {
                "id": "57fc0092-0529-40a2-8d5b-98ed63f99f85",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "303e58d0-5ce9-46cb-a228-d109822afbc1",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f4cf60e-b916-4e2c-a3bb-952c25d814b3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c2544192-8230-4c78-958e-881a9c7bf447"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84632163-aedf-4638-af92-0688a59adf60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d27ca24-b637-4426-ad41-99b13ea4e389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0fcf86f-b166-4a8a-8b97-4472e3170e9d",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b8c5ee4-9b16-4e20-9c31-492f13c07c1a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7e1e6d43-c3b1-4af9-a132-f38378702ff7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36361fd9-56c9-4109-b788-15867e59f1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0fd18ff2-0717-48ac-8f4a-abc6569c2054"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b02d092-44dd-46ef-b259-5409884f221f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b04e3b6c-927e-4b05-a4c0-db5fe2ccb7b2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b294b958-5842-4215-bc57-5bf8d33608a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "296e6bce-c18e-42e9-a848-e4fbb0aef74c"
                    }
                  }
                ]
              },
              {
                "id": "bfd08c67-1b07-48fa-9784-a668862ec4af",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "63da062b-c6e1-4132-8cb5-57f03fea3034",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "641c1d4f-5822-425f-88c2-c348ca23a68a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "57accf7b-9700-4beb-b287-49e2f63422c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff1ff72-ceda-45cb-b1ca-3b37da7b8233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea626f58-43dc-4041-a8b2-b1f42fcf052a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "73843e13-bac8-48c5-89a0-857cb31d982a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "402cb319-1177-402f-a37c-caecdcbac3ea",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "781af30e-853c-4827-8aed-033fe08db359",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "babea218-a329-4a09-a3de-52c37e9b6e2e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5bc50f86-35c2-43b8-989b-a5d6028c2f98",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "71a8d046-ed97-40ce-a36a-1680767ecba2"
                    }
                  }
                ]
              },
              {
                "id": "1fd69101-42fe-4247-b2d9-65f492719b59",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f8f4b49c-3ee1-4f92-8e48-2ed681f26563",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ca63f68b-0e75-4c87-9c86-2cb38909b03c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6d933cb8-8c4b-4fee-89df-bb842924ece7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "105766ae-a6f1-4819-909a-88497827feb4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c792d52e-d4ff-40b0-9a6f-5b8bc9573ab0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "9244b72e-3c2a-4366-875b-c000987d0f82"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "73cb7212-bf94-45a3-bd47-082a039672a6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "043b9588-1d89-4e40-b679-78ae933a4558"
            }
          }
        ]
      },
      {
        "id": "5b5e739f-e312-47fc-aefc-0efd5f9d0c22",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0c6898bb-3f77-45d5-af32-511c63315f5d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "90aca0e7-7cee-489e-afd1-66da94a3466a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1625b819-d50d-42f1-927c-906b66b6f13d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1fdbb56-f231-453a-aa93-0d9446805200",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "53358981-be05-482e-9990-920c38eb2ace"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d1c0169-1d56-405d-9f85-a2b2a400ba9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f8c7f84-2489-4079-8c5a-2989c81cc310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a437bb0-9358-4d78-b9f3-fedae5c45774",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6621832-0790-4eac-af3f-6c3e72f3e77c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fa429d06-8cc8-48aa-a383-ac5d7a01b717"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa5e215-4c04-4973-ad13-ab21faf374b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "49614ae8-e8cb-44f7-af65-1a10d0ff6ebb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f99ed13a-354e-41e2-915d-f67fc1d32dc7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "104ad4ce-8135-4525-86df-9b0a50dfa24c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2160c9dc-037b-4c1b-b21d-949c1880fa20",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f845d6d-40f5-4851-b461-1034c6b6c332"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0013673f-3d07-4c9f-975f-baecbcd58763",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "475d5056-0312-4d42-b3d8-81b70b8cc71c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "345851b6-c5e7-450c-93f7-fdadc1747fac",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "96ad97d0-9597-4c1c-b6cb-d6be0a869e54"
            }
          }
        ]
      },
      {
        "id": "a91c4ace-ec57-4911-8c95-28872b1ef853",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1f545c6f-0e61-437c-854b-ba25b7fc727f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bcafd8fa-a7a0-41fd-98af-03a83ce54c22",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "336812bb-8aa6-4f98-9b37-eec9c04081db",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6274cac2-ae66-41e1-8a98-a5bae74338c6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ff70ae02-9a69-41ba-8f6f-abab4817516c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12e87c85-0452-4987-9771-709970d60c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5031de82-12da-4b50-8222-a23fe667ccee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e94851-96b0-4f0d-9bd9-7b0606322d60",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a09d7a6-d5a9-43fa-b21c-e09317cf5a43",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "26f178ab-f9a9-4eee-b8cc-15212dd136a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bef26bc-da89-41db-a322-9de50e9e30fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "27b0d48d-e1ac-46d8-8cde-30a10687d576"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a1642e63-fd69-4a2a-a4ea-0f4318b55896",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5872a144-7b47-4805-9e7f-589b77bd2dc3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ac43e99-3630-4bf8-8c7a-3b1950547197",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "65cc54d4-8677-4a28-bb62-67756f429641"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9edd0946-e618-4016-bbba-78b9cca00c00",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "44d801fc-c9c9-4ee4-970b-f5a1249d082c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "94ee08b1-a21f-45bb-8944-c562e64fde34",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "89b0bd14-6bc4-49eb-9d6a-3d5f96408828"
            }
          }
        ]
      },
      {
        "id": "28182238-8f6e-48d4-96ed-8acb45a09d8e",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "24330e8e-04d7-4e8c-8159-95d88d3c676c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e08dfa7b-dc91-4e4d-88d7-11dee11441b2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7f15da74-39dc-4432-9d28-e8c4f99f6b5a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "109ebc91-d958-49cf-81d4-e3182b6ee08f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e8e8ddac-0e1e-464e-8323-d25dfb6c6885"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d1b146b-a71b-4091-b95f-fe2471554047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8894c177-c11b-438c-aa81-76a94002add8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0085c588-68a9-4cd7-961d-32689f17b52a",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f8dd0d6-9fe4-4b22-abdc-46b0248cc7e2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9af9c99a-73e1-4c1e-821a-29ab851f8bd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63da85eb-1343-4ab4-81fc-105f3d375042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0b22c3c2-3fdf-4bb9-a8dc-df82d6ba2444"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "780d241e-ef74-4146-a5c0-b0472a7b6e22",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a73726f7-a467-49ef-8304-fe1d88e06f3a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4023458e-2951-4507-8d10-7129d03d0650",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af64b74f-6ca9-4b95-bb0a-5bb141e3b7c1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d526c7ec-266a-49f8-8494-45266da74be9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e59d0883-8ff5-4af4-8b0c-e715380f7892"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "19fbb42f-7c73-48a3-ae2b-b8710927004f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "309675b9-e0c6-4b76-9fe6-9a84769b7e40"
            }
          }
        ]
      },
      {
        "id": "5d9dafbd-bc02-4427-97b2-26a39f790d63",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b88ee540-428f-4fc9-ae96-80565a1dbb0b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9b6f660c-e1c2-4763-a8ea-e32b279851e8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "8798e28d-eecb-4c03-8bff-b20a30b19b65",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "966e2309-60bb-4e96-aa76-16412605d2a1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b8c0e50d-4b0e-4817-ace7-d0f172ba18ce",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 111.45038167938928,
      "responseMin": 13,
      "responseMax": 1072,
      "responseSd": 169.74667761379894,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1673915979887,
      "completed": 1673916019766
    },
    "executions": [
      {
        "id": "f7198735-c3bc-4cea-b3c5-15543681e9e0",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "9ba268a6-4a6d-4097-92d8-747977acf5e6",
          "httpRequestId": "d5e8a280-c8c5-4898-9f50-b79c97b03f7e"
        },
        "item": {
          "id": "f7198735-c3bc-4cea-b3c5-15543681e9e0",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "1e4eeec8-7a34-47c1-b5c1-e6466154ff7b",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 0
        }
      },
      {
        "id": "4f11f0c4-c54b-4879-a2d8-1a7282fa823d",
        "cursor": {
          "ref": "7a90e8a7-a647-4ce3-8e8f-69834e78508a",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9a8fcdb4-9c5f-49c8-bf62-d8d16c176c41"
        },
        "item": {
          "id": "4f11f0c4-c54b-4879-a2d8-1a7282fa823d",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "c5df0493-df29-4032-adda-cb22c3f0440f",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 0
        }
      },
      {
        "id": "e703b83b-d6c4-48c3-aca3-e4d51f5862a1",
        "cursor": {
          "ref": "13e98683-08f3-4f9d-9132-469e6860e40b",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "21c5b163-2a05-4c1e-8b33-6b6a4589a1e6"
        },
        "item": {
          "id": "e703b83b-d6c4-48c3-aca3-e4d51f5862a1",
          "name": "did_json"
        },
        "response": {
          "id": "9a84ac18-270f-4942-889a-6862def3c0fd",
          "status": "OK",
          "code": 200,
          "responseTime": 264,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26533a28-ace1-4257-b1ff-928093a34c12",
        "cursor": {
          "ref": "e33beb71-b769-4349-814a-f1d7d401fdba",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "53855eec-92d1-4a61-9215-57261cca9ca9"
        },
        "item": {
          "id": "26533a28-ace1-4257-b1ff-928093a34c12",
          "name": "did:invalid"
        },
        "response": {
          "id": "1def9ea1-ea38-4994-94ad-7a00f7d284c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26533a28-ace1-4257-b1ff-928093a34c12",
        "cursor": {
          "ref": "e33beb71-b769-4349-814a-f1d7d401fdba",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "53855eec-92d1-4a61-9215-57261cca9ca9"
        },
        "item": {
          "id": "26533a28-ace1-4257-b1ff-928093a34c12",
          "name": "did:invalid"
        },
        "response": {
          "id": "1def9ea1-ea38-4994-94ad-7a00f7d284c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "587f98de-2d59-4cf4-a20b-c29d85ff3ec2",
        "cursor": {
          "ref": "8f0948d4-10c0-4312-be09-cd8f46c86286",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4cb7d8db-0206-445a-8844-1ba523ab2c3a"
        },
        "item": {
          "id": "587f98de-2d59-4cf4-a20b-c29d85ff3ec2",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "47a7410c-7a8f-461f-b7ec-426b963ba0b0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 88,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89965d9f-7dba-4227-bbde-07fc25e1bff8",
        "cursor": {
          "ref": "7ff27f29-598c-4ef1-9d56-98e99ee39f0b",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a3ecc788-9513-4e56-bf70-0d6cfd7e81e2"
        },
        "item": {
          "id": "89965d9f-7dba-4227-bbde-07fc25e1bff8",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "fec70e0e-c3aa-4288-8d5d-f09890787644",
          "status": "Not Found",
          "code": 404,
          "responseTime": 32,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2217623e-7aae-4f60-b024-4ad4f3d77b31",
        "cursor": {
          "ref": "e4aff8b2-6e07-45e3-ade6-1ead35c5f502",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ac3f5b9b-bc99-407d-a743-e563af230a06"
        },
        "item": {
          "id": "2217623e-7aae-4f60-b024-4ad4f3d77b31",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "a7f0bb78-e0da-4adf-9d80-dccfd1ba4106",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b69494f1-45a4-4a7c-b5f4-b237d073ddad",
        "cursor": {
          "ref": "bfbfb2b2-6ec9-4697-971e-7fa6956ab947",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "12e5bbfe-0a48-49ae-af4a-2be173e82dcd"
        },
        "item": {
          "id": "b69494f1-45a4-4a7c-b5f4-b237d073ddad",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "0b9b8d27-63cc-41eb-af19-d4b4a6739af9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b69494f1-45a4-4a7c-b5f4-b237d073ddad",
        "cursor": {
          "ref": "bfbfb2b2-6ec9-4697-971e-7fa6956ab947",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "12e5bbfe-0a48-49ae-af4a-2be173e82dcd"
        },
        "item": {
          "id": "b69494f1-45a4-4a7c-b5f4-b237d073ddad",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "0b9b8d27-63cc-41eb-af19-d4b4a6739af9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1576c9b9-b17e-4121-a582-422e3c46b41c",
        "cursor": {
          "ref": "9bf02fa4-3269-4030-b03d-c3556ec1fcef",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b4cd80ee-8c24-4cb5-9210-db933eea9c74"
        },
        "item": {
          "id": "1576c9b9-b17e-4121-a582-422e3c46b41c",
          "name": "identifiers"
        },
        "response": {
          "id": "400fe2d6-92ab-4a3f-9e2e-2b30a8a4a17b",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad192c73-7758-4d58-bf5b-b55d04651d37",
        "cursor": {
          "ref": "46fb7113-3350-4a91-8dfb-c6ec217ea4c1",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ae528fa5-600c-4a04-95a3-dd58c65dda61"
        },
        "item": {
          "id": "ad192c73-7758-4d58-bf5b-b55d04651d37",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d9275025-1b9d-421a-a720-c9c8faf99ab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad192c73-7758-4d58-bf5b-b55d04651d37",
        "cursor": {
          "ref": "46fb7113-3350-4a91-8dfb-c6ec217ea4c1",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ae528fa5-600c-4a04-95a3-dd58c65dda61"
        },
        "item": {
          "id": "ad192c73-7758-4d58-bf5b-b55d04651d37",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d9275025-1b9d-421a-a720-c9c8faf99ab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14fe23c8-0e78-40a9-9b46-b0ada6813dd2",
        "cursor": {
          "ref": "52352eda-89ac-4a4d-8502-13d139f0814b",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "61a30753-7678-42ab-989c-d039a6a00570"
        },
        "item": {
          "id": "14fe23c8-0e78-40a9-9b46-b0ada6813dd2",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d0c97654-6443-4800-886d-c1a765df1386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "841b0b4e-1e8b-4448-b44a-e2154702c235",
        "cursor": {
          "ref": "068d5525-7d33-443a-aadf-5ecbbc20af07",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0ea2ad01-1f8e-4d4f-88b7-c85643c09dd1"
        },
        "item": {
          "id": "841b0b4e-1e8b-4448-b44a-e2154702c235",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "c30b4550-6899-4541-865c-3b3d42adfe51",
          "status": "Created",
          "code": 201,
          "responseTime": 604,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "c9a690b9-0b25-426e-9695-e1771a15bcab",
        "cursor": {
          "ref": "96bd2c05-7902-466f-b4c7-fc04d888cf26",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6f2155c5-e418-4333-b9e3-7c72e5ccf764"
        },
        "item": {
          "id": "c9a690b9-0b25-426e-9695-e1771a15bcab",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "43e9113d-0ddc-4a3e-8ddd-31c68a9a2af5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "973fff01-b7f0-4cd1-b16f-a8fbc8e53e6b",
        "cursor": {
          "ref": "8e581f2b-4dbc-44e8-945a-e8aa39ecba33",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "53995eb6-fbf0-45cb-8243-eed88ebaa4f3"
        },
        "item": {
          "id": "973fff01-b7f0-4cd1-b16f-a8fbc8e53e6b",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "36f4f8d9-d0b0-4f77-9005-2e689c7782ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d9641df-3182-42fa-93e0-f1e44fb9f293",
        "cursor": {
          "ref": "d4f23c29-bf4a-4343-a025-554d01c813b6",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9625ff13-0a4d-4998-87f0-5030d21d6123"
        },
        "item": {
          "id": "9d9641df-3182-42fa-93e0-f1e44fb9f293",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "490cf99d-5acc-4909-820b-e399c7a82a59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5efdc8a-b34c-4568-af39-76ebea13904c",
        "cursor": {
          "ref": "88d15deb-cffe-419c-9c7b-1b9acde0c23a",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "73ad51e4-3463-4b9a-bfb2-dd0233150f18"
        },
        "item": {
          "id": "d5efdc8a-b34c-4568-af39-76ebea13904c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f0cd7a0b-07a5-4840-a110-7a4d51ce6445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f6d27e2-6976-47ca-b991-6980c918516d",
        "cursor": {
          "ref": "faa5a6fa-6366-4860-906e-d6d804204ad7",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1f073c22-37d8-4bed-8682-5a74f9cfc164"
        },
        "item": {
          "id": "1f6d27e2-6976-47ca-b991-6980c918516d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f99e54b4-d0fa-4eab-9686-92841f43ab0b",
          "status": "Created",
          "code": 201,
          "responseTime": 506,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "b0019b10-523b-41bb-b501-fe6ece3e1cfe",
        "cursor": {
          "ref": "041b97b1-0cab-47cc-b6c2-42c2c8ff142b",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "2c9407c7-8886-4940-acf2-3d34fcd437f0"
        },
        "item": {
          "id": "b0019b10-523b-41bb-b501-fe6ece3e1cfe",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "a79b859a-74c1-461f-a25b-f8b189ba6143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13758128-d697-4180-9153-f553d756b3cc",
        "cursor": {
          "ref": "51e3fa8a-ad86-49aa-a981-d256422f2ec4",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "80a9ffdc-c226-4819-83cf-80f07043f55e"
        },
        "item": {
          "id": "13758128-d697-4180-9153-f553d756b3cc",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "4bde1136-612f-45c9-98b9-398659cf291a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "310609f8-8379-4914-8498-fb90159e416c",
        "cursor": {
          "ref": "f65e172c-fdba-451b-ae77-a275ce62c744",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "bbfc01dd-ff4c-4a9a-8978-20e47421cda1"
        },
        "item": {
          "id": "310609f8-8379-4914-8498-fb90159e416c",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "47556e25-13c8-409e-9767-29c5eeceded4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0633e486-b300-4c3d-8070-94c3cdf5606c",
        "cursor": {
          "ref": "2cfa1611-503a-4514-8afe-0d8cf144adf7",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "4a442b2a-2c81-462e-9fde-06350a9d5302"
        },
        "item": {
          "id": "0633e486-b300-4c3d-8070-94c3cdf5606c",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "45d627c0-5e9c-4ead-9a10-d7bd9075d4f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01109af2-57c8-45f6-a392-b77a2d7009d5",
        "cursor": {
          "ref": "0451525d-cc9b-46ac-9712-1ee4907a68f4",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d8ea28b9-4176-4a2f-903d-3694db6f11f9"
        },
        "item": {
          "id": "01109af2-57c8-45f6-a392-b77a2d7009d5",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "061e67ff-45e4-472b-8262-a030aa7aa2be",
          "status": "Created",
          "code": 201,
          "responseTime": 556,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "c1b0cb5e-71b3-45b6-a00f-125e2a42fb2c",
        "cursor": {
          "ref": "ca6a6cf8-a353-4828-9620-835ae97f77ea",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9b6e17cf-ccb7-40e0-bacb-e62af37d7c5e"
        },
        "item": {
          "id": "c1b0cb5e-71b3-45b6-a00f-125e2a42fb2c",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "11c3019d-4d8a-45a7-a855-5dfb2b91698c",
          "status": "Created",
          "code": 201,
          "responseTime": 1072,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "ab1c3175-1068-4d5b-ae92-0ae6d8a26de8",
        "cursor": {
          "ref": "31c16379-7887-46ab-b698-da8ffe4d872f",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e3946dcd-e172-404d-8e40-a518454a6d9e"
        },
        "item": {
          "id": "ab1c3175-1068-4d5b-ae92-0ae6d8a26de8",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e4a33415-b4fd-4b92-a75e-896021fca2df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a7ae149-3446-4229-8294-a6cfe40e8686",
        "cursor": {
          "ref": "e5bb03ab-dba8-47fa-bc1d-db8361a0a4f3",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "fcdb2161-0a2e-41ed-bc3d-347e2f4523a2"
        },
        "item": {
          "id": "2a7ae149-3446-4229-8294-a6cfe40e8686",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "cfc5e68f-d687-46c4-bf18-8904f64dcd12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "977968a4-e24c-435a-945c-daeafa11dc4a",
        "cursor": {
          "ref": "d407cc83-4038-4d7c-ae9f-733d8946eafe",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "73a20ecb-6e6c-4b4e-acd7-1f1bff133c66"
        },
        "item": {
          "id": "977968a4-e24c-435a-945c-daeafa11dc4a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "782061f7-39e8-4b57-bd01-6e7011dbd6f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34927ba6-3aa4-4f4e-83fc-e4f9294b262a",
        "cursor": {
          "ref": "cb9a7a46-6b22-4281-9ba0-8d75dbdc092f",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c0c1b144-a019-4cd8-b700-0a715d62b656"
        },
        "item": {
          "id": "34927ba6-3aa4-4f4e-83fc-e4f9294b262a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "a4f503dd-bece-4537-9c41-984d6dda82ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "265ee020-14c9-4fb3-820b-4b8ff149e751",
        "cursor": {
          "ref": "27208376-24a7-4f98-98db-3066a09df2e4",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2f40a1e5-15f8-47d7-a27e-e100334910a5"
        },
        "item": {
          "id": "265ee020-14c9-4fb3-820b-4b8ff149e751",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "4cb3faec-eb57-4091-beb1-3401e6b8e688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5325958b-e2ef-411d-a71f-07f82a0a7410",
        "cursor": {
          "ref": "698d0ff0-f25c-4f65-8ae7-8dba8bc1e2ad",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "756a439d-f3c3-44df-a742-37df5d6bb14d"
        },
        "item": {
          "id": "5325958b-e2ef-411d-a71f-07f82a0a7410",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "eaafa278-b58c-4785-9b8c-5f0217765516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21394516-a35b-4935-b70d-38e4cd31226e",
        "cursor": {
          "ref": "1ab82f69-ae3f-4cd5-b6a0-c4f7dfb43ae8",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "248f8a3c-ebdb-4fc0-84f9-b6ac11a75d3f"
        },
        "item": {
          "id": "21394516-a35b-4935-b70d-38e4cd31226e",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "e577a132-952d-44f8-9034-3056400ff7d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0df992b-e9d6-418b-81a2-bff9f59b2016",
        "cursor": {
          "ref": "d6ef3ae3-4dfe-45b2-9bc7-b54bd9c1d076",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "aea65411-61c7-4615-a130-81e7c1aa3e6c"
        },
        "item": {
          "id": "b0df992b-e9d6-418b-81a2-bff9f59b2016",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "7016995f-f2be-4a48-90a3-5136f16dd562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4cba291-7e6b-4329-bc67-5f7f949f71b6",
        "cursor": {
          "ref": "ded646b2-3e59-4edf-89df-642b7e555cf7",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "826fa9af-dbf0-475c-83b6-7a0542bdbfdb"
        },
        "item": {
          "id": "a4cba291-7e6b-4329-bc67-5f7f949f71b6",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "061fc4c5-43bc-404e-b22b-65b7e61eb9ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfcbba1e-f3ac-42b5-b6c4-6c3232f644bd",
        "cursor": {
          "ref": "7cdca7ed-a87e-40e4-a838-530d7d079bd7",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "8636d81e-7de5-43e1-af7b-fad5a4f311d3"
        },
        "item": {
          "id": "cfcbba1e-f3ac-42b5-b6c4-6c3232f644bd",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c114c4e6-8cf2-477a-b7e8-7149b6ae0e12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7e8ce4c-6aa2-4e7f-9f91-bfce284afe4a",
        "cursor": {
          "ref": "0bf8b1a4-8141-4499-bb01-367c95dfd0d0",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "17d47c27-e27b-4b3d-afc6-4933c86cbee9"
        },
        "item": {
          "id": "b7e8ce4c-6aa2-4e7f-9f91-bfce284afe4a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f968079b-a73e-4596-a07a-2ad2197f2abf",
          "status": "Created",
          "code": 201,
          "responseTime": 644,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "acd7ba8a-d2fe-459c-8335-c92fab68d766",
        "cursor": {
          "ref": "1fd63c01-896f-4dd6-a26d-524193d78d29",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "df0cb505-dcb2-4878-90ce-b0f64c555005"
        },
        "item": {
          "id": "acd7ba8a-d2fe-459c-8335-c92fab68d766",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "fd86e9f6-3da3-4936-8113-e1a5df1d7c0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1ae7523-190a-4357-aea5-52b723489085",
        "cursor": {
          "ref": "1138aa21-56c1-481d-9c54-4da640f7fd18",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "56a63d3b-01c4-4d5d-8f9b-67192514c0cb"
        },
        "item": {
          "id": "e1ae7523-190a-4357-aea5-52b723489085",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "e8bf7902-e4f4-4a16-bbc1-b86f9aba78b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f7b54d-7d12-4f18-8a64-088c3eaa8061",
        "cursor": {
          "ref": "e3bd8b78-1d3c-489c-b282-dbec9e0dbf57",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "7a76de30-5727-4021-b79b-0e5e5b813e91"
        },
        "item": {
          "id": "73f7b54d-7d12-4f18-8a64-088c3eaa8061",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "35cae231-14e4-411b-a05b-79a36d012ec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c853722-81b4-49a1-919c-17ba66bc4681",
        "cursor": {
          "ref": "e210c026-d19d-4cd1-874a-4ea57d2d7d28",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "467e7680-b89f-4062-97cd-23dc40c34668"
        },
        "item": {
          "id": "7c853722-81b4-49a1-919c-17ba66bc4681",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "e1112576-b542-4800-8e65-28b7184c0e75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41c0c7d5-ee2a-464e-bb8d-9291dcbf44a5",
        "cursor": {
          "ref": "178fad4b-8716-4bec-ad62-4d28e907f9df",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f5feec7e-e285-4743-a43b-dae64e833dad"
        },
        "item": {
          "id": "41c0c7d5-ee2a-464e-bb8d-9291dcbf44a5",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "5db47c53-c46c-45ca-9718-f014cdbbfcfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8132587-b5dd-4277-82aa-8052dda53077",
        "cursor": {
          "ref": "52bbe9c3-c351-44b9-a1f1-83a299443720",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "71483fde-349c-43ac-a98a-6a9e131c8b3a"
        },
        "item": {
          "id": "f8132587-b5dd-4277-82aa-8052dda53077",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "ec993aa5-b383-44db-a7ac-4756983f0f82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce6049d4-4b72-4f8c-b0db-7ad67d5a47c4",
        "cursor": {
          "ref": "a564fb79-e832-4e94-ac51-059550b76e3e",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f6d6d5ed-f96f-49a7-921d-874b11bbb9a9"
        },
        "item": {
          "id": "ce6049d4-4b72-4f8c-b0db-7ad67d5a47c4",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f859a397-b2a0-4d93-9553-1cf911c8d5ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7966dbc6-c05d-4888-8b89-f94f349b6340",
        "cursor": {
          "ref": "41b69a49-bb7e-46e8-bb5d-a2cc5f010c52",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "beb369e8-341d-4c28-aa61-db8a92566fd0"
        },
        "item": {
          "id": "7966dbc6-c05d-4888-8b89-f94f349b6340",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c833ebca-7fcc-459c-b407-8b63da97518f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f888477-73e9-4a98-9f0a-4cfd71398620",
        "cursor": {
          "ref": "7a5027e9-28ed-4cca-93ba-72133b0f8bc8",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "7d4907bf-1504-4e73-b288-0c029d4163d0"
        },
        "item": {
          "id": "0f888477-73e9-4a98-9f0a-4cfd71398620",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "6d790a99-b515-4dcf-9980-919af4670c8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2d95c37-94da-4b3a-8582-c3043264b3b9",
        "cursor": {
          "ref": "01b0fcde-4a8f-4cd9-9541-bdcdf6bfad77",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "70ec24f2-598e-4b05-bcd9-5bb64931fc4c"
        },
        "item": {
          "id": "f2d95c37-94da-4b3a-8582-c3043264b3b9",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c95b1706-3f71-46f7-ad52-b6f40346f492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "286414da-ef75-44e8-8921-cbf42ec3f89c",
        "cursor": {
          "ref": "2697efc8-2304-456c-813b-c1e5ac166687",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "efa31e3f-fc20-4608-9f24-6ec8a404510e"
        },
        "item": {
          "id": "286414da-ef75-44e8-8921-cbf42ec3f89c",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "ec1d3928-b494-489e-b594-b393a259e6a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd6c86f4-3d66-4c61-9235-8ee7d4b7e54f",
        "cursor": {
          "ref": "6249a341-4336-4d53-8136-a9da83a7e0f9",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "5fd51e05-6adc-4921-bfb9-7383883b435c"
        },
        "item": {
          "id": "cd6c86f4-3d66-4c61-9235-8ee7d4b7e54f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "733fcd01-58da-440f-84a0-ce071d9e0bc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a5e991d-15be-459d-8d56-ff0c76f36546",
        "cursor": {
          "ref": "16186efd-89f9-4ed6-8781-28b016084bb1",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "bc43218c-a2fa-4bb6-b3ed-7084628f396e"
        },
        "item": {
          "id": "5a5e991d-15be-459d-8d56-ff0c76f36546",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a92f402c-333e-4777-8cae-a7f439a1ec0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 350,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "59c01b42-5b04-4ecb-880c-297cf8b3277e",
        "cursor": {
          "ref": "7d79a569-b8b8-4080-a002-de81fe4ef030",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3f56f859-1ddd-429c-a495-9d468ba942ba"
        },
        "item": {
          "id": "59c01b42-5b04-4ecb-880c-297cf8b3277e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "5bd2aaf3-289f-451a-a223-ff9cc872fa60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b334ba8-3e69-4ae0-a6e9-3ec21f408bda",
        "cursor": {
          "ref": "83f77412-e7c4-474e-a1f2-0609ca07eca4",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "7a8c9246-2db0-4e15-87d1-4cb5ab488523"
        },
        "item": {
          "id": "2b334ba8-3e69-4ae0-a6e9-3ec21f408bda",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "bcd4fa9a-8a31-4f60-a95b-370e35f52729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc12717a-7295-411c-9c0a-e2c24c13bb09",
        "cursor": {
          "ref": "661ad612-417e-4ae3-894a-51b415c2bb8f",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "fed59e6e-222c-41b1-8cb1-684818c21209"
        },
        "item": {
          "id": "bc12717a-7295-411c-9c0a-e2c24c13bb09",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1014f055-9670-49a8-bf97-26e733cbd21b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe638433-75a2-4eba-b1fd-071d0370ad5e",
        "cursor": {
          "ref": "b97ed4a4-9b1b-44bc-88ac-8dc3e029defe",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d2a38f0c-3f2a-44e4-bf2c-c9304ef648db"
        },
        "item": {
          "id": "fe638433-75a2-4eba-b1fd-071d0370ad5e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "d60da32a-0ee8-4f98-b170-7e62813f1fcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9fb3f27-4081-4643-8beb-22a9bfca95e5",
        "cursor": {
          "ref": "af80a62a-5dd9-4421-93a1-aea5b1db32a8",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "db3db301-2aac-4a24-8685-b68e5a13d097"
        },
        "item": {
          "id": "f9fb3f27-4081-4643-8beb-22a9bfca95e5",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "f1d187b5-74b5-4848-b5ab-5b0b1513d9fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bb5eb67-7cf7-4752-a4a6-995bdaa4899a",
        "cursor": {
          "ref": "0ef5fdaa-0301-4f6e-b1ae-4a3b462d38da",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "0bb62740-4d63-4490-a534-7cf2a4dd7c17"
        },
        "item": {
          "id": "6bb5eb67-7cf7-4752-a4a6-995bdaa4899a",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "17075b7b-c4c2-45a1-aa9e-fd47cf7b3e32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8315401a-c1e1-4a8a-95f5-1e0860ea3af0",
        "cursor": {
          "ref": "fa11cdd0-2665-4636-856b-47b8e703fba7",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "83b28969-8400-4588-add7-953b299dbcdc"
        },
        "item": {
          "id": "8315401a-c1e1-4a8a-95f5-1e0860ea3af0",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "daebd5a6-9e56-4cd5-9d73-63694f2195bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 332,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "7cc64c54-e1fd-4a33-a71b-61156ccaf0e3",
        "cursor": {
          "ref": "207832b2-c6b6-4082-b491-735d594eee7e",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a6169abc-792a-4526-9b4a-f19d7a590b8e"
        },
        "item": {
          "id": "7cc64c54-e1fd-4a33-a71b-61156ccaf0e3",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "3798f239-6dd9-4d18-8e6a-74c992623571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5b90c6e-1b55-4d76-860e-7c16355870f0",
        "cursor": {
          "ref": "2aad1e24-f50f-4808-baa6-e8f6f0322276",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "24001f90-3aa1-4459-825e-839ea7d8a194"
        },
        "item": {
          "id": "e5b90c6e-1b55-4d76-860e-7c16355870f0",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "0715afe3-9902-4e59-b666-ac8f885678e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f71dd99-e0e9-4936-b8c6-e7e86ea24209",
        "cursor": {
          "ref": "e57d901d-b984-49e5-bb6a-feb6128374b1",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "bc643985-37c2-4265-b165-69b569ade4e6"
        },
        "item": {
          "id": "1f71dd99-e0e9-4936-b8c6-e7e86ea24209",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a32b2d9f-3448-4e4b-94ef-d94ad4bc685f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f71cc22f-64d5-439f-b5b4-6d042faff6c3",
        "cursor": {
          "ref": "0165f795-c0ca-448e-bc9e-ab61f3f9e174",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "eddef8b5-7aec-4b33-ac6f-266b6897be27"
        },
        "item": {
          "id": "f71cc22f-64d5-439f-b5b4-6d042faff6c3",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "01f4bd00-c3d5-46f3-89a7-27a673055a2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ce46ef-dd42-4d4a-9ab6-4092ec3046c0",
        "cursor": {
          "ref": "a74112af-e764-4c13-8377-f6a34bbd4fd6",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "7b86f0db-852b-4534-8770-f3bc505adcab"
        },
        "item": {
          "id": "b5ce46ef-dd42-4d4a-9ab6-4092ec3046c0",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "01b095c9-2172-40d7-8253-18df0a081c9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c14ad885-5bcf-4f37-be29-2d75994829cd",
        "cursor": {
          "ref": "8cf49f04-feb7-42b1-9aae-818968ed94fc",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "4c176981-6fdb-42e1-b0f8-d2edc32b1982"
        },
        "item": {
          "id": "c14ad885-5bcf-4f37-be29-2d75994829cd",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "13666c68-c9b0-4ef0-8cf9-420378f3b8db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b4e7ee8-c6b0-4070-b411-683c85c5839e",
        "cursor": {
          "ref": "698a7b46-5e52-4733-a2a3-e76a5c759265",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5dd3d015-f5b5-4179-aee9-35761dcc47af"
        },
        "item": {
          "id": "1b4e7ee8-c6b0-4070-b411-683c85c5839e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0d2f5cf6-176b-4623-99d0-f53433f6c661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a117a22d-05d3-4e59-8ebf-ee3d640deab4",
        "cursor": {
          "ref": "9ccdab0d-af8c-4091-806f-f4a64cc10c53",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d7530faf-5f32-450d-8816-083aa32d094d"
        },
        "item": {
          "id": "a117a22d-05d3-4e59-8ebf-ee3d640deab4",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "007c8d98-48b4-40e8-bd0f-c166cc14471c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da02b890-5c51-40b4-9d5c-3d1156a83d43",
        "cursor": {
          "ref": "ce922182-69d7-4868-b05d-4c9031b4d49c",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "79b32403-d1da-4e91-9526-5424506c6d0b"
        },
        "item": {
          "id": "da02b890-5c51-40b4-9d5c-3d1156a83d43",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "5ae2c584-9372-43ff-a764-5e2a2dd25a04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ca8611a-e828-4458-a29e-b1b3e717aa8e",
        "cursor": {
          "ref": "868407ff-36f9-4d18-b45f-613c31f8fde7",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f7caae14-72d2-4a18-a659-ac7f9e7596f7"
        },
        "item": {
          "id": "9ca8611a-e828-4458-a29e-b1b3e717aa8e",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "19b2713a-0cdb-4405-9144-9df0bc407da9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "687c6f65-9866-49f9-9bcb-67b9d439405c",
        "cursor": {
          "ref": "8902ae66-d9ba-4dba-874e-2d4e19923cc3",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "6c872371-938e-4201-a19b-8cc2ab7d8ead"
        },
        "item": {
          "id": "687c6f65-9866-49f9-9bcb-67b9d439405c",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a8780416-dacf-4aa3-a4cf-61f768864cf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc5fb971-fb3b-4c79-bc14-25d5c6b1d9b7",
        "cursor": {
          "ref": "4eaa55f3-36f6-45b1-8ddc-b27216e0f13b",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "45177611-596b-4355-bd7b-8826fb0f0327"
        },
        "item": {
          "id": "cc5fb971-fb3b-4c79-bc14-25d5c6b1d9b7",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "48ee370f-7d71-4ff0-a1f7-7e6959e92ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e306391-df1f-4c73-aa3c-47dcdd5acc81",
        "cursor": {
          "ref": "14c58ddb-6e85-4ea8-9404-2a131a60fa38",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ba995da8-0e48-436b-a9fa-971c817c5af4"
        },
        "item": {
          "id": "6e306391-df1f-4c73-aa3c-47dcdd5acc81",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "266fa3f8-b951-4c9d-9997-821704f18742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f92545b7-2146-49f2-a8bb-b73aaafecec2",
        "cursor": {
          "ref": "4881bcef-d91a-4e65-897d-090b2484cad9",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "8508571c-4ddd-407f-a9e0-86d74955015d"
        },
        "item": {
          "id": "f92545b7-2146-49f2-a8bb-b73aaafecec2",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "b75fe919-7d0f-429b-bf63-6565d63acbca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ade0c861-217c-47d0-8c7d-c1ad5a915617",
        "cursor": {
          "ref": "563e4004-f5a0-4adc-b51b-6619acf12e2d",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "702d07fe-dccd-4195-a86e-25cb00b704da"
        },
        "item": {
          "id": "ade0c861-217c-47d0-8c7d-c1ad5a915617",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "9c1573ad-5f34-4e5c-b332-8feff2d8681e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88c13d10-c945-4c08-89c8-c6f977181684",
        "cursor": {
          "ref": "8fb0fdae-8f53-40e7-9cec-4f05d1204be7",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b6999ebc-03c5-4c4a-a355-bde59d599301"
        },
        "item": {
          "id": "88c13d10-c945-4c08-89c8-c6f977181684",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "939814cf-6e5e-4436-9494-131083e923c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbfdb034-9353-47ac-b3ce-2c6ebf131a06",
        "cursor": {
          "ref": "4a5bf15e-5a4b-49b0-b249-fc9da8f5625d",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "05344b84-9760-4d00-8d12-c4e54ab6fe07"
        },
        "item": {
          "id": "fbfdb034-9353-47ac-b3ce-2c6ebf131a06",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "f7102ddb-c017-469e-8141-525a12bd91e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 186,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9897e12c-954d-47dd-b9d2-da68b81ea24c",
        "cursor": {
          "ref": "331c5b8f-2ef1-4d31-8df1-a3c84902cce3",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "93ec4ce6-b83c-4a71-ab51-82c858139302"
        },
        "item": {
          "id": "9897e12c-954d-47dd-b9d2-da68b81ea24c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "4ffa4d96-dc58-4e39-bf74-169c47408b93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a0273b4-930d-4e7c-9c0b-5770b5457735",
        "cursor": {
          "ref": "bcb67a79-ddc5-4dde-8c12-08c56290ff19",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "66c01463-d30c-4153-9341-6e6116aa1211"
        },
        "item": {
          "id": "5a0273b4-930d-4e7c-9c0b-5770b5457735",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "92b56ce7-b5fa-44ec-ad60-9582e54f894a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f97218f0-a5a9-403c-b1c3-6b76fb7e6b41",
        "cursor": {
          "ref": "7bbcfe47-8e17-4c43-ba8c-f6ff5c4f0b43",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "20a5a765-71ee-4748-8ec6-970f4af7531a"
        },
        "item": {
          "id": "f97218f0-a5a9-403c-b1c3-6b76fb7e6b41",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "6ef6d1b2-dd96-45da-80a7-53183cab273a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5deff52-0b7d-4369-9ce5-6d00d0b108b7",
        "cursor": {
          "ref": "5b17a0a1-fb4b-46fa-83ba-9fdc4a2a6dc9",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "72e92dd0-a479-48a6-a58d-a2fcf0388626"
        },
        "item": {
          "id": "f5deff52-0b7d-4369-9ce5-6d00d0b108b7",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "4e1781a4-715c-4271-a87a-c4179a08a94f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a93e177-9816-4b17-b9ce-46aaafbc40a4",
        "cursor": {
          "ref": "e8e47f39-4216-4fd7-90bc-92ca006ba8e8",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2a5a7d2a-5dcf-4d17-ab2a-cdfbe06ee289"
        },
        "item": {
          "id": "8a93e177-9816-4b17-b9ce-46aaafbc40a4",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "6dfb694f-149f-477d-8894-d3a6d6653cfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a7763f0-0c52-4245-b1da-b65cc2b452ca",
        "cursor": {
          "ref": "a5e05dc0-b518-4be5-a955-1e695a0ae8c8",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "ac97811d-636e-404b-98f2-4a9016199e1e"
        },
        "item": {
          "id": "6a7763f0-0c52-4245-b1da-b65cc2b452ca",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "ce3888c3-c9c9-4a1d-86d1-24ed01742af4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc7d2c0d-aa64-4bc6-bad2-e363b909265a",
        "cursor": {
          "ref": "b4f825f4-03c9-41ae-90ad-69be0d712821",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4e47e6db-ddfb-4196-9e56-4df81d95be2b"
        },
        "item": {
          "id": "dc7d2c0d-aa64-4bc6-bad2-e363b909265a",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7c80d451-c0cf-4885-b22d-c96daa6ea724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c04ce68c-0069-4dc9-9e5f-35ccac9f6d09",
        "cursor": {
          "ref": "51177e51-bd46-4482-aaa6-aae31c1d9c8a",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "a459ab6d-d08f-4e31-9e51-97ed3d7154a6"
        },
        "item": {
          "id": "c04ce68c-0069-4dc9-9e5f-35ccac9f6d09",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "3227a363-9db0-44b6-82ef-7d2dfc851194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1478850e-6a40-4afc-b7f5-c0a98e184564",
        "cursor": {
          "ref": "94bb2f77-bf9e-4a18-bbfc-5326109d91b8",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "bd1feac0-2431-4e3a-b155-923133d28e3f"
        },
        "item": {
          "id": "1478850e-6a40-4afc-b7f5-c0a98e184564",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "99e810ab-99a4-42a1-b33f-548de2af228d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e45933b-150f-4876-bbd7-0067b108bf36",
        "cursor": {
          "ref": "8d79a330-713c-43c7-a0ce-ff45001923b4",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "4fd41fe5-cca0-4d13-ad05-2d3c87b55cf0"
        },
        "item": {
          "id": "1e45933b-150f-4876-bbd7-0067b108bf36",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "099435bb-e342-4e37-b2fc-cb037f5d9693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "176d3fac-f96a-48fa-9cbe-f8628d88d6f2",
        "cursor": {
          "ref": "19f94d44-505a-4f06-b1b1-ee6861bd9f71",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "cb46ee4f-d93e-486e-9d61-fb9b32dd4e9a"
        },
        "item": {
          "id": "176d3fac-f96a-48fa-9cbe-f8628d88d6f2",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "2d306dab-a6d2-44eb-8dc6-e1226ce11d70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4aae3cd-95fc-45eb-bc70-395cf47d208b",
        "cursor": {
          "ref": "cc61521b-0e06-4a02-8e38-097a14c58287",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "fa9bb449-519b-4898-8fd3-37c1831ab99e"
        },
        "item": {
          "id": "d4aae3cd-95fc-45eb-bc70-395cf47d208b",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "943fe080-e17b-41ba-b116-bad252be2a4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e41a58a-6439-42ff-beca-61538ee78c83",
        "cursor": {
          "ref": "f0863c41-7864-4780-8753-b7b079b89699",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "2e5b37b0-0c19-4c87-bc0a-fc0eb285c443"
        },
        "item": {
          "id": "5e41a58a-6439-42ff-beca-61538ee78c83",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a52867c1-37dc-44d3-8d13-15438617ce0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "711e9586-8a1f-467a-8513-e1b77a885d79",
        "cursor": {
          "ref": "e12ecae7-0616-4227-985c-5be68b559723",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "84fd43b3-f67d-4322-b96b-f4b86dec1f38"
        },
        "item": {
          "id": "711e9586-8a1f-467a-8513-e1b77a885d79",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "2bf26529-012e-4fd3-be17-0035127c1084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 369,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e3892ad-3693-450d-921c-800b50cdc7c7",
        "cursor": {
          "ref": "bb8e51b0-9a0f-4ea6-9b5c-6d913be56511",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "bbf2962e-5c83-4142-9624-a97d1e39b9ee"
        },
        "item": {
          "id": "2e3892ad-3693-450d-921c-800b50cdc7c7",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "de086bac-0450-43c5-be72-798e3b939e57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37bf776f-72cc-4847-bff1-f39417e222c1",
        "cursor": {
          "ref": "7ba4d1f0-d67d-4893-8171-0bdbd181a3a3",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b7c39f77-ae2d-4739-840c-86c139cb0551"
        },
        "item": {
          "id": "37bf776f-72cc-4847-bff1-f39417e222c1",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "832c749f-e464-41e1-823a-f4a8bcb74de2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "283097f3-f9bd-4ea2-ac61-c81405a042f2",
        "cursor": {
          "ref": "a0857254-f175-4c9b-ba68-90dd0d3a7d65",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9d55053f-2940-475a-8a9d-a127d1bbf279"
        },
        "item": {
          "id": "283097f3-f9bd-4ea2-ac61-c81405a042f2",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "28bc4ff3-4726-422a-86d0-da3e85d32e7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6ed0756-fd42-47da-accd-c2ceb004fd55",
        "cursor": {
          "ref": "e93b50e1-b10f-4425-8d3a-421a3fa05868",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "24b9f3e7-32bd-49b3-9655-a2da27dca013"
        },
        "item": {
          "id": "f6ed0756-fd42-47da-accd-c2ceb004fd55",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "6d88bd24-6908-4775-8e59-bc83729311d3",
          "status": "Created",
          "code": 201,
          "responseTime": 635,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "b16503da-f3b1-4eb1-af20-30741f946218",
        "cursor": {
          "ref": "e348af5b-93b7-4bf5-a1f6-cefee9dd0b97",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b53e6ad1-bafe-43cf-b9b5-7854dfdd7a32"
        },
        "item": {
          "id": "b16503da-f3b1-4eb1-af20-30741f946218",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "06c3b211-d052-41b5-9b2a-3a73599f5f75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c368e475-110b-4bd5-ab17-373ebb8d7f4c",
        "cursor": {
          "ref": "8b07f0ef-5580-4ba2-9cd7-a29b261025ea",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "1b233756-5f14-4928-b9b8-c51b8f47361e"
        },
        "item": {
          "id": "c368e475-110b-4bd5-ab17-373ebb8d7f4c",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f86efe06-48b3-4dfe-8d58-677088125481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce448c62-efb0-4eaf-b551-5c3c1ddcfccd",
        "cursor": {
          "ref": "f6333b25-aafa-42d3-91cf-cc4141b9aae3",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "b5752c14-6746-4009-b6f9-0828a54c419c"
        },
        "item": {
          "id": "ce448c62-efb0-4eaf-b551-5c3c1ddcfccd",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "6486618f-727e-4651-991a-6c378c24a686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc1dcb79-1a3b-4c2f-ae7d-2a87d9507291",
        "cursor": {
          "ref": "6de9565b-cd23-4a27-96f2-007993170523",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "b866f3fe-3120-4883-9f6e-3adfebe8063b"
        },
        "item": {
          "id": "bc1dcb79-1a3b-4c2f-ae7d-2a87d9507291",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6a532176-b2e4-4cc9-aed3-f4de15b36fba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ae98c54-cf2d-4ca6-93e7-846c2a9b608d",
        "cursor": {
          "ref": "0604ec79-8548-4525-95dd-94ff106a7acb",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4668fe57-d6fc-4a2e-b1b9-3f2e39c7155d"
        },
        "item": {
          "id": "4ae98c54-cf2d-4ca6-93e7-846c2a9b608d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "cb6453d4-c543-49af-866f-bb9fd732f324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "768e2847-a069-4d6f-9c0d-7fa04107bfd6",
        "cursor": {
          "ref": "3ba6ee2f-3a7e-49c0-9397-44984e53e5fa",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "130ed3ba-4464-4bd8-a147-939be631f3aa"
        },
        "item": {
          "id": "768e2847-a069-4d6f-9c0d-7fa04107bfd6",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "05de6815-a8d1-497b-8750-c15d298013d1",
          "status": "Created",
          "code": 201,
          "responseTime": 671,
          "responseSize": 724
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "edc7bdd8-5e97-4255-a787-1716d7c5c76b",
        "cursor": {
          "ref": "21a7d979-387d-4419-9d89-b950053c5c0e",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0b8e8476-f1b5-4734-952d-1bf65d68f023"
        },
        "item": {
          "id": "edc7bdd8-5e97-4255-a787-1716d7c5c76b",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "cebaea67-4056-421b-8aea-7762b13c7034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ef69a6-c2e1-4196-a127-50927a522b9e",
        "cursor": {
          "ref": "b1326ff9-9a5c-4c85-a355-e2990d53b6ff",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ad670e5e-35ac-4be7-9697-6f7fbc7c1b25"
        },
        "item": {
          "id": "e3ef69a6-c2e1-4196-a127-50927a522b9e",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "eb621b7b-9564-41ca-8635-dd2327c97d55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc5e248-b3d1-431a-8d77-fba92cc28fd6",
        "cursor": {
          "ref": "7d88d456-5299-4964-a3da-d6a41a9ce4e4",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "fff2e37d-e6d4-4025-85ff-653b2122f708"
        },
        "item": {
          "id": "acc5e248-b3d1-431a-8d77-fba92cc28fd6",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c347718f-fcc7-4c4e-9353-e97f58aab15d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ba79b24-4bcd-49ae-a1b5-a27cab7af796",
        "cursor": {
          "ref": "4ff63326-8a75-4208-9b8a-317ca54b05db",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "ab885301-e7a7-4f3e-b4c5-0ef171ce4f1b"
        },
        "item": {
          "id": "9ba79b24-4bcd-49ae-a1b5-a27cab7af796",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "18987207-c195-4953-9507-065633490425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39fe496b-e0a8-4263-bddb-2de59acfba7a",
        "cursor": {
          "ref": "fdc734e2-be89-4f82-b8a0-6275eaf414e3",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "651037fc-da87-47a0-aafe-7187eed11336"
        },
        "item": {
          "id": "39fe496b-e0a8-4263-bddb-2de59acfba7a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "20e550a2-d137-44a1-9173-01449d795877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1349cca-0c11-4d18-8639-270808c85329",
        "cursor": {
          "ref": "5264a331-eab4-4950-9876-436a223738b7",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d82195e6-8583-4d3b-88d4-4d8e4755d0de"
        },
        "item": {
          "id": "f1349cca-0c11-4d18-8639-270808c85329",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "56d365c3-797b-44ee-b6c8-8c5d7ff9cb69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "448386b9-bb73-495b-b900-02165bf971f1",
        "cursor": {
          "ref": "2fbe8672-0d70-493a-8b4d-68e4369953fa",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "6396d226-964d-4c83-94dd-711a8062bc01"
        },
        "item": {
          "id": "448386b9-bb73-495b-b900-02165bf971f1",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "0ba97785-cc56-4714-a2fc-4ac5f26727e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef8e4faf-7973-4779-963c-684da74c3865",
        "cursor": {
          "ref": "31fdc400-1c7e-435c-8f6a-24e403b534c7",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "66cc8727-27f7-4000-a907-bc50d6423562"
        },
        "item": {
          "id": "ef8e4faf-7973-4779-963c-684da74c3865",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "484c8db6-6c33-463f-b9d9-3a36d5a28610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43b37aea-87ba-4071-86a1-a61474457d57",
        "cursor": {
          "ref": "f8b14212-5636-4584-88f8-63f049aebb26",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "4e437ca3-5899-48dc-bd4b-896012790719"
        },
        "item": {
          "id": "43b37aea-87ba-4071-86a1-a61474457d57",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4375e1fe-5cbf-41ec-8038-db2c1cc90121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "3ae5ed3a-6de6-40b9-a79a-de8f67c50780",
        "cursor": {
          "ref": "a0db153e-5b33-4a27-8419-54107968b314",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "37f763c0-a29d-466c-8ab7-9ca6ef95655b"
        },
        "item": {
          "id": "3ae5ed3a-6de6-40b9-a79a-de8f67c50780",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "2e8d4337-01e8-46c1-a6ec-6b649bd135bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "24b6b0ac-c2ae-4bde-ba0e-7a40b90eba64",
        "cursor": {
          "ref": "34f2cd66-373c-49c6-a754-a1e8cbad2688",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "62aa268c-013f-455c-8cee-7cc739fae826"
        },
        "item": {
          "id": "24b6b0ac-c2ae-4bde-ba0e-7a40b90eba64",
          "name": "credentials_issue"
        },
        "response": {
          "id": "ef67e51e-b629-4dd3-9ea8-3531b647acf8",
          "status": "Created",
          "code": 201,
          "responseTime": 632,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe3bf216-bfd0-4958-8d32-a4b2d2ddfe69",
        "cursor": {
          "ref": "dc2dd715-c5b9-4582-84fa-730e437379be",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "73899df1-c059-4489-a9e0-daf54a3b597f"
        },
        "item": {
          "id": "fe3bf216-bfd0-4958-8d32-a4b2d2ddfe69",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "2c07085e-dac3-450a-9cf6-af627d550a51",
          "status": "Created",
          "code": 201,
          "responseTime": 647,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5376553-43fb-471b-86bf-6eda48acfd1c",
        "cursor": {
          "ref": "abebde7d-2194-4962-a95b-af46dcdeb413",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "9dda57da-b8d1-4f38-ae54-b1f1f222b96a"
        },
        "item": {
          "id": "d5376553-43fb-471b-86bf-6eda48acfd1c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4b6891e5-b1bf-4ce1-bd82-b7cb5fc8b2da",
          "status": "Created",
          "code": 201,
          "responseTime": 646,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b290d8d3-93b4-4d05-a52c-fd2f93901a92",
        "cursor": {
          "ref": "ecb6261c-0059-495f-a367-dc4b6dee7c74",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "2d22662c-4c53-4d19-9b17-b8efd4436111"
        },
        "item": {
          "id": "b290d8d3-93b4-4d05-a52c-fd2f93901a92",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a59c3cb8-7972-4472-a144-8cceac6481fe",
          "status": "Created",
          "code": 201,
          "responseTime": 657,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "a84035bf-38f5-460c-a30e-4a719261df61",
        "cursor": {
          "ref": "e4ff07a6-de66-4c84-9867-99366e260e3f",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d9851f6e-e3be-41fc-8e3a-5ba14d7c3b85"
        },
        "item": {
          "id": "a84035bf-38f5-460c-a30e-4a719261df61",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e59f5e56-e16d-406f-9e27-1e1330c39517",
          "status": "Created",
          "code": 201,
          "responseTime": 632,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "74ba61a7-0d56-4fff-ac6c-9d7209b2f417",
        "cursor": {
          "ref": "38840243-f1f1-4e27-9b2e-dee40cef6132",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "3b49be78-31e2-4927-89fa-00cf3684e1a3"
        },
        "item": {
          "id": "74ba61a7-0d56-4fff-ac6c-9d7209b2f417",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "aff62dd1-918b-4e98-9dfe-2636b692aad1",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "74ba61a7-0d56-4fff-ac6c-9d7209b2f417",
        "cursor": {
          "ref": "38840243-f1f1-4e27-9b2e-dee40cef6132",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "3b49be78-31e2-4927-89fa-00cf3684e1a3"
        },
        "item": {
          "id": "74ba61a7-0d56-4fff-ac6c-9d7209b2f417",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "aff62dd1-918b-4e98-9dfe-2636b692aad1",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "1f87d894-be05-4361-adc9-508900ac0c7d",
        "cursor": {
          "ref": "d2a3edcd-319a-40b5-b84c-0650fcc530c8",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "b30a84ec-680e-4b69-9aea-e1b74e52f4aa"
        },
        "item": {
          "id": "1f87d894-be05-4361-adc9-508900ac0c7d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7a360981-caf0-45f6-8cb0-768fa1b82e1d",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "14f04a2d-1417-4ccc-82b1-6f7e9856c825",
        "cursor": {
          "ref": "dd5a506b-f831-42e3-bd5f-5f848cb715e7",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "169562b5-cb37-47d6-a6b8-20206f6b4f25"
        },
        "item": {
          "id": "14f04a2d-1417-4ccc-82b1-6f7e9856c825",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0da4a55f-9c21-4f3d-91a6-b88c62d187f0",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "7921414e-e679-4959-946f-a456dc993595",
        "cursor": {
          "ref": "ebf1f92b-55d5-4fd4-af84-6fcb94e49948",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "92371e0c-c25e-4c61-a4ae-5ab9f7601e1a"
        },
        "item": {
          "id": "7921414e-e679-4959-946f-a456dc993595",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "42bfcc3c-567b-4a33-a208-8a1aee66fcb1",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "452db141-a4fe-430d-8014-7a82257d5809",
        "cursor": {
          "ref": "b3eef733-e1fa-4c53-a2b0-c93dee6b01ca",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e850f5ed-4131-49cc-9137-3a23cc68a9b4"
        },
        "item": {
          "id": "452db141-a4fe-430d-8014-7a82257d5809",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7c9b7b28-a43f-4538-b83d-565d8f3ae6a1",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "dd1cd696-bd38-458a-88e4-dc27ab850b72",
        "cursor": {
          "ref": "e24a0de7-eafa-4580-934f-6dac6ed5b9ed",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "7501d4f8-bca9-4292-a2fa-31992153cdfe"
        },
        "item": {
          "id": "dd1cd696-bd38-458a-88e4-dc27ab850b72",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "748baa5b-66a3-49ab-b8bb-79eb48bed0cc",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "227a2dea-4c02-4b8e-8b3c-588180347865",
        "cursor": {
          "ref": "3ab95475-99bc-45e8-9239-86b51f089402",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "34930639-7206-4b02-8a5a-fb38e4c0c3ae"
        },
        "item": {
          "id": "227a2dea-4c02-4b8e-8b3c-588180347865",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "43e76f5a-7dbc-436f-8ebb-7be8f5979962",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "e53ee43b-02f0-4e0a-8def-ee227c212348",
        "cursor": {
          "ref": "f2b18321-af7c-4a50-82b2-0cf5c91a0b85",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "0c800dc9-7488-42dc-8063-a58068d134f5"
        },
        "item": {
          "id": "e53ee43b-02f0-4e0a-8def-ee227c212348",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ee934ea4-411e-4b40-a0be-6faac7c69245",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "4dd89bd4-5501-4380-a476-eb0008dc349a",
        "cursor": {
          "ref": "bb129cd9-f629-4021-aa64-f7ce6d2e492d",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "278c4bcb-9634-4c2c-aafb-fc87cffc6a30"
        },
        "item": {
          "id": "4dd89bd4-5501-4380-a476-eb0008dc349a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "043d3835-1689-4168-be34-803079f81169",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "4ad8411e-7a38-4e69-9ffa-3f9f519f9008",
        "cursor": {
          "ref": "b7d7359d-0b2c-4e75-85b5-156c43896356",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "82c2ced0-4bc5-4e7f-803b-44870946e0e0"
        },
        "item": {
          "id": "4ad8411e-7a38-4e69-9ffa-3f9f519f9008",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "aad8eef5-932f-42fd-b372-2d6aa4d1f61b",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "cd1ea7a9-1c8a-4ef1-bebd-a34db4f13666",
        "cursor": {
          "ref": "f905b61e-be61-4656-a354-302468286d39",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "819b3d07-6606-4f6b-a3b7-4a859e0767ad"
        },
        "item": {
          "id": "cd1ea7a9-1c8a-4ef1-bebd-a34db4f13666",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c34fcaa2-336c-47ea-8964-6ccebe52c88e",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "5b4c0988-cd56-4f0b-8f0a-1641542e5a73",
        "cursor": {
          "ref": "6b0647c2-861e-46a5-9ecc-897a5d4a0a2b",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "bb29217c-87cc-439e-8e73-1aaf1acf3c15"
        },
        "item": {
          "id": "5b4c0988-cd56-4f0b-8f0a-1641542e5a73",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1fccb0ba-2397-4f20-9aad-80c47bc5e643",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "7d17e156-d1d7-4e5f-8116-2c809cd95d0e",
        "cursor": {
          "ref": "0aa3c046-9dc7-4912-8226-95c7fe38a0f9",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "113758f6-5476-4528-9fcf-d1e73490879e"
        },
        "item": {
          "id": "7d17e156-d1d7-4e5f-8116-2c809cd95d0e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "70590a6d-52a6-44be-bba8-0ff6b0853ec6",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "0d8c1977-f696-4a7e-acdb-00cbafab1386",
        "cursor": {
          "ref": "75a6a24f-f958-4d84-87da-038173516833",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "212c867c-c37e-4bea-872d-a340f097c5d8"
        },
        "item": {
          "id": "0d8c1977-f696-4a7e-acdb-00cbafab1386",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f7c3a7ab-5b57-4397-951d-d4e7132cb330",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "8c8dc36f-6ed2-4421-909f-b8b148508a01",
        "cursor": {
          "ref": "20f6601f-8553-4688-8648-0e8dc31881b9",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "020a2d03-e18f-445a-96fb-3965ab2603d2"
        },
        "item": {
          "id": "8c8dc36f-6ed2-4421-909f-b8b148508a01",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ea241a8c-4ecd-43ff-8b8a-213e099b18f6",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "fc716378-5e3b-42b3-811e-d75df23a1286",
        "cursor": {
          "ref": "101b84ce-1277-4c8e-a523-5811f2ead1ca",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "d5fcc9a2-e29c-4266-a4bb-85147d33311e"
        },
        "item": {
          "id": "fc716378-5e3b-42b3-811e-d75df23a1286",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5ea80407-a93f-4238-a91c-55d07c5783ae",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "c77a6274-e813-4389-a090-f8176b6ff0b8",
        "cursor": {
          "ref": "c5e61808-0102-4065-b72e-7ce937fbe6e3",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f580efa1-3342-44a0-960b-8096405b0f23"
        },
        "item": {
          "id": "c77a6274-e813-4389-a090-f8176b6ff0b8",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e3769772-c489-46d7-b8a8-a40ad24b0734",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "9348dcd8-23f5-4d55-b247-fbec815bbb74",
        "cursor": {
          "ref": "c68a8420-d24d-46c4-883e-4ca1a7e204fd",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e880f672-ec0f-4efb-bbf8-458fe6e29832"
        },
        "item": {
          "id": "9348dcd8-23f5-4d55-b247-fbec815bbb74",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "22d90cbd-d49b-4ffe-909c-7b557ff9c6fe",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "afe86ef6-95a9-41d8-8a24-5615b55301d9",
        "cursor": {
          "ref": "f685de55-f095-46e2-bd56-e56d1cfe55c3",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "83c57447-70cc-4dad-ba2e-7cc8e0175072"
        },
        "item": {
          "id": "afe86ef6-95a9-41d8-8a24-5615b55301d9",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "fbadcfe6-b775-4dc9-b0e7-5a293110831f",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "b18fa7e1-e994-480d-b1fe-b48ab8b34448",
        "cursor": {
          "ref": "673ba675-a25d-4119-963f-ca68c5fead85",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "de096d1b-f33b-4b7d-9afd-40ecbd7631d2"
        },
        "item": {
          "id": "b18fa7e1-e994-480d-b1fe-b48ab8b34448",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "17e62f2f-999f-45a2-ba5e-47eea44da838",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "d9492a15-2692-48cb-84ee-ddf051f0fb3f",
        "cursor": {
          "ref": "be9f9113-5e3a-4dc2-99dc-ff2d40e0e1a9",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b18e3087-8a35-4bc8-8acb-488b5141c6d0"
        },
        "item": {
          "id": "d9492a15-2692-48cb-84ee-ddf051f0fb3f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a0d02810-762d-420d-94f3-5b62b14c5a02",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "78faa23b-12dd-495e-baa3-7a2adadac0e5",
        "cursor": {
          "ref": "e45e6c5d-13cc-4d24-b3a8-d9e4345bbe15",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e132ae44-c41c-4f81-bd24-3bdbd6f91e74"
        },
        "item": {
          "id": "78faa23b-12dd-495e-baa3-7a2adadac0e5",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "75326fe5-0d75-4d1b-b003-0f5915753e68",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "868de6ee-dc7d-4003-85eb-e007de12aec8",
        "cursor": {
          "ref": "20b5c033-74bb-4875-9b84-e10f4d55cb37",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "bb4e8547-171d-4952-851a-8a8973212c6d"
        },
        "item": {
          "id": "868de6ee-dc7d-4003-85eb-e007de12aec8",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "17baccf8-b1cb-4145-84e2-56946ab34e77",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "3bfd01b6-860d-4e9e-998a-ccde204808a2",
        "cursor": {
          "ref": "9f11364f-185b-44b5-a619-2c876ecf48e2",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a1389468-ca92-4f16-866f-a2e8e2891675"
        },
        "item": {
          "id": "3bfd01b6-860d-4e9e-998a-ccde204808a2",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "dc59b4bd-8252-45df-8bb3-4760f5d3743a",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "40300c6a-a676-44b6-8f07-8f74c302a271",
        "cursor": {
          "ref": "17a20adf-3da9-4aa9-bc1f-88dbe2a48e57",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "016d727e-bede-44ca-92bd-8204b564d0f7"
        },
        "item": {
          "id": "40300c6a-a676-44b6-8f07-8f74c302a271",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b92738b7-aaf1-4845-9e84-6df877615d03",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "304d9558-e031-4812-ad56-c15a24263597",
        "cursor": {
          "ref": "5938e21f-87f6-448f-bc3e-5ef3a3f1a37c",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "8966f08a-1af8-4a23-911a-267d46c7a0aa"
        },
        "item": {
          "id": "304d9558-e031-4812-ad56-c15a24263597",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8fa5ce7c-2293-4a47-83d6-a1190d57af99",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "2f18abd9-e39f-4829-9f8f-029f6aeda934",
        "cursor": {
          "ref": "9c562af1-809a-4e16-8a02-073c1a64c168",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "930f4bf9-f7f2-4902-a1cc-74ed19cec457"
        },
        "item": {
          "id": "2f18abd9-e39f-4829-9f8f-029f6aeda934",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c418cd58-609b-414b-a6f1-16b14540dff4",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "52eedbdf-0ba2-4c49-90af-2cecbc81db30",
        "cursor": {
          "ref": "02d94008-e829-4f20-abe1-6ed04aff1ad7",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "46f3d760-e18a-4b15-914d-0cf410349176"
        },
        "item": {
          "id": "52eedbdf-0ba2-4c49-90af-2cecbc81db30",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "98fa0912-9056-477c-be8b-031222b59220",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "f353ed64-6f97-43c9-aec9-c1dc4322b26e",
        "cursor": {
          "ref": "5e21b0f0-9a30-4c8f-b8e2-f6f1976fea09",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "48cf97fb-06ff-4f07-a40c-cc294b0e0217"
        },
        "item": {
          "id": "f353ed64-6f97-43c9-aec9-c1dc4322b26e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a80a04e4-3673-413f-a47d-b52923fe9cd7",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "e662c36f-a9f0-4a34-8fa4-a634695d65e8",
        "cursor": {
          "ref": "d65a7085-f6c1-4806-aac6-df891c9f90b5",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "cabcf612-cb5e-4db5-b8c9-a260adb8453a"
        },
        "item": {
          "id": "e662c36f-a9f0-4a34-8fa4-a634695d65e8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5bd708b3-be6b-45e5-990f-4e885e7c8ee3",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "3cb3b387-0242-4f80-8d06-6cc40112f582",
        "cursor": {
          "ref": "2148d555-562d-4d9b-aba4-4fe4111893f9",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "197518d3-80b7-472d-9a58-359b850741f5"
        },
        "item": {
          "id": "3cb3b387-0242-4f80-8d06-6cc40112f582",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6b671f80-ebcd-43ba-9a83-b311210db7c3",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "10bb518f-5f86-4c41-8a78-399f6dd87a9b",
        "cursor": {
          "ref": "01e9c599-6d30-404a-88e3-2596719d558c",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "697967aa-d750-4379-95b4-54fc5b17dac0"
        },
        "item": {
          "id": "10bb518f-5f86-4c41-8a78-399f6dd87a9b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "ed89b212-4a0e-4ad2-b0dc-7ba33245ec94",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "642f8292-b216-44f7-9e3b-182ec5696b89",
        "cursor": {
          "ref": "af623496-de94-4172-9df4-6719794100c1",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "195fc9b3-e551-44ce-b022-d138f28a5da1"
        },
        "item": {
          "id": "642f8292-b216-44f7-9e3b-182ec5696b89",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "046bbab3-a939-4b4a-a3b8-219013444776",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8771a18-5f9a-424a-b610-9694e1aa8e86",
        "cursor": {
          "ref": "6738e0e3-19a8-4fe3-8379-1d58c5e5cf38",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d3cf20b2-ab0b-4fa0-85c6-e0732d5ff1b4"
        },
        "item": {
          "id": "b8771a18-5f9a-424a-b610-9694e1aa8e86",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "d57a8c65-bd86-445b-aeb7-8614e8637109",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 30,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cbe63cf-9bd8-4ec8-854e-1dad12cda09d",
        "cursor": {
          "ref": "a9239ba2-6cf2-4257-a632-85078b445e9a",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a6b5e49d-f989-425d-8045-fe37d6a4904f"
        },
        "item": {
          "id": "1cbe63cf-9bd8-4ec8-854e-1dad12cda09d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4c6be290-78dd-4448-8a46-d8d247a5261a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cbe63cf-9bd8-4ec8-854e-1dad12cda09d",
        "cursor": {
          "ref": "a9239ba2-6cf2-4257-a632-85078b445e9a",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a6b5e49d-f989-425d-8045-fe37d6a4904f"
        },
        "item": {
          "id": "1cbe63cf-9bd8-4ec8-854e-1dad12cda09d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4c6be290-78dd-4448-8a46-d8d247a5261a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e8bfc78-83ff-4a65-917e-dd0d26803525",
        "cursor": {
          "ref": "29d70b9a-15d2-4c64-85de-4d41bd392f3f",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "868179ab-6267-4538-9dd3-853e9b5cf506"
        },
        "item": {
          "id": "9e8bfc78-83ff-4a65-917e-dd0d26803525",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "9f061815-9df5-4c11-b3de-4c8b06975fb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af7d58b6-8e44-44a6-97b0-46ffce0a5bc6",
        "cursor": {
          "ref": "dc112b0f-8658-4bc7-95af-995d0ea12293",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "0a418a92-a48a-44c7-a5d4-74986dbb5656"
        },
        "item": {
          "id": "af7d58b6-8e44-44a6-97b0-46ffce0a5bc6",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "d4331391-1d30-4814-907f-170280d322b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6ad4217-0cba-4566-8a11-d36bb142fcbf",
        "cursor": {
          "ref": "28d564e7-2ff1-4345-b0e6-862f32190201",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "a66ccdf0-69e3-4401-99df-e81a49478fa5"
        },
        "item": {
          "id": "e6ad4217-0cba-4566-8a11-d36bb142fcbf",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "cad286f9-02d7-472d-8b6d-b8ed7f576edc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c39fb31-5f81-4313-9e44-7af1e05f44e5",
        "cursor": {
          "ref": "cc99e48a-c19d-465a-af75-17db30ace3d5",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "905941e0-3832-4da0-8b2d-54d9db722af6"
        },
        "item": {
          "id": "6c39fb31-5f81-4313-9e44-7af1e05f44e5",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "0579eeef-846d-484b-a660-dd8c53ab5928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a68677a-fdfb-4771-8e6b-c3b940f7270a",
        "cursor": {
          "ref": "09215115-7030-4880-ab08-d913ce3c8fd0",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8d7aa5e1-5d56-4280-88c7-c22b526801f3"
        },
        "item": {
          "id": "2a68677a-fdfb-4771-8e6b-c3b940f7270a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "8f29afc0-37b6-41c1-ad2f-eb8a79158660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e327f971-d6f7-458a-9b09-fa4b01e8c4dc",
        "cursor": {
          "ref": "65abd422-c93c-48bb-93f7-9e0f4c2d9573",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "1b0e1363-ee08-4f8e-ae0b-1519db3397d3"
        },
        "item": {
          "id": "e327f971-d6f7-458a-9b09-fa4b01e8c4dc",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "7d423dff-e36e-44bf-8d14-b008b3e71164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f99457cd-92c3-49c5-a01c-e1f41c354485",
        "cursor": {
          "ref": "6500167b-c90c-489a-b476-9a868ef8ed93",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "0c1c4c71-5820-4ad0-aef1-0b442f7aaacd"
        },
        "item": {
          "id": "f99457cd-92c3-49c5-a01c-e1f41c354485",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a6ef06cf-2058-4ff9-bd58-eb94ffa37fd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f448002-42a9-47d9-bc0b-7b55d87601da",
        "cursor": {
          "ref": "1b643993-66f0-4720-bb38-a28db09480d4",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "474d0096-798f-4bbc-ae81-9ca945615bd0"
        },
        "item": {
          "id": "2f448002-42a9-47d9-bc0b-7b55d87601da",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "29bad580-521e-48e0-874e-ac127f74564b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48153453-e256-4258-acce-cdb99347bb74",
        "cursor": {
          "ref": "40870b8e-add3-4f26-a1de-b187829b9fa0",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ea06c79b-3dc0-4b71-bf7f-2b5459019ad2"
        },
        "item": {
          "id": "48153453-e256-4258-acce-cdb99347bb74",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "1cbdb099-59a1-4ff4-bda2-749e55fa37e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95a78c31-259e-40ba-8520-18ceb281c8c4",
        "cursor": {
          "ref": "88648968-ad98-4c28-b6e0-b9acc28b79a2",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "8ff22925-1c0c-4b1b-837c-2eb185f0bbbf"
        },
        "item": {
          "id": "95a78c31-259e-40ba-8520-18ceb281c8c4",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e7e0685a-5b88-4c48-92e1-7164bb4ff02d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "476fa0c5-f5af-43dc-97e9-a6baf0d22853",
        "cursor": {
          "ref": "ca71d6de-ac22-42ad-b862-cf60e7f3db53",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "574137b5-b09f-49d6-800e-355df1ac64ba"
        },
        "item": {
          "id": "476fa0c5-f5af-43dc-97e9-a6baf0d22853",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6d92631c-5b83-404f-90cb-823f8cdeba65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6b15b41-b032-43f8-812a-d1bb4e1aba5c",
        "cursor": {
          "ref": "a4b1e63f-0ff3-4d8b-bc18-61451eeb3b83",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e5a21d90-4386-4036-aeb8-8f53494f1c2d"
        },
        "item": {
          "id": "f6b15b41-b032-43f8-812a-d1bb4e1aba5c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "0eb4499d-2cef-47e9-abfd-9e5a64b95716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab137858-50af-4e9f-bec9-dd6e8b48f09f",
        "cursor": {
          "ref": "f1ee7e04-2018-4184-99ac-390677f72ce5",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "1acda946-12ce-4b6b-8c53-38617adb8b29"
        },
        "item": {
          "id": "ab137858-50af-4e9f-bec9-dd6e8b48f09f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "0c70d934-4459-48a7-a00b-a6337e833477",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d49d8e0a-535c-4ba8-9459-f231fb9a7e89",
        "cursor": {
          "ref": "da7b4700-c002-4bd2-a74d-7128f080aa35",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c2d24d26-eb44-44a8-a577-8b68e2a16b7d"
        },
        "item": {
          "id": "d49d8e0a-535c-4ba8-9459-f231fb9a7e89",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "6ce35d79-f5ad-4b60-a86d-c7b8bd0ca67d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fcfb965-499d-49be-af41-7955e2d70988",
        "cursor": {
          "ref": "1949a4fc-8c51-42bb-a2da-335711d93592",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c81ea9bf-b7cd-432e-817a-275504c23e99"
        },
        "item": {
          "id": "0fcfb965-499d-49be-af41-7955e2d70988",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "9255a3ac-66b9-4293-ad9b-04b583f34c9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8eea0a1-2908-46a7-bb85-0728fece142a",
        "cursor": {
          "ref": "4d74a1fa-7c16-45a3-af43-3756d5ebcaf3",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "e3f36964-4b0c-47bc-962a-1bf74e571aee"
        },
        "item": {
          "id": "a8eea0a1-2908-46a7-bb85-0728fece142a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "523118d7-4e4d-4476-96b4-0332a26869e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "803241ff-0da4-4b1d-906b-b19d7cd209a3",
        "cursor": {
          "ref": "65f91248-c711-4ef9-bc34-357cd871bb33",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b1e4136e-a69c-4e63-8f6b-d91ff2030d3d"
        },
        "item": {
          "id": "803241ff-0da4-4b1d-906b-b19d7cd209a3",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "6b67c924-1ba2-41c6-9f2e-fb9e44e44cce",
          "status": "OK",
          "code": 200,
          "responseTime": 588,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "d4ebfe4d-3514-4662-bba3-b677a9aa821c",
        "cursor": {
          "ref": "c5ac0a01-5c8e-4f9a-919b-f941098fd9b7",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e13364f7-2c98-4a27-a17e-da49ca6da70a"
        },
        "item": {
          "id": "d4ebfe4d-3514-4662-bba3-b677a9aa821c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "65bbd56f-963b-470b-9076-bb96d79ef701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 271,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d21df74f-402e-41a1-a9ea-191b97053941",
        "cursor": {
          "ref": "3b18e865-acd1-46ae-a0d5-dab9e855e990",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "91ccd324-55d8-44dd-970d-45a2512a2d2d"
        },
        "item": {
          "id": "d21df74f-402e-41a1-a9ea-191b97053941",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "250e4258-064c-49fb-9aeb-6ee64441ed69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 270,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eaeccdb-a2f5-49ec-a4e2-418547431572",
        "cursor": {
          "ref": "d02bd310-5bb8-488b-8c71-1900a9c3091c",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c957f30b-dda9-4da9-9008-d8db155f012c"
        },
        "item": {
          "id": "4eaeccdb-a2f5-49ec-a4e2-418547431572",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "5c3c3b44-610a-4ac9-a3c4-3655a412d5e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 265,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38054ef7-7364-42cc-9f04-71f060840452",
        "cursor": {
          "ref": "2c559776-1d8f-4d45-a517-6ccfbed9c24a",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c4590638-1c4a-407d-88d3-6e0382f610e2"
        },
        "item": {
          "id": "38054ef7-7364-42cc-9f04-71f060840452",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "574d53f3-d087-48ad-9acf-d42b73ff47f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 270,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5519ab2a-9ca8-4ef0-830f-5ed0c60ff751",
        "cursor": {
          "ref": "19b06a55-073c-408f-9be0-292dd702009d",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "bebf61f5-3365-4432-b01a-296a9f3d6388"
        },
        "item": {
          "id": "5519ab2a-9ca8-4ef0-830f-5ed0c60ff751",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a6617f10-4507-491a-830b-d354962a4c3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 283,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a460377b-f6a7-4dac-a685-59bda0233cb2",
        "cursor": {
          "ref": "f0890d2f-e2c9-4308-b866-d4570b75846b",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "8b1b7f4e-cc71-41a0-8620-1e9b5e0d386b"
        },
        "item": {
          "id": "a460377b-f6a7-4dac-a685-59bda0233cb2",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c8dafd1b-3345-4dcb-b93d-44ffce5842cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 270,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f2c02c-dd12-403b-ac35-e6e17fea291c",
        "cursor": {
          "ref": "da712af0-a218-4f7c-958a-76897fc75d72",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e3399177-4a73-49dd-b98d-895818e44be9"
        },
        "item": {
          "id": "f1f2c02c-dd12-403b-ac35-e6e17fea291c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "95e5ac16-ad9a-41a1-a3b9-f583dfe782ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0cc3b82-e006-4c91-9f18-0ee5ebd300b9",
        "cursor": {
          "ref": "fa327414-e528-427f-9223-c56b32fae7f9",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "74648476-2834-4cf5-91b8-d30bc688431e"
        },
        "item": {
          "id": "e0cc3b82-e006-4c91-9f18-0ee5ebd300b9",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "8c03f4c1-e7a6-434e-a97f-dd4110f91dad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "632864da-9f1a-42a1-bdbe-86ca5edb7b44",
        "cursor": {
          "ref": "a01f8e96-5053-4b8a-b27e-3922a2623b4c",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b153e016-be6f-4c1b-87d0-bfe841a69c9d"
        },
        "item": {
          "id": "632864da-9f1a-42a1-bdbe-86ca5edb7b44",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "96d3bfe8-43ff-438e-9c38-56847568da34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baeffcb3-065d-41fb-af37-49ece0eb3be3",
        "cursor": {
          "ref": "91c25411-d950-4397-aecd-d9c02363414e",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "30493467-5901-4f64-85c7-c3b2a66a706f"
        },
        "item": {
          "id": "baeffcb3-065d-41fb-af37-49ece0eb3be3",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "983f8142-67c0-4391-87af-2dc4ea5a9231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f38c3ee0-fa50-46b2-97c3-3e4bc18e5cf1",
        "cursor": {
          "ref": "86e4f919-7918-4b4b-8540-33e88621e026",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "6f96bad2-eff0-41aa-8a01-b91e4e5231ce"
        },
        "item": {
          "id": "f38c3ee0-fa50-46b2-97c3-3e4bc18e5cf1",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "23c481ef-8cf0-43c7-ad28-e6b4327fab19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad6de78e-1002-4e85-b032-f9371b7eaa5b",
        "cursor": {
          "ref": "5c114ba5-3f7d-4d0b-b606-a6e5fcbe9235",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "30c06036-77cd-47a8-b07a-91eb3cc414b7"
        },
        "item": {
          "id": "ad6de78e-1002-4e85-b032-f9371b7eaa5b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "957bad42-64be-4a3c-b1f2-0ebd6501dda3",
          "status": "OK",
          "code": 200,
          "responseTime": 235,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "99aa218c-f4b9-4b5c-8859-73f2190bbb6c",
        "cursor": {
          "ref": "af021336-0bf3-4055-9f39-4afcda1c882a",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e542323a-5933-4b48-923c-54209d78aa25"
        },
        "item": {
          "id": "99aa218c-f4b9-4b5c-8859-73f2190bbb6c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b12f4f39-22ec-4ce6-9438-6ace7522434b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b40c015-9488-4c1c-a331-3442eaff13f6",
        "cursor": {
          "ref": "a5caa14c-f549-4f24-9128-079f759deb0d",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "36029bf9-8ab8-4b6a-b306-af236214e001"
        },
        "item": {
          "id": "1b40c015-9488-4c1c-a331-3442eaff13f6",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "45b1356b-ad4f-43a4-8a94-34f84157e68c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3700b7d-fb20-4d10-be24-6e223f4c5b57",
        "cursor": {
          "ref": "e1fe91b3-671f-4fc2-a9bd-4affcb6ed767",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "eec3f1e8-e1e1-44e2-a98e-981ad59de4b6"
        },
        "item": {
          "id": "a3700b7d-fb20-4d10-be24-6e223f4c5b57",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c0f20990-a8e0-4820-9908-3523e896f4ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4761d16a-9a64-48d2-bd59-67c483781a3e",
        "cursor": {
          "ref": "0df6dbde-dc64-4575-89c9-2e5d5f9f061d",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "5896980c-3387-4183-b265-fa29881f81f3"
        },
        "item": {
          "id": "4761d16a-9a64-48d2-bd59-67c483781a3e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "7a6a5a0d-2812-47c6-92ea-4a5e8a85a6c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 241,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be41abc4-d977-47c5-8c9f-924f8d1f8e36",
        "cursor": {
          "ref": "ee3ea934-9672-4674-a115-afd2a9ed5db0",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f1dc9471-cd0e-4141-8161-968eb7c2e654"
        },
        "item": {
          "id": "be41abc4-d977-47c5-8c9f-924f8d1f8e36",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "bb0da537-65ec-426c-b5c2-3cfc448e7cf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88f26da4-6e7d-4bc7-ab66-7c23e9a23616",
        "cursor": {
          "ref": "4e2b9c76-92d0-4abd-935b-cf85cddfbee3",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "8835dfbf-3b6a-4da5-9465-7297a3a12746"
        },
        "item": {
          "id": "88f26da4-6e7d-4bc7-ab66-7c23e9a23616",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "2f500b06-2e94-4395-b8de-b3d2ca4cd08a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f73a37e-76db-4967-8787-b7233120d23f",
        "cursor": {
          "ref": "b69cfbaf-b230-49de-80e6-097d77890559",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c097c833-22bc-460e-8bfd-3beab144f213"
        },
        "item": {
          "id": "9f73a37e-76db-4967-8787-b7233120d23f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ef8883c4-bef9-4b2b-9923-b11047c6aadb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b477daac-ce7d-4c57-80f8-2cf46bad3f96",
        "cursor": {
          "ref": "a2d43644-962f-484e-9b78-95a171c6895c",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "aab77da9-1d45-4898-a628-261f4ef13e1f"
        },
        "item": {
          "id": "b477daac-ce7d-4c57-80f8-2cf46bad3f96",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "a26ca990-4c55-457e-87fc-f5765a1acd32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 262,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8882fa1a-96c7-45e7-b54f-8a316f52a0f3",
        "cursor": {
          "ref": "2e7b5e73-bb00-4e72-86c5-c24f03d36241",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "da6b4e80-6f98-473f-9ce8-03b8fdd3d590"
        },
        "item": {
          "id": "8882fa1a-96c7-45e7-b54f-8a316f52a0f3",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a7fdc42c-6b78-4274-9381-27d0b7d4454e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11511f0b-1ac0-428c-9e55-2db2471a30f7",
        "cursor": {
          "ref": "5dbda8ba-5095-4113-8b0f-d78878c57182",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "50246d8b-eb0d-4eaa-b43e-24804731db60"
        },
        "item": {
          "id": "11511f0b-1ac0-428c-9e55-2db2471a30f7",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "2ebb2fcb-fd88-4ab8-8b18-4468698a6a97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 749,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42983962-1720-4bb3-b855-cc08807072bd",
        "cursor": {
          "ref": "472b7cc3-eb3c-4a7c-87bb-796e409a5999",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e7570f03-dfdb-4e9f-80f4-da041c5b0478"
        },
        "item": {
          "id": "42983962-1720-4bb3-b855-cc08807072bd",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "4c19c614-b749-4673-bd5e-ea2e8b227688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 297,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f99219fd-dac5-48c9-91c7-fce17eb7d8c6",
        "cursor": {
          "ref": "807a4844-5262-4692-9ff1-1b3403057b69",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "387e9fc2-390e-4079-8b86-88973af52269"
        },
        "item": {
          "id": "f99219fd-dac5-48c9-91c7-fce17eb7d8c6",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c92c2e7f-1412-4e8f-9c22-9885f23f8d7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 296,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "589f393a-a671-4d06-89f4-cd6bda060001",
        "cursor": {
          "ref": "1d395015-f74a-409b-9e22-2c46ea20669a",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "1d54efc6-6825-4806-bf06-a8cea0b40cff"
        },
        "item": {
          "id": "589f393a-a671-4d06-89f4-cd6bda060001",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b4c5d10f-8285-409a-96c1-994dd774f959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 294,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f5e2773-af7c-40a5-b031-77682b06cf9a",
        "cursor": {
          "ref": "cf4e251c-2493-42ea-a052-19fc44cbb183",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "197c07a7-0b6a-402e-8ef4-0225a60b2755"
        },
        "item": {
          "id": "8f5e2773-af7c-40a5-b031-77682b06cf9a",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "8db7155d-0be2-4c60-96b4-961374c037c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 295,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "011e8c72-1ee0-442d-9bcf-f0626946d57d",
        "cursor": {
          "ref": "2c12cbce-297f-4971-9e43-9076580b6439",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c67191ef-deb2-409d-8434-6c0f584802c8"
        },
        "item": {
          "id": "011e8c72-1ee0-442d-9bcf-f0626946d57d",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "f3fe4a34-7bfd-476f-b4fd-f8f018c72096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 299,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d7fca6e-df0c-4e00-b4d3-7681c41649ca",
        "cursor": {
          "ref": "9bb70c6b-653e-4358-8695-c18a9a0bccb6",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "342efc0a-0d42-40dc-a154-5262f1b6363f"
        },
        "item": {
          "id": "0d7fca6e-df0c-4e00-b4d3-7681c41649ca",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "2d2691a1-28e2-4dcc-abec-aedfe15d9acd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 301,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b7acbe9-a04a-48e7-9d15-f9574fa54a3a",
        "cursor": {
          "ref": "e613b0b2-52ac-4c82-9e41-9afff1c9c64d",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "1167910a-f7e2-4034-a4c7-4213a5b4b68a"
        },
        "item": {
          "id": "6b7acbe9-a04a-48e7-9d15-f9574fa54a3a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "2479162a-efb7-4cbb-95ac-a671771ee001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 311,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ac2ad24-874c-4e82-954a-875bab503bdf",
        "cursor": {
          "ref": "9e0e9d53-5ba6-424e-be5d-3212463a323c",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "b3681d3a-7855-4c6e-b3a8-26767059d626"
        },
        "item": {
          "id": "7ac2ad24-874c-4e82-954a-875bab503bdf",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "65c651d1-650a-4d86-8efe-5a2e1207f67d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 306,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03f699ea-f6e2-4099-92e4-8c2bf9872b62",
        "cursor": {
          "ref": "31b4175e-eebd-4cc6-bc2d-4b55a1617b01",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "dcdd5f01-0ad6-4b18-b175-c6d6368f7b9d"
        },
        "item": {
          "id": "03f699ea-f6e2-4099-92e4-8c2bf9872b62",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "7bd271d1-42c7-405e-95f7-6058d5dbde87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 290,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1f42da4-fa35-463c-8aa4-030353d4409a",
        "cursor": {
          "ref": "48532965-a0da-46f9-aa71-680393b25641",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "03e1793c-17b4-4894-99a5-a6170996fcf7"
        },
        "item": {
          "id": "e1f42da4-fa35-463c-8aa4-030353d4409a",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e0a5fe58-6d75-48d3-a65b-b15175b574a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 295,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35f975a5-ca1d-40a4-b583-408176caf174",
        "cursor": {
          "ref": "296e0296-292c-4668-9bf9-f625e33a82bc",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "963fdf3f-437f-4313-b3d6-5512bec6cc66"
        },
        "item": {
          "id": "35f975a5-ca1d-40a4-b583-408176caf174",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "1913e656-35a9-46fa-86dd-6e9ac0abb92d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f5baa0a-8d54-4147-8d0d-09fa8da8a193",
        "cursor": {
          "ref": "892beca7-4af5-4a20-a68c-74ba3a8e1da8",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "588cfd46-f47e-43fb-9e4d-ddc1f80152c5"
        },
        "item": {
          "id": "1f5baa0a-8d54-4147-8d0d-09fa8da8a193",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "53e4f26c-d866-497c-a6f9-8f969f2ff26c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 344,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64510e96-9fbe-45a9-806a-af10842cda1f",
        "cursor": {
          "ref": "5119ec01-c0fd-4112-9f7f-691914c65633",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "78198020-967f-448c-bb4b-9ee5907fa3eb"
        },
        "item": {
          "id": "64510e96-9fbe-45a9-806a-af10842cda1f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ae7a8476-6f17-466f-909c-25c6e61645ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 311,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bf5720a-35e3-4f1e-a7ea-be1352a50a31",
        "cursor": {
          "ref": "8a7771d8-6622-4c6d-815d-18d1b7f08162",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "9b1324e6-ecb3-437d-b7fa-72f2e6703b0f"
        },
        "item": {
          "id": "9bf5720a-35e3-4f1e-a7ea-be1352a50a31",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f2927476-121e-473e-8758-4fc7c14e1703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 295,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "014b7ec4-b47a-47ef-8f81-43cbe0e338c7",
        "cursor": {
          "ref": "2ab75f01-0df3-4376-8183-854d91c81e95",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c3b5078b-9098-442d-9f46-a3c2c486ccc1"
        },
        "item": {
          "id": "014b7ec4-b47a-47ef-8f81-43cbe0e338c7",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "0875ec00-3e46-4d7d-b3de-e0d0639af3b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8266f10-29e9-478f-a5e9-fbd702e37181",
        "cursor": {
          "ref": "c9d7b836-bd13-45be-b728-cbee8aaebfaf",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f74823cb-6e8e-4642-8fce-dded273655df"
        },
        "item": {
          "id": "a8266f10-29e9-478f-a5e9-fbd702e37181",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "87e89f9d-8a8b-4b46-94a7-e0bf8c7ad9f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5313ecb6-2fcb-454b-a762-6018978e2860",
        "cursor": {
          "ref": "e70fdb66-e3f4-40fa-80d4-458d2930cab0",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "32683745-f260-43b1-939c-92e034628d34"
        },
        "item": {
          "id": "5313ecb6-2fcb-454b-a762-6018978e2860",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "67de9664-e86b-47df-ac52-a00b1de70f3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f988ce1f-2b47-4ade-9c98-4dc9280d61f8",
        "cursor": {
          "ref": "c113c9be-0567-4d11-b733-3e4aa1916ae5",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "5172959e-cace-4815-bfab-7ff03ebfee9b"
        },
        "item": {
          "id": "f988ce1f-2b47-4ade-9c98-4dc9280d61f8",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "924741d8-1b8b-4936-8db8-6b0685b2cdb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 294,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c9837d-88e0-4de8-bfd4-6a4e635071dc",
        "cursor": {
          "ref": "5facbb52-9421-47b2-9b42-af66c84afcaf",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8e34f05a-a264-41ee-8c04-cb72e108d6fe"
        },
        "item": {
          "id": "36c9837d-88e0-4de8-bfd4-6a4e635071dc",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "452166d3-fcd6-4a8c-90e1-08e4cde2a135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc285eb-3c16-4f38-be23-6f070001f5dd",
        "cursor": {
          "ref": "706f81f9-4170-4c28-9d56-e8b361e459a3",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "0012c999-b5b8-408b-89c1-dfa009a4cca7"
        },
        "item": {
          "id": "bbc285eb-3c16-4f38-be23-6f070001f5dd",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9e63aca2-a9b7-4519-a00d-275448023a62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56ec79bd-f861-4b18-a216-5885acbdd5fb",
        "cursor": {
          "ref": "d27b9017-9659-49ef-82b8-99bc78d9cfdb",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "54b09276-19ab-4edb-be89-7e7077154c86"
        },
        "item": {
          "id": "56ec79bd-f861-4b18-a216-5885acbdd5fb",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "1b9b5f04-66ce-4cc9-9e4c-f6f6aececabc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71708909-fda7-449c-b691-ffda11755e16",
        "cursor": {
          "ref": "a6f81321-2121-438e-aee6-e9da974f31d9",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "26bc61aa-c066-4413-ac7f-34bccd7531ae"
        },
        "item": {
          "id": "71708909-fda7-449c-b691-ffda11755e16",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4347d66e-8b9b-4b0f-b30e-129d6a956887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e173744b-b4b6-4478-9b2b-96dd9452d1d7",
        "cursor": {
          "ref": "f238364f-3def-48cf-adce-76d5bdee3929",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "335988c3-0de6-41f3-a410-2f34b1ebcbc5"
        },
        "item": {
          "id": "e173744b-b4b6-4478-9b2b-96dd9452d1d7",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "1243cd5b-1761-4787-bbb3-f367f54da67c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 290,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5be7045b-a349-40f5-87f8-534a5916ebe3",
        "cursor": {
          "ref": "66eef620-67dd-4615-92e8-cf9d54943ab4",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "1b38093a-7fa0-49c2-ac96-92b2d3e0c5e3"
        },
        "item": {
          "id": "5be7045b-a349-40f5-87f8-534a5916ebe3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "8403fed8-c1ea-4f30-a3da-6c38437e4331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "344e34e3-ea08-409e-934b-b1f1ceafb451",
        "cursor": {
          "ref": "75134280-68d4-4f5a-b6e0-a2d74089a796",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ebde4c56-d802-4ef4-831d-107cc8490b44"
        },
        "item": {
          "id": "344e34e3-ea08-409e-934b-b1f1ceafb451",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "3241de5a-4819-4688-8fbe-58a79646c787",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0e1d1d1-4dfe-49eb-b048-e929a3a8e081",
        "cursor": {
          "ref": "8b57e240-c818-41b1-8464-40e47b68b245",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "b9428ae7-7eed-4674-a2b2-30e9ceaab91c"
        },
        "item": {
          "id": "f0e1d1d1-4dfe-49eb-b048-e929a3a8e081",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "71116a6c-41bd-4d83-98e6-e8bd0cb1cb67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d303aa52-b03d-4774-902f-62424dd123f6",
        "cursor": {
          "ref": "64db2147-02e8-4b59-ab26-a9dddc15faf6",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a97eb3f3-f14c-4022-af16-29289f5dbcdf"
        },
        "item": {
          "id": "d303aa52-b03d-4774-902f-62424dd123f6",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "6f42a8c5-1fef-41f9-a77e-658648938be0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18d664ec-5e1e-4d4b-aa44-ee1c2eee23e9",
        "cursor": {
          "ref": "9e19b509-0af2-4fdc-a3ac-65d8673376cd",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "142f42d1-f786-4a9a-9554-dca82d10471d"
        },
        "item": {
          "id": "18d664ec-5e1e-4d4b-aa44-ee1c2eee23e9",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "920c44c6-2d3e-4851-88d1-f26246279453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54cf2391-81ca-482a-ad0c-bc5cc6411660",
        "cursor": {
          "ref": "1c7ff190-41d5-4432-bf50-de490aca21d0",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b130f859-fde4-4b5f-b3a4-0afa35f78131"
        },
        "item": {
          "id": "54cf2391-81ca-482a-ad0c-bc5cc6411660",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "c2c73978-1149-4063-aed9-9e9651c3248b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c3d1b0b-2ed8-41c6-ac11-a692af94fe25",
        "cursor": {
          "ref": "302530a7-707b-4f16-90fe-afe4825b9e3c",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "1f4038ff-53d6-496d-b043-e54385f4acc1"
        },
        "item": {
          "id": "5c3d1b0b-2ed8-41c6-ac11-a692af94fe25",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "cbcb0837-5ea3-4562-90da-84fe07f0506d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a88bdfb-bd50-4286-8520-87374cfe73f4",
        "cursor": {
          "ref": "e0ab1d82-f307-4f83-92da-a02c57cbc5f1",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "eecda87f-f41e-4671-a749-b13d830442e5"
        },
        "item": {
          "id": "6a88bdfb-bd50-4286-8520-87374cfe73f4",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9e31a422-4fe3-4278-8563-95c79165ec5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81309cb4-ab6c-44bf-858b-55ef054f6653",
        "cursor": {
          "ref": "ab33533d-64b0-4f86-847e-fc2492e7942f",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "874afa12-b67f-42f5-8228-ff519324ea4c"
        },
        "item": {
          "id": "81309cb4-ab6c-44bf-858b-55ef054f6653",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "dd8850ae-ecb5-4fbd-9623-be61c155bd1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1994c37-c95c-4190-b916-ed9a38723887",
        "cursor": {
          "ref": "d370b220-8569-4f56-8d84-a96e9b64c27f",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4fc62f58-9e99-42f8-a7a9-65a200662a6d"
        },
        "item": {
          "id": "d1994c37-c95c-4190-b916-ed9a38723887",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "77cbeefd-c82e-4aa5-8f97-61f40a610a56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a89e10-e557-4cd8-a85d-6d98cfa1fee1",
        "cursor": {
          "ref": "a0a6f1d5-51b9-463d-a34e-0d83dacf5293",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ded9de04-d4eb-4f63-a5c4-9de2423909e8"
        },
        "item": {
          "id": "a7a89e10-e557-4cd8-a85d-6d98cfa1fee1",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "4989d4e1-2964-40b6-93c9-58887848fc77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84ab345c-0122-4e97-bfb0-230fad09ac6d",
        "cursor": {
          "ref": "e8dac714-dea2-4286-8708-3c40ba677889",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b93e2535-5cba-470e-86b6-befa811357fc"
        },
        "item": {
          "id": "84ab345c-0122-4e97-bfb0-230fad09ac6d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d5a367fc-ca26-4acb-98b6-62781f5294a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c77172e5-a506-40f6-b16e-9411affaa24f",
        "cursor": {
          "ref": "5712e09b-ab4d-4e4e-adca-2a93616e06d9",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "193afe87-d04e-4c3d-a717-b48006d8ff94"
        },
        "item": {
          "id": "c77172e5-a506-40f6-b16e-9411affaa24f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "085129e6-94a6-4ef8-bf68-728b2962d631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "802128d8-4113-4b3d-8c80-b041ead4b21a",
        "cursor": {
          "ref": "27630e5d-8960-4719-8916-7c74b3002d67",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a1caa31c-4520-4291-9004-b7fa83e2f88c"
        },
        "item": {
          "id": "802128d8-4113-4b3d-8c80-b041ead4b21a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e7c0ee9d-1e94-49c1-95be-ec074d433512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b3420c-0cd1-4ec4-b290-e701b6323da7",
        "cursor": {
          "ref": "99a1c2c9-8788-4798-bade-09b8dbd8e544",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "51ccc21c-a1e4-4d18-9e22-dcf6f3e764dc"
        },
        "item": {
          "id": "f2b3420c-0cd1-4ec4-b290-e701b6323da7",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "650d2561-a6a9-4ff5-bbdb-ad26be7da3bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07345ae5-ca30-4777-aa68-846af1664edf",
        "cursor": {
          "ref": "5a9a687e-191a-4e88-b27d-df723f9886ec",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "5252f869-026b-4d47-8c99-3ab53548468f"
        },
        "item": {
          "id": "07345ae5-ca30-4777-aa68-846af1664edf",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "1820e8ad-0fb7-41fb-acd8-063d6d8c3589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f141ffa-cc70-41c0-b311-9f4ba9008f57",
        "cursor": {
          "ref": "d4451663-4a2a-4b2d-9cc3-c7fe98adf567",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "2e2946ff-5a43-4db4-b67a-962828d3a295"
        },
        "item": {
          "id": "6f141ffa-cc70-41c0-b311-9f4ba9008f57",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "2ca2a5a8-37fd-4655-a7e1-88e8acaa68c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5276661-18fb-4d86-9c00-e05e61ec27e6",
        "cursor": {
          "ref": "9e924f14-dab8-4699-8fc3-663d79220b2f",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "735199f2-9045-44de-9ea7-ac12ac045a41"
        },
        "item": {
          "id": "a5276661-18fb-4d86-9c00-e05e61ec27e6",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "93a25adb-50de-40e4-83cb-c8c191de3ba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e4e2381-bc8e-4d64-8797-b33c90bd4010",
        "cursor": {
          "ref": "f4c736d2-b2a7-44fe-9777-d1feb6e6cf93",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "6ed3e3a4-7074-40a3-a4f6-dfff9451665e"
        },
        "item": {
          "id": "6e4e2381-bc8e-4d64-8797-b33c90bd4010",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e2c97e0c-d9de-4e48-86a7-3df032ebe66c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bd74696-b388-4136-b027-45f3fe192dbb",
        "cursor": {
          "ref": "b0302754-6430-4970-a867-8a373d5c208c",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "8db14a22-00b7-462a-b063-bd67a30383ac"
        },
        "item": {
          "id": "1bd74696-b388-4136-b027-45f3fe192dbb",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "2162fecb-2334-40f3-898a-2bde4779b719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "722aa007-d521-49d5-9f42-c3ea50421e09",
        "cursor": {
          "ref": "13510a63-151c-4208-8873-a32fa3d186ac",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "6a367bb4-cfca-4d05-847f-e7fafd0ed4a3"
        },
        "item": {
          "id": "722aa007-d521-49d5-9f42-c3ea50421e09",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f95c231f-ccea-44bd-ba63-b9b78c7a36a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e3406d4-bc88-48de-aa2b-521cbe684eb3",
        "cursor": {
          "ref": "ba142050-b1d0-4b4b-999d-8ae647aebbd8",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "4d27ada8-ce2d-4640-ad0d-33b4af8bfcf2"
        },
        "item": {
          "id": "4e3406d4-bc88-48de-aa2b-521cbe684eb3",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "9cd4ab8a-c62e-4444-8be4-2e0f21f84bc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d394a63-ae3f-4bf1-88f7-372ffb3c7ec9",
        "cursor": {
          "ref": "b01441d2-5028-434c-ac5d-e0e771ca4a60",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "1cc8b326-b161-4e9b-8586-92bb55daf8c8"
        },
        "item": {
          "id": "0d394a63-ae3f-4bf1-88f7-372ffb3c7ec9",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "3ee522f5-28c2-4393-be2b-214b4b5dc9b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92361e0b-e214-4d66-a89b-5d75b8ce7ffc",
        "cursor": {
          "ref": "3bc7bca4-a6a9-4e62-8fa2-2f77600bb737",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "186fa363-d805-4baf-82f6-2bffdd9cd8fc"
        },
        "item": {
          "id": "92361e0b-e214-4d66-a89b-5d75b8ce7ffc",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "8dc37ef1-01b9-4b11-a8eb-e61f4e1fa7f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba8acd30-a80a-45a2-a127-5e09aaf081a2",
        "cursor": {
          "ref": "e9e418d4-895f-4ee7-96e5-c1777bbf3ff2",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "2646125c-46bd-4a66-8fbe-c9dc8bb37cca"
        },
        "item": {
          "id": "ba8acd30-a80a-45a2-a127-5e09aaf081a2",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a0d11293-09f5-4e9c-9d98-387b13450863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01c84c06-6a92-4a60-8490-8e7335b16851",
        "cursor": {
          "ref": "5f631974-4ba6-4e2b-b51a-050cfdbb4186",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "cacd01e3-2df0-4c2b-9000-e0be5289fcf6"
        },
        "item": {
          "id": "01c84c06-6a92-4a60-8490-8e7335b16851",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6aac0740-69e6-48ff-9751-4e984e496cf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3772041b-cb36-407a-9ad2-ed7b3b9f3614",
        "cursor": {
          "ref": "a75357eb-8239-4e82-b6b5-7cd17fb0ae2d",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "fdd38a38-041d-4e17-a4a3-3f5f5b4c493b"
        },
        "item": {
          "id": "3772041b-cb36-407a-9ad2-ed7b3b9f3614",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "52f9641c-dfd5-4945-8351-0e703ce330a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37f56ea4-b4e3-4ab9-b128-67243159e75a",
        "cursor": {
          "ref": "8db6f22d-82e0-476a-bbac-ae0b15804531",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a3ef96f0-d337-453c-8d66-081e4d6ac4d1"
        },
        "item": {
          "id": "37f56ea4-b4e3-4ab9-b128-67243159e75a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "36a7c010-6b6c-479d-adae-ef4b70c4a0a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "196add27-e390-472a-9c87-7b6e06ec4aea",
        "cursor": {
          "ref": "b030a213-d9f2-4be1-8421-6b644cd9010f",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d6994790-312b-4397-9ff5-5bc9994ef443"
        },
        "item": {
          "id": "196add27-e390-472a-9c87-7b6e06ec4aea",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c922c977-2ba8-42cb-9680-fb733b075cf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ea12b0a-0c72-44e3-a816-a9ddff047733",
        "cursor": {
          "ref": "2ffd47fd-4123-4ea3-b0cc-29bde1b793d3",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "7d09d0fe-5922-4de8-aff0-86ee52ac3cb7"
        },
        "item": {
          "id": "1ea12b0a-0c72-44e3-a816-a9ddff047733",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1283cdc5-1fc2-4f4b-8aed-7b1ad0586358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f9ea364-51d3-441c-876a-78fa7663fd97",
        "cursor": {
          "ref": "287d35d4-3d3d-41b7-8736-d3fc03a740dd",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "1860c13b-e120-44e1-b215-57cdc0e872af"
        },
        "item": {
          "id": "6f9ea364-51d3-441c-876a-78fa7663fd97",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "68f0f9db-4655-4030-ac02-509ed4b40a7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c7b9e79-254a-4a90-be95-11bcabbd909d",
        "cursor": {
          "ref": "38f0ab48-b815-48de-a52c-ccf889067c11",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d12625d6-05ca-4dff-b972-d62ea7d1632f"
        },
        "item": {
          "id": "2c7b9e79-254a-4a90-be95-11bcabbd909d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "f06a1e84-7f5b-4226-b3c4-661c8f0dd010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf75ed9d-acab-4292-a167-d7c045dab710",
        "cursor": {
          "ref": "f9d5a90d-35cf-440a-9bd1-b12820b6abbb",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7915ad7f-555d-454e-94cc-8f1e04ffc1fd"
        },
        "item": {
          "id": "cf75ed9d-acab-4292-a167-d7c045dab710",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "658faf43-b820-476d-98a7-a8e8b99972c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02df9925-1efb-44ad-ae0f-21a106219a8d",
        "cursor": {
          "ref": "0fccbf52-f15a-4589-9503-a21f172ec057",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7ef08b5e-336d-4a90-82c8-9c2434454a29"
        },
        "item": {
          "id": "02df9925-1efb-44ad-ae0f-21a106219a8d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9451911b-f398-4470-bc7b-ecfb5de309e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa1d2d7-b9f0-4bc7-820d-4e55772cbfc7",
        "cursor": {
          "ref": "e65de307-7d6f-428b-b72a-b2e421ec2877",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "24174ab7-f019-49fe-9861-974add6297e8"
        },
        "item": {
          "id": "efa1d2d7-b9f0-4bc7-820d-4e55772cbfc7",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "e0cf1a51-97c7-4da1-a4b0-91f0a81efd3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "303e58d0-5ce9-46cb-a228-d109822afbc1",
        "cursor": {
          "ref": "a62350ad-24f4-44be-8795-605c0dace596",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "88993f57-dab9-4c00-ba56-5c5b4a65ddb7"
        },
        "item": {
          "id": "303e58d0-5ce9-46cb-a228-d109822afbc1",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0434f41e-6449-43dd-afef-ac45688f84a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0fcf86f-b166-4a8a-8b97-4472e3170e9d",
        "cursor": {
          "ref": "dbc5082f-ae92-4690-84eb-ef520238efef",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "dd1d79d2-f94d-45ae-a34c-d9c8aceec582"
        },
        "item": {
          "id": "f0fcf86f-b166-4a8a-8b97-4472e3170e9d",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "0c2cf18b-5328-48c6-9127-37094f97883a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 40,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63da062b-c6e1-4132-8cb5-57f03fea3034",
        "cursor": {
          "ref": "bee7c5a5-1926-4053-865a-277a1d26c709",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "4371673b-6ffa-4c7e-ba10-d7b42eed25c0"
        },
        "item": {
          "id": "63da062b-c6e1-4132-8cb5-57f03fea3034",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "1c1418d6-e27c-492b-af3f-0041a9e0d136",
          "status": "OK",
          "code": 200,
          "responseTime": 254,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "402cb319-1177-402f-a37c-caecdcbac3ea",
        "cursor": {
          "ref": "2888855e-c91e-4cc3-b8a7-835759aa9f00",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "cb0f971d-da39-4ab5-8438-9f76f5f1d5d2"
        },
        "item": {
          "id": "402cb319-1177-402f-a37c-caecdcbac3ea",
          "name": "credentials_verify"
        },
        "response": {
          "id": "fea11d16-4cc0-48e8-93cd-85814b93392a",
          "status": "OK",
          "code": 200,
          "responseTime": 641,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd69101-42fe-4247-b2d9-65f492719b59",
        "cursor": {
          "ref": "4a7d9ed6-eaf1-4f4c-a4c4-d96acf738ade",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a48f6571-feba-4158-90a5-7f3afc13d1cf"
        },
        "item": {
          "id": "1fd69101-42fe-4247-b2d9-65f492719b59",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "a42827e5-d263-41d4-8dd1-18a7ab04bf11",
          "status": "OK",
          "code": 200,
          "responseTime": 640,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1625b819-d50d-42f1-927c-906b66b6f13d",
        "cursor": {
          "ref": "2acc0431-24d1-4139-8a34-3628d9aefa2a",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1b2d278f-b29e-4d1e-9a24-e51f16920b5e"
        },
        "item": {
          "id": "1625b819-d50d-42f1-927c-906b66b6f13d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "07f46e3b-b5cf-402a-b06a-9f0c1a3fc986",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1625b819-d50d-42f1-927c-906b66b6f13d",
        "cursor": {
          "ref": "2acc0431-24d1-4139-8a34-3628d9aefa2a",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1b2d278f-b29e-4d1e-9a24-e51f16920b5e"
        },
        "item": {
          "id": "1625b819-d50d-42f1-927c-906b66b6f13d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "07f46e3b-b5cf-402a-b06a-9f0c1a3fc986",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1625b819-d50d-42f1-927c-906b66b6f13d",
        "cursor": {
          "ref": "2acc0431-24d1-4139-8a34-3628d9aefa2a",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1b2d278f-b29e-4d1e-9a24-e51f16920b5e"
        },
        "item": {
          "id": "1625b819-d50d-42f1-927c-906b66b6f13d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "07f46e3b-b5cf-402a-b06a-9f0c1a3fc986",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a437bb0-9358-4d78-b9f3-fedae5c45774",
        "cursor": {
          "ref": "802e61f3-7e2b-4bd0-8263-92cbd097f8ed",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "54f4aa2f-3f23-4a13-9eb0-5eda7d6bd631"
        },
        "item": {
          "id": "6a437bb0-9358-4d78-b9f3-fedae5c45774",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "cd7e195c-7332-486b-ba64-ead66f5a7c5b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "336812bb-8aa6-4f98-9b37-eec9c04081db",
        "cursor": {
          "ref": "486ff85e-5156-44f2-9c91-04df8e4319eb",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "eb960ce0-7637-4cae-b384-b873b71b3b64"
        },
        "item": {
          "id": "336812bb-8aa6-4f98-9b37-eec9c04081db",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8793e2f5-4ab7-48f3-be70-d3c61d06228d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "336812bb-8aa6-4f98-9b37-eec9c04081db",
        "cursor": {
          "ref": "486ff85e-5156-44f2-9c91-04df8e4319eb",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "eb960ce0-7637-4cae-b384-b873b71b3b64"
        },
        "item": {
          "id": "336812bb-8aa6-4f98-9b37-eec9c04081db",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8793e2f5-4ab7-48f3-be70-d3c61d06228d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "75e94851-96b0-4f0d-9bd9-7b0606322d60",
        "cursor": {
          "ref": "1847d382-1def-48da-9174-406645c71094",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "7c89f299-84b0-43e9-acde-ffc013701857"
        },
        "item": {
          "id": "75e94851-96b0-4f0d-9bd9-7b0606322d60",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "e1fa4653-b100-4c7f-b072-9969bf562bbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "7f15da74-39dc-4432-9d28-e8c4f99f6b5a",
        "cursor": {
          "ref": "70871cb1-0825-43c5-a040-bdc225aaa163",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "ff29df7b-1616-4492-a5b4-65df8bd58b70"
        },
        "item": {
          "id": "7f15da74-39dc-4432-9d28-e8c4f99f6b5a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "928d346d-cb15-4a12-8819-d1be374b25c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "7f15da74-39dc-4432-9d28-e8c4f99f6b5a",
        "cursor": {
          "ref": "70871cb1-0825-43c5-a040-bdc225aaa163",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "ff29df7b-1616-4492-a5b4-65df8bd58b70"
        },
        "item": {
          "id": "7f15da74-39dc-4432-9d28-e8c4f99f6b5a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "928d346d-cb15-4a12-8819-d1be374b25c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "0085c588-68a9-4cd7-961d-32689f17b52a",
        "cursor": {
          "ref": "dc8d04a8-c29e-4861-b893-012a508d97f5",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "ca3657b6-4e35-4f35-841f-f41b879d51b9"
        },
        "item": {
          "id": "0085c588-68a9-4cd7-961d-32689f17b52a",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "7782d486-609b-4b5d-9cd6-3cbb08c82315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}