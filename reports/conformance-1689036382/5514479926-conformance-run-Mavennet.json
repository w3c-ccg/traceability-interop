{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "dd0319d8-d75d-476c-a565-5948946b2234",
        "name": "Clear Cache",
        "item": [
          {
            "id": "54c1785f-e479-44a1-bb29-2eedc0e34835",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "01e7073c-2d01-40b6-9b23-97b6d5bd2514",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8d8b2a77-5f55-4e01-9fb6-dc41a0ecf4dc"
                }
              }
            ]
          },
          {
            "id": "14074ac8-ef42-474b-8183-dc9374d8650f",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "78f3aeb3-167b-4132-bb14-50edef56845f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "154aff5f-bd28-4574-9214-93056e30b77d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "314ac05f-1f22-499e-8792-c26049cba370",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "93fc2fb2-a413-4abc-9487-32f2aff14915",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e76b8244-e44c-445e-8fd0-07d7d3548ca3",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d24e7ed-0993-4d43-aa90-c34db85a5541",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "679b2ce6-0cb1-4675-a9eb-2da814f941bc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7e6b01df-f7dc-4975-9f63-512ed8142320",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bf2ea0ce-f36d-4410-b2d6-5bcda6b1a45e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2413d742-8eb8-427f-9a60-5b4b1ba9d35e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b2ad8e8d-d8a0-445a-860b-8e2be95f44d7"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c8840b2c-ffd4-485f-95ae-894664529c48",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "c01f697d-4baa-4ce8-a667-f25ea914dd30"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f90d3738-4121-421d-8447-7e81ac8d1022",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "396e3cd1-1e03-4681-88e3-cbf481d5f731"
            }
          }
        ]
      },
      {
        "id": "c5ea035c-e233-4d66-93c0-598dab6a63ec",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "102a8510-dbd2-4bf3-adc2-e034f9da1a86",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9e745beb-f8c9-4c12-a193-026923f31191",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c03e40dd-2d68-4c6b-83ac-d1bc678aa4cc",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a206dc2-88ab-43d1-bdac-875bc66cb3d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7f65acd-6d80-4a43-9581-fcd89421b90b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfed3487-8312-45d9-8af5-a7b02c15feee",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9433abe7-6bf2-491f-b123-b4c042c3a0bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ec41506-e6c1-42a2-9a32-ba3f8a2f6a63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11256946-42eb-45e5-b23c-7a9b97c743cf",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a4100c9-c73a-41d9-98c2-af1c5426f3d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "701434db-be2e-41f0-9a20-47c9ba04d3f2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0839bf55-03bb-49aa-acc3-3f79d7b2401a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8f9141ca-46ca-4302-a79b-044ab6b0dfe6",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "451cd3ad-1d17-4e97-afb5-e1b8e3889930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f9f842f9-a587-4483-9c0f-a4db8a9580d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ef0aa6-13af-4440-b4df-77feb12a7ab9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75c3d0ce-afe2-4ec2-8688-1601b9f1ae90"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9bef9aa2-26e9-4793-8689-1645d2078e0a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e9cad233-ddf2-4ba2-a2aa-9643dc618d7e",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d1348174-0523-4ada-8b9e-6c8686d16ee7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0d249399-82e9-4a4a-a5a6-4275b8dc13b1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "88797def-004e-4980-afc2-bdba284b62fc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "10a8a9ff-e3d2-4885-a9f1-d97be9a22e28"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "01427dc2-99fd-426c-94a7-0342e99e1255",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "df2b4f76-12c4-4418-8187-56cdda07bf70"
            }
          }
        ]
      },
      {
        "id": "54e2bae1-e7d2-49cb-8efb-988b4e718cdb",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "54c04c6a-459f-4592-af96-759d1bcfc825",
            "name": "Negative Testing",
            "item": [
              {
                "id": "625ccc7c-4b8c-4005-86ce-30e0edfe1bd5",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "4cec27a7-415e-4311-a927-6f6287745617",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4055e46-0546-446e-9bef-25232c72bcc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1ef0716-ff0e-4b09-b1ac-fe18bfe91d19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c04e89f-efde-45bc-bb94-96579070bd4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "19dea91f-c5a3-4d12-945f-31202d373aeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3bb4a81-f559-48d7-adb3-47609023fd1c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efb89ce4-e661-4e0b-a34b-6600f3026ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9203a1a0-0023-4214-9eb6-928c8d0cb77c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76e5be07-2e8c-48c1-aa99-4fddc777e436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4948a278-765f-4ba4-8712-aea861898c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c35e2df-041e-4645-b21f-9204ce6ca288",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83258e12-01c1-4bde-b51f-ded9e3814730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51a24c88-ffd8-4fd3-a458-fda08d344d17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5e2fdd1-776b-48ef-9923-5e400206fca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41aea180-cbb1-42cd-bad4-ff7bd3a538a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08c48103-abc8-46a0-8703-53066c4834c2",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e56884c-3048-4787-85ab-48ffdce8536f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93cec995-ff91-45e5-8443-857a6a78eb02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f524168-4e5a-4058-a28c-836d5329afd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b9f8ff7-3fb9-4142-b924-d4901c56b949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c84064d-0dc3-43c7-8697-4fffd4afcf88",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4426aa14-afbf-4994-8ca5-a9fbbd1fcca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41832031-41fb-4b6a-9cab-70ac357f4d97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9087c774-78c0-48fe-8fa6-6fc64568d84f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "69e0e6f2-f5f6-4d11-9ee3-33b27ab9a424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb51fba3-0b72-49fd-a9b1-2828d92041b0",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b325e40-6d00-4df3-8509-4636f0d4d5d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d6c4b6b-d817-403e-8fcf-10aa1862e86a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98677e30-45f3-41ee-922d-7bc387c23acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "66b9e134-6d50-4491-8815-d8b6b371293b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6e182c-f1b5-48e6-98ec-eec607458ee9",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e7b298-80f7-4cc9-8032-b19eebe49ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbaee735-ea34-482f-bcd9-46eab90d5067"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c68cd8-dff3-4518-9118-7e32a40ccbad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3fe03442-a334-4e08-aaf6-602006019029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86636b9d-5ef0-42d9-bfcb-f954918b54e1",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad4bd81e-73ef-4248-a20e-88344768eda4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb73d6a5-64cd-4828-8bb5-4d9eedcbe44c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ea5c03-8bf8-4bb8-82a1-b7573aa19e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32789f10-568f-4744-9ae8-d2723969712b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09dccf3b-ac41-4f86-b0d9-36ad45a728df",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d568fa5a-46fb-455f-83e1-79c1f056dedf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bd6c11d-4621-4c3c-8b68-ff14363539fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa8c0fc9-f0a6-4e88-92ef-68ab035954dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f103b4d-e2cc-4366-a6fb-9e45e5b26a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad3ac8f9-98f2-4df0-8466-101df3179596",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7a3381-e1f8-4ceb-b185-bf26f5469827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d307735-19ad-4242-927c-73437606a03e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "930a97ab-9602-4aec-b4c2-535abec4b788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "681d1deb-6bb5-4da8-acc5-fdcc849d2f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222b7839-c686-47ea-9994-728a0fa32424",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7058a54a-1e1d-4b36-a755-3c471f603257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ef1165f-ea77-40ff-98d2-4cd758f5ea87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f5b04ea-1364-4c4d-bf64-2c3d161bbf11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1bd19f2d-0283-44eb-981a-0615bf09ccaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566f9205-c359-48bd-bffa-522410cddd91",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15c7cf85-3f65-4809-9bcb-58a25020122a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47e8356b-ae74-42dd-b62f-74819b803200"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f8976f8-7a84-48ae-91a8-255bdde8fbfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c602ca8-2362-46ef-89fb-d11e56d8b586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b16e34-27e1-44a9-9528-fac639db10ac",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d2577d4-3fcd-4429-a830-ff4c95f65c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32db8025-f0e4-452e-96de-5eabefb3031a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d0b8003-42dc-4dc3-a79e-d46018b23a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4454a762-f3a7-46f1-b13d-bd4bdf18a097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "008f0e5f-9321-4bb4-91fb-17fd4fb63e0e",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b682a8a-e0e2-4d26-b160-1173a10735b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60da09f0-2e2b-4677-819f-4fdfa6ee893d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "962014a3-c645-49be-91db-bcb51b7c6782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "efe4764b-904f-44dd-9743-c52ac8d5de58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe5d4c51-07d1-405a-84d9-040fdd61776a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cefefe7-faaa-4878-a034-56636595bcd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10e1e3ba-8371-46e2-8a3f-aeb4c79bfed9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "485aaa2a-3213-41d3-8ae6-ca4854664360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b2c1fb1-df3f-4149-bde4-e7b7bd66f0ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bbf823f-0777-48ce-9da7-6591bbf94222",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cbd35e7-bef9-4e8c-af1e-fe16fdef0233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21c78993-463c-4a00-a3fb-2152138eae54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "610de0e6-2988-4a1d-a75a-f6b447dc4d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e18894f3-eb1e-4080-8f6d-e34a9b235bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caaa4621-40d2-4a46-bd2e-6f53d3ec0839",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc9d12c-8660-4a0d-945c-a55fd29a059f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea11cd90-1039-48c1-885b-849453cd1429"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eab820ad-475a-45ff-86dd-30830ba6791d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dbb95bbe-5c47-413c-b65f-d624ff127561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c461a35f-5a54-4b83-acec-6731e53a5625",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dec2864-906b-402b-8492-8a20d3cf77dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4698826-e540-488c-bbd0-91d3fc031106"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f60a48-0827-4da0-a0d8-703fcf79f791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d560e719-c658-46d8-8d30-4d788c5c48ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b21483a-6566-498b-8d63-1737cbed3a08",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5646b90c-0d09-4793-823c-6c5e857cb904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3987bcb3-1650-4321-87de-bd83befe5288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe8d553c-a1a0-4911-b2df-d6397dfb6e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "505161e2-7b63-427e-9e94-d7f1b5b4db00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "966129fe-390a-4366-bd00-cedfb4569cc9",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32612bdb-c608-4174-ad0d-bcf73c37ca10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "746b8509-8ed3-4629-a540-92b96d077bdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc68b924-4acd-40aa-a4ab-fe13222449f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "606f2729-3c46-43ff-99fa-05a690bc3273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85583891-7d22-44c3-9e5f-f2325a09f258",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32213303-346d-4e7d-85ba-b10d06e8aa64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23571736-6ab0-46e2-9cab-51ad04bf4e66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aef2197-930d-4e0b-8d46-f89ed92871f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9200deac-256b-4f05-b3ee-0514adbc42ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec3babfb-7ef3-4baf-82c5-75988e7debb6",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eb8e4ad-066a-419b-8def-62d48b386520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9412f3dd-a74b-49c8-825a-4d990dfd4a33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c5ae35-634b-4c31-8547-391a5c0e7277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b46d6a70-2650-45a4-9ec2-04f0691b2e65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "649449d2-78e6-400b-82d0-d0b3a799acd4",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae901cd-c6fa-4a55-a706-627369f781b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85e46ae8-8e54-40bd-8c55-8e9d56341ae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd826072-7751-4b33-a052-133b642ce2a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9d5ed956-f2e1-46ab-a6df-a085ffcc00a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed0359b-fb33-4655-b84e-12c3ddd0bd7d",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b1d75e-1a18-40ac-a1dc-81f12e1d1ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca1ebfeb-5c93-4e03-a34b-6dec7d435023"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d3b7118-3a3f-48ff-9ddf-ed6f5e274e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4e5aca1-b69f-4b65-978c-fb8ae50e4f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d48b991b-6eba-4a0a-9a5a-444701e25a3a",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d83525b0-392b-418f-9611-e7f84d9c448c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78f5e074-40ba-4af0-af26-efc8d2c5b157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e252427-e301-4bdc-a4dd-503d3d27397e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "09533b95-3231-4194-9df3-938e538cc6f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3a9f5d3-47a6-494e-8bec-2f7124b87310",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a88b7e2b-306c-4a34-87fd-aec50ff1e034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16eb3541-902d-40b8-97e0-157c32796262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d05db85-54f5-461d-a18a-a5fd84d37560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a97aafc8-8c27-460d-bec7-2c500ff91774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eb94fef-2ef0-43cd-b174-61357dd6a230",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99331597-9e90-4624-85bf-9e1393ba04cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3362013e-b146-4a84-9bd8-a86a76c60f92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de395f28-54bb-465f-9ee6-bb457ec491f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5be54cd6-4172-42ab-961d-fa05f8611959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4f98e83-b04c-4ee9-abfd-57b5b6807c97",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f158723-1e93-419b-8c24-2b2b0ed72b61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a2e4442-222f-47f4-b1d8-d5986f50ec25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5466c2fe-f373-457f-9529-c9dbc989d9f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a25c565-e643-4147-b8aa-1b3a324e4b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9136990b-be07-416f-8adf-2e77eddd01ce",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b302679-b4ff-47e0-9ec2-a1fe2da92134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d98c907-b7b2-47cc-8c08-9fc2aff7b4bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "242df98d-8d24-46db-9e2b-e8d7a3e56572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddeb59b2-761c-4cf8-bbcc-ee261fe32f28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c340a107-615b-4b68-8ef9-c64a639a8133",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d55df60-7909-49b9-9f4c-3122b3cc31d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97a6680f-7e05-4340-b39b-e6cd545b8c0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adcee0d1-0cc0-49a2-85d1-01bace4a9638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4245a56e-a84f-4b21-97b1-ace98b2bf6b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9228825f-c412-43d0-8e94-a5f33edc6fde",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "054065db-f1df-4b05-8a93-394287717cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d1b4dd7-8908-49d1-9b08-3db0db868b5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bff6bbd-4079-4d1c-9f00-d1a8d432977f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a51b9ca8-8a4b-4359-b297-482a8a8dcdfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c9abf1-5a0f-40e3-8fb3-093ccb7524bc",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3521e5f6-d963-4d9b-a979-a27d8def6b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c267091-820f-4f4e-906d-22f7900b3c3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a84bc9e2-ee99-47dc-ade8-84a261189b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff407686-b7c8-445b-b9b7-b9f718dc315f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2153696-7ac7-4760-9130-3b97105c5bd9",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc9550b2-2edc-4fdc-a677-67bb498b3ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62948372-2915-495e-9e31-945bce15a80f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e075d56e-6128-405f-bf85-36cccdbcb01d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd7c6ef3-797a-4342-9dde-23abf75327c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ef204e3-4bb2-4198-b6e5-9a14f865197c",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41aee678-085e-4b5d-b2da-c11e36c74f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96d24ec1-54e0-42a3-ad3d-015932c03b51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b462f2b-001f-4fa0-908d-28441a2c5914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7de7579-0eca-4c2e-b3c8-edc75b5f428f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "282ad73d-4045-4dca-b8b1-8f77d172c27a",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "950091b9-c9a7-4e70-8bec-bcf0012169a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8bd532c-7e18-4f7b-a846-33ce522b0bc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a845d6f0-6728-4829-a7ec-163cdd444205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "e6ef4ec2-8737-4911-abdd-2ad6e620a416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f271e2e-7dab-4ebb-8d45-263cf8856407",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c6c6996-2a8f-4f21-964e-801b0265658a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "efa099fa-966d-48ea-9549-07af482068ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae6833b9-403d-4f3f-8e96-70c4b5108eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7bc0e6b4-4cce-4ab6-96c1-e4323538fded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84a7cc80-a1a3-412b-a5d9-cc4321f99deb",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d3199b7-f49f-4658-abd2-4cb59b8bfa7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "017d9d04-00a8-4c95-9252-5e3f11a76a83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24cd2aa0-7205-480b-9c91-6b674d36705c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "871f3138-9b06-4a63-b971-84b46f03d403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3bed47c-3511-44bb-859c-a085dddddd45",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1459e2d9-2998-4194-9d9c-ce98f77d396a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1c76565-38ac-4b50-b414-fc4fda4d5f6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aef9226-ec28-4a5b-b1ae-ebba7296488a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4192bfe-cab3-4e33-8322-a89f56811119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5723cc09-ae06-4927-aa54-2d6cf96a2d09",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc3a40e-46d1-4d62-bd35-7c13387d11df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20fc5f28-8fe5-4c81-9ef3-a5beb6b7cce5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c152fdf2-6098-408a-9216-cab248bd4a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f34fc9e3-b665-4644-864b-2becfd94e1c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bb11b74-50af-417c-8f18-f3971ecc7154",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62cb715f-c637-4ff8-8c9a-b793d5ead540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9900972a-8207-480d-8609-09a322059be3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44c52182-14d9-45a3-bad8-caf7d05a339c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "73faca55-d008-469f-b2b2-1d3c754f5ad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7501fc8a-ca77-4b12-9c26-7f341b829b12",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47432578-8e3c-46df-b122-1168b8852b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4107f3cc-a84a-41af-8ff2-9a92342c5838"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1941e1d7-f12d-4b26-a652-36d70cb4506e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "70f0d223-332c-4577-bfbb-e060c623a97b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e15d0e3-b55f-42a9-82c9-915190cef754",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d82a617-dc9d-4842-a670-b67601800ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36ab3bd4-96ef-4863-96a7-ee543d9026b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b722f44b-2601-4a06-830e-cdc5f48e3570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "95d2b0fa-b822-4e59-b8c3-44527bc0106d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a6a753-3952-4991-8445-a2548f695c22",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c274922f-6a67-4097-b524-f4979e2df657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9300391-e4bf-4772-befd-fd7d138e0dba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fff6766-9499-4ece-879e-19d5a8dc5fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0ce9e82-81d0-41b6-a3c9-32f99311c414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ee18174-9d6a-4d4d-a74f-5984675503a6",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef5b838-22ed-4f3f-b91d-dcce03f40d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e68e01bd-080a-4545-a07f-9354be0c3bdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "984c0a5e-d236-4974-b9dc-2d76d001d982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f6e5ba1-9d98-4c02-9506-30161f38d48e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ddd5bd-fcf7-4e8b-a885-fb9b54f05408",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "305be37f-deb8-4538-900c-eac105dc620b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fc6e94c-b7d9-4378-9569-5a436da31feb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065fc6ff-59ee-4643-98ee-94ecef04e098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "67129a27-5678-41d2-ba3c-238488909e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "490d6855-c903-4f68-9e58-fb01d0329493",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37cf8056-74e4-49ed-8f02-9fd8ab2350ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c76ae2f2-115b-47d6-aead-e78be67eeef6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "845227c4-1f72-4566-87bb-dec6447ed417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec9d74e9-21a5-45e1-959f-a62756d2d23b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f599d983-11d6-418e-a80e-846ae74e4092",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3eda4a-b28b-4316-91b0-0513c0ef40f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50aea668-a72e-4717-b683-5b8358c041f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "706f29ff-647e-4354-95c9-5f62523f0d56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8df7071-96a8-41ca-bfb3-b41794d3898c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab004839-2fc0-4893-b7e9-6d5b38f2bb71",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76979f1f-5f79-46ef-b703-bcdac3f24476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fefe5ffc-2cb2-4d89-a4ec-c97669b3dadf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a8080a-519a-426f-8ae7-62d0bfffcb4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbf96c5e-f52f-4b85-901f-e41a6d5abe22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2add673-491d-4ef5-a88f-286de4a789da",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "378a638a-1f17-43af-875b-994c42b35678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54c1f355-ac11-41e5-a625-9c0b7a006e9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d9685a8-019f-4d01-ba8b-cb8f97edd2cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b91d17f2-9f1a-40e3-8aed-bd5739c18399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2390aa1-67bd-45a7-976b-7e2fd3a56c26",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04796282-4678-40f0-a0f9-32287159d5c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f32a0836-f8ea-4e85-bd13-cee6944ec38e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "572963d7-f4b1-4d05-8d05-8348c9e5e635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fc68e905-21d2-496f-aa53-076386c2ca8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b03edae-df51-48fe-9510-df0ee15c4b12",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b106eea3-f0d1-4fe6-92a4-662e14ae5fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55999731-e8ab-4af8-8131-9dd874a9ab70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f7e966-250c-4b4b-b3e9-d0f28baa6717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "903e265a-430a-4b33-9a21-d84f43db706c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b2b133-66f8-4bc4-88ff-1a8f0812b5cf",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36e8a861-c177-4890-9a02-0392b35cb278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7be7afb0-73a9-49d8-bc9f-ad1e98ef420c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ad708a-6647-4b9c-bc7f-b07bba9ebf51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a208a854-3fd8-4e2b-8209-5319b54fed68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12949bfa-95db-407d-ab09-d1a1135f4947",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc118c8-b825-482b-8cc9-61ab0a7ad8e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe3e0462-9b7b-4cbf-8104-743be9391fac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "773a4e32-44d5-4288-93ea-0967601cb9bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "938951eb-3252-4ad5-9db7-cbb8fade8a7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64b74270-a3ff-425f-9c6f-33a3f56866fd",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d6cfaab-9f32-4107-8338-6727828d8f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "663333cc-b11c-453f-bcc8-f8a1881ed4a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc30c55-9280-4bf0-9bbd-f1f00f694d3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d04cd108-89d9-41d1-a7b8-ea7d84964677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c5f71eb-af16-4849-928e-d5a481e0a6e5",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4f47233-613c-44a5-b3b9-24ecf59fc9cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eda8bd92-9594-40b1-82c7-f9699c0baf8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5687cb10-b8c7-427b-be5d-685060eafec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "95fbfd36-f88d-42e0-ab23-721da3a9549f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f45cb79-88d3-4b73-ac67-98ff3b456ce7",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aad27df-36c2-4b9a-973a-4ef46b8f4b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32a9bd55-a3c1-4197-93df-0d7b9ccf4f69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62c50db7-8753-4714-bc11-b133af5714c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "6a8477b4-35a5-4337-854d-1ff33dc22d3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3c26fcd-6300-4657-b30b-948d788f3933",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c3ffe07-f62a-4a62-80ea-adaa868b5671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "032abf51-f92e-4725-9b1f-66b0e312c29e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e8038e-0484-45d2-b70d-abc0464033fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "21841680-28a5-4b72-b91b-a31dcf71014d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c08fa701-ccdc-448e-b986-900d7aa18be3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a30168f9-f3b4-4309-851f-240991efac6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88effb49-86d5-4449-aad8-03a83e4c5b16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ae0dde-6e2d-4605-8c5d-716960e22669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "160daab5-6012-4d6f-901f-5be3fad7857a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eebd30ae-cfb0-4b5b-96ea-e9faabc500f9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14643287-2859-4e6b-bc15-feb1ae867edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b46546eb-a6ac-435c-9deb-cdb70938e560"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23b1a3c0-1392-45c6-8f4c-a5c0bb3f7aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d08bcd9d-520f-47dd-8815-93fcbb163408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89d8c6ca-b982-4b8b-904a-d93cc4ba12c3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cc4946e-d21d-444f-8db8-bcf4a3a9cfdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6318559a-bee1-4daa-ad6d-ac163cf5b20f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69624c9e-220b-4fee-aaad-2add1b66da27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ba5472b-4fdb-480e-a17c-d7cc33bed638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1e3b419-fb7a-4eac-a78c-39770381acb1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af4409f6-310d-4612-b56b-04a4b4b61590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b15b1b5-c0ce-4076-9f40-44e1ec97ff42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c6c7fb-5dca-4f37-aaf9-dbb6044bc1db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc197c20-fff6-4735-8995-4e20862af6f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "914dff0e-84ba-41ff-9758-50e11af5b2a0",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9ad9454-cc76-4046-9111-625d34c6a291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e61f5be8-3922-4718-9486-46cc2bb05ce4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66be3f79-582b-43ab-8a0e-11a907b31f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8fbc98e-d307-400b-8a4f-d073cb8bc894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2faacf4-9ead-40ad-af94-6b5f36f56d0c",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f76fc15d-7200-4114-86d2-dd4042d9cdd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "774a9cf1-6baf-4591-ad71-b6eeadf6afee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b782a8c-8c6b-43ed-8c29-0f7cb8f8ff0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "764332d6-63f3-47be-bd0c-19166794e3d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cd72792-9851-423b-a029-90642493e33a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e10423-3832-4514-93ba-82c8375250fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35577f51-fd84-48c3-b090-f9284784d47c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be3d2c2f-d8ef-49ea-bdb6-2e83c72182d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0eb18db4-4957-426f-a5b9-d8787e055edf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "322ff58f-9d91-416b-9e29-d02ae438c877",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b400f1-df58-4864-ae24-e29569c6e341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abf348d2-4284-4471-92fa-e0e9861f30b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f63ed5a4-82b2-4705-99c7-401eaa3353dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c4423e5-1f8f-4ecb-ae20-d0ca340a8f38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e99679a0-726b-4165-a1e7-09865eefb071",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d79688-03a8-464e-b468-4ed1dd0fa790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc5d3178-04c3-46e8-88d8-1b66d7980db2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b51eb21f-0114-4757-b1d6-64fa2689c8e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd116e57-02f7-4d03-88da-fa1d50b8dccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4381a9b-c0a9-460a-85c2-fff4097a61a5",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c71012-5e90-4d06-9661-eb7944306288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c7a3d19-7b9c-43ec-9006-19254763b5c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b97bdb07-5868-443a-8eff-32d093b575ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3e310440-ac48-4323-8027-756b10ddd918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e2cda6-d520-4000-9f14-008a5cd882d9",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47edf14d-f579-490e-9413-72a0d9b6f93a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "996c52aa-a08c-4494-8f6e-aec64b1eaf18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ece388ca-62dd-4ccb-ab29-1c97a762f2d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a775845-dff6-481b-9207-d8e9084c0c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b661d879-e03f-480b-b06a-77ab4a18e452",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e8e2e7-68ff-472a-86c4-0c57b2c962ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36b0f175-8e2f-4d3f-b25b-0af25856401e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eed40d95-3bc5-4499-ba4d-f8495c6b6fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cf56061-5436-4221-bb0d-b9a5bc6c174d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c76da6-f429-4fa6-ba39-3b643973d6cb",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f97defe7-e2c7-4aa9-9804-166c3692fc81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d75ca4e9-a9ec-4ad6-ad77-308975f54da4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c4149ea-315d-4cdb-aa19-5adb7d09f443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9606a81c-384e-4adc-8070-445614e85958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc0bc433-fdc6-4d2b-9b4b-9f4aec5f456b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b46ece5f-212e-480d-bb9a-2424787f66ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3856539-5320-4430-9b42-afec7f1d97ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "187fb8fc-5429-47d9-893b-92b7de8f43b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d46ccce-0704-4bdf-99c1-1f63f7eb5408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a730f0f-6043-444b-87a0-96721797db99",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "309f021e-dfa3-4321-b4a6-03f6e3f1c817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dea3b66c-c0a1-4b26-a26b-4aa69f8f0472"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e4799aa-4fdb-494c-afad-e68e8c4b0adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "01c19835-2d71-44d0-811b-7c8bfff3f20a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f00f98e-55a6-4f53-ac09-bc4a8f4c82df",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d56ffa08-a626-4839-a116-acb967173965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5339e39-1180-4b4f-821d-0d93f4e9f516"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cb269ff-94c0-42ac-a48f-335813e62346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d049c3b-d62f-4070-baff-f7c8c5dd5472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13e26889-6303-4813-800d-18f54df15561",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eced843-4a75-49ae-8a54-256e200d43d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a89c9ffc-798c-4cec-b234-82b28cb93ab4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe6d4cb-097c-4a52-b297-29cb39f6db67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "077be616-7ff9-4be2-8ee8-c2abcd9f4943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82bc5281-10c0-474d-aea5-066e1b23c4f6",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c43b2a8-8288-41dc-b4bd-6d113832cf05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4e0a8f1-6d92-46f7-8e6e-64d620b9261f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c6f16e9-95f6-4207-a8f6-4ff7d5d20735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7026fdbf-90bc-4040-96ce-b9add6e70fde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "630387b4-f190-40bd-aa30-0c51e639f22b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9425975-4d33-478a-8abf-42d2ad0c1add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "849b1bb2-ff6b-4837-b671-0d738b0cb61f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c2931bb-5f46-4c2e-908b-f2a2bcfcb68b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7fdb18a-dfa2-43d3-a547-ee799c8c1715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "217eaf85-ae65-4c87-af86-366693a6b704",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2648abcd-884d-4e78-8899-dfebb47d1f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6c723e0-c784-4ac5-8eb8-337e5e3905ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7819c382-2ff3-4f88-914a-1c50afe6c128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "16cedfed-ebe9-46a7-8d91-91893fddfdc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc39d29-2bfb-45e8-a94f-adfe28803aab",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68d5ceca-8358-44a8-81da-a6403ddbae12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26ef05e0-dbff-426a-9bf4-93171c6ccf0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17db5581-aa2d-4368-93f7-c363ed4cfcd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "02135a39-21a1-48b8-8eff-0e9e792988e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a00ed6-5c50-48c4-bb3d-ddbcb005e632",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4561f01b-e6a8-42f6-895d-063cf67efd26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02be97e9-73a3-4ec9-9967-d58432337ac2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb03be3e-7da9-4a14-9412-55c39dac5dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c53af3e8-0628-4553-9bbf-b8fa09a5d8d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "824cbfc4-c070-42bb-9dc9-6832a6fcf4b1",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d0e708-18c8-4131-a389-78abe430b28a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a602425c-4a0a-4618-a437-51d1bb6ca315"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eedd738-f0b6-4cbc-854d-96c250ef877c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "68299dd5-9099-4e97-b548-7f606ba9c801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6605c3e-2791-498c-aabc-e89123ea70c5",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d417e35-db85-420b-8bc7-df42c2aa2254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ce8a80d-89a7-4acd-8d9b-0049090b2a1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e4f1f1-11d0-4a62-a551-9aed56a5f4ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ccc097f-1ece-4077-8ef5-37b5368b86b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc92f35-b326-4717-840c-6777d20e028c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ccb6115-8551-4d1f-bc18-601930f4be43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1449ad09-8097-448a-a78c-78101b4def87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca30e95-5d08-4041-853d-2c686a798def",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d697715a-2c11-4ad8-b421-e86482312bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ec3c94-469a-4445-95cd-07b7651ad7e1",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a79c5dc3-0644-47ef-b9b6-135273215785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f3feb6d-e565-4209-bdfe-3ee8061337cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e4529d-868b-4159-beba-4d45bc473510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "56783b04-1b32-4ba0-8cba-e34bfc98f3e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45e80316-f6a3-4e90-80bf-838f44a59c61",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fe0375e-02c0-43bc-98dc-829e04a1d48d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbf419c8-24b7-4117-ad2f-84e64199a9ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2807e6e1-ffcc-491c-bfae-6e965aa50cac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "babde545-5817-41c9-93e8-9a79e1121f80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b15246da-bb36-4a65-b6bb-342ef45ace82",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6d16dfd-97e2-4a8d-9136-c6811a026761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46f30cef-59f5-4a39-89fa-8954f2f8c82f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07cf114e-4dff-4561-9958-101814841d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "acb40316-e7a9-4b6d-8115-4e9076735f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aedcccc-7c00-4842-aed0-d34d8c9a1917",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d61df8-f5c7-44cf-a366-6517561d2e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f007f15e-791b-4be3-b79a-1dd4d40e8933"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3304ca-2005-4fac-9c7d-b47b04ceb944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9db911b-5c5f-4eee-a7b8-1d19177ea3ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d80b2d-4ab1-47b8-b8bb-1bd668542682",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c43232-3d4e-44c1-b791-7379cc67004c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09bf563f-3ca2-473f-b9f7-45de43a654b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d2d47a-0d4d-4d3c-9ab5-5d82676e8323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fedbfc4e-1f4d-4c00-a93c-21125922c166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27776755-221a-4cf9-bf44-0646cd200bd5",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be9efe04-42f5-4e28-8303-e9eeb2ff4f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbd2469d-7338-4286-b652-ac7239a8142d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ead4b01-d021-49fa-834a-1701106591c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc3588bd-8ea2-47dd-87ab-973d83a83515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80bfab19-bf7d-4125-a928-e522c6d4ff71",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12121bcb-6ce7-4611-af6d-5a80a7d5791b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86c01519-7219-4904-923d-64d4b523e2b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9394c67-2c29-47c7-86d7-dc7a1d4352b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2094f0f-c48d-472e-ad47-ff1676f7ab90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a45edc2f-cb5f-4c64-9a35-1774e7d04bc5",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34b083e1-0795-4b23-9181-cc817e187166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0354503b-fd73-43a9-9076-1fe2505dc9e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63503773-6968-46d3-89a4-d6dd09650436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "11e4f9d0-ec7f-45c9-a6e9-ea359d64643d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9997fed8-9314-420d-8070-a083f8bd3b79",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f070453d-1354-48ed-a3e9-b39b4394ca4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7091db6b-7610-4c47-89c5-52eeff68c43b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30622d79-02f1-4963-9ccf-d894e09d3dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5b15d33-84fa-4756-9bfb-203f96e0ea37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e062625f-b665-45a0-86cc-b2e80461eab8",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd8c729f-b350-4b2c-b4c2-137ab60609f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ca2dd159-d9a5-46bb-b692-c1a10b7b1baf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ab57b27-29d9-48af-8d52-1302cb770581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6688ea6f-24b3-45c7-94e0-95333d25d018"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8ff110de-f585-4b6d-a907-5e85e958c049",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a0c8e328-b333-49e4-89ca-b9affff7843b",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "805d7d3c-875b-4779-8bec-6f48e47a93f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e7e3a51e-63eb-48ed-b66d-834092cd0ebe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "997c8367-693d-4f0b-8157-4102cbbdfdb0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a263eb4d-3c08-4642-a910-997d421a496a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "efa3ac61-bd9d-46b0-b6af-472f0f4a3c1f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "acb430e1-7d8f-4952-8ba7-c4921092f958"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6a6c47e-a409-4286-8dfc-2246044defce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e25b44fa-fdef-4fc0-ae7d-0bf138b3e230"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "54f44780-7610-45fb-86be-49f282454702",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c51a9c00-4bf2-4225-a831-d1ff14096b1f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "23d160b2-9224-4ff4-b583-04695c0bf320",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2993974f-17cc-470a-a89d-11ffaccccaf9"
                }
              }
            ]
          },
          {
            "id": "31e2610b-9430-440b-b753-921871848688",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9dbe8740-6f84-4a6b-9d4f-4085d310e153",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5537a576-7120-49fb-a418-88481be04239",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0405d6b3-659b-48b6-8804-c951087afc28"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a9280a9f-ce35-4e47-9fa6-949e052a7efb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a8d9ca14-4e4a-435b-8a7a-45b7ffcf9e62"
                    }
                  }
                ]
              },
              {
                "id": "ec18801b-85c9-47a7-9a1f-ec1e22858675",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "17baf7d0-c27e-406d-984c-2c002886dd98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "12ca80e5-9421-475a-a542-119cfe284b44"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d74659b-2de5-4351-b360-c1e8ea08fdd8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4c8424f9-05ba-4ed1-b733-17a9445776e4"
                    }
                  }
                ]
              },
              {
                "id": "50d887cf-2d4a-4efb-a4fb-899c8e038b5d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fc2ded83-9bbb-486f-bb0e-c18b6f35a9c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "84719d50-823b-4263-b51c-c47019f7b3d6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "07fc88e7-e396-4279-aa5d-1a02f8159f6f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8007cdb4-7daa-420b-8c9c-3e5413e149ab"
                    }
                  }
                ]
              },
              {
                "id": "8e707fb4-ec6a-4126-8351-a6ef6ae58361",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "108216a1-fdc2-4ee5-8266-55fccb92f435",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "241b4b9c-dd29-481f-997b-7627d985a372"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1258eae7-1221-412a-a02b-8181fb823076",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7e90efd8-697b-4ef0-8340-95a9c0bf5d63"
                    }
                  }
                ]
              },
              {
                "id": "38b83da0-b223-4066-884c-7acbfb765e2a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ee27a74-a2de-4d4e-b8db-729741dcc73a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "819dc5f7-0048-41be-b421-47a7046e7f4a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dea2121b-cc4a-41d2-9846-b13f78863df5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2e198f71-dd4e-40e5-b54e-52d474982883"
                    }
                  }
                ]
              },
              {
                "id": "b854a1c1-5254-4fb2-8855-9672d708740a",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cbd8d28f-bdc3-495f-9cb1-edb25af80a2b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f14b8a23-f8cf-4df4-8265-d2f5863307ed"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6c1fffcb-8ed7-4137-9f08-e886bc50194f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2317eef5-8cbb-4d94-90f6-64e6c66c9666"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ebcda3a5-6558-4ed8-9c86-1887b42aa7cb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7f4a11d4-a7e1-4edb-8a47-606573655fc3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "52603cc7-5a87-44dc-b537-ff8df0cd4c84",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e616bc5c-bfa7-44ba-9faa-99060f739419"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d8385a84-6b16-43df-bc24-1fc93324bdcd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "74d55229-1972-4fd1-80c6-ec7035773862"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4e3c6212-f6bf-4f6d-806e-490a005841f2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b42b8744-e0e0-4eb4-8e5b-1c0e019a33d7"
            }
          }
        ]
      },
      {
        "id": "ba95298a-a175-446a-a909-a062aabe147d",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "821c7a34-cdde-4bb1-91e3-a70bcab7c612",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b409de21-1f03-42dc-b64a-40ae9dccb8e5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a9694677-08fe-4939-91fc-7b32d04176b7",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "630176e8-9655-481c-b321-add87c07176a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bed94e25-07d7-4562-a6ee-c46f94c6fd1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5fc4efe-2c0b-4c80-9c82-3c058da556b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "56e4873c-92d8-4ca4-b2fd-c4d5d1339350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eb464f0-75fc-455e-815f-8fd68acd8f8b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "929d7b8a-91a0-4022-8b3d-6342f2c8542b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc9873d2-a540-4ef1-a2f5-b5d8e20944d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "025459ba-0493-4ab6-b4c3-d98715f569b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "05490628-091a-46da-956b-fbe5b4b1c757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbf4bd9f-bb83-499f-a36a-b51fb432bd82",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c960cbf7-c5c3-4173-8193-d550b6fb2373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "010438d3-48ed-465d-924c-c534cb79d305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "748ec30c-9f46-4a64-b443-b63f4b11973a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c86e394c-3bab-4c85-ab78-cc594c1f4537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e18bea63-8b4a-44c5-b836-6334ab6e5885",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f5e2170-1e20-4214-a5b4-23cddd70d9d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d666ed60-e303-49e9-87e8-d4ff3814f073"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fdad64f-b49a-448f-9a10-4d170bb49618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7dac433-e0ce-4423-88cb-4c20177315cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a911aeb3-622d-465c-b4f6-5386b4bd834a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68b55352-3835-47b0-8951-4918d395167b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac8e6e3d-d7b6-4df0-ab3d-6c3e5ec1fda9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1037c5e3-f73d-4ba9-8579-a4802543b10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c293deaa-4bf3-4a25-9fd0-4d2dad31352d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deee28b6-e355-4aff-9224-c9908f84f8c4",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8690255-934b-430f-89f7-1c4be003e27e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3de39bf3-335e-44a4-be3d-1da580b98246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9fb054a-3827-45b2-9acc-17041e3f6e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3661bfa2-0212-4c37-ad57-316d3556dd94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28349843-a076-4441-a351-5232b3a1c502",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f635d729-bea6-417e-9f79-ea3aa1d35b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "251d60cd-2d80-42e0-a956-1d5adcbfe61e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "713d84ef-7ace-48f0-a476-07644204f5f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "3673b682-1abf-4693-be4b-33926bae3ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0702baf-8a1a-48e7-8e6c-a942bb63cd57",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12166a65-5d6d-4e02-a653-017cebdadb94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1168d239-e873-410b-9c27-4ebd640923ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7349ff00-1e42-45c7-a9c1-58cd3b137079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5ca053f-c1df-47e4-b617-09cbb8d544b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75b668c-0138-4c7d-ba39-513eb1c23822",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb29310-e165-4b58-8d51-9aa08e92ffc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2accacac-0d2b-4a45-9231-dfcd2ff96117"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "558dba19-082c-4f72-93f6-e3d72cd354ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "adac6be6-3559-4f17-a3af-820df66ba6e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e704491-1fd0-425d-a3a7-2e1c9685d04d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb9d4c1d-3d51-4c56-b4fd-793939700dfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3037d9a2-9b03-40f4-930f-6e1f19fd4d9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62baa2b4-eb83-4989-a84f-286e64e347cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d80d29f5-7339-4c09-a8f5-d12cf0bb18f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2179e433-ff6d-481c-8c10-bcb1679a7099",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf01c328-3f80-45b4-8d64-a5c8736b82f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b80cd45-a851-44ae-b317-c13d07ee543e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a0fdcf1-41a1-47a6-b9ee-2d25d8912731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "21437ec9-aab0-4590-a5a3-df79f4bb2457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ecb3622-54f4-4650-9a6c-6b1ae2008cba",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15023556-a552-48b2-aeaf-7dea08b868da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6290386-5e12-4785-af12-0211277a5de3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b40dd50d-98ab-4d63-b72e-ec7123652047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c0a5a313-da77-482e-ac6c-b2a99635cfc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f00093-ceb6-4c91-9f42-4f48bc18e0fc",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa7f42f2-2a49-4b43-b7bc-5f3cab3dfa36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16b41ec8-7c66-429d-80d5-640727eb6410"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d15ff17-6b17-4700-af27-80fd15bae13c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7538c625-10b2-44b2-8ba9-0dca6af29844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "690eab6e-cac7-434e-bc90-6e1e7d6406f1",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1bfa97a-d4a4-4817-aa27-09ef438671a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9edf5160-0887-44f3-bab9-d10511190947"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62c61347-8c42-4c75-a5dd-489457bf612e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a8b5eec-4a22-46e5-9fdb-a93cf87f7fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c167875-2368-4b9f-b920-97a473a2b5be",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c219bc-338f-40c9-bc51-32e2e579c4cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45e6ffcb-f4e0-48fc-9072-fb1c19afb039"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "659007f0-3b9e-4567-8d2f-731b46e76795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "04e5a021-e75a-4fae-a9e3-9f13c8295e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd50737-06b3-4a09-8a0c-15c2b549a74b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4deb9f9-82cd-4645-ad46-b47ae8be492b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "654badc6-3616-440e-99a8-6603fd124cae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88e84f8b-33fe-4071-a461-75b5fef556aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b1fd792-2fd0-46c4-b2d2-52cd53fd660c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b5762b-821a-4858-a223-4737e8d8ded4",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95fdc568-c8d9-4a4d-8a07-ddc74f8eba00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6b480de-466e-4261-a7cc-b66891bc89c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38cc2cd4-6a22-45dd-8f7b-44f987e68bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd8ebc1f-f9d8-43b4-b164-2ae82f6bb081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3983e4e5-d1a4-49b6-8161-6d292853cab0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e78405e-ac0b-4e68-b133-449f88e348e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25c30413-031b-4d93-8302-52f01c69ae54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42c0e965-33d7-49e4-8b4c-c6e78b4e95bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "372a1a42-8134-4e6f-9536-794febbed967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d67a8666-2a29-47e1-b626-89cca6e166a6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f38dde8-fd9c-4bfd-8ef9-421be9d59778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "891fdf47-7cc3-4e74-b2ad-7fc172327aab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a7dbc28-52c4-465f-9a8b-e6c7097c2e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5f4095d-391e-47e4-9685-b28dd0bbeb8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18f1ac90-3659-490e-8eee-f4f8605c73fa",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84391d50-a5b2-455b-8c53-0a231f44188f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c60cdcd-ee45-4176-9a78-510c55e97aed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24281da7-58f1-4394-93a4-8d3140e007ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "211cbadd-d908-4c31-9aa6-ffd2973b4b8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61d1b101-d12b-4d0d-a868-ad25eaed655d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0585cc2d-b4ab-4420-a2fc-45dfea660ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abe85951-2207-46f6-b12e-ec7c2344a123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28e06a3f-73b4-49aa-8c04-6813a2f9a339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c409571-c268-43ea-aa6c-9ddb16469c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e3b4ea-2826-46e5-81a7-6e73142d6594",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca00b834-26ea-4f33-83ae-f8e9345785c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8728bd85-7d37-471b-89fc-b2be0f6ca8d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e2eaaf2-4242-4a85-9d87-6632508f9c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bdd1d6c-094a-4f3d-9c32-bb72c768b529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41478cf4-0727-4ec5-9215-f3cabc726ce4",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b27fbade-585a-4218-aab8-0311f3e7364a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d399560-0f1a-4113-a33a-24278e08d68c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a76f826e-0304-4a65-b7e7-8c6dbd329482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74572c19-9dad-4c5b-906e-7f84012317a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cbe799c-6efe-45e8-8076-3a4c965cb933",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21ef110b-90b1-4dd2-9c54-841945b3f990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63f3f1a4-0c7b-4ce9-8d61-a2495cdfd565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c57710-6cf2-49db-a1a6-8c1b8ea4fd81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb60e00d-cce2-4857-b1b8-5e619168459e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b731ef0e-a6c4-4a4a-b847-51b3145f1f38",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1060038f-7bdd-4fc1-896a-79e162d6dd17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20d05b1d-cb04-413f-98cb-afce63f85938"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e96697f7-8422-4fc1-84a6-590f92864617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebcd631d-2a3e-462e-b954-d333d39af9af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef74ae5-82c9-42ca-ad9a-8e264039160a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ebcee51-0ca4-4b62-90e9-750118d8ce54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e324824-5d4d-40f9-9ced-4b86416e1599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c7f662-bb28-48e4-a0d8-93f09d9d0f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4972298e-3d58-4fc7-bdac-1e9ff094d4b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fb8137d-934e-4112-8436-3becb458ceec",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde247e1-1fa8-4e14-a2a6-d5364d7601ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76dc0e6f-73d8-4b4a-ab8a-0ca9a7d84c5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6116aecf-35d4-4c3d-ba72-fdb95818ad0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc7214af-2795-4149-a444-8096c7febde0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8932c1e3-774d-4723-88f3-9b4ed206f63f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67537a6a-ab48-4475-a791-de5029c62432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bba081c6-19b6-4d9f-8fe7-5fd3a045a03d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8870ebfe-5d7e-473c-858d-30c7ffcfdf27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "efc80373-9f8d-4fc7-b17c-eec6d0873373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b785bce5-f688-4685-8375-5b9a0dfa44ea",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3abe7be-2ec2-4092-b6c8-9fe27643a120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e20a138-4194-4bdb-a3a4-040493483469"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e449dd98-ec2f-4386-b641-8750f790d63f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9862a5b-f9b5-4f39-8c81-1599ffee00bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7869b4c4-32b2-4d7d-bb03-08a3202b3c0d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "520ba766-ad65-4d3e-8b92-d461e5404af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d666662-d0b5-4c91-8eb2-58c947572a8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e5b940d-3135-40a2-ba40-2914e4ed10ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4894eeec-02da-4b47-9175-71500befd044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba1d55ab-9837-4783-8bfe-50acdaea8da2",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8235038-9b49-4ccb-aa4a-4803ceedb6a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e81246a-edfd-4d19-94a6-2b76646086ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a1c8a8b-530c-49bf-81b1-e2e79a80ba1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3fc6030-4f91-44cd-9914-44fc1921fbb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e31d25c-3a33-4fcd-a42f-04ebe4431ae4",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d87a6128-8503-461a-a6f0-f668d9caf175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dfcd6a6-3dd7-484c-b2f8-d938e8efc6aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315d15af-3a55-41f6-87ec-7f549f9999e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62e6e2d6-18f4-4b62-82f6-20ab4bbb76cc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fb4ee376-023c-4e0d-a7ab-9c7b4105c12c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "24699888-a3fd-4afa-9d4c-5c89018424a9",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b63882-6a0e-4b80-81f8-b48993afa2fc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c794187a-8135-4d4f-a0a3-0a784188b505"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59ec6cf-9089-42ce-855d-9a185b0ac41c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f997d5dd-f867-415a-b78b-a1b90a2806f3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "71460811-466e-4452-bb72-c856440cd915",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe3ff3b3-f733-4f9b-81c8-287ad54b63d7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "24c15ff5-2552-4b17-8b68-ea9ae357a64f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5e3d6aec-de5a-4824-94ca-8e72d205e135"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e6674dc9-3a44-4fab-8326-b5ab33635c85",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "880c630b-9dd1-4a8c-9336-697240c3c851"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "805b9374-74d9-417f-b3cf-a58f0b73aa12",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3d71e5b4-cc38-4b32-a577-750f1e410855"
            }
          }
        ]
      },
      {
        "id": "13b066c3-19d8-479e-824f-464176c48220",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "f56561f2-cd2e-44b5-a359-355507ae5cdf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ad60d3cf-0133-473e-8fea-16b473b62bdc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bea26a97-8d15-4920-b12b-92560299e30a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aae457f-c0cf-408e-972d-66d73e8ebfb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b9679da-57cc-4961-b0c7-e93f917e0a13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dcad06f-25a5-4484-8c91-98edac03234f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "df5834c8-e377-4cd9-9ea1-008a4172ef93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be6ce693-aae8-43a9-9902-00d3124f14af",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de32b03a-9fe0-4fde-acca-e77402154637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8a36583-13c4-4c9e-838e-27f513fe79bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61e48e63-1a35-4f5c-85b8-51a520f497ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbbc255e-d47b-421d-b3fd-8c3a88a1e80f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3908a385-94f5-400a-bde3-14d72828cef8",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb547a89-890b-4306-b352-29413d3341b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dd86983-8ff4-49f7-a704-f4a7ffe5f7f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2f9690d-8074-4249-84aa-d68c0f17d05a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b47cb0d-b9a4-4457-8dc7-da97c9602692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7bfb5a8-cc7e-4828-8d16-80b03aca70e9",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac9aa7dd-b889-4a4d-8569-7cf9aa7c49bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e3b1dbf-3355-4014-8979-c44505b735da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "383b9244-d061-4fe8-92bd-ee4e13a4a5fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "05526d13-359f-41eb-9f42-7b472982ff7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4000679f-05d7-418b-86b5-8da57cb39fad",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e42378a1-5b78-4a95-9299-f0d6b9b11051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e8bfb69-60cd-49c1-8d05-997e84340ee2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a994a718-b4c6-4d2e-8a57-5f2c37b8b30f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f8ba1f9-4627-46b1-8e9b-dd8164fec57b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4935e70-ba22-4743-8acd-bac98decc492",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f52676c5-34d6-4d56-849f-378ef7f54f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fade432-a805-4a56-9642-c5785a652562"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ffb879e-de18-4552-a173-9c0b36480cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2317dd35-1377-423d-8ed9-ed01f2800e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef0c7950-b454-4bd8-9514-7c5f8598d136",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69844f83-8c7a-4e94-8f88-757f29899a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c38815b5-17e8-49ed-8432-824e32174ce1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e9d9d2-1a3a-4b78-8707-890024b9f9f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "393b09b8-f020-4682-8aff-107cb90396e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05de7af0-10df-4cfe-98bc-2668e87b7484",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f6a01e0-f788-4706-8a1e-7fc1384f3038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81c27839-8fb9-4828-bc82-12b248e05d83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb483e50-db28-40a3-b194-60e6b907d58b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e2dd5bf-1b04-467a-b3ef-ba48410cc6f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34e2ed55-017d-42bd-b8ef-1dedcb2b9ddf",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae441ee6-9001-4edb-b5b0-3ea2b7872f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca31c1ce-9c1f-43b6-93e1-cbddbfc0956d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f2d78a7-2f65-48c5-87f0-137a72ab105c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fa3315c-451a-4535-967c-244e7619a6e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa4fff46-11fc-4262-a3be-75d11c1c7472",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "685aebe7-94c7-4ebd-84bd-680c17d8cc2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d6a1fcf-cf27-46fe-9666-eb4f586ce108"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "288902c3-751c-4b72-a03a-33aa7f041b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bed49c4-02b9-48de-a9a8-bff55d82d1d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d340e82d-ee6a-4a30-991b-d13aa386aea8",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c1d513c-09ab-4774-85a7-a1c606e85050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbf741ca-428a-4c89-95b8-33980ba1eb1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec7e2b9-9f42-4d7e-b5ab-1b5a930c5e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "9cc2b762-e150-4f68-8ae0-b752fac49b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69ee4fc0-1a20-446b-bbd9-e060609cc051",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70372068-3361-476b-bab6-7f7fc13eb5a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea62b939-c66d-43d1-9655-816a36cee28e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a71df19-a18d-45f5-8190-18ce3c7de508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "360ff32b-0b3d-4e7b-89eb-dfae284a3fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9135a91-7bc9-41da-a41a-96ebc650b1aa",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82a0b373-3f0c-472d-ad22-c7da260c228e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d14e3c7b-92b5-429b-b585-0d2e464388c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0d3d4d9-2d3c-4ccc-800e-0d1d4897fd8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "21271f03-f035-4e89-91e1-73519caac19f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d502fe7e-11df-4dab-94a2-52eec53051d3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "764a62d4-8e56-469a-8213-0557a7c72a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb54e0fd-be7e-4e5c-a1a2-9f5af5203890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5acb6c1-196a-46a5-92d8-5268b2fb0efc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c24759f2-6260-4d96-828a-0941616d27d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eec7f7b-604f-49a7-9b9c-ddc89c80df05",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c832b570-998c-4221-931c-e910ae8770ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7210879d-1a87-4b78-9db9-90006c81051a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "178fdd94-46c5-41fe-a5c2-a22a3a5181cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "12bc9768-d415-4805-8b25-952f47deeb9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2944ef8-c96c-4e66-90b5-6904ec95ee12",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "696e0b7e-c561-4921-a929-48155a640826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a1459ef-4491-49ab-bcb0-c99c1c74ed17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "803cb5ff-b83e-4c6b-a451-76755585ef2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "657c0682-c7d8-4a25-8a7a-ef7bdc3d9eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e914c3bc-b88c-47c5-a68b-6e52033ecd10",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "425cef6f-6acc-4b9d-9304-8bdd8f74145c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48bfb4c8-35cc-4c96-a878-3c7f7a27eeb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05b55bdf-3416-4c84-abd5-9e63fee35afd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e976b3da-0d46-4cad-9983-700060524286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0ab91f-69e3-4350-8102-544d2e3f61b4",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "627ee1f3-b137-4968-98f7-642e2fa3c54f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b5bb29b-ead0-4f4b-8189-44dc27c68c93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c302627-ac53-4a82-ba14-181230c57bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f67ba7f8-365a-4575-8530-b20c2a8875a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f0a619e-3143-4c85-bf0c-743eba040b0d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60421903-695e-421a-9579-1fa7dda1d790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34689878-6acf-49d9-8082-dbd511f8e93a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e55778fa-d3c9-44d3-8d4a-79d9e327559d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc6ea6ea-941a-49a3-bbdc-1f9cb843fb91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b53fa64-b5c1-4e48-8f46-e0039e1d654a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e07f4e1-a522-44be-b0a5-42fc322a1724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4a7bae5-3090-433b-b8d3-2173850761c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf622d6-fe60-4d54-af95-7833770b4d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1561dd6-c6fa-4322-be01-d9aa42dd8eb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08855b55-44c0-4d29-b64f-8ae10c825ad3",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c795fe5-a486-4aa8-ab89-822a811e0078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4253e1a0-2701-451f-8db0-a26d2656cc72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c62fd7-2e84-47c0-ba3b-c180d5b390a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "350583af-6367-485f-a6c6-e3b1f17088a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae8c8aff-398e-4485-b451-fe1212361fe9",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dd71763-3d3a-43bd-9f8d-390156e847e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d21b713e-07d1-4c56-aa1e-c68ec85cf216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa9727d6-7d89-4c5a-b1ac-ae2d1df15650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "305433e9-d288-4f26-9a5b-6b08222fee7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b67d730-ba93-4e88-acda-4562a10c8fa0",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "584ee679-28c7-4569-a364-9c68173eb303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baa8d3ab-593a-4d09-8ec3-b7fcd0f4400e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "019348f4-1b3d-4c94-828a-aaf8c38ce184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "345b7fef-9fed-4e76-a1d3-feaa818b4d38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7199efc2-9c16-4293-8e66-b447c25174b8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb7206d-44bf-4075-8a8f-2390f7f78f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea5003ef-a74a-4374-a8c5-b3a83ababc48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b71ecc-3824-4ee4-879a-180ad882cd48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "03fc6c5f-868a-492d-b52b-b51fc18c98ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42c44225-746c-42d0-a41d-4b215ff6c51f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec8ade22-a3e6-4a89-9903-3fd2403d90b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ef5d66c-25cc-4044-9b4c-0d3d11e005d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed3e6c4-412e-460f-8a27-8a64f90f1249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b96925fc-b2e1-42df-b5c5-a32f63a4e781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc3c088a-199b-42d7-9598-8317b425b5b4",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb1ebba2-cfcb-4f50-9298-9eec02357a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa7fdaf7-884a-41c6-b490-bb425820dae5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e4a66b-d866-44ba-a71c-d1e8707f0595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "59ce9129-4d47-4e7f-9b72-e6f8487554dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf1214ae-db70-45d1-82ed-63d03b27fe14",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c83aa1-cdb5-401a-9da9-90d84415d378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "842acb6f-9586-4d33-891a-313572b74676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "334c6ae7-99a4-4fbf-8178-09996dc805e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2752b398-9485-4b69-9dd7-7ad8d874098d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a7827a3-653b-4038-8d7f-9fae2991e851",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "986b37d3-9dce-4a2b-95bd-648359e8e720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "640f66f0-0ba5-4203-a6e5-43b8d3d85408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c01ae1-cf95-448c-b64c-60c11342c3d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e9c024e-dc35-4350-a9ba-93d6183e1094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c4abc06-b97f-41b6-b6de-ed0e4eb9fbd1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "100ed133-fb83-4dec-ac62-370e6b3e9112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca30c2c2-8a1f-4536-b060-954ba5a4246f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecbfec27-f83a-4d1d-a425-bfd8b76ca4a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0c4b323-38c7-489b-8349-313779932a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e87cdd9b-295b-4e65-befa-47089d9fc021",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9c467c4-526f-4a1a-ae4b-360770c7d450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "297b7df5-a1b0-46ad-9732-e931bbcac4b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f264679-63b2-4391-8bb5-c33c5205c9b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3147cf2-d19c-44bd-905e-600a40dc6f01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a28c81-4e1c-4d9b-8282-7db0c04d6cb6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a1f581-f679-4c73-907c-b093ffdb734e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "149a3f62-cd53-45a6-b10c-551120931dd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "212ec93d-f9b4-4a89-9c87-2bd9f93a5be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "804b6019-915d-4ab2-b7d1-a277117ff18e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce530346-8e47-454d-8802-9b19549243dd",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af3d7bfd-7483-47ba-a93e-49ea0b3750d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5acb7448-2874-4335-89c9-2645a92dbb46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb5501c-3a85-43db-8e98-59c7e492a0c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a69bb16-0e63-4525-9f01-681458adb257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d94259b1-20f4-416a-bbc0-6b27940ff34c",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "448177ca-efab-4f6b-990a-4c56ea684cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b06adb5-60a5-4ab7-ae0d-38c2ccb72316"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e42cfe-aba4-4acd-a989-9f6e1326cef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf2441ca-b6c8-492c-b855-0b6c58e3201d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d03c1baf-826f-401d-b5e5-991d6f2ebe8e",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c9b9ed9-b346-4bb2-a28c-471fb62a855f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00b87be5-118e-445d-9d9b-97aced6605d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba42073e-344c-4337-9311-ef9eb632dd6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fe14ff3-ca88-4b20-8401-5bc056498314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfb8d745-6dd4-47f5-a98d-e5310e3f8dca",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81728e0c-1a86-42c2-b54c-a703a38487dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21492c14-7a5c-4163-983e-11739b1f2ad7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b304528-90ae-4006-b2ee-737a0833c057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "251fb86d-e0fa-4c48-84dd-609ddf7d07c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3046c1b1-f2ab-472b-880c-a0d1d27ac1dc",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a31f49-43d4-4a01-ba41-f695629805a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b4084ac-1bd5-4fb3-82da-d34975dd69c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee699b8-dca6-4b28-bb92-2ef74f0b5a8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9b89caa-4e67-4497-b85a-03b230a77eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be8cfdf0-46d8-4639-94c2-72260d81a403",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b550af-f080-4449-b087-5ce5ce3e5016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "005251e8-76f3-4850-a901-5f6c9be30607"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee4d1c9-fada-4b57-b440-ee996af92a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18cfd0d8-0011-4aae-bded-3c392062dc0f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "07b6ff7a-0392-4c54-b35b-91534003a8d5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e8364e91-6207-4ebb-850b-4786ab29381e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fceba4e-d510-4348-a6cb-ecbbe1be0bb7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "4dcedea7-fb6c-4e5e-b3d9-00302e08a0b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9045924-ac1a-463e-9ca5-f3cd63bccfe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5505b1a5-044e-4d3e-9716-2601a708b499"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dc99cf7c-8ced-4c91-845d-11e85aa727ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f76c3f6-6667-4ae7-9988-f7888be3fe0c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "01d19e44-9b31-4a0b-8f71-6cc4a879bb42",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c85b709c-7e38-48af-8713-1014455e981c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b605e726-4013-4dd7-a8cc-6666b96c8b2e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1bbf14e6-887f-40d9-bea9-48b5fceb5c18"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "61d97d72-b764-4dc6-a715-ff86f17334b7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "53010ac7-2cf0-49df-8240-d68f51fda9c4"
            }
          }
        ]
      },
      {
        "id": "6560cd54-74cc-452a-be92-a6738b41ab35",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "97bc3d16-1316-42e5-a3d8-1602c6169b9a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b3193257-6561-49da-83bd-624ded363a33",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "43d3ef4b-b3d9-42be-92ee-b6feb4bae84c",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9e0f17d-09bb-40ce-a83b-680b7dc3803a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb5de63c-da58-44b7-964a-00ee9ae76637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acdb82a2-f0f9-4aba-b621-9d716f77e231",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45650b2a-8269-4241-b97f-6c94d1d9a891",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fde8155a-74b5-4b20-800e-504e40b0831b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b72eaae-582e-4328-b01d-fabc6769ee07",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc2fad8d-e5b7-4d78-80de-a7bc1b34bb96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7232308-421e-4761-9bbb-6ab3ca12830d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a13026da-6553-4dfb-be79-6dfa0021adc4",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d041eeb-727d-42f0-bd3f-baa407f35943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3e272e0-8be0-41a4-b671-b755a6fca4f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b3d0b7-1fbc-4996-b21e-f24a377540f9",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81fcbfca-6e6d-4d67-9901-b49cbea1fcf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75f25f7f-e80e-4234-afbb-92297effa012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebbd7013-a44e-4c5f-bfe0-baff52ba6f27",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30ab2096-c9f4-4929-9508-f5715c67afb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59b33c7d-ed58-4660-adc6-1466f200a018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00648247-7db3-40cd-946a-094bda6b8ee6",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d25190-3cf4-4c32-a09c-529a594a4f5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0de0a37b-ca49-4aab-a0fd-f5309ffc4026"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db8e3ef-5f4c-49ca-8c76-dde63ab6ef3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "238e867f-c56f-495d-a19f-8b2c190e68a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8583cf23-26fa-494b-9258-04329bedeb66",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec523f80-12ac-425e-9206-8eb83a608ff3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1895b75-45cb-465d-95c0-a7e84ec36797"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e5c7dcc-4999-47b0-b013-2fa7a2e8772e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43829791-2838-4678-9ad6-ad77f7cb05cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a862c4c8-44d3-44eb-bb22-6315e4665cd7",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7deeaa5-ab92-4bea-b21f-95c194150249",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36815d23-10b2-4340-b216-96c7780b7443"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4702f4f3-dd37-44ff-8835-812abaee18d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1657f592-3692-4a51-a657-f156caf6f9fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c69e850a-7a4e-465d-a3dd-205dc11ba7d7",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db789ff-6f81-44f5-9aab-f1e6b182904d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d07dffc-c7a7-4306-9156-221a5640fc66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a49da6d0-841f-4ed3-ad87-ce47eb910dab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8f17c48-8e84-44ed-a78c-017e44d0782d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac4b90df-b56e-42b2-91f2-609e4e2c972f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fe1407c-f9ce-4c6c-afc6-79f83a7fcbd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b6db8d7-06e7-4d47-93ca-6b9a0e9e61bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c38add8f-5ed4-4115-b85c-8add0e50477f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ca662b7-8cf5-4941-bbc6-2ce05c337270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2797e6ab-8542-4acb-ac9f-70122c18f5b6",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa7c1dc0-575a-44b3-8d56-14ba08b6f3cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f041e9db-71e1-43d3-8bf1-a9447dc9fb7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60699265-97d7-4e63-9705-74bf5312d4c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38a07d33-0104-4199-aea1-c374cdd42525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b0e1fc-e579-4089-a115-fa05aee64d4e",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cfc9e61-e02c-471f-b93f-fcdfb53f5e01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "828035d4-b44e-40f1-9c9c-220b120316ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "905c64eb-2af2-4cc7-a86d-d01ad7285a5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ed621bf-24aa-4932-84e2-4935fe7bafe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a6167ab-6acf-4975-8d4d-1acc74bbcdeb",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1162f13-c457-4947-8760-a10341c9d590",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aca5bb63-facb-428a-86e9-f878f3943f09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd81e805-8d73-4683-81b6-e82e30a433b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d75bdbc6-eaeb-47b5-82c5-30859a7c98f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb02300-5f0d-4728-9b5c-d34d60b310b5",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14784a16-9620-4e7d-af2c-bd437ff6b966",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0be7a6f0-2b8e-46fa-9138-e2d8ec897f11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93cc44cc-4fff-4fe7-9f69-6b51b4a67087",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6ad833d-02fb-4af8-89d9-f63a46479570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f6579e1-dc0c-4e77-a0d7-48d98b0eaee1",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13133e0d-77e0-440e-8950-a28b91db688d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1654c8d1-56c3-4caf-b764-1bd789612c0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d1a685-d1e7-45b1-93d4-c4edb14173ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20221769-dc69-4dee-b697-f4d37ec8caa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "213f9bf3-a23b-42cb-a5cb-62375b7d66cb",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f6ac0d-fa39-4955-b364-3aaf5beedf92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c04a1a0a-15b1-4b3b-ba56-b4c0d250b26d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55f340f9-963c-42cd-92f9-ff0f82dc603e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d46ef4fa-ab2e-4555-a43b-4f1bedc1c743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e430c87-311c-431b-a027-d0f892a70259",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "019b4e0e-3c27-4125-9157-d07236771be7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bea1f8c-968d-4c68-aeaa-1bf9615e049a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b4a67e5-29df-4579-af56-3b9bd0d41220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8db5b820-fdc0-4a7c-a076-989002e581da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e3f0241-d289-432a-987e-80bf50a61594",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffa71bbd-b2e0-4812-8fe7-61b73bb8ea8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7d6cc1e-dd9b-49c5-9ed4-b9ba1ae3a8f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "246c9428-af1c-4b67-8e46-5583b40b3d11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c590cd1e-9bb5-4f79-803f-a5defdc41c92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab04af1e-b336-4688-8d84-f9732dd25ecd",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e87f137b-766a-4f5c-b6a1-89c8e0c709f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7c6dc20-633f-4d24-92f9-956883145a81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e08a661f-a5b2-44e1-8cc4-440e86d7cc44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b65c903f-be34-4811-81ac-66349d20adb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8799cdd-6bf5-434a-af40-84acb25c8ea2",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69552154-61a6-47d4-94b5-0acfc0635227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "823ccd5f-e889-4407-a265-c61261663177"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f390296-73cb-4333-9a9b-2e6de9a145d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "559b8c39-b3e8-4ac8-9f17-4c5f1416a955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a419320f-bfdb-4eb5-a0dd-0b80da394c28",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e20bb697-8724-4d3c-be44-23956bddb6a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38ec2a99-66a0-4d68-a7fa-f74d06136ecc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d60883-64e6-4009-8336-d2e9a913e490",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05145499-c96a-421c-b030-2471e1890656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb3847f7-4ed6-4f2f-8388-139f0b784695",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0473a8c6-11ee-4fbc-b79f-60ea762e1bcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bce0cf6-9873-4aee-b766-3bf5bfb21038"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9a16fc7-59f2-4fc2-8ecd-8c9531db6969",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58ab0086-ab30-4223-824d-46dbbafcfd1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72fa4be4-6f68-4562-a914-f33a4e47054d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d99d791-2261-499f-aab7-96eb6e95cb87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79db4a2e-ef84-426b-82f1-980954f608a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11af77ed-ec89-4d92-a7e0-09b72cc4b0f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65c9bd54-6699-435d-a777-7e71f2981153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea1c822-9bfa-4004-b8cd-dc2c3a002c7b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5631f76c-634f-488d-b4e5-b71dd94f7f54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1a575a0-4694-4cd8-a827-3ecdf6dfa832"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b0e166e-3980-4dbe-afbb-cbff9bf506c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e35830f1-dd23-4fd6-bfcc-638a778a9666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d775c1bc-f7e0-402b-94b0-3756256a404a",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a425451-b7e8-4eed-a1e3-f2d9d11daa13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "505b22e5-8605-4cf7-bcba-f3d092d36763"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb87e036-c82f-4789-9788-123bd54bd3b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "823e70a5-6e86-450f-bd49-b0ae2e1368ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b34d43e-9f44-45d8-a6c5-3db09af29935",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc7d9b9d-2855-4ceb-ba5d-c565aaa358aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6054581f-522c-419a-8522-dcf9576fd15e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "221d846c-2573-4c0c-af56-2d60accbf9a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbd6892b-b3aa-402e-845c-cdae2112bb0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51cb876f-7b8e-472a-ac84-319ed22e1383",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d73e62b7-2a5c-4313-bb65-2f3064f853f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65bfd9d5-66e5-4cc6-8dbb-b522dfb808f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "674b0e58-626a-4439-96f6-6df2501eb547",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96e5fd31-397d-4bf9-8de5-2c2b8e855f52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2b543b0-5c95-47c0-bd27-8702795cb01b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0845cdd9-6037-41d5-a9be-0ad5d1e61a58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbd11857-dc78-4ce0-90bc-5aab5d455c23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb20b32-ab02-46a2-bc33-f0812c84a3a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85efdc8e-2c66-4377-8803-3369e1c9cabf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "766b844e-2912-44ba-98b1-1b5e261625e3",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41e28bd3-dc63-4b51-b86c-29f592fce0f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7595392f-bdf4-4471-8070-09e2ef21f266"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "291f6b91-748e-4a20-8670-fd8598a532af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73fef3a0-0d25-4d3b-95f1-cce226386693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96d8cd02-b11f-4b11-ab46-23fc9aa159f5",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea4e7b90-d45b-42e7-805d-6ee64382a234",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0c11e24-b3c5-436b-bc81-a51c4e2910d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "617afc3e-334e-4b9c-95cb-7408412283b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0c5430f-4402-4868-8d06-6186addc9ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ca1e32-a800-4715-9333-e32079cf5e68",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83fd8531-2aac-45ed-9f66-df018ae61e96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0321094-567b-4408-9403-7c8ff3e68cde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5779556f-d5ed-4347-a165-be182e4c1e00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1701aa1e-efda-4c48-a702-1027084f3e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b03ae874-26b8-4e32-bd4e-506c5ab7839f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5200dffd-1f7f-4971-9a3c-f5e3bd591ffd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a740458c-c6f5-4225-81cf-4b3ce3dace31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac3b0e0-f9d5-402c-a383-0f071488f96b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "467d5f84-6315-4f07-9a70-8fabbf91dd85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ab35f13-3042-44ba-90e5-836c33de558e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "250d2cd2-3e9d-4944-b448-960c156fbe41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aab9f9d7-c4f3-4af7-aa38-2e5f3c513dfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb7da36-889e-4875-b2ea-ba9764625fe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3805074-c031-4350-b8f8-563c50d999c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ce69cc1-117f-4038-8234-7e74e32119c7",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "782ea989-e41c-4210-8407-2c512dbf955b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "952cfc9d-ebf6-4464-976e-947852860aa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a827b4-d63e-4d35-b426-3ca17804a672",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dbe190e-d734-4cfd-b16d-7a7453458d65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd8eea30-f81a-4236-bf63-aeb978f9284a",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6de7a21-8659-4b5b-876c-24cbfbec14ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05e99ede-0f80-41ff-9a70-325290f04831"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9deb4059-d1a0-41e3-b4c1-824a5ded22ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2de40edd-b2de-434a-a05d-3150f449d5d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6417f13-65b5-43c7-ae1a-5f993795650f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "094da5c2-7866-4c47-af43-bce8693907f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a89b20b1-beac-42dd-8c84-efc6ff3763a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f775bdae-c1a3-4466-b11d-9971df0d2a00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04431bb6-a1b1-4c56-b2fa-ec23e57babc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cae80b3-fdde-4692-895c-9c3f38b36c73",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb2585d9-15ab-4aaf-b38d-8456d60e3ed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13bdd31c-9627-4f9e-a1de-393031a71383"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c8b2d05-d398-477b-a287-9c48ed87a660",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "640c1689-ab9c-4a15-acca-78fbf39d3862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83e64b1f-06a4-448b-99a0-0a99231a571d",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e800be4-b31d-4af9-beb5-c39dd956e358",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "803b6ae7-8460-4997-9ad8-b63f3e5f4f94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8911184f-901d-414c-9bc8-ab29a363e8c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2378cf24-008b-4670-9cfe-1f51d6afd983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5be3c7ce-3b7e-48f3-a6a2-99ada1d4c912",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1dd0b41-b906-406d-8356-25ed017975ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45e33206-4eec-451c-99a7-0ed68867d770"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa0ea565-522e-4c4c-aee9-79fcb7f3f4c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28703098-995e-4e2a-b4ba-738c4153b147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7faa569-55eb-4e6b-b6a2-2e228de13468",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5866bac9-538e-405a-96cc-1e088e23fa20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad54ebdf-5d36-447d-8d95-73ab426d3723"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f00b58-cca6-4be1-964f-da52f60fc4c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f15476e8-9c11-4640-bef9-05bf6c7c77f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1139d4e-09df-4d30-a3e4-989539cc6e64",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f3dc5c9-666f-42a5-ae4e-74c53f40e4d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1506aeec-27a0-40ef-8baa-e99458bc13a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74c8ef9-e3df-4a6e-824f-bf48bba9dd15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90ea2967-1bc3-458b-8405-786c50cad283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7031b00-d46c-4e58-ac48-403b59583a0a",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bc2eace-52fc-49ee-bf7d-d3976930b96b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5ccd40b-8d2d-4e81-8195-1de8e9303f60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a55b2590-d364-4398-bfcd-e31d0c0f345d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b420b683-e3bc-4903-ac25-5e083f960019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e85ca79-6dde-40e0-afb6-e38adf5fd286",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "526aae12-28cb-4d23-91ce-94b6c7611fb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "306fdc8e-f073-4602-a009-440ca3daf93d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49ef5200-02d3-4a1b-9fa5-b974d58507e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88f97d66-91e8-4b5e-a723-e7e77bf2ea12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af5fb45-4744-4896-9774-370ffd44187b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce476e6f-2f3d-47ca-9a52-af8c0d854d1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feb08017-4bfc-4a65-bac8-ca773db1f183"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e1c98cc-7ca8-40cf-a2a2-0bc0430fea64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c44dfc69-fe37-440f-80cb-6463ff83718b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1581eea-e579-404d-9faa-ff3f42cbd76e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6741d7c-99e6-4d57-b100-44a9db1012d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c02396ae-7f72-42ce-b057-ada9dc66693d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac1b7346-cbf0-4b3a-873a-44ff30ecfe15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "693ae9c1-7b14-428c-adf7-055427fb093a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65281eb7-5d8f-4559-a1b1-f61d31e7a431",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cbe01c8-4327-4e4b-ba9f-c52b31c71e67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "715a6a2b-b846-4c31-9cb8-a59de72cd9b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c01aa6-6ffa-4e7e-9748-2e5ddb01fa27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e541f5c-60a8-4159-b0f0-e0ad5c75fd3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b4d9a4c-ccc9-4e83-b782-ba487ee18cd8",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c108d6fc-ad58-446b-91dd-e381f8f4aee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a994607-b517-49f7-8828-76b958fc70e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efbce590-615b-4a2b-afdd-626f25abc35a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57100544-0e38-4c33-b8cc-fc45993d70ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a12a4df9-bb37-4875-a66a-291abbc91462",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7aa3089-aa02-487a-bd2a-b860bd2253db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76eaadbb-cd14-42cf-b61c-a9c6b60592ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a90280a-aa6f-4c2e-98f1-43ac1f5acd7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a71bc8a-7af2-458c-8e94-af5dbc30cce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9084559e-cc86-4075-9d20-6130a3765bfa",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ab0fee8-d888-4e55-b9f1-82ef0d24af43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30c5c308-ba9f-4dd0-884c-e5948f72d78d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "159aa454-6910-48c8-a3eb-83fa906ccbd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb1db784-86cc-448f-baa3-5451cd1de6d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf87aaf-b526-4b24-8d62-b41911acd83c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73207144-1590-4f4b-8dc9-983c178fef46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a2a4f46-7ec6-4f0b-ba17-334d94ea1d37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2aab74b-2805-41a6-97ab-893f1aadb241",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5a95817-8cef-47cc-bdc3-caea968af4fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "257bab61-d5c0-4b1e-8872-55c8d81e2e54",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "050bdb82-2173-4bc1-9efd-fa62ac1d8951",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed7e9e55-1f51-4348-a67b-3707090a7f6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f427e5ca-3a21-4cda-991f-b9fff45d14a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4a24910-6f40-459b-8447-5fbe3d438feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48da000b-fe48-4689-85bc-da5c438de09b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164bfecf-ac95-4587-9911-055b37f29a60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "086477b1-605c-45ee-a43e-71414d568b44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e37a1cd-b319-4c7b-a53d-fab2116ecef3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a35f008-d69f-4588-abc8-6e855d24d857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ec646fd-60ad-437c-bacd-213cebe7f6a6",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55b604b4-bd4e-4aa8-a4ae-669b7063e4b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5f00117-6249-4667-9443-431b6d9a839c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e2a1c8-358c-4a6b-b1a1-b288433cb679",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58f0d896-6d66-49a5-b9c2-13ed3a4be4dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "486d60a6-34cb-4407-8673-709b521b1659",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f73aa28c-48ba-4a44-80eb-fdbbe2435f83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa183555-55b1-4d17-894f-3e1ffe69773c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8dda67c-1131-4fbd-9482-410f3fca618e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29acfe1f-da2c-425c-8157-aa506951a7bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a85944e-e394-490b-aa19-561c8e13111a",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "069c9c89-eb5c-479f-8fad-327e152f8389",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c24a2e53-f5b9-4d74-94b0-070a5880ef9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34d6068a-a715-4228-8454-18892df5d4fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be1e116a-8a07-46de-8a53-c6b85bc046ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ef6cd2-7c0c-447f-a4ad-dd50740e0693",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a03cfb86-cd66-419b-adbe-29cdec9451e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa176659-8489-4512-abf3-cbc4fd8f5088"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "650c14e7-d9f9-4444-8c9a-3ca5e5f1b42a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d376ada3-6018-48b9-95a5-954861639105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a09a610-81a4-4325-8321-0e659aad3928",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0e5fcb-56d6-4d81-b3cb-17bfec40b06b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07c73abd-e923-4938-ad58-dcd57b74ea75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f7a4c10-cfdf-4b80-9f6e-0c74b0ee86b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b05223d-5ed4-42af-a5b7-19aaf806c8c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec34c5f1-08bd-4d30-bde1-bb60a4cbaf63",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb74b899-e228-48b5-b967-9599620934eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e64af516-7b05-4f29-acb3-627bba21712b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de1517d-80d1-449e-a67d-89dab83d2bb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5838cbf1-51d5-45bc-84b0-3e27fe5041ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b49b9941-1598-42cd-95f3-c69539576150",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a92227f3-adef-48d3-a5be-acde7f4360fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c15bbe3-d5a2-4883-8ffe-ce55fef7c705"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62daf646-29c2-471d-88e6-1e21e33685a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37ff0d01-d448-46ea-a9b5-a60b84e6bdca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed1ba1fa-49b6-4b76-bf61-c4e344992115",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "516f366a-d70b-42a9-b25f-c6f06852af2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30e0ae7a-f0bb-4db5-9c7e-5e0371e15b85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f84f5da-1969-4e45-96b8-218cce86e6c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba3b43ed-888a-4e1b-a0a3-686d5feef5d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8eef2af-12b5-492d-8b2c-4196797e00e4",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a47b68-fae5-4b1c-abbc-ffcd605b5ad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ba876c5-7add-49be-8513-a8cb1afd9816"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f118a7bd-0ff8-4e09-aea4-19327cb04d46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6101d24b-a4ab-44e5-a729-e15723f152f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7089ae43-b901-433d-83e0-c92d4bcc90f4",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11295041-f094-4ba4-a89e-9ad28dbc47f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80b98ad4-ebbd-403a-9e4b-7f892176de8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "451bd8eb-cfc0-414d-8dbc-5981df633d14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04a47afc-3df9-4aa7-b38a-6bf025cca81c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad98a5a-5e68-4c39-8418-0363b979520c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a3329c6-ca98-45df-aeea-9a10f3fd4bbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54bb7642-65a1-48dc-9fc4-31d637fb032a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "506fc6e7-8e69-48a3-9053-5a7a3bb856d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04bfd4d0-892d-48ae-b011-c8547a07ea2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af6bd99-8eae-49e4-a708-1f76d3ce862a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca3616a5-d3e4-4980-85a6-313c293c481c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3e59ba0-b24c-4020-8994-386e65321f46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d8ecb3b-a6fa-45bc-b0a6-4733160aea58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2178b693-abce-4637-bb41-72fee56ac990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a18d9e0f-fe64-4817-9a48-dac278c71c80",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1332c1c9-3837-42fc-82dd-e8b597f762e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47b7045f-3975-4a80-9237-a2b07068fe2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdc80634-32a6-4197-9a28-728a14cbebac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a7b5260-5ab2-484e-b2e8-a42d77a87de6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e035f2f-b84b-474e-9705-e95a4376c115",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6338d6b-2d4e-48ad-9734-85512fa930ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbdbb4e5-a1d4-4b49-85ec-a28f1e8b3ba0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "289a586a-4e18-4c26-8f54-af6ce582b047",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c717489e-5b80-4986-a1c3-dd2f55bbb532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f055c2-e0d1-4ae6-bdd9-6a7d070666b7",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc17494-4615-4df8-b3d0-f16eb13e0a41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "433a730a-27ae-4dde-b8fb-d0fa97e46198"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9eb820e-dae5-4f91-9861-74b61942f0bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af5d8e7d-8f8c-494b-a688-82ca8630c06a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a0ebf0-6c15-4765-9363-61be3a0fc8e9",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e1aed35-bf3b-472c-b029-50d72770b04a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a1e4daa-10be-4b5f-a85e-f4886ac06f54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb56d176-59c2-44b4-90f5-1ebe8962a367",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2523acb-74e4-4335-9e57-61f924989d8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9895217-4ed4-437f-ba9a-5a0d69cbc577",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4498fa0-266f-450e-ac73-125d94f7b030",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59dd17f5-8d06-44ed-961d-79209b64fae0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb9a263c-f8a2-4c11-be2c-d5c60c1c11a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f83cf50c-f5c7-411c-9f89-8cf0c057c743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2121302-cd47-4946-bbbe-ecb361c8874c",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2469496f-2cc9-40c5-922d-7e3e1fc51989",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "056c31ba-b1d8-48c7-a68a-3049f793d5a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "988ed18b-5f42-4f2b-a3d2-94d5460a7d79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d075d6b1-efa0-46d0-ae10-84b95df16015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "190d18fa-a7b8-4c90-836a-11fc78fc1869",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74460f88-b084-46d7-9eeb-58456ce9b355",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6d472f4-8be8-4a36-98f5-e8f6486d4072"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a7fc834-257e-4404-a9c6-418bd3a7b1c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2690128-7193-4ef6-bda5-7942be11ccec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "541cc441-c16c-4747-82d0-b69d306dab4f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2671c5bf-1f22-488d-b75f-2a41962d8ae0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "093772a3-1bc3-4a04-847a-7ed0378bca48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d21d36a-dfd1-4ac4-88fc-62b16d4752d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3abda15-a8cc-4fb7-acda-5ec842831b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d72434-8a1c-4055-832e-5367aa1b0b19",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08cb2853-6286-44b1-929e-0fba716dc931",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f2070f4-449e-40e1-a853-a5ec36d883de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7ee2f0a-c977-4554-b93a-a4a03056efaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8ace66a-c089-4869-9240-5ec70439490b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36931665-5115-4ad2-bec7-5e1669b06a11",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d4196bc-6121-4707-9882-ab3382064d07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c29f5919-fdda-4bb8-b5b5-452e63d16ab9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a67af343-3322-4bb9-8325-67a9f67358e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb5460de-cadc-42f1-a6d0-6865e5d7628c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8845b563-0643-4a26-968b-2f21150b516f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "800aff04-5a46-40cd-91da-40475e4cde22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e8c477f-b8b0-4fbc-991e-161769401155"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edaa02e3-d484-45af-ae77-986a4a6872a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cead8a8b-b8c9-4add-b405-eec2291c4301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd98d0a-e08e-4fd8-b7e4-fb3df3f000f8",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c3ff54-f311-45c1-94d2-17adab806a75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fdb9318-4de4-4261-8ce8-d0c7c2d528df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5363ae58-f231-4a56-a9d5-b4dde5bebe6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ba55e7f-d2d0-4728-a81f-488c5bd4f948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e870fc-c8c7-47fe-90e6-758f17541bcb",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96901ff5-19cc-4354-a9ad-ef4422c12e18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f190a2c2-6e59-4175-a6f1-276134dd69b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5efc3bbf-8e6a-43b5-8788-14a4b517ae76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e41486d7-be92-4944-9932-500c5c426c07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b159966c-0751-4969-91df-93f4c358bc70",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96a8627a-9a18-4c56-aab7-85d3d3f67304",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71a31693-b169-4bb1-b0d5-a12f06feac24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cbdf91e-cd21-4d72-abff-07c642f341d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61893731-d8e8-46c6-a33b-f3c533101396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "901957e2-e2a9-48ea-a171-56fc654d7841",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e8d4703-ee80-45f1-8fda-ee04f8d4660a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6624fc03-208e-4854-89b7-cac95fbce80c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3593d6f-dd18-44db-92b2-1e35ad0d1acc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7b9845d-ff85-4644-bfbc-b6ade46b75c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "854de08a-6785-4c79-853b-84b4b5c8668c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b3b0b5-fac4-432a-ad1c-ec000ed8e39b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc8bfebc-41d7-4f34-bca8-b12e06270eb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b355849d-4904-47ba-aecd-677dc5b23ff3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3513eecc-9edb-4d77-a70b-609bc6dacce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e3548b3-4133-4593-9b8d-9f792825d5d9",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2cc9161-fc1c-48a6-872d-d0e3414a4bd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc831df0-03e6-4e7e-9119-fa39b94ed119"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c0041ec-b757-474f-948e-10ec7abc1d4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63abde39-465f-4aeb-8458-68034d4d97c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d62e0d1-a24b-4639-9c30-7f2335430685",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54ca3a13-502f-4e55-8a2c-b84a39079fe2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea840169-b45b-4f97-b0a3-a88e5c492213"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21e8f3c5-62e5-4e40-86b7-ba6ed21b0ab6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20360589-2770-4a7d-a86e-f675eb882f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8748ccc-c7d7-44f7-95e3-a43e0a2397f3",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c1e548b-af36-4347-9d45-85bd79201071",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe882505-a660-40d2-8be7-ba925cd86879"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53e4191d-001d-4aa6-b48c-84dff1b4c0c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5bf191c-51d4-47e0-9ff3-5bea7d533e78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33abc034-4646-4e47-bb32-04d724933c1b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c0f147-3f98-416b-95f7-385db1e1b6eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16b34d75-a36b-4aa2-b110-96ff383d40e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4afb035c-6407-42b0-af8a-fff07cc58cf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd0b76cb-b647-49fa-b17a-a140fdab674b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81fa9516-5806-473f-b7e9-d8b5ab7ad784",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586c9442-c39c-4850-9c82-b2e29093c2d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9c66440-f209-45a6-af48-ddc808fa103e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e86e056-dcff-4968-829d-8829258c15c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3c0b26b-5302-4c28-8690-dd1ffed3c112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "327f2d73-b76a-4cef-b418-6a38f30a9f58",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d31100d3-643f-43d3-8927-cd68a8c302ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecec249e-ae27-4adb-9ea5-7db441e06f9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76141610-1976-411b-9184-aeb2b8d3c18d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0abaac3-0e52-4946-ac04-5b8ee89cad3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c67348d-b301-4360-97e8-f5fc26cd23f0",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4d52e2a-7ce2-4937-a0fe-5a7c12a4959c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d08313d4-a8d5-4079-9b64-6b22a024837f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e90c559e-1c6a-43e3-bec6-fefd7035baae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69b43e2a-4c2d-4da7-abf5-3a0e0024d816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef444c2-c128-4d15-964a-f92a835eab44",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e98ad6d0-be03-4bd3-8863-6806f9e5ee7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30477c89-5f0a-4fa9-9570-2989f97b52e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7073b38-accf-4a43-a779-0ae11d2224e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39f028a9-ffbb-428a-9ec8-abb40e1448e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9130ac01-2eb8-4282-a76c-9e31d5ab0f67",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de5d2ecb-1421-4d91-b2cb-49f35e20d410",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64203055-a549-4007-a36a-209c8fcf3364"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b9b9b46-e7bc-455d-a451-fca01b853193",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "575d140e-9a10-4a92-b9a6-ac2758342cdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a1197a8-6904-4273-bdf9-9cf01cbc2552",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3510e8a-f42a-448c-8d31-3e129c7e6bdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e504a57d-2d76-46d3-8973-7a5f4f4ccd56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3960e1da-c997-4261-8801-3a5899e3fbf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1fc5567-7561-4cfa-b4e0-eee6366cc085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c43dd552-6d65-44af-a412-fcd9b3757bb0",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f5f2b3b-7f2c-4eae-9589-5b09e80a52ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1876f1f-b75d-4906-8ffd-88d8317025e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ee3982-00bf-461b-a6d8-d0ca2e27b645",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "875e11e2-0eb1-4248-b8e6-7525c55fed89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9654fd0-8861-4829-ab0a-49724fd15165",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d38af05f-959b-4598-886c-456dec313f5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1484ebc-e954-497d-b735-0e890bb2137f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d10a4b7-98f1-4256-99a8-8fbb041fde02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f5760a4-0363-43ec-aff0-d565bb0fdb68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f1b66a-46f5-4edc-adb9-aa1dfd5e0dbd",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a54736ea-c287-4352-9416-4de14e23941c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c225ee30-7c2c-4232-925b-36e1896edb89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37072087-ad3b-48fa-8fac-00a6e1b9ae8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d39e4ac1-5b6c-4c18-8abd-5349d3a09ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a45765f5-4d50-4ff6-82d5-d181a4f2a6c0",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "261356bf-2571-4acb-96f0-ff7740400e04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3982129-6305-4ec7-9a10-8d675baa89a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ce84e9-5e81-430d-97f5-76cb139e3583",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89a4a400-32b2-4cbb-8981-36fd5022d9e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eb1448f-4f48-44d1-ada1-32e4555cd2cd",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "120eed1b-e2f2-4ade-b260-4767c9f11410",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd39e7dc-c9ad-4905-9e71-ea276433124b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54926298-305a-411e-95b2-610c65cf1483",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6ec931d-22c7-45ce-9902-fcb9944e4c21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47daaaf7-842a-4b16-93b2-e56f0fc1c458",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "538c3577-8afd-40c0-b499-b50c1ed33e25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aac03596-af8e-40f2-969c-802147083e98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa4b327d-e121-43d4-b264-45f87b9896bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "237d9319-abef-400e-8191-5b94dcf3ecc5"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58055ca4-b207-4409-a604-96568016fd36",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2701da53-c441-4b6e-9538-b372504607b6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d10a787-bc95-4bfb-9caa-0c5e9a4e3eee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bacf1d9e-760b-42a3-90a5-664a96e51ef0"
                    }
                  }
                ]
              },
              {
                "id": "5205b72f-31c4-4f98-962d-b0819a2e0f5f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cbd1d1f6-c4a5-4b04-9936-631c3cc47ca5",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "215a34f5-2fad-4045-89e7-996a6e049d00",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "66794f3a-eedd-47a3-b46a-b708cd4becc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc15a15-8870-4c75-a852-15fda15c9dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c90fdf6a-4efe-4bfc-83c0-d5982b1667d3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e303ae7-1783-4ae5-9442-5b996499a8b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e05c03b-f727-496e-818b-a94f9fdd69a2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d65c6bc0-f67c-46ed-bf43-53ead8ffaf4d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d264d67-e445-49c7-995b-e660ac3e3a25"
                    }
                  }
                ]
              },
              {
                "id": "966d6824-4682-4dc4-b619-40b779aaa834",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "bf2d69e5-304f-4219-b79f-7bead8cf9d56",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff15f9cd-da43-477e-9a99-f012b53c4c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "25ad1c75-59b2-48e2-bffd-76812f580810"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd9dfa8-25a3-435c-8af3-aeffe3796343",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28cde5fb-1ffd-43b4-bcab-2916c8d71a3d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e712a174-315a-4123-9583-fd359c70c784",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5c7642b5-7155-4811-bc38-27ffad332d51",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "97b0a1b5-1c9b-49a5-8238-d3fb799e77e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0ed2f194-eae0-41fd-b1ed-f0cf122690d7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e6babedb-cc85-420f-8519-23f0860225ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dac426f8-e2f8-4fb7-b184-051d42ec3606"
                    }
                  }
                ]
              },
              {
                "id": "ba99fa09-45e7-4d46-8db0-627e103091b7",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b1f17b7-68e1-4777-8af1-ec8670242780",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "309ccab2-0a59-4875-99c0-133a12467a6c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "40b3aa20-b10c-4f1f-a707-3e85ae1bcf19",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5343c9eb-e5ee-4b35-bea9-38570ad6c86e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "44e83cc2-55c4-40b9-bc07-87bcc32e8f3f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "dd323077-1067-4225-a555-611a2692c78e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4b812f27-e34b-4f9e-bb10-8b0fe2eee1be",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4dfb582d-2233-48c7-bcc9-3027379e2f97"
            }
          }
        ]
      },
      {
        "id": "8c098bb0-7d46-4181-b679-c334f8d56fba",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "4c09f612-0e0a-4b9b-8e71-3632bc359954",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5317d012-faf2-472e-a7c7-d7287a8c9801",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "773e1bb6-d426-43a5-ac6e-ab8125234727",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be536c2f-010e-46c8-820c-12df94d53a5a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f8b187f1-2b9b-48b8-9b68-fd230e02e3d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad6fddd-60ac-46ff-984d-d4d035f52eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "945e98f3-632d-4775-96de-0e28645a4c3c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f757c57b-2360-4644-8dec-030ad1173740",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04b416fd-2db2-44c7-888d-a4121ebf7d4e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "74b59ef6-45d4-4f33-89e1-42a9eeaaf670",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "71c7f061-0c41-4cb6-b984-f679f74397c9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2b388d61-57e5-4a0b-b50e-b3fc09b1206a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6c0270d8-4a0c-4721-beb7-ef736b428163"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "71d7f076-973e-4740-b64a-e890f49c8e7c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6fb2e4da-294f-4ad2-b8c0-3a09b5fd30f2"
            }
          }
        ]
      },
      {
        "id": "be917fa0-ac05-481d-a37a-cc29d80b9a27",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "2baaeafb-906a-4d1a-9193-5f58d79bca0d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "493165bb-1817-4b23-8535-15eda1268ddc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "38f5c3d7-380b-4338-a816-277a30c93624",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7585edfd-1e7b-4649-80ef-435002f04833",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf540fb9-33ee-4400-a120-a1b4fe205a55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2021f80d-8c97-4f52-bcbe-e0ca9a493bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "244ea6c7-3e3a-4685-b290-dd66c403f88c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0aa2953d-c7d0-4b7a-bb51-ccb4abc8da3b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c3a493fd-fee6-4269-8ad4-f6733706a83e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ebf7cfc7-8f4d-4059-b65f-b25f248e083d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c2c64d26-737e-4cec-bf9a-6f410af1b6e9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6119bff1-4dab-484b-9bda-74c03238e791",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "956a2d12-f68d-4d3d-9e0b-15bd21943408"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f1e9ae23-04ec-4f31-bc7b-24ce4f11ad1c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2b18da9a-8e7a-4c8f-a193-05277684b5b0"
            }
          }
        ]
      },
      {
        "id": "ba8e33d3-0b88-4b26-981b-ba600fcfa386",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5f47ab50-6ff2-4b31-9c18-0b7de9834795",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fb3f40f1-0728-4b13-86e9-6adf2a11f92b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f525a457-7e58-4b54-acab-449baeef8bf6",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee7f4a13-7261-4f30-bc35-d9af5fcfc390",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f9fbc48f-76b2-4dcd-8b86-ef395a7d2555"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb339f9f-37ac-4ead-86e4-eef7897f98eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "927a64ed-6e67-40fd-b1fe-cf1888b45051"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b9ac1d3-a216-44e2-8499-d27397e3559a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f7cf4ae6-4a7b-4bc1-bf42-32808a10e535"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "edd5db8a-be0e-431d-a79a-a67135cb9432",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c14e012-18fb-457d-ba0d-71e2df95a411"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4be859ab-b2e0-4405-bcf9-72cc1ca470be",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8d6e6086-b3f8-4e13-83e0-52a3bf9503ff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "62ec2f9c-c559-4b12-9d67-ee28fa65bfb1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3c487820-5e16-4ef8-b8c9-630eef2d0c53"
            }
          }
        ]
      },
      {
        "id": "7391b39a-2196-4887-80ae-9919576a45b9",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "59f7e5be-509b-48a3-b5f0-f5df56851cec",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7d9328d2-b0c7-44d3-9f60-9d3bbd3af2d8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "973a7c37-53db-4465-83dc-2b3d241cb753",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0e608796-685d-46e4-9ffe-e8f102b21385",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ea53c103-0337-4f2a-8ad4-e056315ab316",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 324
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 39.919014084507026,
      "responseMin": 6,
      "responseMax": 1737,
      "responseSd": 102.82922286531351,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1689036119379,
      "completed": 1689036145656
    },
    "executions": [
      {
        "id": "54c1785f-e479-44a1-bb29-2eedc0e34835",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5b742957-fd9c-4404-8cb6-37684edd9abd",
          "httpRequestId": "f201aefe-5b6a-40aa-b28a-af4c4b7af2cd"
        },
        "item": {
          "id": "54c1785f-e479-44a1-bb29-2eedc0e34835",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "21c66518-5ba9-4b7a-86a3-b166bf52b021",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 0
        }
      },
      {
        "id": "14074ac8-ef42-474b-8183-dc9374d8650f",
        "cursor": {
          "ref": "1c86a24b-1729-4328-bfa7-bec04d6df1cf",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5eaf6804-9dc3-4e0d-b759-68f414a82a78"
        },
        "item": {
          "id": "14074ac8-ef42-474b-8183-dc9374d8650f",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "17cd7bce-1cfd-435f-878c-9a92f4ce4d5f",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "e76b8244-e44c-445e-8fd0-07d7d3548ca3",
        "cursor": {
          "ref": "e8fc003c-9865-4c44-810c-0fec00eb7db5",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "42a852cc-775e-4fe7-a06e-879e25b8a759"
        },
        "item": {
          "id": "e76b8244-e44c-445e-8fd0-07d7d3548ca3",
          "name": "did_json"
        },
        "response": {
          "id": "18234f7e-b10d-4182-b594-17cc64f21dc1",
          "status": "OK",
          "code": 200,
          "responseTime": 281,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c03e40dd-2d68-4c6b-83ac-d1bc678aa4cc",
        "cursor": {
          "ref": "e9b52678-e21d-4e32-a43b-9b6bc3e779e7",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "893730e0-5799-4c0d-8949-65199257a1c4"
        },
        "item": {
          "id": "c03e40dd-2d68-4c6b-83ac-d1bc678aa4cc",
          "name": "did:invalid"
        },
        "response": {
          "id": "81262354-9331-4f59-a442-c2afb68976f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c03e40dd-2d68-4c6b-83ac-d1bc678aa4cc",
        "cursor": {
          "ref": "e9b52678-e21d-4e32-a43b-9b6bc3e779e7",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "893730e0-5799-4c0d-8949-65199257a1c4"
        },
        "item": {
          "id": "c03e40dd-2d68-4c6b-83ac-d1bc678aa4cc",
          "name": "did:invalid"
        },
        "response": {
          "id": "81262354-9331-4f59-a442-c2afb68976f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfed3487-8312-45d9-8af5-a7b02c15feee",
        "cursor": {
          "ref": "6443672b-ab13-4acf-b1b4-f32ede34ca4b",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1c81c736-99d7-4e15-ba8a-a20201af6c4e"
        },
        "item": {
          "id": "dfed3487-8312-45d9-8af5-a7b02c15feee",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e3d63e85-ead4-4027-8a6d-081e64828daf",
          "status": "Not Found",
          "code": 404,
          "responseTime": 97,
          "responseSize": 2
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "11256946-42eb-45e5-b23c-7a9b97c743cf",
        "cursor": {
          "ref": "932c5f0a-8f20-4963-a790-91c0e9f4cad1",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ddfd39b6-a976-49bc-8499-47fc11db10ea"
        },
        "item": {
          "id": "11256946-42eb-45e5-b23c-7a9b97c743cf",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "2912ea87-6ccc-4127-a509-083799e6635d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 2
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "8f9141ca-46ca-4302-a79b-044ab6b0dfe6",
        "cursor": {
          "ref": "1983b00a-35a1-4149-ade0-06403ce5b13a",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ed4f8675-0ddb-4499-b6a1-2a9e8bc7ebed"
        },
        "item": {
          "id": "8f9141ca-46ca-4302-a79b-044ab6b0dfe6",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "d36347a0-4d00-4b75-a834-53b655ffd68b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "e9cad233-ddf2-4ba2-a2aa-9643dc618d7e",
        "cursor": {
          "ref": "0baa36aa-3c5e-4553-a63a-b7cd6011a844",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3b0613ba-3ebf-40c4-bd5d-726e2aba1c46"
        },
        "item": {
          "id": "e9cad233-ddf2-4ba2-a2aa-9643dc618d7e",
          "name": "identifiers"
        },
        "response": {
          "id": "8c7033ae-b09d-4a02-830d-d1c26b1544f3",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "4cec27a7-415e-4311-a927-6f6287745617",
        "cursor": {
          "ref": "265afee4-c8be-4e1b-bfed-9c9fa0ffa106",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "447e104e-ad43-436d-9b96-63adbeea9883"
        },
        "item": {
          "id": "4cec27a7-415e-4311-a927-6f6287745617",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6f30cb94-ab97-4167-9430-b10c560cea42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "d3bb4a81-f559-48d7-adb3-47609023fd1c",
        "cursor": {
          "ref": "b1a8fa1f-8204-4d0d-ad38-07e3476b38db",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "04e6554a-83ea-4fe3-b78e-58aec3df7d62"
        },
        "item": {
          "id": "d3bb4a81-f559-48d7-adb3-47609023fd1c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "54a9fa6a-1a9d-4694-b7d2-014e4ee2be23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "9c35e2df-041e-4645-b21f-9204ce6ca288",
        "cursor": {
          "ref": "19e1b784-9d37-47d9-9521-483cf626d32e",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0919f2c6-134d-45f8-bbca-156d37a1bd7d"
        },
        "item": {
          "id": "9c35e2df-041e-4645-b21f-9204ce6ca288",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "6e6b9aa4-4ce3-4f40-b0dc-7b025686127b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "08c48103-abc8-46a0-8703-53066c4834c2",
        "cursor": {
          "ref": "40acf7d4-05c5-4a8e-94ec-0f4d38fa5a1b",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2b08837c-bea8-4b80-bc5a-ab5df5c628b0"
        },
        "item": {
          "id": "08c48103-abc8-46a0-8703-53066c4834c2",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "381e51b5-6165-4a46-b23e-3037ed92ac5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "9c84064d-0dc3-43c7-8697-4fffd4afcf88",
        "cursor": {
          "ref": "1ba676c7-680c-4749-8664-c5dda992e2d8",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4548967b-d7dd-4832-8bc2-4eb7cf95f2b1"
        },
        "item": {
          "id": "9c84064d-0dc3-43c7-8697-4fffd4afcf88",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "7a146844-b375-49e1-a1d7-bfad2f4d2c77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "cb51fba3-0b72-49fd-a9b1-2828d92041b0",
        "cursor": {
          "ref": "36bc3c8c-f03c-4f44-9cfd-b04c09ce1266",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "df892c91-1a1e-4010-9517-e633916f1eaf"
        },
        "item": {
          "id": "cb51fba3-0b72-49fd-a9b1-2828d92041b0",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "81b549f9-33f5-4176-9aa9-7261b512caa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "9b6e182c-f1b5-48e6-98ec-eec607458ee9",
        "cursor": {
          "ref": "171bf6e0-4643-41e3-b863-4b261aa83ae4",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e9baf51f-d9c8-4b51-85f7-c9a2bc3ff22c"
        },
        "item": {
          "id": "9b6e182c-f1b5-48e6-98ec-eec607458ee9",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "708b8053-dfc3-4c66-a9a6-3e2d5e6978e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 215
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "86636b9d-5ef0-42d9-bfcb-f954918b54e1",
        "cursor": {
          "ref": "c406d1af-77ce-49c8-a964-954c5127c013",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "a5020ff5-899b-426a-b813-32377b301fde"
        },
        "item": {
          "id": "86636b9d-5ef0-42d9-bfcb-f954918b54e1",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "ecde20e3-2537-42aa-9e26-315862debaed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "09dccf3b-ac41-4f86-b0d9-36ad45a728df",
        "cursor": {
          "ref": "b0863378-1bdb-424d-98b1-ec25939eab65",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f7b55050-ccca-4858-ac13-7f2e1888f511"
        },
        "item": {
          "id": "09dccf3b-ac41-4f86-b0d9-36ad45a728df",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "da38d88d-e583-4dcc-9add-9b166c31da1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "ad3ac8f9-98f2-4df0-8466-101df3179596",
        "cursor": {
          "ref": "f7e23b12-1911-48df-b2b7-6dc8f50e44e9",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "50333cc5-902b-4077-9f63-902c631dd2fa"
        },
        "item": {
          "id": "ad3ac8f9-98f2-4df0-8466-101df3179596",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "00ea2db8-5832-4afb-b010-488890250b0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "222b7839-c686-47ea-9994-728a0fa32424",
        "cursor": {
          "ref": "caeea2f9-3a99-4646-9bc8-cc851c80adb9",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "96749ab5-ff97-49f1-ae5e-9354b10803a7"
        },
        "item": {
          "id": "222b7839-c686-47ea-9994-728a0fa32424",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ae36061d-e9b3-4598-bc1b-62896a7bf336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "566f9205-c359-48bd-bffa-522410cddd91",
        "cursor": {
          "ref": "77288c28-bfd5-48a6-819c-ff5f846ef1f6",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "10b79df1-91e7-453d-a7f5-698047b1d121"
        },
        "item": {
          "id": "566f9205-c359-48bd-bffa-522410cddd91",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "cf0ab470-f30c-4408-b95e-7c50a3c59272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "67b16e34-27e1-44a9-9528-fac639db10ac",
        "cursor": {
          "ref": "959f288e-09f8-4c4b-8a6d-89901a03ec4a",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3e6b8097-2f3b-454c-8282-f91e78ade8c0"
        },
        "item": {
          "id": "67b16e34-27e1-44a9-9528-fac639db10ac",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "935c0313-019b-4f56-9401-5990c72f29dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "008f0e5f-9321-4bb4-91fb-17fd4fb63e0e",
        "cursor": {
          "ref": "6783edfd-d008-491c-8b5a-53888b06f1aa",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "eec51481-2bca-4931-9eb1-0a08356a0853"
        },
        "item": {
          "id": "008f0e5f-9321-4bb4-91fb-17fd4fb63e0e",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "6998439a-be43-4ec6-83f6-065e4569cd97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "fe5d4c51-07d1-405a-84d9-040fdd61776a",
        "cursor": {
          "ref": "0022af18-4355-4a58-b051-15e14db10374",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c498b6d8-6f41-4a39-8884-878599ecb004"
        },
        "item": {
          "id": "fe5d4c51-07d1-405a-84d9-040fdd61776a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "0ac405d3-ad9d-4b1a-9173-d5ba68cef036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "5bbf823f-0777-48ce-9da7-6591bbf94222",
        "cursor": {
          "ref": "efb848bb-27c1-4744-b204-a0ebfd061adc",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "dd59cd1d-b7b5-48ea-9ca6-50a9c5bd7274"
        },
        "item": {
          "id": "5bbf823f-0777-48ce-9da7-6591bbf94222",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "605922d6-a3db-46d5-893a-ec82da0d4a3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "caaa4621-40d2-4a46-bd2e-6f53d3ec0839",
        "cursor": {
          "ref": "f7583930-8e1e-4aa2-b61b-3f2cfc7b4e06",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c2b7c0ba-5077-434b-bea7-d16cf56c1365"
        },
        "item": {
          "id": "caaa4621-40d2-4a46-bd2e-6f53d3ec0839",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e65270a8-7646-42e9-a9b3-bce5e11f0fdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "c461a35f-5a54-4b83-acec-6731e53a5625",
        "cursor": {
          "ref": "e283f46c-e13c-4159-b127-a305a472f8d1",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0825025c-b70c-411e-a88e-89ef22215b07"
        },
        "item": {
          "id": "c461a35f-5a54-4b83-acec-6731e53a5625",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "81666dc9-01d5-4705-ad55-96a83c5d708b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "8b21483a-6566-498b-8d63-1737cbed3a08",
        "cursor": {
          "ref": "e88aed9a-e888-4f8f-856e-9960849bb606",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ecf9c348-2096-46df-9bc9-61627eae9074"
        },
        "item": {
          "id": "8b21483a-6566-498b-8d63-1737cbed3a08",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "130f6530-d095-4fe1-b7d8-40842e3fe4fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "966129fe-390a-4366-bd00-cedfb4569cc9",
        "cursor": {
          "ref": "9d34ff5b-da91-4bdd-b8b0-0267f9220ff6",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "8f1be910-6604-48e1-965f-d690df5967e5"
        },
        "item": {
          "id": "966129fe-390a-4366-bd00-cedfb4569cc9",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f9e542b0-dff8-495a-8a33-acdd5d545841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "85583891-7d22-44c3-9e5f-f2325a09f258",
        "cursor": {
          "ref": "6866d85c-f7c7-4231-abae-fbdc7464e715",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d8a21c2c-3f59-4ec0-b3ae-effb8d31836a"
        },
        "item": {
          "id": "85583891-7d22-44c3-9e5f-f2325a09f258",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "5782c1d1-769a-4a7c-b0e0-78c57ff2b58f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "ec3babfb-7ef3-4baf-82c5-75988e7debb6",
        "cursor": {
          "ref": "b8674c0a-06f8-4ae6-bb8f-b6e41bdcc937",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "87a3b3f4-30ff-4a1f-b660-1d2f26a01c36"
        },
        "item": {
          "id": "ec3babfb-7ef3-4baf-82c5-75988e7debb6",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "9d9ab5a5-85e8-4397-824c-b26d8835f231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "649449d2-78e6-400b-82d0-d0b3a799acd4",
        "cursor": {
          "ref": "087b6dfa-bab6-4653-be4f-e387d8146048",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "9370d2bc-04ac-4398-9abc-bb804b2b0b07"
        },
        "item": {
          "id": "649449d2-78e6-400b-82d0-d0b3a799acd4",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "2eda9d44-093c-495a-a2b2-9feb2974d56e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "eed0359b-fb33-4655-b84e-12c3ddd0bd7d",
        "cursor": {
          "ref": "397dc7ab-cf35-4444-b766-e215110b3893",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "84d27534-724f-484a-9a41-45ba44995ac9"
        },
        "item": {
          "id": "eed0359b-fb33-4655-b84e-12c3ddd0bd7d",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "63c1e4b4-4490-49ee-83a4-4a836bd353d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "d48b991b-6eba-4a0a-9a5a-444701e25a3a",
        "cursor": {
          "ref": "0b0c0fe9-9aef-490f-b1e5-3e9de4a9adcc",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "100131b3-9599-416f-b0ab-c72982cea7f0"
        },
        "item": {
          "id": "d48b991b-6eba-4a0a-9a5a-444701e25a3a",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "ac30a085-3fd1-4aff-8577-6110c60093b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "e3a9f5d3-47a6-494e-8bec-2f7124b87310",
        "cursor": {
          "ref": "554f2cd7-af29-45c8-b97e-82e22f738d35",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "0808187f-39c7-4442-a59b-85c20e308f44"
        },
        "item": {
          "id": "e3a9f5d3-47a6-494e-8bec-2f7124b87310",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "27e6203a-8fa4-492e-a711-364c4d3121f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "2eb94fef-2ef0-43cd-b174-61357dd6a230",
        "cursor": {
          "ref": "2f6c0ebd-6be3-411a-9a63-46acbd1db943",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "70734a00-f60a-4437-9f1f-16e0139f9f48"
        },
        "item": {
          "id": "2eb94fef-2ef0-43cd-b174-61357dd6a230",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "10546ada-5b34-454a-8e66-1b43ff00b505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "d4f98e83-b04c-4ee9-abfd-57b5b6807c97",
        "cursor": {
          "ref": "a24b6e47-b9f4-4cb6-9071-747ab21a0eb0",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b98bf354-b968-4a34-a6c6-3cac9e15d220"
        },
        "item": {
          "id": "d4f98e83-b04c-4ee9-abfd-57b5b6807c97",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "80397e0e-5491-48e4-a51e-dc103655b1bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "9136990b-be07-416f-8adf-2e77eddd01ce",
        "cursor": {
          "ref": "58abb5b6-fd96-47a2-b497-bf5669c09927",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "56986f2e-d580-432f-bd74-4c9f2dec171b"
        },
        "item": {
          "id": "9136990b-be07-416f-8adf-2e77eddd01ce",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "2bc5c33f-36d1-426c-87ef-34622a4d57b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "c340a107-615b-4b68-8ef9-c64a639a8133",
        "cursor": {
          "ref": "a017317e-4cb5-45d5-91be-c6f1072b935b",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e468101b-004d-4d49-898e-e331a91b8f3a"
        },
        "item": {
          "id": "c340a107-615b-4b68-8ef9-c64a639a8133",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "22db33bb-abad-4a1e-b216-2e3b2d33f5ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "9228825f-c412-43d0-8e94-a5f33edc6fde",
        "cursor": {
          "ref": "a290608d-0f70-4943-b932-a52cf3360611",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "19f807bb-aa34-4be6-a739-c9221286c05e"
        },
        "item": {
          "id": "9228825f-c412-43d0-8e94-a5f33edc6fde",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "acd1afb8-0be9-4c2e-96e6-dac61fda0f7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "37c9abf1-5a0f-40e3-8fb3-093ccb7524bc",
        "cursor": {
          "ref": "1cfce1e8-a986-4484-b0d8-85b283406790",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "cbee0034-983a-4ef8-8e4f-d563234ba466"
        },
        "item": {
          "id": "37c9abf1-5a0f-40e3-8fb3-093ccb7524bc",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "8c1ed385-e169-417d-bc89-e8130e9f0d2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "c2153696-7ac7-4760-9130-3b97105c5bd9",
        "cursor": {
          "ref": "6beb2e45-f940-49e8-ad83-5d78c1a71ab0",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "76bd2b18-8f91-4df6-a480-756574a620b2"
        },
        "item": {
          "id": "c2153696-7ac7-4760-9130-3b97105c5bd9",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "b0c8bb93-5828-41b4-8e65-e7fc3d924cff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "7ef204e3-4bb2-4198-b6e5-9a14f865197c",
        "cursor": {
          "ref": "38aff9d2-4da5-4dbe-9f0d-bbe9eb90e261",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7ad0db27-6772-4289-890b-a24807fb2575"
        },
        "item": {
          "id": "7ef204e3-4bb2-4198-b6e5-9a14f865197c",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "1c5bf144-e6f5-4ae3-8f9f-a20cd963f18e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "282ad73d-4045-4dca-b8b1-8f77d172c27a",
        "cursor": {
          "ref": "077d6f18-b6f2-49d9-9c78-12d2e4509f0c",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "01d5bbbc-a834-4dc2-96fe-d1a82a7e4a49"
        },
        "item": {
          "id": "282ad73d-4045-4dca-b8b1-8f77d172c27a",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "723b0e83-8a3c-4fb2-979d-05b7078c6c07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "6f271e2e-7dab-4ebb-8d45-263cf8856407",
        "cursor": {
          "ref": "b3c2fda3-0bb2-4bdf-a6dc-4a732f02ac71",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "29a86d0e-b95d-4521-b3c3-7e11ffc18065"
        },
        "item": {
          "id": "6f271e2e-7dab-4ebb-8d45-263cf8856407",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e42e3a81-5157-490a-856b-1ceab2a2a784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "84a7cc80-a1a3-412b-a5d9-cc4321f99deb",
        "cursor": {
          "ref": "c12407a3-c8c5-4590-97a7-c59e8e489ee2",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "aa239dfc-8e68-4341-84a5-414759214bda"
        },
        "item": {
          "id": "84a7cc80-a1a3-412b-a5d9-cc4321f99deb",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "04ed46f3-8594-43dd-8381-476327b1af0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "c3bed47c-3511-44bb-859c-a085dddddd45",
        "cursor": {
          "ref": "43a0bdff-1833-4793-b1d0-b34a6ec11898",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d5f39968-8d1e-46cf-8751-ae643382a066"
        },
        "item": {
          "id": "c3bed47c-3511-44bb-859c-a085dddddd45",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "c9a9af42-ff39-4e30-9ee0-1af108d1924f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "5723cc09-ae06-4927-aa54-2d6cf96a2d09",
        "cursor": {
          "ref": "3adc0c00-7bf9-4ec0-93e2-f3c37381570d",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d5848b7d-ac85-41d4-8a97-68cde1799d21"
        },
        "item": {
          "id": "5723cc09-ae06-4927-aa54-2d6cf96a2d09",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "c447a2e1-207f-4a8c-bea9-fa128c2db8d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "1bb11b74-50af-417c-8f18-f3971ecc7154",
        "cursor": {
          "ref": "83b3ec3b-a194-4746-85db-dfb0544f3cd6",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "42973190-a1fb-4c4a-996e-22c0ed46cfa1"
        },
        "item": {
          "id": "1bb11b74-50af-417c-8f18-f3971ecc7154",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "131a908d-ecea-4551-96f6-653ba50001c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "7501fc8a-ca77-4b12-9c26-7f341b829b12",
        "cursor": {
          "ref": "2b87ef96-e752-4988-a55a-b8d9ff3d8796",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "89ddb515-f537-4a80-abb2-a5f9bd07c593"
        },
        "item": {
          "id": "7501fc8a-ca77-4b12-9c26-7f341b829b12",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "4543f069-6be6-40b7-94fc-b063c2bbeb4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "7e15d0e3-b55f-42a9-82c9-915190cef754",
        "cursor": {
          "ref": "9511972b-2347-4e44-95be-e153bdb8bc92",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "57d95deb-c192-40cd-925d-a277cb70ff23"
        },
        "item": {
          "id": "7e15d0e3-b55f-42a9-82c9-915190cef754",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b3bcfc97-be95-4d2c-b261-8131069c258f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "85a6a753-3952-4991-8445-a2548f695c22",
        "cursor": {
          "ref": "0157409a-6bda-4f3d-8f75-4255316d5789",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "0c11613d-b98a-42ba-a751-63a36bfe8326"
        },
        "item": {
          "id": "85a6a753-3952-4991-8445-a2548f695c22",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1e1603d2-859a-4486-bed0-e0747f69236a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "0ee18174-9d6a-4d4d-a74f-5984675503a6",
        "cursor": {
          "ref": "44b435a2-3cbe-4a33-af7b-469fb56ed6bb",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "488a2673-c886-4a38-9e2b-0f0b6c048eaa"
        },
        "item": {
          "id": "0ee18174-9d6a-4d4d-a74f-5984675503a6",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2938b771-9e58-42bd-953b-e646e0b1f099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "38ddd5bd-fcf7-4e8b-a885-fb9b54f05408",
        "cursor": {
          "ref": "60b2eb9c-2b93-472c-b0e5-9c13fee58029",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "99f5c568-67da-4618-9d9e-1dc3e9dc935a"
        },
        "item": {
          "id": "38ddd5bd-fcf7-4e8b-a885-fb9b54f05408",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "dab0929e-faf1-4649-bfe8-d1e7e685f7ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "490d6855-c903-4f68-9e58-fb01d0329493",
        "cursor": {
          "ref": "4b300419-8a74-4de2-9167-be2b8fb62b3d",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "88e7dc85-0760-4d84-b1aa-3ebf8dddc074"
        },
        "item": {
          "id": "490d6855-c903-4f68-9e58-fb01d0329493",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "3bd92b46-5c96-4d9e-a340-58322dc8357a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "f599d983-11d6-418e-a80e-846ae74e4092",
        "cursor": {
          "ref": "d02750e0-e169-4b8c-bdd6-8b49192724d5",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "45f2a596-d923-46ff-8bfb-e2262cbcf2c1"
        },
        "item": {
          "id": "f599d983-11d6-418e-a80e-846ae74e4092",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "74707b9a-9655-477a-a8dd-91d17c45fc8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "ab004839-2fc0-4893-b7e9-6d5b38f2bb71",
        "cursor": {
          "ref": "87bbd51c-aeb3-44f5-a0f2-59ca22057074",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b9961a90-9759-4734-9caf-ebd71eca3f5a"
        },
        "item": {
          "id": "ab004839-2fc0-4893-b7e9-6d5b38f2bb71",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "83275f44-5bd2-4ca1-842a-4f38d3060ba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "a2add673-491d-4ef5-a88f-286de4a789da",
        "cursor": {
          "ref": "34b40eae-8eff-4921-be30-2a895b7c5be6",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "73541e33-222f-4dd8-ac12-461926e1e87a"
        },
        "item": {
          "id": "a2add673-491d-4ef5-a88f-286de4a789da",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "ede70701-0999-4114-bac7-68b0408887ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "e2390aa1-67bd-45a7-976b-7e2fd3a56c26",
        "cursor": {
          "ref": "463a0893-8a3c-4f41-a0c1-7e6c5ab20319",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d87fbe8c-3eee-4bc0-ab3a-007edc306c96"
        },
        "item": {
          "id": "e2390aa1-67bd-45a7-976b-7e2fd3a56c26",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "51ea20d6-351d-4779-b83f-d9c18529269b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "0b03edae-df51-48fe-9510-df0ee15c4b12",
        "cursor": {
          "ref": "739115f6-e8e1-49d0-83ba-763ef82312fe",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "10d6b3f4-4e60-4456-8a96-c0317188fdc4"
        },
        "item": {
          "id": "0b03edae-df51-48fe-9510-df0ee15c4b12",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "7843fc10-478e-4fbc-a4b9-42c51d50c656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "b0b2b133-66f8-4bc4-88ff-1a8f0812b5cf",
        "cursor": {
          "ref": "f36fad93-f0ef-4281-966f-38d96fb4e42a",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "599aa045-be91-4996-a985-f5f43565f1a9"
        },
        "item": {
          "id": "b0b2b133-66f8-4bc4-88ff-1a8f0812b5cf",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ffcbe765-a4b6-4d60-bcf6-921d3dcdba31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "12949bfa-95db-407d-ab09-d1a1135f4947",
        "cursor": {
          "ref": "b3520abe-2580-4f48-b2fa-da5dfc656d1a",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "43b519e0-4483-4c9d-8d94-3f7cc4d2cf95"
        },
        "item": {
          "id": "12949bfa-95db-407d-ab09-d1a1135f4947",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "edd9fcf3-a124-4f4c-bc2e-b082ae04b53d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "64b74270-a3ff-425f-9c6f-33a3f56866fd",
        "cursor": {
          "ref": "709a5e65-acee-4069-b198-747ebfb8b2a7",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "3402f716-3f2c-4497-a6ab-451ba3d587a0"
        },
        "item": {
          "id": "64b74270-a3ff-425f-9c6f-33a3f56866fd",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d3ecc6e1-b438-4e5e-a89c-ccd69ed37f02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "5c5f71eb-af16-4849-928e-d5a481e0a6e5",
        "cursor": {
          "ref": "6e54201f-6319-44da-b177-9ba33b1ae59d",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "934e1f9b-8b1c-432b-ad06-5d8fbc0687e0"
        },
        "item": {
          "id": "5c5f71eb-af16-4849-928e-d5a481e0a6e5",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "016acd4e-e64b-4d50-9a07-8ae2d26d2076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "1f45cb79-88d3-4b73-ac67-98ff3b456ce7",
        "cursor": {
          "ref": "46140444-88f8-4c54-bb8a-60fd27c82056",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "89928406-5c8a-4061-a16f-9a9c84862ce2"
        },
        "item": {
          "id": "1f45cb79-88d3-4b73-ac67-98ff3b456ce7",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f247ba8c-6657-4695-a14e-d1c9f341c813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "a3c26fcd-6300-4657-b30b-948d788f3933",
        "cursor": {
          "ref": "e941e3ca-e71a-482d-9cdb-30bb2c976704",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "0ac70a67-9271-4d42-b509-afa8002903f3"
        },
        "item": {
          "id": "a3c26fcd-6300-4657-b30b-948d788f3933",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "81b4d925-30cb-40c8-8a67-49882462ae9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "c08fa701-ccdc-448e-b986-900d7aa18be3",
        "cursor": {
          "ref": "984565e5-d089-49dd-9e13-c48c3ec32eff",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "19155e74-a167-44ad-abf6-eefe9c5c1fae"
        },
        "item": {
          "id": "c08fa701-ccdc-448e-b986-900d7aa18be3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "e23389c4-48e8-4ef9-8bd2-2189b0740e38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "eebd30ae-cfb0-4b5b-96ea-e9faabc500f9",
        "cursor": {
          "ref": "8ee81f4e-b0be-4bea-b584-f8f3d055b4eb",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "11f6a1f1-d202-4602-a45b-7959076d1cac"
        },
        "item": {
          "id": "eebd30ae-cfb0-4b5b-96ea-e9faabc500f9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "76b0ef48-7a02-4253-9891-ccf72095413b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "89d8c6ca-b982-4b8b-904a-d93cc4ba12c3",
        "cursor": {
          "ref": "097d9775-abae-4974-ae14-420cec511d9f",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "dc628096-0212-483f-abdc-cb1422534565"
        },
        "item": {
          "id": "89d8c6ca-b982-4b8b-904a-d93cc4ba12c3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "f9b68ca9-093c-4ba6-81b7-f7727fc8729d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "c1e3b419-fb7a-4eac-a78c-39770381acb1",
        "cursor": {
          "ref": "ae577481-43fb-41d2-b4f4-bb8079b7e875",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "0b15739c-10ba-4ae2-a4a9-4f5118490796"
        },
        "item": {
          "id": "c1e3b419-fb7a-4eac-a78c-39770381acb1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "8851af70-7568-4827-8f95-d4cb38aea76d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "914dff0e-84ba-41ff-9758-50e11af5b2a0",
        "cursor": {
          "ref": "73f0a768-ee8f-4d63-9358-3d5cdae7241e",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "7b86230f-5d2b-4dff-aa9f-2cfdcc496985"
        },
        "item": {
          "id": "914dff0e-84ba-41ff-9758-50e11af5b2a0",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "b936ff90-7ed6-4b4e-aa46-5d21259e0d18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "b2faacf4-9ead-40ad-af94-6b5f36f56d0c",
        "cursor": {
          "ref": "8483b5ba-41db-482a-afee-360012755362",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "55ae7d69-a71e-4034-b931-1a9a8e29ab15"
        },
        "item": {
          "id": "b2faacf4-9ead-40ad-af94-6b5f36f56d0c",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "554707ee-a045-4a20-889e-fdfc258a0b33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "8cd72792-9851-423b-a029-90642493e33a",
        "cursor": {
          "ref": "2d3389ac-d37f-482a-8520-ad51b21fdb80",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "572a4293-be86-4857-88a1-47c6c9ef2631"
        },
        "item": {
          "id": "8cd72792-9851-423b-a029-90642493e33a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "7aaedf6a-6f9a-420f-885a-402b30d4d2d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "322ff58f-9d91-416b-9e29-d02ae438c877",
        "cursor": {
          "ref": "927ee883-ff10-488e-9377-fbd9868cd561",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "08f4a2e8-5037-46a9-aea6-8d7a1c2ef7b3"
        },
        "item": {
          "id": "322ff58f-9d91-416b-9e29-d02ae438c877",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "5fa873e1-6b8b-4a41-85eb-abb9e01d2de6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "e99679a0-726b-4165-a1e7-09865eefb071",
        "cursor": {
          "ref": "75356907-c898-4c5a-8e3f-39b406785f83",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "2d204c23-f85c-4e83-99bc-bd02de8415d6"
        },
        "item": {
          "id": "e99679a0-726b-4165-a1e7-09865eefb071",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "257e2d38-9ed7-4575-868e-baadef91ef43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "c4381a9b-c0a9-460a-85c2-fff4097a61a5",
        "cursor": {
          "ref": "f5e86674-661f-4325-9a1d-2161e91a13a2",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "7a577e52-dfb2-431e-9d29-dc47e6ea9f75"
        },
        "item": {
          "id": "c4381a9b-c0a9-460a-85c2-fff4097a61a5",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "916d2746-a0e6-4ab0-befe-1ca072317fdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "87e2cda6-d520-4000-9f14-008a5cd882d9",
        "cursor": {
          "ref": "a7cd9768-8f76-4e39-9963-4aed0bca4eaa",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "f8cc24a9-be97-4f4a-a0cc-0a83cdc14bb3"
        },
        "item": {
          "id": "87e2cda6-d520-4000-9f14-008a5cd882d9",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "eb680a86-9ede-47ed-8288-f9dab5e50e4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "b661d879-e03f-480b-b06a-77ab4a18e452",
        "cursor": {
          "ref": "d3cfb694-5bbd-4452-9bbc-4e2fccea9e7c",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1b2d6b0a-a1bc-4204-a826-5ca724798642"
        },
        "item": {
          "id": "b661d879-e03f-480b-b06a-77ab4a18e452",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "cb953632-9a54-4a27-a298-5c5282368f83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "e4c76da6-f429-4fa6-ba39-3b643973d6cb",
        "cursor": {
          "ref": "21171a59-d326-4d72-99c0-18f369e5fd46",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ae13cc2f-660b-4e0a-ba3e-cc1a3d6ae303"
        },
        "item": {
          "id": "e4c76da6-f429-4fa6-ba39-3b643973d6cb",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "234465e1-c759-456b-bfba-0fbead3ff215",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "dc0bc433-fdc6-4d2b-9b4b-9f4aec5f456b",
        "cursor": {
          "ref": "e3c642ee-866c-4a8b-9253-69d3774bdd54",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "767e4ac2-f1c0-4333-9e82-c1c9261eade6"
        },
        "item": {
          "id": "dc0bc433-fdc6-4d2b-9b4b-9f4aec5f456b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "d1101276-63f3-4fe3-965e-3e6e51b7b268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "8a730f0f-6043-444b-87a0-96721797db99",
        "cursor": {
          "ref": "66500c3d-9e20-422a-8aa8-913f3efbfb8e",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d86e130c-c25b-42fd-863f-ad778f24014a"
        },
        "item": {
          "id": "8a730f0f-6043-444b-87a0-96721797db99",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "f7bc80e2-992f-4089-9ffc-390617d85b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "4f00f98e-55a6-4f53-ac09-bc4a8f4c82df",
        "cursor": {
          "ref": "a12924cc-79af-46bf-bf19-1a1952830ec8",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "a9ac808c-a9af-4ad1-b0f8-99d162ca6b5a"
        },
        "item": {
          "id": "4f00f98e-55a6-4f53-ac09-bc4a8f4c82df",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1ecfeb73-eb02-4d72-8541-04fb3fc8420e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "13e26889-6303-4813-800d-18f54df15561",
        "cursor": {
          "ref": "eade485e-c027-4f7e-86ac-8d05581cc1d3",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "62ee28d0-a8e8-4246-b2a3-d89b4d2d8b69"
        },
        "item": {
          "id": "13e26889-6303-4813-800d-18f54df15561",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "eecb1cb3-404d-4382-b83f-02083c590544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "82bc5281-10c0-474d-aea5-066e1b23c4f6",
        "cursor": {
          "ref": "4f2126a7-a725-41c0-9b02-459eb84d8c15",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "198eb0d6-6458-4c0c-bd82-8d809a522d1d"
        },
        "item": {
          "id": "82bc5281-10c0-474d-aea5-066e1b23c4f6",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "581ae10a-1b25-45ec-8469-ca5f7e9219c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "630387b4-f190-40bd-aa30-0c51e639f22b",
        "cursor": {
          "ref": "9fb38fd4-8b85-420a-95e4-8b5c7079bc65",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "bde731d2-def2-4087-bad9-21b9cf7551b3"
        },
        "item": {
          "id": "630387b4-f190-40bd-aa30-0c51e639f22b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "853eb96d-bfc8-4631-92f4-30c051dd6cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "217eaf85-ae65-4c87-af86-366693a6b704",
        "cursor": {
          "ref": "019cce4a-2a6d-419a-aa99-e61c8473d6bd",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4902874f-1b64-489c-a983-1a14e3147ef7"
        },
        "item": {
          "id": "217eaf85-ae65-4c87-af86-366693a6b704",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "cf559924-c144-42f3-8149-c4602b10ad84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "bcc39d29-2bfb-45e8-a94f-adfe28803aab",
        "cursor": {
          "ref": "57f64866-209b-4a46-90eb-5865b6a42ca1",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "e964aa25-0238-4908-a393-786e05cad9c9"
        },
        "item": {
          "id": "bcc39d29-2bfb-45e8-a94f-adfe28803aab",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "68ee8061-8ded-486a-83b0-020db48cca94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "d9a00ed6-5c50-48c4-bb3d-ddbcb005e632",
        "cursor": {
          "ref": "7b40e802-a71f-4651-90fd-8a0d72da5f00",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e23fe3b9-e74e-43fc-9774-f4fa45421521"
        },
        "item": {
          "id": "d9a00ed6-5c50-48c4-bb3d-ddbcb005e632",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "670201a7-3f78-4fea-a83f-7ba13832996e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "824cbfc4-c070-42bb-9dc9-6832a6fcf4b1",
        "cursor": {
          "ref": "4323dc46-7297-468c-8486-c7598b50b7d5",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "65a8e7ed-40ae-44ef-87c6-52fd72cdef88"
        },
        "item": {
          "id": "824cbfc4-c070-42bb-9dc9-6832a6fcf4b1",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "408fc5af-76b9-4664-9fe4-0bc3fbde4c1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "b6605c3e-2791-498c-aabc-e89123ea70c5",
        "cursor": {
          "ref": "603f0634-5de1-40ee-975d-82912d548474",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "c0e62172-76dc-4426-aafd-54ac4f4fd893"
        },
        "item": {
          "id": "b6605c3e-2791-498c-aabc-e89123ea70c5",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "50faad41-acac-49e4-9e22-91b5fc8ebed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "1cc92f35-b326-4717-840c-6777d20e028c",
        "cursor": {
          "ref": "0cefd476-961e-4132-990a-8074fa21825a",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "3a631298-f17f-4f6b-99be-c8440ed7a80d"
        },
        "item": {
          "id": "1cc92f35-b326-4717-840c-6777d20e028c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "0ce1450e-3f4d-4ce1-a04a-a1525e9e9ab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "a2ec3c94-469a-4445-95cd-07b7651ad7e1",
        "cursor": {
          "ref": "671a527f-ba58-49f7-a769-ce849c528c7f",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "92cf8d1b-a52f-401b-96df-f31904d016d2"
        },
        "item": {
          "id": "a2ec3c94-469a-4445-95cd-07b7651ad7e1",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "3ecc40c9-d620-4014-a9a2-2b49d25d4f5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "45e80316-f6a3-4e90-80bf-838f44a59c61",
        "cursor": {
          "ref": "d87b7a13-da8b-4095-bf24-8068b2e01cc5",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "0a092aa6-bd1b-4834-ac5e-891b6ac9c729"
        },
        "item": {
          "id": "45e80316-f6a3-4e90-80bf-838f44a59c61",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "976b1d0b-af06-4a97-a7e4-3e03e0ddc18e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "b15246da-bb36-4a65-b6bb-342ef45ace82",
        "cursor": {
          "ref": "a52d3b9d-9e1f-4aa5-8fef-b4bddedde754",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "49a10a31-ec5c-4456-aed1-dea7a061db81"
        },
        "item": {
          "id": "b15246da-bb36-4a65-b6bb-342ef45ace82",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "df0bb29a-586f-459b-9f00-8e1cac5a3801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "5aedcccc-7c00-4842-aed0-d34d8c9a1917",
        "cursor": {
          "ref": "a7eb2226-b3dc-4774-a8cd-a0c2af6616f4",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4826b319-4af3-48a4-97f7-61e018010d7f"
        },
        "item": {
          "id": "5aedcccc-7c00-4842-aed0-d34d8c9a1917",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "1ae78e00-e66e-4b72-b8b5-a7cb10a6ada7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "b8d80b2d-4ab1-47b8-b8bb-1bd668542682",
        "cursor": {
          "ref": "f0772bc9-aeac-4229-9fbc-58d3952b4067",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a2967ec3-6b7b-497c-8d62-a05571999d1b"
        },
        "item": {
          "id": "b8d80b2d-4ab1-47b8-b8bb-1bd668542682",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b40e02c2-379d-48e7-9cf7-95cfb0b2f6fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "27776755-221a-4cf9-bf44-0646cd200bd5",
        "cursor": {
          "ref": "9cfb8e72-5986-4519-804e-23e4724cf7e5",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "791996b6-c0bd-4405-99bb-1db4faf66a0d"
        },
        "item": {
          "id": "27776755-221a-4cf9-bf44-0646cd200bd5",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "eb0afccd-d13d-496f-bf0b-d4fad9060ffd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "80bfab19-bf7d-4125-a928-e522c6d4ff71",
        "cursor": {
          "ref": "ffd53c84-1f52-4004-bfbc-5ad70437559d",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a79ad567-29ed-4f9e-90ea-bb2730ec90f3"
        },
        "item": {
          "id": "80bfab19-bf7d-4125-a928-e522c6d4ff71",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "c09bc64c-cfb5-4c4c-a402-69d483b1a301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "a45edc2f-cb5f-4c64-9a35-1774e7d04bc5",
        "cursor": {
          "ref": "93532540-8bbb-4c2c-8a73-7e80d36bcef2",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "24070e1b-6c86-44cb-94fe-958ff8012bbf"
        },
        "item": {
          "id": "a45edc2f-cb5f-4c64-9a35-1774e7d04bc5",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "78419ef9-060c-4afa-9c37-c1692984cecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "9997fed8-9314-420d-8070-a083f8bd3b79",
        "cursor": {
          "ref": "02a19b6c-81d8-4a33-978c-b014eafab10d",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "322d9a70-4300-43f7-add6-96a86dd931d2"
        },
        "item": {
          "id": "9997fed8-9314-420d-8070-a083f8bd3b79",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "540a08bb-774b-464e-b89b-ee36d9a19abe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "e062625f-b665-45a0-86cc-b2e80461eab8",
        "cursor": {
          "ref": "28ef1635-a20a-4de0-bea5-e005aba3b87f",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "019084a0-84be-4a08-8f20-07ffba79b8d7"
        },
        "item": {
          "id": "e062625f-b665-45a0-86cc-b2e80461eab8",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c3225778-47a9-4e58-b548-84321ee51d78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "a0c8e328-b333-49e4-89ca-b9affff7843b",
        "cursor": {
          "ref": "398894b0-576e-4d51-b0c6-e1571a602da6",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "5e07b1a9-d682-43cf-bf76-f96e7dc0064f"
        },
        "item": {
          "id": "a0c8e328-b333-49e4-89ca-b9affff7843b",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a52ab008-f8d4-4351-8dcc-c46a2bd01e15",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "9dbe8740-6f84-4a6b-9d4f-4085d310e153",
        "cursor": {
          "ref": "7354c9c0-b51b-4be1-be09-e17ae2368c79",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "9835b757-4f46-4d15-9f18-6f4610a3b130"
        },
        "item": {
          "id": "9dbe8740-6f84-4a6b-9d4f-4085d310e153",
          "name": "credentials_issue"
        },
        "response": {
          "id": "741fe5a6-03e0-495e-854a-d5548b03a303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:102)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:102)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:102)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:102)"
            }
          }
        ]
      },
      {
        "id": "ec18801b-85c9-47a7-9a1f-ec1e22858675",
        "cursor": {
          "ref": "d7fd9cbb-d314-4127-a182-8e750f6e3943",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b355c241-e4ac-4e0a-96e3-c8df3775a7bf"
        },
        "item": {
          "id": "ec18801b-85c9-47a7-9a1f-ec1e22858675",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "7cdef118-901c-462c-8061-bce400368ea0",
          "status": "Created",
          "code": 201,
          "responseTime": 1737,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should be object",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should be object\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:103)"
            }
          }
        ]
      },
      {
        "id": "50d887cf-2d4a-4efb-a4fb-899c8e038b5d",
        "cursor": {
          "ref": "1b13a4e6-193f-4dd0-90c4-3cce4d8da65f",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f84e6344-b525-4f39-baaf-7ec609dfd642"
        },
        "item": {
          "id": "50d887cf-2d4a-4efb-a4fb-899c8e038b5d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "cf319171-8e23-4e12-99c0-5062b2d3d9b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "8e707fb4-ec6a-4126-8351-a6ef6ae58361",
        "cursor": {
          "ref": "db46399d-eb65-4fee-ad0c-4f1bec4242e1",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7ef105a9-3818-4673-b660-188bf20f03c3"
        },
        "item": {
          "id": "8e707fb4-ec6a-4126-8351-a6ef6ae58361",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5532bae3-1cee-4b72-b28e-22d128310da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "38b83da0-b223-4066-884c-7acbfb765e2a",
        "cursor": {
          "ref": "c9fbebee-5012-40ad-bba8-1d0f81d2d7b6",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "afc6bb76-b522-48a0-81b4-8dfd213b46d4"
        },
        "item": {
          "id": "38b83da0-b223-4066-884c-7acbfb765e2a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "828c726a-f4fb-40f8-be9d-216157a58548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "b854a1c1-5254-4fb2-8855-9672d708740a",
        "cursor": {
          "ref": "fd28664d-ba12-45fd-adb8-f5faa9e6b6d4",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e0caad5c-b98a-45f1-9ab2-e6fcb9b78caa"
        },
        "item": {
          "id": "b854a1c1-5254-4fb2-8855-9672d708740a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c4e94c54-5aad-48b3-b53e-c2e01cebade3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "a9694677-08fe-4939-91fc-7b32d04176b7",
        "cursor": {
          "ref": "22f7f067-e7de-4512-857c-4b22a4e84b50",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "4e0ae055-f162-47bc-8559-47058e740f0b"
        },
        "item": {
          "id": "a9694677-08fe-4939-91fc-7b32d04176b7",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f90b3547-84e6-4753-aed4-fcecf1c3635d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "3eb464f0-75fc-455e-815f-8fd68acd8f8b",
        "cursor": {
          "ref": "eb99269f-f26f-4645-af37-714a587c57b9",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "631eec82-cd57-486c-9073-4045adfceeb5"
        },
        "item": {
          "id": "3eb464f0-75fc-455e-815f-8fd68acd8f8b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "731ed019-1b17-4436-8343-b49645c11048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "dbf4bd9f-bb83-499f-a36a-b51fb432bd82",
        "cursor": {
          "ref": "b7f2ec7e-ed8f-40e0-88b1-2f0135574b77",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ea9016b4-79a5-483e-a497-003f955cbdc7"
        },
        "item": {
          "id": "dbf4bd9f-bb83-499f-a36a-b51fb432bd82",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f290ea7e-e39b-413f-8884-de5a4b7efea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "e18bea63-8b4a-44c5-b836-6334ab6e5885",
        "cursor": {
          "ref": "a85adc2e-1d6a-4c83-b4ef-f965c5f9124a",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "941bd909-686f-4690-af0a-9d333e56d34b"
        },
        "item": {
          "id": "e18bea63-8b4a-44c5-b836-6334ab6e5885",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4f2c67c5-1c2e-4422-99be-37f7daab4680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "a911aeb3-622d-465c-b4f6-5386b4bd834a",
        "cursor": {
          "ref": "dc0d868f-abe2-4fec-80ef-951eeb7299b1",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "9c7be8e2-2e7f-4001-bbd5-1858a92ed898"
        },
        "item": {
          "id": "a911aeb3-622d-465c-b4f6-5386b4bd834a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "0b080b38-e64f-46f2-9d6f-3dfcb2610630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "deee28b6-e355-4aff-9224-c9908f84f8c4",
        "cursor": {
          "ref": "edb70063-f149-4316-b049-fde4c59acaf3",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "cb3e4956-fdcd-4419-8497-8d88efe24ff3"
        },
        "item": {
          "id": "deee28b6-e355-4aff-9224-c9908f84f8c4",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7a26304b-bc70-492f-aacd-a9d1602064c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "28349843-a076-4441-a351-5232b3a1c502",
        "cursor": {
          "ref": "5c1e7f35-cfa3-4cbe-a1b2-9292ef370aac",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6826ef38-771d-4c3f-87c7-71d567b99080"
        },
        "item": {
          "id": "28349843-a076-4441-a351-5232b3a1c502",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2e581eb2-c602-466a-94c8-15a44abb72f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "b0702baf-8a1a-48e7-8e6c-a942bb63cd57",
        "cursor": {
          "ref": "ef673814-9e37-4dd1-8393-ee776f56396c",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "91b4254f-7aa2-4ef7-8cd4-d39839f5ab51"
        },
        "item": {
          "id": "b0702baf-8a1a-48e7-8e6c-a942bb63cd57",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "09f0adba-4ba8-4e6a-b406-b8719ea55137",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "d75b668c-0138-4c7d-ba39-513eb1c23822",
        "cursor": {
          "ref": "737495d0-0b8d-41c8-845c-e8e375143b44",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "344a3221-5350-4af8-aa5c-9557f1a5c5d6"
        },
        "item": {
          "id": "d75b668c-0138-4c7d-ba39-513eb1c23822",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b442a5c9-2978-454b-bff7-e86354d24f69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "9e704491-1fd0-425d-a3a7-2e1c9685d04d",
        "cursor": {
          "ref": "c2797b9d-c00c-4075-81fb-dada5a56d8bf",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1f61cea3-b1ae-41c0-91ce-a04a39cf63c0"
        },
        "item": {
          "id": "9e704491-1fd0-425d-a3a7-2e1c9685d04d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "57f951fd-7f11-40d2-990f-b8b4c55c40db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "2179e433-ff6d-481c-8c10-bcb1679a7099",
        "cursor": {
          "ref": "de5088c3-3a85-4b89-965b-2ad6f40a84f2",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "6b97b4f2-99eb-4b85-ad6c-4b497f4eed16"
        },
        "item": {
          "id": "2179e433-ff6d-481c-8c10-bcb1679a7099",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e33e7da9-ab92-4450-8c21-a8b4ae8de123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "2ecb3622-54f4-4650-9a6c-6b1ae2008cba",
        "cursor": {
          "ref": "f6f9ec65-ccee-4aaa-9e17-42e41256276f",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "4cc93599-b6ae-47f2-bbb4-2d41f8cdf531"
        },
        "item": {
          "id": "2ecb3622-54f4-4650-9a6c-6b1ae2008cba",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "90576a37-b93a-457f-9571-e7d6046af9dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "c4f00093-ceb6-4c91-9f42-4f48bc18e0fc",
        "cursor": {
          "ref": "0c6effbd-b82b-4f91-b6e1-99a8eba95d40",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "096889c3-dfaf-44ea-b5a8-ed501137e7b6"
        },
        "item": {
          "id": "c4f00093-ceb6-4c91-9f42-4f48bc18e0fc",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c68484ad-f134-4a4c-83ff-68f2de192554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "690eab6e-cac7-434e-bc90-6e1e7d6406f1",
        "cursor": {
          "ref": "02397841-67b3-4c37-8395-d1fad09bb8cd",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "21dcc5d3-c255-446f-aa22-eb6d2209354a"
        },
        "item": {
          "id": "690eab6e-cac7-434e-bc90-6e1e7d6406f1",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "15af3758-ac74-4db3-963b-5959aab896b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "6c167875-2368-4b9f-b920-97a473a2b5be",
        "cursor": {
          "ref": "57a07c33-d39a-49ad-9734-64b1fd809d3f",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8a8a56c5-57b3-4719-8e41-e97d387c31d3"
        },
        "item": {
          "id": "6c167875-2368-4b9f-b920-97a473a2b5be",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9f688968-6069-44b5-85b6-762b9a4d87b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "9bd50737-06b3-4a09-8a0c-15c2b549a74b",
        "cursor": {
          "ref": "4f8fb5fa-34a0-4e1a-8ee4-4945c5cc35de",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "22e3e6cd-0306-4359-bb96-68df2ee8a7f2"
        },
        "item": {
          "id": "9bd50737-06b3-4a09-8a0c-15c2b549a74b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ea266d1f-fc73-414a-ad75-65b685944b12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "c3b5762b-821a-4858-a223-4737e8d8ded4",
        "cursor": {
          "ref": "d2478c58-ad95-4625-a466-6a7952ce629b",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "16a5aa14-97ce-41e4-b121-9f816bada56e"
        },
        "item": {
          "id": "c3b5762b-821a-4858-a223-4737e8d8ded4",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "3a7e6a0a-49fa-4ac7-a27b-1ae85828469b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "3983e4e5-d1a4-49b6-8161-6d292853cab0",
        "cursor": {
          "ref": "e60027d1-6145-43bd-98df-359c322285e0",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c5718fb7-0c48-4032-84fa-d2361942af17"
        },
        "item": {
          "id": "3983e4e5-d1a4-49b6-8161-6d292853cab0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e7dc8284-4625-4a29-a1ca-38821b56cb62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "d67a8666-2a29-47e1-b626-89cca6e166a6",
        "cursor": {
          "ref": "80acf953-eea0-4cfe-8d6f-bc14d922d417",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "431fdf78-979e-4682-9895-4f267a8117af"
        },
        "item": {
          "id": "d67a8666-2a29-47e1-b626-89cca6e166a6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e05ea4be-0fbc-4bf6-aa6d-6e33fee9b39d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "18f1ac90-3659-490e-8eee-f4f8605c73fa",
        "cursor": {
          "ref": "c3814bd0-4b1a-4169-bb64-06ebe43a993e",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f3384585-2cba-4cc6-a97c-de2f9de88425"
        },
        "item": {
          "id": "18f1ac90-3659-490e-8eee-f4f8605c73fa",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "71462935-09d5-4954-873f-a541b28db394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "61d1b101-d12b-4d0d-a868-ad25eaed655d",
        "cursor": {
          "ref": "a881393f-4a43-402c-a43a-76c4b53df7e2",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e8ace52c-aeb7-43c3-a134-fde6df82ae3d"
        },
        "item": {
          "id": "61d1b101-d12b-4d0d-a868-ad25eaed655d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4561787d-6e99-41c5-869e-727b8f3f5286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "72e3b4ea-2826-46e5-81a7-6e73142d6594",
        "cursor": {
          "ref": "2e1ca5cb-cf2e-4a4c-880a-fce85c5e1d0a",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "010fc486-9fd0-45ff-b991-ac02a17dcf2c"
        },
        "item": {
          "id": "72e3b4ea-2826-46e5-81a7-6e73142d6594",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6bccbed8-72ea-40a8-9642-67e7c1299afb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "41478cf4-0727-4ec5-9215-f3cabc726ce4",
        "cursor": {
          "ref": "257ed661-cb9c-4576-b58c-423a7de156a2",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "50ba4e74-6307-49ea-8c76-5484c33469dd"
        },
        "item": {
          "id": "41478cf4-0727-4ec5-9215-f3cabc726ce4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "78753c90-cdf0-4d1b-8979-4e56785a3264",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "7cbe799c-6efe-45e8-8076-3a4c965cb933",
        "cursor": {
          "ref": "5f566e40-e9bd-466b-9ef7-bfbdfff682a4",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "32b79cb6-cfb6-4be0-8b2e-cf7f96c37bce"
        },
        "item": {
          "id": "7cbe799c-6efe-45e8-8076-3a4c965cb933",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e601e7cc-dfd8-4b82-a533-6602c6d13430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "b731ef0e-a6c4-4a4a-b847-51b3145f1f38",
        "cursor": {
          "ref": "64ff422f-3c0b-46f5-87e8-6efbc8503080",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "3fe43693-f617-4809-bf47-5b996c7ae00c"
        },
        "item": {
          "id": "b731ef0e-a6c4-4a4a-b847-51b3145f1f38",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "fa0fb7bf-488b-4666-aeaf-1d458efe16a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "5ef74ae5-82c9-42ca-ad9a-8e264039160a",
        "cursor": {
          "ref": "5da92f8f-90ec-48f4-916e-7186ec216fc9",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "6f763504-7b5b-41ee-a904-28c531b26379"
        },
        "item": {
          "id": "5ef74ae5-82c9-42ca-ad9a-8e264039160a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5285cf49-0150-4a25-bc8e-b7102f3be97b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "5fb8137d-934e-4112-8436-3becb458ceec",
        "cursor": {
          "ref": "6b3451fb-5f99-4a78-be42-8dc6973c4da7",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "c24834db-3bcf-498a-915e-77bdb944f019"
        },
        "item": {
          "id": "5fb8137d-934e-4112-8436-3becb458ceec",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "89852f3d-ea4e-4c58-be25-b5092f007a45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "8932c1e3-774d-4723-88f3-9b4ed206f63f",
        "cursor": {
          "ref": "aeb3c30b-ac7c-4438-99ed-051b29ac1c51",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "88e1d75a-ec5c-4a0d-81e4-1c2418041e5e"
        },
        "item": {
          "id": "8932c1e3-774d-4723-88f3-9b4ed206f63f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "cfb4fbee-b303-4737-beb1-3f4a56e02f6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "b785bce5-f688-4685-8375-5b9a0dfa44ea",
        "cursor": {
          "ref": "4a034be2-bc59-4189-ad22-ccb2f6dc301e",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "401dbff5-4238-46bb-95b4-333a4b6730e5"
        },
        "item": {
          "id": "b785bce5-f688-4685-8375-5b9a0dfa44ea",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "d1bf6a64-3f5a-4228-87f3-63f6720fea3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "7869b4c4-32b2-4d7d-bb03-08a3202b3c0d",
        "cursor": {
          "ref": "2e548215-5ac4-4c28-a4fa-ba79a947268d",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "8b4f7c6f-ba16-4e84-8c4f-61df3fb43c17"
        },
        "item": {
          "id": "7869b4c4-32b2-4d7d-bb03-08a3202b3c0d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "51c19f28-cbc2-4ce6-9043-ead094b31c38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "ba1d55ab-9837-4783-8bfe-50acdaea8da2",
        "cursor": {
          "ref": "89213f66-827b-48df-9656-64987fce7b61",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "7bcd7793-b2db-4e4a-bed5-bd0b3a11a107"
        },
        "item": {
          "id": "ba1d55ab-9837-4783-8bfe-50acdaea8da2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c6dbadd3-6cd3-46f1-8c86-d0a1ccf23740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "1e31d25c-3a33-4fcd-a42f-04ebe4431ae4",
        "cursor": {
          "ref": "adf95f13-abdf-41d9-a30d-8fede7b2f6fb",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b959cc6b-a107-4f1f-a8a4-80e2d3c40250"
        },
        "item": {
          "id": "1e31d25c-3a33-4fcd-a42f-04ebe4431ae4",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "01a049d1-283a-4b98-afdc-ab14089f25b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "24699888-a3fd-4afa-9d4c-5c89018424a9",
        "cursor": {
          "ref": "13463cd5-77be-489e-9344-41f217342b67",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "3e39986d-1943-47f6-b935-8c51b8d090a3"
        },
        "item": {
          "id": "24699888-a3fd-4afa-9d4c-5c89018424a9",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0e9da15a-5df1-4b41-af8c-371c6c42b663",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "bea26a97-8d15-4920-b12b-92560299e30a",
        "cursor": {
          "ref": "e9a4f7c6-61aa-423a-903c-1543dffc76f1",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "72995654-0c80-4a41-bd21-32f3431df734"
        },
        "item": {
          "id": "bea26a97-8d15-4920-b12b-92560299e30a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "53fe1074-a605-43f2-be93-4e8d2b144615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "be6ce693-aae8-43a9-9902-00d3124f14af",
        "cursor": {
          "ref": "67f6d5d0-915a-4c42-a1ba-c86d4a516c15",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "6ecee1b9-8cdb-4a9a-813c-0c1efb8fd9a1"
        },
        "item": {
          "id": "be6ce693-aae8-43a9-9902-00d3124f14af",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "55fa78a8-8393-4320-9817-d39d098295b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "3908a385-94f5-400a-bde3-14d72828cef8",
        "cursor": {
          "ref": "a0757783-3d05-49c2-9802-0e2df723edcf",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e0fbcbf6-8b16-46d6-a268-2aafeb439a7f"
        },
        "item": {
          "id": "3908a385-94f5-400a-bde3-14d72828cef8",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5fedf318-350d-4542-96e1-265eab74681b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "d7bfb5a8-cc7e-4828-8d16-80b03aca70e9",
        "cursor": {
          "ref": "b7359217-cfbf-4b92-891f-50809aca362a",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "3e8b0ba1-5522-4115-8b93-39e615bbd14e"
        },
        "item": {
          "id": "d7bfb5a8-cc7e-4828-8d16-80b03aca70e9",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "110e2e17-75f0-4d2b-a35c-28f199b7a20b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "4000679f-05d7-418b-86b5-8da57cb39fad",
        "cursor": {
          "ref": "857ffce2-abd4-466e-a09b-3dddad2be8ce",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b4ece309-a085-4f14-9057-91eeab870eef"
        },
        "item": {
          "id": "4000679f-05d7-418b-86b5-8da57cb39fad",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "06f60c01-b84e-4183-bebb-23458c029956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "a4935e70-ba22-4743-8acd-bac98decc492",
        "cursor": {
          "ref": "17a853d3-1d41-4ce5-88db-12cacf965562",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "4b08ecc5-3e79-4414-b4ce-43abb7aeca2c"
        },
        "item": {
          "id": "a4935e70-ba22-4743-8acd-bac98decc492",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b9753036-dc9c-4961-a673-989fcc65a1cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "ef0c7950-b454-4bd8-9514-7c5f8598d136",
        "cursor": {
          "ref": "f1f6a76f-18f5-4998-b581-880727915b19",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "55bf0304-b644-47e4-a5ec-88e4034392b8"
        },
        "item": {
          "id": "ef0c7950-b454-4bd8-9514-7c5f8598d136",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c7eed8be-265d-4497-8c14-4f8ec563d5b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "05de7af0-10df-4cfe-98bc-2668e87b7484",
        "cursor": {
          "ref": "4e665fd6-23ef-4d6a-a5c2-94c6bc7aaa4c",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d27bbae8-6084-4dca-a3b3-8dfabf32e763"
        },
        "item": {
          "id": "05de7af0-10df-4cfe-98bc-2668e87b7484",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "75853ed0-52c9-41e6-aa13-c1413dffdf87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "34e2ed55-017d-42bd-b8ef-1dedcb2b9ddf",
        "cursor": {
          "ref": "a44d518d-f361-422b-8f3f-768cb8f2c90d",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "45fd7dd0-06fc-40dd-8777-8e79e9076d88"
        },
        "item": {
          "id": "34e2ed55-017d-42bd-b8ef-1dedcb2b9ddf",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4f81989a-c060-4df8-aad7-f208cc93dab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "aa4fff46-11fc-4262-a3be-75d11c1c7472",
        "cursor": {
          "ref": "b9101590-c01d-4b38-8a83-6bfb2c6d2934",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "facecf77-d4b1-41ce-b160-771e561716db"
        },
        "item": {
          "id": "aa4fff46-11fc-4262-a3be-75d11c1c7472",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ac142119-7aa1-4465-a45f-6bc4ec89def5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "d340e82d-ee6a-4a30-991b-d13aa386aea8",
        "cursor": {
          "ref": "0fa3992e-f7c4-4927-8458-70b12b418d4d",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "2734d942-88bb-4c8f-92f7-7f0fd4cfbebf"
        },
        "item": {
          "id": "d340e82d-ee6a-4a30-991b-d13aa386aea8",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "63ded657-0595-43b0-9d70-4b69f2467d3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "69ee4fc0-1a20-446b-bbd9-e060609cc051",
        "cursor": {
          "ref": "4dd75d3d-812b-4ee3-90ff-31d973e947df",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "1742f2ee-8556-4e4e-8644-a1da5374cb39"
        },
        "item": {
          "id": "69ee4fc0-1a20-446b-bbd9-e060609cc051",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f86f5f3f-3878-4008-9321-9c3ab2ae285b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "e9135a91-7bc9-41da-a41a-96ebc650b1aa",
        "cursor": {
          "ref": "7166d30a-8028-4df3-bf5a-28085c132b50",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "61d61a69-1582-4c03-8dd1-692e0fd5e6a0"
        },
        "item": {
          "id": "e9135a91-7bc9-41da-a41a-96ebc650b1aa",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b24a928f-e6fe-4a97-81b7-af9436930685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "d502fe7e-11df-4dab-94a2-52eec53051d3",
        "cursor": {
          "ref": "f5104569-3a01-45e2-b20e-8884f8fdfb7d",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "2cc01b89-732c-42e6-9d6f-e303a08a7b3f"
        },
        "item": {
          "id": "d502fe7e-11df-4dab-94a2-52eec53051d3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9a6d3984-e941-4c06-98f6-3568bb59f8b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "1eec7f7b-604f-49a7-9b9c-ddc89c80df05",
        "cursor": {
          "ref": "7be9c151-f5b5-4814-9069-8ab180ef0ed5",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "f6c11c2c-8349-4baa-a4d1-faa8d30b1907"
        },
        "item": {
          "id": "1eec7f7b-604f-49a7-9b9c-ddc89c80df05",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "46240906-1f5c-48ac-b7a8-233c15c6c882",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "f2944ef8-c96c-4e66-90b5-6904ec95ee12",
        "cursor": {
          "ref": "07af4618-411e-4415-ab87-1c6cba74e995",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "9d9523c7-99c4-42ea-84c5-1a6b40e668fe"
        },
        "item": {
          "id": "f2944ef8-c96c-4e66-90b5-6904ec95ee12",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4b8bd025-dd95-4675-a1ce-1a556b29ff96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "e914c3bc-b88c-47c5-a68b-6e52033ecd10",
        "cursor": {
          "ref": "e2ac6bf2-af98-4211-b378-255684ed0c53",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "dae271e5-2058-42e7-a938-80817f77dc25"
        },
        "item": {
          "id": "e914c3bc-b88c-47c5-a68b-6e52033ecd10",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a3f61089-aee9-4b82-80a2-06315a2c0161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "7d0ab91f-69e3-4350-8102-544d2e3f61b4",
        "cursor": {
          "ref": "bfe98853-002f-454e-af04-31a960fa2038",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "51a2f222-fb02-4d44-bc85-e1480c7fba6c"
        },
        "item": {
          "id": "7d0ab91f-69e3-4350-8102-544d2e3f61b4",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "bd12932f-7e01-4dce-b1dd-9b694ac9dba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "6f0a619e-3143-4c85-bf0c-743eba040b0d",
        "cursor": {
          "ref": "231d2c86-ce4a-4d22-8f0c-0496f3f74df3",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "aecc8745-19be-4977-b637-e00e4f55147c"
        },
        "item": {
          "id": "6f0a619e-3143-4c85-bf0c-743eba040b0d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "54c8e7b2-9d51-4c52-bea4-d9a38c5d37e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "6b53fa64-b5c1-4e48-8f46-e0039e1d654a",
        "cursor": {
          "ref": "090e4f3e-abb5-4cd4-9e08-04cef48bd1b0",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "0ea31517-6e09-4b0b-93d5-50f59e360334"
        },
        "item": {
          "id": "6b53fa64-b5c1-4e48-8f46-e0039e1d654a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e097d35e-1282-4f45-b945-cb7c5934e8d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "08855b55-44c0-4d29-b64f-8ae10c825ad3",
        "cursor": {
          "ref": "f20bf23d-13d6-4af7-aa71-2ad6c4f2d4a6",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "e260a1ef-53a1-43ff-84ce-cd0bbddd6598"
        },
        "item": {
          "id": "08855b55-44c0-4d29-b64f-8ae10c825ad3",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b21d08f2-ff32-447b-bc1a-ec4722c43c28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "ae8c8aff-398e-4485-b451-fe1212361fe9",
        "cursor": {
          "ref": "0a3c64e9-d595-4dcb-b850-91ff1975ef5a",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f8c4bf0a-ef6e-4b2f-93d2-026aa1651e13"
        },
        "item": {
          "id": "ae8c8aff-398e-4485-b451-fe1212361fe9",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6ceec064-4c07-4fd3-8afb-3eb407f4f01a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "5b67d730-ba93-4e88-acda-4562a10c8fa0",
        "cursor": {
          "ref": "d28016be-d842-4ed1-a8f6-dcd3eae50e88",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "b21f9b66-8ba8-43a4-9706-5e7aa969f52f"
        },
        "item": {
          "id": "5b67d730-ba93-4e88-acda-4562a10c8fa0",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a77b2337-c90b-4a8c-9ab0-eb60cfb94e3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "7199efc2-9c16-4293-8e66-b447c25174b8",
        "cursor": {
          "ref": "3977b34b-593c-42b0-a36b-5c2484437a13",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "655ea3af-bb46-45fb-a376-aae7cef42543"
        },
        "item": {
          "id": "7199efc2-9c16-4293-8e66-b447c25174b8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6cf34676-9d0a-4c16-8c42-d98a4874715f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "42c44225-746c-42d0-a41d-4b215ff6c51f",
        "cursor": {
          "ref": "858b4a3b-40a1-4385-957c-1602bee95c6a",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8c3d17b0-632a-4126-8f25-3ed530dd0edd"
        },
        "item": {
          "id": "42c44225-746c-42d0-a41d-4b215ff6c51f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "71d50eda-775b-4e25-80f9-763a415cab06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "fc3c088a-199b-42d7-9598-8317b425b5b4",
        "cursor": {
          "ref": "d71e0657-d40a-4ad7-9478-1d5675ebc017",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "da789e6b-f1d0-4bac-af01-4b4fc3de5b59"
        },
        "item": {
          "id": "fc3c088a-199b-42d7-9598-8317b425b5b4",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ed3fef72-c8a7-40e8-aad0-6a8cebcb083f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "cf1214ae-db70-45d1-82ed-63d03b27fe14",
        "cursor": {
          "ref": "88365aba-9ad6-4362-9dbd-eaea41e23a36",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "2be2a920-c4d0-4b63-a967-cc8d9fc4d697"
        },
        "item": {
          "id": "cf1214ae-db70-45d1-82ed-63d03b27fe14",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "56232a66-a350-4b5a-93c4-96f1a6d509bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "1a7827a3-653b-4038-8d7f-9fae2991e851",
        "cursor": {
          "ref": "71b40116-bd02-4eb4-9bd2-dd027c21df91",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a402c4ca-7fb3-4619-b15a-31b776336edb"
        },
        "item": {
          "id": "1a7827a3-653b-4038-8d7f-9fae2991e851",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "44eb0f82-f746-44f3-81d6-b216f971761a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "5c4abc06-b97f-41b6-b6de-ed0e4eb9fbd1",
        "cursor": {
          "ref": "fd4ced92-496b-4ad1-8f3b-c2dad73fd65b",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "1c54c799-679e-406d-90cf-69c431e2f88a"
        },
        "item": {
          "id": "5c4abc06-b97f-41b6-b6de-ed0e4eb9fbd1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "6947a641-22e9-4e4f-81d5-aa84a4468471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "e87cdd9b-295b-4e65-befa-47089d9fc021",
        "cursor": {
          "ref": "0f8bc6a7-d4f4-4bce-bdd8-9a539a497c91",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "9f344b4d-e98d-4f7c-b8b0-360755f1c704"
        },
        "item": {
          "id": "e87cdd9b-295b-4e65-befa-47089d9fc021",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "13d02775-1442-4d8f-94db-31b3c55c99ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "e7a28c81-4e1c-4d9b-8282-7db0c04d6cb6",
        "cursor": {
          "ref": "3f05528c-2eda-4eba-8c55-92e0114e79d7",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "f07840ae-d26a-49a8-bca6-3c27c3789a1e"
        },
        "item": {
          "id": "e7a28c81-4e1c-4d9b-8282-7db0c04d6cb6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c7bee8f2-56fc-4ba1-946f-e7160d0356c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "ce530346-8e47-454d-8802-9b19549243dd",
        "cursor": {
          "ref": "11ac4564-dab3-4ea6-bc46-0aa749a87234",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "97f02c70-767e-4374-b652-95f35b9df6f9"
        },
        "item": {
          "id": "ce530346-8e47-454d-8802-9b19549243dd",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "5882589b-dd3c-44d6-9b3b-9db3be5a62b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "d94259b1-20f4-416a-bbc0-6b27940ff34c",
        "cursor": {
          "ref": "f953228f-0a50-406d-8071-ecb6ceb39f21",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "39fde123-57dc-4729-837f-9ac87ba0d522"
        },
        "item": {
          "id": "d94259b1-20f4-416a-bbc0-6b27940ff34c",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "c8c94dc1-ff5b-4b3c-841d-358bf2082adc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "d03c1baf-826f-401d-b5e5-991d6f2ebe8e",
        "cursor": {
          "ref": "dd07ed93-3e2a-47f9-81c0-18eeb84361b7",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "100545cf-6447-44c4-93dd-6e8b4db64a1c"
        },
        "item": {
          "id": "d03c1baf-826f-401d-b5e5-991d6f2ebe8e",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "86fdea01-def1-4f43-bb39-f5a57c7a6738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "bfb8d745-6dd4-47f5-a98d-e5310e3f8dca",
        "cursor": {
          "ref": "a0a3de0a-7fb8-4c21-a973-0acb27aafb32",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "57f01b68-1511-4619-9115-83ef16741ba2"
        },
        "item": {
          "id": "bfb8d745-6dd4-47f5-a98d-e5310e3f8dca",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "89930071-7042-443b-84b9-03bb526fb8b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "3046c1b1-f2ab-472b-880c-a0d1d27ac1dc",
        "cursor": {
          "ref": "be5321e3-1db2-4d66-b432-588dac078e50",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "6bbec3a7-768f-4dc4-b11f-a42911bb6881"
        },
        "item": {
          "id": "3046c1b1-f2ab-472b-880c-a0d1d27ac1dc",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "938152a2-522d-4f79-a967-4740046df835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "be8cfdf0-46d8-4639-94c2-72260d81a403",
        "cursor": {
          "ref": "c9710b27-6332-45cc-9df2-691a02fdcff6",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e1227d86-c691-4e04-9cc7-304f602a73ab"
        },
        "item": {
          "id": "be8cfdf0-46d8-4639-94c2-72260d81a403",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "a48b1f51-c1cd-421a-ba30-dd8f7ef1bb3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "e8364e91-6207-4ebb-850b-4786ab29381e",
        "cursor": {
          "ref": "1b5e8be0-ddb5-4a2b-b7cf-cf28aea75199",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "32d994e8-e56d-4cd8-8005-030b9f996b18"
        },
        "item": {
          "id": "e8364e91-6207-4ebb-850b-4786ab29381e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3a893cf3-cd2d-410d-9a32-caf0441bd370",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "43d3ef4b-b3d9-42be-92ee-b6feb4bae84c",
        "cursor": {
          "ref": "c791cace-4ffe-42b3-898e-1743beacd207",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "51c29334-abb0-488c-98bd-3b6f9bdaca1b"
        },
        "item": {
          "id": "43d3ef4b-b3d9-42be-92ee-b6feb4bae84c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "915c87b7-a7cc-425d-83ed-20dfc78f9214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "acdb82a2-f0f9-4aba-b621-9d716f77e231",
        "cursor": {
          "ref": "d539dfa4-84bf-4f85-92ed-873bfb52d1e9",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "25cd5287-501a-49a9-90ab-638181ce681c"
        },
        "item": {
          "id": "acdb82a2-f0f9-4aba-b621-9d716f77e231",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "055191b9-e300-4055-96fd-2a0272c5a317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "3b72eaae-582e-4328-b01d-fabc6769ee07",
        "cursor": {
          "ref": "b7407d43-97bd-48d2-9b3a-9583724bf822",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "fd97f55d-1f7a-43df-ae98-b71435363aef"
        },
        "item": {
          "id": "3b72eaae-582e-4328-b01d-fabc6769ee07",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3cabf0b2-0991-4f85-990d-df72da1e36ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "a13026da-6553-4dfb-be79-6dfa0021adc4",
        "cursor": {
          "ref": "04bde70c-f0a8-450e-94ea-dd76fbeaa82d",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "711a00ec-9280-43a4-a109-93b3ff2b3dd5"
        },
        "item": {
          "id": "a13026da-6553-4dfb-be79-6dfa0021adc4",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "6de2fa2f-e91f-4e16-9e00-e98bc95c06f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "67b3d0b7-1fbc-4996-b21e-f24a377540f9",
        "cursor": {
          "ref": "5f5755b5-daa4-4cd4-98e5-ae5db72000d8",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "9b5b307b-3cf0-4f2c-900c-f6ce0f1bf5e2"
        },
        "item": {
          "id": "67b3d0b7-1fbc-4996-b21e-f24a377540f9",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "7d3bcf35-907b-47f1-bd3e-6ff8725c4ef6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "ebbd7013-a44e-4c5f-bfe0-baff52ba6f27",
        "cursor": {
          "ref": "e99b8893-3f4d-4a42-96c6-77d53d4774d2",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "35cd6f09-d594-4544-a2bf-717de550da18"
        },
        "item": {
          "id": "ebbd7013-a44e-4c5f-bfe0-baff52ba6f27",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "2d802b3b-a780-4299-8f98-775d29c66f2e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "00648247-7db3-40cd-946a-094bda6b8ee6",
        "cursor": {
          "ref": "c3bac477-b21f-4227-8c39-5bd660962e06",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "a087fd6b-0fae-46d0-a57b-e1c3763f3145"
        },
        "item": {
          "id": "00648247-7db3-40cd-946a-094bda6b8ee6",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "c77e67e5-3220-4d46-885e-4889f7e2e65c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "8583cf23-26fa-494b-9258-04329bedeb66",
        "cursor": {
          "ref": "f5d994cf-445c-4311-bdb5-4e9d38e118b2",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "8d6040a9-2b48-484c-bb2d-612f67b982f3"
        },
        "item": {
          "id": "8583cf23-26fa-494b-9258-04329bedeb66",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "af316f22-9e9a-4548-8751-fb22bcb01590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "a862c4c8-44d3-44eb-bb22-6315e4665cd7",
        "cursor": {
          "ref": "29c9b299-24e5-4202-9949-439b6a1f25d8",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "5b4cc3b9-5fee-423e-848d-c29b824b2b32"
        },
        "item": {
          "id": "a862c4c8-44d3-44eb-bb22-6315e4665cd7",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "6a793880-20ca-4998-b964-6f1bab06dc6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "c69e850a-7a4e-465d-a3dd-205dc11ba7d7",
        "cursor": {
          "ref": "8524ca67-3c03-450d-83c0-ecfe9288176b",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "0204502b-9bf2-4b19-a278-2905fa4ab5eb"
        },
        "item": {
          "id": "c69e850a-7a4e-465d-a3dd-205dc11ba7d7",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "633ac124-de82-44ed-a006-585143ddaf36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "ac4b90df-b56e-42b2-91f2-609e4e2c972f",
        "cursor": {
          "ref": "4227403d-3a5c-4158-aa4a-f6155366e0e6",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "8c3f7bc5-3194-464f-b9b1-9204866d49f1"
        },
        "item": {
          "id": "ac4b90df-b56e-42b2-91f2-609e4e2c972f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "68facf21-f155-4ddf-95f1-84035d56bf72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "2797e6ab-8542-4acb-ac9f-70122c18f5b6",
        "cursor": {
          "ref": "3f9b6f18-b0d4-4c5d-9731-a3f6abb46b9a",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e16c8c9d-8c2f-4a3c-9da6-1226ab5a785a"
        },
        "item": {
          "id": "2797e6ab-8542-4acb-ac9f-70122c18f5b6",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "05347f69-9944-46d7-a174-08154ee2e748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "a7b0e1fc-e579-4089-a115-fa05aee64d4e",
        "cursor": {
          "ref": "f92c5da8-e4aa-4a14-85d4-ddd1ec58680f",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "4f90d5ca-44c4-415d-ae99-52eed983cd92"
        },
        "item": {
          "id": "a7b0e1fc-e579-4089-a115-fa05aee64d4e",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d997d80a-5fc4-44a7-a8a8-77d156d0245d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "7a6167ab-6acf-4975-8d4d-1acc74bbcdeb",
        "cursor": {
          "ref": "41d29cf2-455a-4f7e-ad43-5b98875c6963",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "aabe781b-475b-4829-a265-8fe35177ca51"
        },
        "item": {
          "id": "7a6167ab-6acf-4975-8d4d-1acc74bbcdeb",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "107559f0-1141-40ba-a629-bc258340323e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "deb02300-5f0d-4728-9b5c-d34d60b310b5",
        "cursor": {
          "ref": "aba0bab7-fe44-45b3-b0f1-d81cbe3bfc75",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "55d452ee-9903-490b-8871-23f6b7077897"
        },
        "item": {
          "id": "deb02300-5f0d-4728-9b5c-d34d60b310b5",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d42ad1d5-3c14-4815-b9a3-78c1eaa9158a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "6f6579e1-dc0c-4e77-a0d7-48d98b0eaee1",
        "cursor": {
          "ref": "13ea6fb4-3e74-4e62-b088-074fb83bf1d0",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "87ca41b3-0694-416c-9a77-a591d4d263cf"
        },
        "item": {
          "id": "6f6579e1-dc0c-4e77-a0d7-48d98b0eaee1",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "8d9fbe4b-c914-4185-8e14-78b7bbba093a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "213f9bf3-a23b-42cb-a5cb-62375b7d66cb",
        "cursor": {
          "ref": "ad05b9e2-c1cb-463b-bc8c-598c2793d1e7",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "088803af-1159-4abe-bffd-2b4efebc8847"
        },
        "item": {
          "id": "213f9bf3-a23b-42cb-a5cb-62375b7d66cb",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "14baa4c3-8056-4a0a-a3a9-1fd7a79ef550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "2e430c87-311c-431b-a027-d0f892a70259",
        "cursor": {
          "ref": "55c34f11-6e02-4379-b2bb-6840514ed0b2",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "963f7eb5-2fe6-43a0-a83e-35fef59486f5"
        },
        "item": {
          "id": "2e430c87-311c-431b-a027-d0f892a70259",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c261b289-6026-49dd-a125-e25fb094f301",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 44,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "0e3f0241-d289-432a-987e-80bf50a61594",
        "cursor": {
          "ref": "a8dd3eea-908b-4334-9057-981ff5b3e589",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "09225d5b-a094-49b0-bb9c-082cfea0fa01"
        },
        "item": {
          "id": "0e3f0241-d289-432a-987e-80bf50a61594",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "44c18409-65bf-452a-99c3-9cce1f516dab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "ab04af1e-b336-4688-8d84-f9732dd25ecd",
        "cursor": {
          "ref": "315f4e96-06e9-4bf3-91f9-fae3cf911b24",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c1b3405b-f779-4cf4-982e-6a347a432207"
        },
        "item": {
          "id": "ab04af1e-b336-4688-8d84-f9732dd25ecd",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "0c6c5ad5-b1c4-46b1-977e-9d970a192395",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "b8799cdd-6bf5-434a-af40-84acb25c8ea2",
        "cursor": {
          "ref": "429df699-5fbc-4519-a274-9bf5e3217fa1",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c059971b-a106-4737-a2ca-a05c7d3a82b9"
        },
        "item": {
          "id": "b8799cdd-6bf5-434a-af40-84acb25c8ea2",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "adaed501-1843-4f4f-a3c4-71a69b432b53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 98
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "a419320f-bfdb-4eb5-a0dd-0b80da394c28",
        "cursor": {
          "ref": "7ced7310-048c-4285-85f8-2526ad990af7",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a93b7a46-3a36-4b94-ac13-661a1979547c"
        },
        "item": {
          "id": "a419320f-bfdb-4eb5-a0dd-0b80da394c28",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ac972106-6713-4ddd-a572-4172d8e4d607",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "eb3847f7-4ed6-4f2f-8388-139f0b784695",
        "cursor": {
          "ref": "7dbb9e6c-ffa7-4cf2-ae63-57ad07567fdb",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "66ba2b8b-66e9-4b8f-86c0-7ad08fe7ee0b"
        },
        "item": {
          "id": "eb3847f7-4ed6-4f2f-8388-139f0b784695",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "eb104d67-f1b1-452e-a785-9c53c756d12f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "72fa4be4-6f68-4562-a914-f33a4e47054d",
        "cursor": {
          "ref": "b2ef79a6-c5a1-40d2-bfed-911afc39c412",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "53daf079-5092-4549-946a-e5f3f3f11145"
        },
        "item": {
          "id": "72fa4be4-6f68-4562-a914-f33a4e47054d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "29526095-9eac-41e5-915f-53429c003e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "fea1c822-9bfa-4004-b8cd-dc2c3a002c7b",
        "cursor": {
          "ref": "321203c0-860f-47d1-b15b-ab26ab2beef5",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "b26c0b27-b8ce-424e-be29-bcd733982529"
        },
        "item": {
          "id": "fea1c822-9bfa-4004-b8cd-dc2c3a002c7b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "4cdee298-70fe-4f4a-a7b1-852d7c28796a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "d775c1bc-f7e0-402b-94b0-3756256a404a",
        "cursor": {
          "ref": "1cc9a376-a831-40d1-9653-c0f9d701f80f",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e586ac67-e699-4df8-84a0-615fdb5401b7"
        },
        "item": {
          "id": "d775c1bc-f7e0-402b-94b0-3756256a404a",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "0ff578c3-a687-47bb-83fd-81317fd088c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "4b34d43e-9f44-45d8-a6c5-3db09af29935",
        "cursor": {
          "ref": "3a7fa62d-523e-40e4-88ff-493605d7a629",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "13018a5a-0486-41d8-8324-2cbeb30fa604"
        },
        "item": {
          "id": "4b34d43e-9f44-45d8-a6c5-3db09af29935",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "4516312a-56b6-4daa-bc1f-8af35cecdb3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "51cb876f-7b8e-472a-ac84-319ed22e1383",
        "cursor": {
          "ref": "819e25d6-fd2d-482b-b5f6-62b5b219b423",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "974251cf-ed63-4092-8207-56dcb2993124"
        },
        "item": {
          "id": "51cb876f-7b8e-472a-ac84-319ed22e1383",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b18a5632-260c-4b7e-9457-f4f8c6e65b41",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "e2b543b0-5c95-47c0-bd27-8702795cb01b",
        "cursor": {
          "ref": "76295c26-e79a-426e-b8d5-f6b31f1200ed",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "c9d4dfca-ba1a-4131-80bb-0f82a3b98c10"
        },
        "item": {
          "id": "e2b543b0-5c95-47c0-bd27-8702795cb01b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "d215e371-35af-44f8-8130-e3f11945909c",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "766b844e-2912-44ba-98b1-1b5e261625e3",
        "cursor": {
          "ref": "25769581-edef-4c30-b491-cf0fcd72f087",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "b7e48192-9f82-416c-a680-a2e283f5ff9f"
        },
        "item": {
          "id": "766b844e-2912-44ba-98b1-1b5e261625e3",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f3c474e3-da28-41b8-a2ca-4eeeec53cdcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "96d8cd02-b11f-4b11-ab46-23fc9aa159f5",
        "cursor": {
          "ref": "8f1d1073-83f4-4fb5-8747-0fd899aebfb6",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "9a3427f5-8e01-44a8-8336-ad8e3335deb4"
        },
        "item": {
          "id": "96d8cd02-b11f-4b11-ab46-23fc9aa159f5",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1a2b706f-b18a-4cf7-86d3-3b071149dc88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "45ca1e32-a800-4715-9333-e32079cf5e68",
        "cursor": {
          "ref": "7cbb913c-710e-49e8-956a-67be55ed7fc4",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e76f7c33-82b7-4540-8abc-b5b077b8a629"
        },
        "item": {
          "id": "45ca1e32-a800-4715-9333-e32079cf5e68",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "9c4cc7b6-c862-4444-8352-1d602d62cae4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "b03ae874-26b8-4e32-bd4e-506c5ab7839f",
        "cursor": {
          "ref": "9bf49a7e-7c24-4e04-b2fd-a6d12e795740",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d11a124c-606e-48c5-90e2-659456d44fbf"
        },
        "item": {
          "id": "b03ae874-26b8-4e32-bd4e-506c5ab7839f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e3d7f240-498c-4d7b-9557-a96d48163159",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "9ab35f13-3042-44ba-90e5-836c33de558e",
        "cursor": {
          "ref": "d8acba76-a252-4329-9a27-fad476fe1110",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "91447624-9575-4b3f-bc9b-1430a2b33be2"
        },
        "item": {
          "id": "9ab35f13-3042-44ba-90e5-836c33de558e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "6c82320f-c221-4625-a5d5-86e6bcd0dac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "0ce69cc1-117f-4038-8234-7e74e32119c7",
        "cursor": {
          "ref": "6e6fc80c-1617-4511-89f3-9fc808bc2aa2",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "412a6746-b7b2-4c60-8b61-3ed6e40b2682"
        },
        "item": {
          "id": "0ce69cc1-117f-4038-8234-7e74e32119c7",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d8f0bd13-dc97-4faf-ad16-552a41d2b77f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "cd8eea30-f81a-4236-bf63-aeb978f9284a",
        "cursor": {
          "ref": "8f547437-768d-45ca-8db5-b8789ec4df9f",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e0526c5e-5e34-4aa3-8be2-0e8186650bac"
        },
        "item": {
          "id": "cd8eea30-f81a-4236-bf63-aeb978f9284a",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "3a9373b5-e7d9-49c1-be2b-276c46209f61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "c6417f13-65b5-43c7-ae1a-5f993795650f",
        "cursor": {
          "ref": "8cb3b4bf-022d-41ab-8074-f7336fecb564",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d75a0b5c-f37d-4016-8c16-f5a72c1e6b75"
        },
        "item": {
          "id": "c6417f13-65b5-43c7-ae1a-5f993795650f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "2229e7aa-a434-4e40-aeb1-5c6229f810ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "0cae80b3-fdde-4692-895c-9c3f38b36c73",
        "cursor": {
          "ref": "f6e33d73-eddd-4471-88ff-38986c60522d",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "07aece83-4ad7-46da-8d1a-8f57c9d417c0"
        },
        "item": {
          "id": "0cae80b3-fdde-4692-895c-9c3f38b36c73",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8d37d90f-b6fa-485e-b3ec-8d4f2b81d3cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "83e64b1f-06a4-448b-99a0-0a99231a571d",
        "cursor": {
          "ref": "985bb8bf-0e79-4194-93a8-4bd92bd52fc5",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "ca48a607-4353-46e1-8dca-013ad18e707e"
        },
        "item": {
          "id": "83e64b1f-06a4-448b-99a0-0a99231a571d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "ede83a29-eb25-4bcf-bf1d-a30ea9e95976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "5be3c7ce-3b7e-48f3-a6a2-99ada1d4c912",
        "cursor": {
          "ref": "25323ef6-5182-4004-9093-e7ec11ebb5ee",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "31f9f1e6-ab26-425c-bf98-5270c6b9334b"
        },
        "item": {
          "id": "5be3c7ce-3b7e-48f3-a6a2-99ada1d4c912",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "998be44c-fed1-46c3-846b-e788e021ef42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "a7faa569-55eb-4e6b-b6a2-2e228de13468",
        "cursor": {
          "ref": "9453813d-4f40-4b44-9896-a875e17e6f23",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "6240a090-e169-45c2-821c-3d764074401b"
        },
        "item": {
          "id": "a7faa569-55eb-4e6b-b6a2-2e228de13468",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b61e9da2-d653-4dff-ab64-27e67bfb115c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "c1139d4e-09df-4d30-a3e4-989539cc6e64",
        "cursor": {
          "ref": "3a06435f-b4fd-4315-885b-35d137e27a8b",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "1f70abbe-918f-40c2-8353-ea3b80a1660d"
        },
        "item": {
          "id": "c1139d4e-09df-4d30-a3e4-989539cc6e64",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2799d1ff-7968-49bc-83e9-57d27ebc5235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "a7031b00-d46c-4e58-ac48-403b59583a0a",
        "cursor": {
          "ref": "e9e573bf-392e-4667-8926-be491d6f9a40",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "3ee42a3c-4ef9-4fce-8161-779f078d69df"
        },
        "item": {
          "id": "a7031b00-d46c-4e58-ac48-403b59583a0a",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "7c46f016-26c3-4932-bc7c-4a15ef9bfdba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "2e85ca79-6dde-40e0-afb6-e38adf5fd286",
        "cursor": {
          "ref": "7dfddf08-cc0c-4359-b122-b655f654fb4e",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ed493469-c770-4dde-a86d-3bb71f9c296b"
        },
        "item": {
          "id": "2e85ca79-6dde-40e0-afb6-e38adf5fd286",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a4cb80d2-146f-493d-b979-e32108c4cbfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "1af5fb45-4744-4896-9774-370ffd44187b",
        "cursor": {
          "ref": "992fb2f6-1d62-4759-b1e5-e32347499053",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f39f4117-7a81-4bed-9ca4-07143606eb33"
        },
        "item": {
          "id": "1af5fb45-4744-4896-9774-370ffd44187b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "5341e53e-7808-4b80-b713-64d9fcf853b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "f1581eea-e579-404d-9faa-ff3f42cbd76e",
        "cursor": {
          "ref": "f96a76da-d63e-490b-965c-6e51a4fc75c5",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a49a3009-362c-4e6c-9576-1351945a5f8b"
        },
        "item": {
          "id": "f1581eea-e579-404d-9faa-ff3f42cbd76e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1d3a808c-c749-4389-a3d1-09779a33a185",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "65281eb7-5d8f-4559-a1b1-f61d31e7a431",
        "cursor": {
          "ref": "adf8411f-fd94-4aa7-88dc-1d89356d2443",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "c3fff0b7-3b05-48f6-8925-8861e3602da2"
        },
        "item": {
          "id": "65281eb7-5d8f-4559-a1b1-f61d31e7a431",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c9bfa8e0-85d7-4bdf-91cf-6b8622746337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "1b4d9a4c-ccc9-4e83-b782-ba487ee18cd8",
        "cursor": {
          "ref": "846306cc-181e-4ee7-bf92-596bc05f6e7a",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "10be3751-240b-4018-9a08-fb5a0b3300b0"
        },
        "item": {
          "id": "1b4d9a4c-ccc9-4e83-b782-ba487ee18cd8",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "84218a29-b62b-41b3-b010-5541494b12b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "a12a4df9-bb37-4875-a66a-291abbc91462",
        "cursor": {
          "ref": "feba9e53-5c5f-459c-bdae-fd715f934850",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "34817b8f-fd44-4e5a-9406-a805ee65ffe1"
        },
        "item": {
          "id": "a12a4df9-bb37-4875-a66a-291abbc91462",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "216227f1-ff1e-429b-bd8b-c421c0dd47b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "9084559e-cc86-4075-9d20-6130a3765bfa",
        "cursor": {
          "ref": "7eb20b15-acc9-4d81-9fbc-ca670b8129c0",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "37e57d29-9cb5-4a06-bf0b-ed371466beeb"
        },
        "item": {
          "id": "9084559e-cc86-4075-9d20-6130a3765bfa",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "024f6e00-122c-47a0-ba65-71acd1a34e3f",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "6cf87aaf-b526-4b24-8d62-b41911acd83c",
        "cursor": {
          "ref": "702b7a65-aa9a-425a-8af5-51046dde1cdb",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "8a107137-21b8-4b88-8510-287b08e22c4d"
        },
        "item": {
          "id": "6cf87aaf-b526-4b24-8d62-b41911acd83c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2813d379-a099-49ea-a810-1fa711f7a0df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "257bab61-d5c0-4b1e-8872-55c8d81e2e54",
        "cursor": {
          "ref": "bd0a0343-85ea-4be2-98aa-853f21b02cf6",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "b062e727-bec9-4fa0-9c98-630028e09ee8"
        },
        "item": {
          "id": "257bab61-d5c0-4b1e-8872-55c8d81e2e54",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ab04b179-fd93-48b8-bfe4-f1edff7ec0e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "48da000b-fe48-4689-85bc-da5c438de09b",
        "cursor": {
          "ref": "b8a898f8-0f57-4b0f-ac30-e4d84ddb0601",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "8bd0cef0-07c1-48b5-a642-471101b9b80f"
        },
        "item": {
          "id": "48da000b-fe48-4689-85bc-da5c438de09b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "47610f02-837e-4a6b-97f6-8157f8678aeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "6ec646fd-60ad-437c-bacd-213cebe7f6a6",
        "cursor": {
          "ref": "a85e3d8e-2970-4563-a3a9-aca75e8f3c5a",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "413ce2a4-13a0-46f3-9048-c97defac1ced"
        },
        "item": {
          "id": "6ec646fd-60ad-437c-bacd-213cebe7f6a6",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "89930010-f9e9-4a62-bf65-85db7f5231cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "486d60a6-34cb-4407-8673-709b521b1659",
        "cursor": {
          "ref": "a3570951-757a-4fc3-a2fa-d02f44837a28",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "2199d85b-0e5b-477e-8918-1dd32a67369a"
        },
        "item": {
          "id": "486d60a6-34cb-4407-8673-709b521b1659",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a0c21f53-df3c-425c-b6d4-12880adafc95",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 94
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "5a85944e-e394-490b-aa19-561c8e13111a",
        "cursor": {
          "ref": "7314af92-e759-4547-937e-0cb9eee4646b",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "3106d87f-439b-477f-b1c0-6d64269c0ef8"
        },
        "item": {
          "id": "5a85944e-e394-490b-aa19-561c8e13111a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d3d58ebe-3716-49d4-a247-2c7614ed57fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "d6ef6cd2-7c0c-447f-a4ad-dd50740e0693",
        "cursor": {
          "ref": "3e49bae4-d76a-4c08-9447-0ee5bb18c788",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "d4245ede-a423-4ab6-8859-8777067cceae"
        },
        "item": {
          "id": "d6ef6cd2-7c0c-447f-a4ad-dd50740e0693",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "5c77dd35-4723-445d-88f6-62f770fdb9db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "2a09a610-81a4-4325-8321-0e659aad3928",
        "cursor": {
          "ref": "9b4c26d1-6bb3-4da4-9d71-cda462376d4c",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "3747fa7d-a400-4571-be08-65e003baf9bf"
        },
        "item": {
          "id": "2a09a610-81a4-4325-8321-0e659aad3928",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "350a81a8-a8b3-4501-a285-000bec35d120",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "ec34c5f1-08bd-4d30-bde1-bb60a4cbaf63",
        "cursor": {
          "ref": "f18cff9f-ba12-42e0-8be6-dc395778d6dd",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "8c2a586f-97db-44fb-9a2d-64127158e6f1"
        },
        "item": {
          "id": "ec34c5f1-08bd-4d30-bde1-bb60a4cbaf63",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "ed4c6993-6135-4988-8e21-73a774b7fdb7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "b49b9941-1598-42cd-95f3-c69539576150",
        "cursor": {
          "ref": "f3eb7faf-91d3-4be6-b577-6b7c168d80a6",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "18e184aa-b7c4-4fb9-996b-eb3532b8b647"
        },
        "item": {
          "id": "b49b9941-1598-42cd-95f3-c69539576150",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "642f8f5a-664c-4c36-80c2-f28bcbc517c1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "ed1ba1fa-49b6-4b76-bf61-c4e344992115",
        "cursor": {
          "ref": "7c618392-291b-4356-b076-cbbcfb22d6be",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d447b33b-ceed-454e-b762-59d4fdd38be3"
        },
        "item": {
          "id": "ed1ba1fa-49b6-4b76-bf61-c4e344992115",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "93e0dcbe-93a5-4a90-b7ec-2ac7642a62d6",
          "status": "OK",
          "code": 200,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "d8eef2af-12b5-492d-8b2c-4196797e00e4",
        "cursor": {
          "ref": "29b551fe-2173-42d3-a20d-91a0797c1d04",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4d6eb251-823d-49df-a148-2ead3dee791b"
        },
        "item": {
          "id": "d8eef2af-12b5-492d-8b2c-4196797e00e4",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9774c8db-3672-4988-b6d3-c8ef8cbda5a5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "7089ae43-b901-433d-83e0-c92d4bcc90f4",
        "cursor": {
          "ref": "ae5fe2cc-edc5-460f-9da3-f44405f10c29",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f74e3502-b542-4a37-98bf-96589c33634d"
        },
        "item": {
          "id": "7089ae43-b901-433d-83e0-c92d4bcc90f4",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3d5f401d-542a-4d27-bc21-eb8654e0add3",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "6ad98a5a-5e68-4c39-8418-0363b979520c",
        "cursor": {
          "ref": "094539be-5374-402f-901a-290a2617bafb",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ef5bbcf6-cdbe-4929-a643-894b3108e5f7"
        },
        "item": {
          "id": "6ad98a5a-5e68-4c39-8418-0363b979520c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "796e1611-dca4-4145-824f-958c5b39678f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "6af6bd99-8eae-49e4-a708-1f76d3ce862a",
        "cursor": {
          "ref": "29b7c14e-8f16-4b2e-8b29-e1ba0b42b241",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "eedbd9bf-daf9-4b2d-b528-651d9e4bc2fd"
        },
        "item": {
          "id": "6af6bd99-8eae-49e4-a708-1f76d3ce862a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "78213b1e-ed0d-4d8e-afa4-eaf317810dd2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "a18d9e0f-fe64-4817-9a48-dac278c71c80",
        "cursor": {
          "ref": "3bbc5a07-a623-4804-9203-6f7913092f66",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "598557bd-fefa-4e32-bb34-02f4e14edd2c"
        },
        "item": {
          "id": "a18d9e0f-fe64-4817-9a48-dac278c71c80",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "8c5c68f8-c94d-4221-a3e3-b76787ae8377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 128
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "8e035f2f-b84b-474e-9705-e95a4376c115",
        "cursor": {
          "ref": "d135938f-f2ea-4ff9-b7f5-ef6a719caeac",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "592fef2d-5fd4-474b-84e0-f8465b77c788"
        },
        "item": {
          "id": "8e035f2f-b84b-474e-9705-e95a4376c115",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e5574b70-c60d-49ba-b608-51c38f5c69da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 128
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "83f055c2-e0d1-4ae6-bdd9-6a7d070666b7",
        "cursor": {
          "ref": "cb3088be-c549-4987-98a0-920a28e6fec9",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "15da40b9-cd9e-49dd-b9a3-4ae5145e2a81"
        },
        "item": {
          "id": "83f055c2-e0d1-4ae6-bdd9-6a7d070666b7",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b3d1b010-2b55-4f3b-b628-1094c8ac00c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "06a0ebf0-6c15-4765-9363-61be3a0fc8e9",
        "cursor": {
          "ref": "2f7a75c4-b157-44de-be23-658ff3deea99",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "8225144a-46ef-4b31-8ba3-5194f829c240"
        },
        "item": {
          "id": "06a0ebf0-6c15-4765-9363-61be3a0fc8e9",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "57415510-1b29-4eeb-86fc-9ee604e55872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 128
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "d9895217-4ed4-437f-ba9a-5a0d69cbc577",
        "cursor": {
          "ref": "c4558a32-035b-4cd1-a583-95a40a2e6f9b",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "951b9da9-7124-4706-8a11-62abea7da718"
        },
        "item": {
          "id": "d9895217-4ed4-437f-ba9a-5a0d69cbc577",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "0f744601-c2e4-4692-a17c-0620668169fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 552
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "b2121302-cd47-4946-bbbe-ecb361c8874c",
        "cursor": {
          "ref": "fc320dd3-4343-44bb-9962-652e3f516e72",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "fe8df68c-4c72-4ac0-82bb-96c8d2abe6ac"
        },
        "item": {
          "id": "b2121302-cd47-4946-bbbe-ecb361c8874c",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "06304cbc-1e00-4554-8cd7-0032ec35ddae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "190d18fa-a7b8-4c90-836a-11fc78fc1869",
        "cursor": {
          "ref": "fcd6d110-72b8-491d-b7e2-4cd5f53882db",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "938186fe-eb8c-4aad-910d-ea4cdf1b2da2"
        },
        "item": {
          "id": "190d18fa-a7b8-4c90-836a-11fc78fc1869",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "bffb8777-0160-4e7e-862b-8b882a9c61e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "541cc441-c16c-4747-82d0-b69d306dab4f",
        "cursor": {
          "ref": "43c874fe-0e62-4df9-8a20-e3915c8f2f12",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "25f87ee4-5426-4d86-b22e-3904ce62c4b8"
        },
        "item": {
          "id": "541cc441-c16c-4747-82d0-b69d306dab4f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d66738ff-0bf6-4484-bc15-3e90c5b60ed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "05d72434-8a1c-4055-832e-5367aa1b0b19",
        "cursor": {
          "ref": "0a037b28-b9f3-4e97-a438-edb80f6e0807",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "f5f7a44b-1e1d-4fc8-88ac-e0bbfca0fa32"
        },
        "item": {
          "id": "05d72434-8a1c-4055-832e-5367aa1b0b19",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c63d6f4f-ae2d-4e2a-a698-eb37cb0a2313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 552
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "36931665-5115-4ad2-bec7-5e1669b06a11",
        "cursor": {
          "ref": "98274878-b58a-4431-9dbe-65653ed7befb",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "dbf75c93-2d12-49d9-a022-384ecddfecc5"
        },
        "item": {
          "id": "36931665-5115-4ad2-bec7-5e1669b06a11",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8d1f2d47-e9ac-47bf-bf79-d2def824667c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "8845b563-0643-4a26-968b-2f21150b516f",
        "cursor": {
          "ref": "4de1cafa-db74-4d96-958c-707419ff1654",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "12e97c8e-541a-436e-98b9-9314b8151c6a"
        },
        "item": {
          "id": "8845b563-0643-4a26-968b-2f21150b516f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "56926ceb-1788-445a-a4d2-f6011496cc49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:254)"
            }
          }
        ]
      },
      {
        "id": "3bd98d0a-e08e-4fd8-b7e4-fb3df3f000f8",
        "cursor": {
          "ref": "cfe73090-df25-4815-891d-03f7deef0ab2",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "2a48b2de-e1ba-4ca9-899a-4db0ed89960f"
        },
        "item": {
          "id": "3bd98d0a-e08e-4fd8-b7e4-fb3df3f000f8",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "7d5aa7b3-09e9-4d69-a2b9-091483b66bfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:255)"
            }
          }
        ]
      },
      {
        "id": "96e870fc-c8c7-47fe-90e6-758f17541bcb",
        "cursor": {
          "ref": "da34f77e-62b1-4084-8453-d57cd605370a",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "48405cd9-4331-4b04-a7e6-f157da71f09f"
        },
        "item": {
          "id": "96e870fc-c8c7-47fe-90e6-758f17541bcb",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "5847c575-a058-40a6-b8ea-efe680855ff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:256)"
            }
          }
        ]
      },
      {
        "id": "b159966c-0751-4969-91df-93f4c358bc70",
        "cursor": {
          "ref": "a8e85c73-fcdb-4596-9d94-26986756be37",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "bc4bba93-7a13-4580-98dc-4333c07c9dfe"
        },
        "item": {
          "id": "b159966c-0751-4969-91df-93f4c358bc70",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a9d9ab50-7103-42c4-aa2b-9b616118adda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:257)"
            }
          }
        ]
      },
      {
        "id": "901957e2-e2a9-48ea-a171-56fc654d7841",
        "cursor": {
          "ref": "4abf4a64-e9e4-4cac-a8a0-48928cbcf4cf",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "008019c7-2b97-41aa-bab9-8df2829e4b53"
        },
        "item": {
          "id": "901957e2-e2a9-48ea-a171-56fc654d7841",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "728eb15b-0697-4429-8db4-fe3e57a9ffc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:258)"
            }
          }
        ]
      },
      {
        "id": "854de08a-6785-4c79-853b-84b4b5c8668c",
        "cursor": {
          "ref": "f6243a4b-fada-43b9-930e-b37be6cbe6a7",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "b6112de0-c38a-497b-b4fd-0fb2f954e171"
        },
        "item": {
          "id": "854de08a-6785-4c79-853b-84b4b5c8668c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d240ea47-f234-4c15-972f-b3069c57513f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:259)"
            }
          }
        ]
      },
      {
        "id": "6e3548b3-4133-4593-9b8d-9f792825d5d9",
        "cursor": {
          "ref": "d9a900b4-692a-4941-be5b-348fcd70c152",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "2cc94445-046a-4107-9ad8-a7a9f6a8c34a"
        },
        "item": {
          "id": "6e3548b3-4133-4593-9b8d-9f792825d5d9",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "817dce70-2e6b-49ad-80c3-b8c6402e90f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:260)"
            }
          }
        ]
      },
      {
        "id": "6d62e0d1-a24b-4639-9c30-7f2335430685",
        "cursor": {
          "ref": "451e4c13-12d0-4294-87f0-1ab8280b0440",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "b3e7eb3e-5529-446b-8b57-f7b5f2b2b9d6"
        },
        "item": {
          "id": "6d62e0d1-a24b-4639-9c30-7f2335430685",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "6d9f3930-010a-4e81-bea7-7b611a66cc34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:261)"
            }
          }
        ]
      },
      {
        "id": "e8748ccc-c7d7-44f7-95e3-a43e0a2397f3",
        "cursor": {
          "ref": "9a1b12da-bd9e-4c20-b159-4d5e386f479a",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "c3edff17-0a40-47d5-8852-5265e595a6ca"
        },
        "item": {
          "id": "e8748ccc-c7d7-44f7-95e3-a43e0a2397f3",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f73229bf-591a-411d-9ba6-0a4e7f3bc52e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:262)"
            }
          }
        ]
      },
      {
        "id": "33abc034-4646-4e47-bb32-04d724933c1b",
        "cursor": {
          "ref": "0b17e45e-46e9-4773-a5ce-0fe3d9954168",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "663c6dac-cf22-4cd4-bda3-2d2286320d1d"
        },
        "item": {
          "id": "33abc034-4646-4e47-bb32-04d724933c1b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "d663c802-f062-4657-a7e2-f5d9b00b8184",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:263)"
            }
          }
        ]
      },
      {
        "id": "81fa9516-5806-473f-b7e9-d8b5ab7ad784",
        "cursor": {
          "ref": "a6f74b2d-4cd1-4285-b73a-0d8103e57ed1",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "ce829e21-006c-44fa-99d3-250c07b266a7"
        },
        "item": {
          "id": "81fa9516-5806-473f-b7e9-d8b5ab7ad784",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "c652911f-fb65-4e47-b341-c91a37e3c6d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:264)"
            }
          }
        ]
      },
      {
        "id": "327f2d73-b76a-4cef-b418-6a38f30a9f58",
        "cursor": {
          "ref": "e12e7051-1eec-4161-ae2d-539b3f19cdc0",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "bfad91d8-8ed2-4ed5-aa12-91b235b634aa"
        },
        "item": {
          "id": "327f2d73-b76a-4cef-b418-6a38f30a9f58",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "86c8f1f3-a9db-4509-9019-6fee729e43cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:265)"
            }
          }
        ]
      },
      {
        "id": "0c67348d-b301-4360-97e8-f5fc26cd23f0",
        "cursor": {
          "ref": "ea781ecf-fa2f-4754-9285-3d00fa5b4b50",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "b8ca402d-a0c6-4289-b71e-429aef043ee3"
        },
        "item": {
          "id": "0c67348d-b301-4360-97e8-f5fc26cd23f0",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "4584cbb1-3dea-44d9-a6ab-c056bf2d92b0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:266)"
            }
          }
        ]
      },
      {
        "id": "aef444c2-c128-4d15-964a-f92a835eab44",
        "cursor": {
          "ref": "d4ca293f-e3e9-4c56-ab3b-414dd1527332",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "27d3a065-8326-491a-81bd-4b39447677e5"
        },
        "item": {
          "id": "aef444c2-c128-4d15-964a-f92a835eab44",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "670bd5ae-8773-4c4f-95b1-55e60388c564",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:267)"
            }
          }
        ]
      },
      {
        "id": "9130ac01-2eb8-4282-a76c-9e31d5ab0f67",
        "cursor": {
          "ref": "0a5fb752-1e99-49b0-a685-775bf000399f",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "0720a499-1f83-4d5d-a63f-92bb3f8c1925"
        },
        "item": {
          "id": "9130ac01-2eb8-4282-a76c-9e31d5ab0f67",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "04607ed8-daf8-40a5-8f1d-f0ec355bc11b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:268)"
            }
          }
        ]
      },
      {
        "id": "7a1197a8-6904-4273-bdf9-9cf01cbc2552",
        "cursor": {
          "ref": "d351766a-ea67-4b12-a1bf-bd15e3774d9d",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "a699e799-6cb6-449b-8dd6-0362b1a0f356"
        },
        "item": {
          "id": "7a1197a8-6904-4273-bdf9-9cf01cbc2552",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "98ddd20d-44b6-424a-abdb-c835a67fda12",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:269)"
            }
          }
        ]
      },
      {
        "id": "c43dd552-6d65-44af-a412-fcd9b3757bb0",
        "cursor": {
          "ref": "aad78aca-d558-493b-aae5-017b8bb42abc",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "f014f501-dd45-4e0d-9f87-399f35e7a8ab"
        },
        "item": {
          "id": "c43dd552-6d65-44af-a412-fcd9b3757bb0",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "8c35f2ed-043e-405c-9a7a-2d6340e50073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:270)"
            }
          }
        ]
      },
      {
        "id": "f9654fd0-8861-4829-ab0a-49724fd15165",
        "cursor": {
          "ref": "c104275a-51c0-4f12-9ade-a4d644bcc551",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "e2fc9d28-d035-4407-9b03-bb12221db239"
        },
        "item": {
          "id": "f9654fd0-8861-4829-ab0a-49724fd15165",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "52fbe656-2b70-48da-ad5f-2d15565e5841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:271)"
            }
          }
        ]
      },
      {
        "id": "50f1b66a-46f5-4edc-adb9-aa1dfd5e0dbd",
        "cursor": {
          "ref": "a5763aa5-0942-401d-9cd9-144d04dedcdf",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "5c055ab7-e3b1-475a-8c7e-1ca5c1847fc2"
        },
        "item": {
          "id": "50f1b66a-46f5-4edc-adb9-aa1dfd5e0dbd",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "d41d0253-88cb-43aa-a5f0-76a3397aede4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:272)"
            }
          }
        ]
      },
      {
        "id": "a45765f5-4d50-4ff6-82d5-d181a4f2a6c0",
        "cursor": {
          "ref": "2a2831ea-fcd1-4cd9-a21e-54b30e3baa80",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "c7f3e015-859c-4cd9-89ce-e89c3a89965d"
        },
        "item": {
          "id": "a45765f5-4d50-4ff6-82d5-d181a4f2a6c0",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d6e1f4a1-7d9e-41a1-a25f-1dfa2af49d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:273)"
            }
          }
        ]
      },
      {
        "id": "3eb1448f-4f48-44d1-ada1-32e4555cd2cd",
        "cursor": {
          "ref": "1ace0626-008c-4d7b-9eb4-3c253ff5c599",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "c9d6edf8-6307-4f46-86d3-4f93f7c27f5b"
        },
        "item": {
          "id": "3eb1448f-4f48-44d1-ada1-32e4555cd2cd",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9df92ef1-367f-46b8-9af0-868bef0a7199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:274)"
            }
          }
        ]
      },
      {
        "id": "47daaaf7-842a-4b16-93b2-e56f0fc1c458",
        "cursor": {
          "ref": "6317a075-fc53-4a8b-b1bf-97e6f6e2bc2b",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "ea00484f-4f39-44a5-8eef-a84339af9460"
        },
        "item": {
          "id": "47daaaf7-842a-4b16-93b2-e56f0fc1c458",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "537ffd88-50e7-4423-9796-34ae78588efd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:275)"
            }
          }
        ]
      },
      {
        "id": "cbd1d1f6-c4a5-4b04-9936-631c3cc47ca5",
        "cursor": {
          "ref": "bb59727f-0856-4a11-b859-80451e6ad3a7",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "264ea148-e9ec-48e3-b231-71295c1291fe"
        },
        "item": {
          "id": "cbd1d1f6-c4a5-4b04-9936-631c3cc47ca5",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "fa4ea721-43c4-4d78-b7fe-f0e33eed3c59",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:276)"
            }
          }
        ]
      },
      {
        "id": "bf2d69e5-304f-4219-b79f-7bead8cf9d56",
        "cursor": {
          "ref": "e58d4e61-4625-4816-8b4e-e41ce69d0dbf",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "aef63090-2172-44b0-bb98-498681d794fa"
        },
        "item": {
          "id": "bf2d69e5-304f-4219-b79f-7bead8cf9d56",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "96882b05-07c4-47b2-ae57-a57c9de4cdf5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:277)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:277)"
            }
          }
        ]
      },
      {
        "id": "5c7642b5-7155-4811-bc38-27ffad332d51",
        "cursor": {
          "ref": "a998e455-b4f4-4c08-94d2-273fc8ed2d91",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "f331e389-f0c3-4cea-a21c-ca47aad8aa04"
        },
        "item": {
          "id": "5c7642b5-7155-4811-bc38-27ffad332d51",
          "name": "credentials_verify"
        },
        "response": {
          "id": "fea1060f-26b8-43a6-99bf-efad9e248e88",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "ba99fa09-45e7-4d46-8db0-627e103091b7",
        "cursor": {
          "ref": "37dcb89e-f54b-459b-8529-299c06454f68",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "1912f4d6-06d1-4e08-820e-a6750b236460"
        },
        "item": {
          "id": "ba99fa09-45e7-4d46-8db0-627e103091b7",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "933e477f-57aa-49a3-be48-ce0768cbff70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "773e1bb6-d426-43a5-ac6e-ab8125234727",
        "cursor": {
          "ref": "0b09d004-641f-447b-8526-fe3af5878d88",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "f44c5683-af68-4187-8754-2859feab0e2f"
        },
        "item": {
          "id": "773e1bb6-d426-43a5-ac6e-ab8125234727",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ee449f8d-5201-4415-bc8f-302779d9b3e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "773e1bb6-d426-43a5-ac6e-ab8125234727",
        "cursor": {
          "ref": "0b09d004-641f-447b-8526-fe3af5878d88",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "f44c5683-af68-4187-8754-2859feab0e2f"
        },
        "item": {
          "id": "773e1bb6-d426-43a5-ac6e-ab8125234727",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ee449f8d-5201-4415-bc8f-302779d9b3e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "38f5c3d7-380b-4338-a816-277a30c93624",
        "cursor": {
          "ref": "e91d68e1-5b21-4fdd-b60a-f28edaaebf79",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "389280e5-b94f-450f-a3fb-702fc6eff28b"
        },
        "item": {
          "id": "38f5c3d7-380b-4338-a816-277a30c93624",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "1f91ec20-8f72-4b26-85a9-235fd160eb7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "f525a457-7e58-4b54-acab-449baeef8bf6",
        "cursor": {
          "ref": "0d0f38d5-4ccb-4fdb-acd5-eaa910c399f7",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "bad0a16a-9aed-4098-8a5e-c9fa3f58c7b8"
        },
        "item": {
          "id": "f525a457-7e58-4b54-acab-449baeef8bf6",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "11a6142e-dd59-4f4c-ba25-940d49b24acd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}